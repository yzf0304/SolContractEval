{
    "contract_name": "Freezable",
    "ground_truth": "contract Freezable is Ownable {\n    mapping(address => bool) private _frozen;\n\n    event Freeze(address indexed target);\n    event Unfreeze(address indexed target);\n\n    modifier whenNotFrozen(address target) {\n        require(!_frozen[target], \"Freezable : target is frozen\");\n        _;\n    }\n\n    function freeze(address target) external onlyOwner returns (bool success) {\n        _frozen[target] = true;\n        emit Freeze(target);\n        success = true;\n    }\n\n    function unFreeze(address target)\n        external\n        onlyOwner\n        returns (bool success)\n    {\n        _frozen[target] = false;\n        emit Unfreeze(target);\n        success = true;\n    }\n\n    function isFrozen(address target)\n        external\n        view\n        returns (bool frozen)\n    {\n        return _frozen[target];\n    }\n}",
    "function_sum": 3,
    "compiler_version": "0.8.0",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n// File contracts/library/Ownable.sol\n\nabstract contract Ownable {\n    address internal _owner;\n\n    event OwnershipTransferred(\n        address indexed currentOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == _owner,\n            \"Ownable : Function called by unauthorized user.\"\n        );\n        _;\n    }\n\n    function owner() external view returns (address ownerAddress) {\n        ownerAddress = _owner;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n        returns (bool success)\n    {\n        require(newOwner != address(0), \"Ownable/transferOwnership : cannot transfer ownership to zero address\");\n        success = _transferOwnership(newOwner);\n    }\n\n    function renounceOwnership() external onlyOwner returns (bool success) {\n        success = _transferOwnership(address(0));\n    }\n\n    function _transferOwnership(address newOwner) internal returns (bool success) {\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n        success = true;\n    }\n}\n\n\n\n// You task is to complete the smart contract Freezable strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.8.0, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @notice A smart contract that allows the owner to freeze and unfreeze specific addresses.\n * @dev This contract inherits from Ownable, allowing only the contract owner to perform freeze and unfreeze operations.\n */\ncontract Freezable is Ownable {\n    mapping(address => bool) private _frozen;\n\n    event Freeze(address indexed target);\n    event Unfreeze(address indexed target);\n\n    /**\n     * @notice Modifier to ensure a function can only be executed if the target address is not frozen.\n     * @dev Reverts with an error message if the target address is frozen.\n     * @param target The address to check for the frozen status.\n     */\n    modifier whenNotFrozen(address target) {\n        require(!_frozen[target], \"Freezable : target is frozen\");\n        _;\n    }\n\n    /**\n     * @notice Allows the owner to freeze a specific address.\n     * @dev Emits a Freeze event and sets the frozen status of the target address to true.\n     * @param target The address to be frozen.\n     * @return success Returns true if the operation was successful.\n     */\n    function freeze(address target) external onlyOwner returns (bool success) {}\n\n    /**\n     * @notice Allows the owner to unfreeze a specific address.\n     * @dev Emits an Unfreeze event and sets the frozen status of the target address to false.\n     * @param target The address to be unfrozen.\n     * @return success Returns true if the operation was successful.\n     */\n    function unFreeze(address target)\n        external\n        onlyOwner\n        returns (bool success)\n    {}\n\n    /**\n     * @notice Checks if a specific address is frozen.\n     * @dev Returns the frozen status of the target address.\n     * @param target The address to check.\n     * @return frozen Returns true if the address is frozen, otherwise false.\n     */\n    function isFrozen(address target)\n        external\n        view\n        returns (bool frozen)\n    {}\n}\n"
}