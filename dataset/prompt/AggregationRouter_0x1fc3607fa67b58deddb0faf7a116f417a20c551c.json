{
    "contract_name": "AggregationRouter",
    "ground_truth": "contract AggregationRouter is Permitable, Ownable {\n    using SafeMath for uint256;\n    address public immutable WETH;\n    address private constant ETH_ADDRESS =\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    uint256 private constant _PARTIAL_FILL = 0x01;\n    uint256 private constant _REQUIRES_EXTRA_ETH = 0x02;\n    uint256 private constant _SHOULD_CLAIM = 0x04;\n    uint256 private constant _BURN_FROM_MSG_SENDER = 0x08;\n    uint256 private constant _BURN_FROM_TX_ORIGIN = 0x10;\n\n    struct SwapDescription {\n        IERC20 srcToken;\n        IERC20 dstToken;\n        address srcReceiver;\n        address dstReceiver;\n        uint256 amount;\n        uint256 minReturnAmount;\n        uint256 flags;\n        bytes permit;\n    }\n\n    event Swapped(\n        address sender,\n        IERC20 srcToken,\n        IERC20 dstToken,\n        address dstReceiver,\n        uint256 spentAmount,\n        uint256 returnAmount\n    );\n\n    event Exchange(address pair, uint256 amountOut, address output);\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"Router: EXPIRED\");\n        _;\n    }\n\n    constructor(address _WETH) public {\n        WETH = _WETH;\n    }\n\n    receive() external payable {\n        assert(msg.sender == WETH);\n        // only accept ETH via fallback from the WETH contract\n    }\n\n    function swap(\n        IAggregationExecutor caller,\n        SwapDescription calldata desc,\n        bytes calldata data\n    ) external payable returns (uint256 returnAmount) {\n        require(desc.minReturnAmount > 0, \"Min return should not be 0\");\n        require(data.length > 0, \"data should be not zero\");\n\n        uint256 flags = desc.flags;\n        uint256 amount = desc.amount;\n        IERC20 srcToken = desc.srcToken;\n        IERC20 dstToken = desc.dstToken;\n\n        if (flags & _REQUIRES_EXTRA_ETH != 0) {\n            require(\n                msg.value > (isETH(srcToken) ? amount : 0),\n                \"Invalid msg.value\"\n            );\n        } else {\n            require(\n                msg.value == (isETH(srcToken) ? amount : 0),\n                \"Invalid msg.value\"\n            );\n        }\n\n        if (flags & _SHOULD_CLAIM != 0) {\n            require(!isETH(srcToken), \"Claim token is ETH\");\n            _permit(srcToken, amount, desc.permit);\n            TransferHelper.safeTransferFrom(\n                address(srcToken),\n                msg.sender,\n                desc.srcReceiver,\n                amount\n            );\n        }\n\n        address dstReceiver =\n            (desc.dstReceiver == address(0)) ? msg.sender : desc.dstReceiver;\n        uint256 initialSrcBalance =\n            (flags & _PARTIAL_FILL != 0) ? getBalance(srcToken, msg.sender) : 0;\n        uint256 initialDstBalance = getBalance(dstToken, dstReceiver);\n\n        {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, bytes memory result) =\n                address(caller).call{value: msg.value}(\n                    abi.encodeWithSelector(caller.callBytes.selector, data)\n                );\n            if (!success) {\n                revert(RevertReasonParser.parse(result, \"callBytes failed: \"));\n            }\n        }\n\n        uint256 spentAmount = amount;\n        returnAmount = getBalance(dstToken, dstReceiver).sub(initialDstBalance);\n\n        if (flags & _PARTIAL_FILL != 0) {\n            spentAmount = initialSrcBalance.add(amount).sub(\n                getBalance(srcToken, msg.sender)\n            );\n            require(\n                returnAmount.mul(amount) >=\n                    desc.minReturnAmount.mul(spentAmount),\n                \"Return amount is not enough\"\n            );\n        } else {\n            require(\n                returnAmount >= desc.minReturnAmount,\n                \"Return amount is not enough\"\n            );\n        }\n\n        emit Swapped(\n            msg.sender,\n            srcToken,\n            dstToken,\n            dstReceiver,\n            spentAmount,\n            returnAmount\n        );\n        emit Exchange(\n            address(caller),\n            returnAmount,\n            isETH(dstToken) ? WETH : address(dstToken)\n        );\n    }\n\n    function getBalance(IERC20 token, address account)\n        internal\n        view\n        returns (uint256)\n    {\n        if (isETH(token)) {\n            return account.balance;\n        } else {\n            return token.balanceOf(account);\n        }\n    }\n\n    function isETH(IERC20 token) internal pure returns (bool) {\n        return (address(token) == ETH_ADDRESS);\n    }\n\n    function rescueFunds(address token, uint256 amount) external onlyOwner {\n        if (isETH(IERC20(token))) {\n            TransferHelper.safeTransferETH(msg.sender, amount);\n        } else {\n            TransferHelper.safeTransfer(token, msg.sender, amount);\n        }\n    }\n}",
    "function_sum": 4,
    "compiler_version": "0.7.6",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n/**\n *Submitted for verification at Etherscan.io on 2021-12-15\n*/\n// SPDX-License-Identifier: MIT\n\ninterface IERC20 {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n}\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: APPROVE_FAILED\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FAILED\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n}\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require(b > 0, \"ds-math-division-by-zero\");\n        c = a / b;\n    }\n}\n\nlibrary RevertReasonParser {\n    function parse(bytes memory data, string memory prefix)\n        internal\n        pure\n        returns (string memory)\n    {\n        // https://solidity.readthedocs.io/en/latest/control-structures.html#revert\n        // We assume that revert reason is abi-encoded as Error(string)\n\n        // 68 = 4-byte selector 0x08c379a0 + 32 bytes offset + 32 bytes length\n        if (\n            data.length >= 68 &&\n            data[0] == \"\\x08\" &&\n            data[1] == \"\\xc3\" &&\n            data[2] == \"\\x79\" &&\n            data[3] == \"\\xa0\"\n        ) {\n            string memory reason;\n            // solhint-disable no-inline-assembly\n            assembly {\n                // 68 = 32 bytes data length + 4-byte selector + 32 bytes offset\n                reason := add(data, 68)\n            }\n            /*\n                revert reason is padded up to 32 bytes with ABI encoder: Error(string)\n                also sometimes there is extra 32 bytes of zeros padded in the end:\n                https://github.com/ethereum/solidity/issues/10170\n                because of that we can't check for equality and instead check\n                that string length + extra 68 bytes is less than overall data length\n            */\n            require(\n                data.length >= 68 + bytes(reason).length,\n                \"Invalid revert reason\"\n            );\n            return string(abi.encodePacked(prefix, \"Error(\", reason, \")\"));\n        }\n        // 36 = 4-byte selector 0x4e487b71 + 32 bytes integer\n        else if (\n            data.length == 36 &&\n            data[0] == \"\\x4e\" &&\n            data[1] == \"\\x48\" &&\n            data[2] == \"\\x7b\" &&\n            data[3] == \"\\x71\"\n        ) {\n            uint256 code;\n            // solhint-disable no-inline-assembly\n            assembly {\n                // 36 = 32 bytes data length + 4-byte selector\n                code := mload(add(data, 36))\n            }\n            return\n                string(abi.encodePacked(prefix, \"Panic(\", _toHex(code), \")\"));\n        }\n\n        return string(abi.encodePacked(prefix, \"Unknown(\", _toHex(data), \")\"));\n    }\n\n    function _toHex(uint256 value) private pure returns (string memory) {\n        return _toHex(abi.encodePacked(value));\n    }\n\n    function _toHex(bytes memory data) private pure returns (string memory) {\n        bytes16 alphabet = 0x30313233343536373839616263646566;\n        bytes memory str = new bytes(2 + data.length * 2);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i = 0; i < data.length; i++) {\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\n        }\n        return string(str);\n    }\n}\n\ncontract Permitable {\n    event Error(string reason);\n\n    function _permit(\n        IERC20 token,\n        uint256 amount,\n        bytes calldata permit\n    ) internal {\n        if (permit.length == 32 * 7) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, bytes memory result) =\n                address(token).call(\n                    abi.encodePacked(IERC20Permit.permit.selector, permit)\n                );\n            if (!success) {\n                string memory reason =\n                    RevertReasonParser.parse(result, \"Permit call failed: \");\n                if (token.allowance(msg.sender, address(this)) < amount) {\n                    revert(reason);\n                } else {\n                    emit Error(reason);\n                }\n            }\n        }\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IAggregationExecutor {\n    function callBytes(bytes calldata data) external payable; // 0xd9c45357\n}\n\n// You task is to complete the smart contract AggregationRouter strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.7.6, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title AggregationRouter\n * @notice A smart contract for aggregating and executing token swaps with various options.\n * @dev This contract allows for swapping between different ERC223 and ERC20 tokens, including ETH, \n *      with the ability to handle partial fills, extra ETH, and permit-based transfers. It also includes\n *      a rescue function for the owner to recover funds.\n */\ncontract AggregationRouter is Permitable, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @notice The address of the WETH contract.\n     * @dev This is used to handle ETH as an ERC20 token.\n     */\n    address public immutable WETH;\n\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    uint256 private constant _PARTIAL_FILL = 0x01;\n\n    uint256 private constant _REQUIRES_EXTRA_ETH = 0x02;\n\n    uint256 private constant _SHOULD_CLAIM = 0x04;\n\n    uint256 private constant _BURN_FROM_MSG_SENDER = 0x08;\n\n    uint256 private constant _BURN_FROM_TX_ORIGIN = 0x10;\n\n    /**\n     * @notice Struct to hold the details of a swap.\n     * @dev This struct is used to pass the necessary parameters for a swap.\n     */\n    struct SwapDescription {\n        IERC20 srcToken;\n        IERC20 dstToken;\n        address srcReceiver;\n        address dstReceiver;\n        uint256 amount;\n        uint256 minReturnAmount;\n        uint256 flags;\n        bytes permit;\n    }\n\n    /**\n     * @notice Event emitted when a swap is executed.\n     * @dev This event logs the details of a successful swap.\n     */\n    event Swapped(\n        address sender,\n        IERC20 srcToken,\n        IERC20 dstToken,\n        address dstReceiver,\n        uint256 spentAmount,\n        uint256 returnAmount\n    );\n\n    /**\n     * @notice Event emitted when an exchange is made.\n     * @dev This event logs the details of an exchange.\n     */\n    event Exchange(address pair, uint256 amountOut, address output);\n\n    /**\n     * @notice Modifier to ensure the transaction is not expired.\n     * @dev This modifier checks that the deadline has not passed.\n     */\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"Router: EXPIRED\");\n        _;\n    }\n\n    /**\n     * @notice Constructor to set the WETH address.\n     * @param _WETH The address of the WETH contract.\n     */\n    constructor(address _WETH) public {\n        WETH = _WETH;\n    }\n\n    /**\n     * @notice Fallback function to accept ETH.\n     * @dev This function ensures that only ETH from the WETH contract is accepted.\n     */\n    receive() external payable {\n    }\n\n    /**\n     * @dev Executes token swap via aggregator executor.\n     * @param caller Aggregation executor contract\n     * @param desc Swap parameters (src/dst tokens, amounts, flags)\n     * @param data Encoded swap call data\n     * @return returnAmount Actual amount received\n     * @dev Requirements\n     *   - minReturnAmount > 0\n     *   - data must be non-empty\n     *   - msg.value matches token requirements (ETH handling)\n     *   - Permit/transfer for srcToken if required\n     * @dev Behavior\n     *   - Handles partial fills and return amount validation\n     *   - Emits Swapped and Exchange events\n     * @dev Notes\n     *   - ETH handling is automatic based on flags\n     *   - Caller must implement callBytes interface\n     */\n    function swap(\n        IAggregationExecutor caller,\n        SwapDescription calldata desc,\n        bytes calldata data\n    ) external payable returns (uint256 returnAmount) {}\n\n    /**\n     * @notice Internal function to get the balance of a token.\n     * @param token The token to check the balance of.\n     * @param account The account to check the balance for.\n     * @return The balance of the token for the account.\n     * @dev This function returns the balance of a token, or the ETH balance if the token is ETH.\n     */\n    function getBalance(IERC20 token, address account)\n        internal\n        view\n        returns (uint256) {}\n\n    /**\n     * @notice Internal function to check if a token is ETH.\n     * @param token The token to check.\n     * @return True if the token is ETH, false otherwise.\n     * @dev This function checks if the token address is the ETH address.\n     */\n    function isETH(IERC20 token) internal pure returns (bool) {}\n\n    /**\n     * @notice Function to rescue funds.\n     * @param token The token to rescue.\n     * @param amount The amount of the token to rescue.\n     * @dev This function allows the owner to rescue funds from the contract.\n     */\n    function rescueFunds(address token, uint256 amount) external onlyOwner {}\n}\n"
}