{
    "contract_name": "BALC",
    "ground_truth": "contract BALC is Ownable {\n\n\tusing SafeMath for uint256; //uint256\u7c7b\u578b\u4f7f\u7528SafeMath\u5e93\n\n\tstring private name_; //\u79ef\u5206\u540d\u79f0\n\tstring private symbol_; //\u79ef\u5206\u7b26\u53f7\uff0c\u7c7b\u4f3c\u8d27\u5e01\u7b26\u53f7\n\tuint256 private decimals_; //\u5c0f\u6570\u70b9\u540e\u4f4d\u6570\n\tuint256 private totalSupply_; //\u53d1\u884c\u603b\u91cf\n\tbool private paused_; //\u662f\u5426\u6682\u505c\u5408\u7ea6\n\n\tmapping(address => uint256) internal balances; //\u5730\u5740\u4f59\u989d\u6620\u5c04\n\tmapping(address => mapping(address => uint256)) internal allowed; //\u6388\u6743\u989d\u5ea6\u6620\u5c04\n\n\tevent Transfer(address indexed from, address indexed to, uint256 value); //\u79ef\u5206\u8f6c\u8d26\u4e8b\u4ef6\n\tevent Approval(address indexed owner, address indexed spender, uint256 value); //\u6388\u6743\u989d\u5ea6\u4e8b\u4ef6\n\tevent Pause(); //\u5408\u7ea6\u6682\u505c\u4e8b\u4ef6\n\tevent Unpause(); //\u5408\u7ea6\u91cd\u542f\u4e8b\u4ef6\n\n\t/**\n\t * @dev \u6784\u9020\u51fd\u6570\uff1aweb3\u4ee3\u7801\u751f\u6210\u540e\uff0c\u9700\u8981\u81ea\u5b9a\u4e49_name,_symbol,_decimals,_totalSupply\n\t */\n\tconstructor(string memory _name, string memory _symbol, uint256 _decimals, uint256 _totalSupply, address _owner) public {\n\t\tname_ = _name;\n\t\tsymbol_ = _symbol;\n\t\tdecimals_ = _decimals;\n\t\ttotalSupply_ = _totalSupply.mul(10 ** decimals_); //\u53d1\u884c\u603b\u91cf\u6309\u5c0f\u6570\u70b9\u540e\u4f4d\u6570\u8f6c\u6362\n\t\tpaused_ = false; //\u9ed8\u8ba4\u5408\u7ea6\u4e0d\u6682\u505c\n\t\towner_ = _owner;\n\t\tbalances[owner_] = totalSupply_; //\u5408\u7ea6\u53d1\u5e03\u8005\u6301\u6709\u521d\u59cb\u6240\u6709\u79ef\u5206\n\t}\n\n\t/**\n\t * @dev \u79ef\u5206\u540d\u79f0\n\t */\n\tfunction name() public view returns (string memory) {\n\t\treturn name_;\n\t}\n\n\t/**\n\t * @dev \u79ef\u5206\u7b26\u53f7\n\t */\n\tfunction symbol() public view returns (string memory) {\n\t\treturn symbol_;\n\t}\n\n\t/**\n\t * @dev \u5c0f\u6570\u70b9\u540e\u4f4d\u6570\n\t */\n\tfunction decimals() public view returns (uint256) {\n\t\treturn decimals_;\n\t}\n\n\t/**\n\t * @dev \u53d1\u884c\u603b\u91cf\n\t */\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn totalSupply_;\n\t}\n\n\t/**\n\t * @dev \u662f\u5426\u6682\u505c\n\t */\n\tfunction isPaused() public view returns (bool) {\n\t\treturn paused_;\n\t}\n\n\t/**\n\t * @dev whenNotPaused\u51fd\u6570\u4fee\u6539\u5668\uff1a\u5224\u65ad\u5408\u7ea6\u662f\u5426\u672a\u6682\u505c\uff0c\u672a\u6682\u505c\u65f6\u624d\u80fd\u6267\u884c\n\t */\n\tmodifier whenNotPaused() {\n\t\trequire(!paused_);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev whenNotPaused\u51fd\u6570\u4fee\u6539\u5668\uff1a\u5224\u65ad\u5408\u7ea6\u662f\u5426\u6682\u505c\uff0c\u6682\u505c\u65f6\u624d\u80fd\u6267\u884c\n\t */\n\tmodifier whenPaused() {\n\t\trequire(paused_);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev \u79ef\u5206\u8f6c\u8d26\uff1a\u5728\u5408\u7ea6\u672a\u6682\u505c\u65f6\uff0c\u7531\u5408\u7ea6\u4f7f\u7528\u8005msg.sender\uff0c\u5411_to\u8f6c\u5165_value\u6570\u91cf\u7684\u79ef\u5206\n\t * @param  _to \u8f6c\u5165\u5730\u5740 _value \u79ef\u5206\u6570\u91cf\n\t * @return  bool \u662f\u5426\u8f6c\u8d26\u6210\u529f\n\t */\n\tfunction transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[msg.sender]);\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev \u4f59\u989d\u67e5\u8be2\uff1a\u67e5\u8be2_account\u5730\u5740\u7684\u79ef\u5206\u4f59\u989d\n\t * @param  _account \u79ef\u5206\u8d26\u6237\u5730\u5740\n\t * @return  uint256 \u79ef\u5206\u4f59\u989d\n\t */\n\tfunction balanceOf(address _account) public view returns (uint256) {\n\t\treturn balances[_account];\n\t}\n\n\t/**\n\t * @dev \u6388\u6743\u989d\u5ea6\uff1a\u5728\u5408\u7ea6\u672a\u6682\u505c\u65f6\uff0c\u7531\u5408\u7ea6\u4f7f\u7528\u8005msg.sender\uff0c\u5411_spender\u6388\u6743_value\u6570\u91cf\u79ef\u5206\u989d\u5ea6\n\t * @param  _spender \u88ab\u6388\u6743\u5730\u5740 _value \u6388\u6743\u989d\u5ea6\n\t * @return  bool \u662f\u5426\u6388\u6743\u6210\u529f\n\t */\n\tfunction approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n\t\trequire(_spender != address(0));\n\t\trequire(_value < totalSupply_);\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n     * @dev \u6388\u989d\u8f6c\u8d26\uff1a\u5728\u5408\u7ea6\u672a\u6682\u505c\u65f6\uff0c\u7531\u5408\u7ea6\u4f7f\u7528\u8005msg.sender\uff0c\u4ece_from\u5411_to\u8f6c\u5165_value\u6570\u91cf\u7684\u79ef\u5206\uff0c\u8f6c\u8d26\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7_from\u7684\u6388\u6743\u989d\u5ea6\u548c\u4f59\u989d\n     * @param  _from \u6388\u989d\u5730\u5740 _to\u8f6c\u5165\u5730\u5740 _value \u79ef\u5206\u6570\u91cf\n     * @return  bool \u662f\u5426\u8f6c\u8d26\u6210\u529f\n     */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[_from]);\n\t\trequire(_value <= allowed[_from][msg.sender]);\n    \n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev \u67e5\u8be2\u6388\u989d\uff1a\u67e5\u8be2\u7531_owner\u5411_spender\u6388\u6743\u7684\u79ef\u5206\u989d\u5ea6\n\t * @param  _owner \u6388\u6743\u5730\u5740 _spender \u88ab\u6388\u6743\u5730\u5740\n\t * @return  uint256 \u6388\u6743\u989d\u5ea6\n\t */\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\t/**\n\t * @dev \u589e\u52a0\u6388\u989d\uff1a\u5728\u5408\u7ea6\u672a\u6682\u505c\u65f6\uff0c\u7531\u5408\u7ea6\u4f7f\u7528\u8005msg.sender\u5411_spender\u589e\u52a0_addValue\u6570\u91cf\u7684\u79ef\u5206\u989d\u5ea6\n\t * @param  _spender \u88ab\u6388\u6743\u5730\u5740 _addedValue \u589e\u52a0\u7684\u6388\u6743\u989d\u5ea6\n\t * @return  bool \u662f\u5426\u589e\u52a0\u6388\u989d\u6210\u529f\n\t */\n\tfunction increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool success) {\n        require(_spender != address(0));\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev \u51cf\u5c11\u6388\u989d\uff1a\u5728\u5408\u7ea6\u672a\u6682\u505c\u65f6\uff0c\u7531\u5408\u7ea6\u4f7f\u7528\u8005msg.sender\u5411_spender\u51cf\u5c11_subtractedValue\u6570\u91cf\u7684\u79ef\u5206\u989d\u5ea6\n\t * @param  _spender \u88ab\u6388\u6743\u5730\u5740 _subtractedValue \u51cf\u5c11\u7684\u6388\u6743\u989d\u5ea6\n\t * @return  bool \u662f\u5426\u51cf\u5c11\u6388\u989d\u6210\u529f\n\t */\n\tfunction decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool success) {\n        require(_spender != address(0));\n\t\tuint256 oldValue = allowed[msg.sender][_spender];\n\t\tif (_subtractedValue > oldValue) {\n\t\t\tallowed[msg.sender][_spender] = 0;\n\t\t} else {\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\t\t}\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev \u6682\u505c\u5408\u7ea6\uff1a\u53ea\u6709\u5408\u7ea6\u6240\u6709\u8005\u80fd\u4f7f\u7528\uff0c\u5728\u5408\u7ea6\u672a\u6682\u505c\u65f6\uff0c\u6682\u505c\u5408\u7ea6\n\t */\n\tfunction pause() onlyOwner whenNotPaused public returns (bool) {\n\t\tpaused_ = true;\n\t\temit Pause();\n\t\treturn true;\n\t}\n\n\t/**a\n\t * @dev \u91cd\u542f\u5408\u7ea6\uff1a\u53ea\u6709\u5408\u7ea6\u6240\u6709\u8005\u80fd\u4f7f\u7528\uff0c\u5728\u5408\u7ea6\u6682\u505c\u65f6\uff0c\u91cd\u542f\u5408\u7ea6\n\t */\n\tfunction unpause() onlyOwner whenPaused public returns (bool) {\n\t\tpaused_ = false;\n\t\temit Unpause();\n\t\treturn true;\n\t}\n}",
    "function_sum": 14,
    "compiler_version": "0.5.1",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n/**\n *Submitted for verification at Etherscan.io on 2022-01-12\n*/\n/// @title BEAN - Beans are designed for global trusted talent chain\n/// @author zhouhang\n/**\n * @title \u5b89\u5168\u6570\u5b66\u5e93\n * @dev \u7528\u4e8euint256\u7684\u5b89\u5168\u8ba1\u7b97\uff0c\u5408\u7ea6\u5185\u7684\u79ef\u5206\u64cd\u4f5c\u5747\u4f7f\u7528\u8fd9\u4e2a\u5e93\u7684\u51fd\u6570\u4ee3\u66ff\u52a0\u51cf\u4e58\u9664\uff0c\u6765\u907f\u514d\u4e0a\u6ea2\u3001\u4e0b\u6ea2\u7b49\u95ee\u9898\n */\n\nlibrary SafeMath {\n\n\t/**\n\t * @dev \u4e58\u6cd5\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev \u9664\u6cd5\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev \u51cf\u6cd5\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n    require(c <= a);\n\n    return c;\n\t}\n\n\t/**\n\t * @dev \u52a0\u6cd5\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n    require(c >= a);\n\n    return c;\n\t}\n}\n\n/**\n * @title \u6240\u6709\u6743\u5408\u7ea6\n * @dev \u7528\u4e8e\u63a7\u5236\u5408\u7ea6\u7684\u6240\u6709\u6743\uff0c\u5305\u62ec\u8f6c\u8ba9\u6240\u6709\u6743\n */\n\ncontract Ownable {\n\taddress internal owner_; //\u5408\u7ea6\u6240\u6709\u8005\n\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner); //\u5408\u7ea6\u6240\u6709\u6743\u8f6c\u8ba9\u4e8b\u4ef6\n\n\t/**\n\t * @dev \u6784\u9020\u51fd\u6570\n\t */\n\tconstructor() public {\n\t\towner_ = msg.sender; //\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u5408\u7ea6\u521b\u5efa\u8005\n\t}\n\n\t/**\n     * @dev \u5408\u7ea6\u6240\u6709\u8005\n     */\n\tfunction owner() public view returns (address) {\n\t\treturn owner_;\n\t}\n\n\t/**\n     * @dev onlyOwner\u51fd\u6570\u4fee\u6539\u5668\uff1a\u5224\u65ad\u5408\u7ea6\u4f7f\u7528\u8005\u662f\u4e0d\u662f\u5408\u7ea6\u62e5\u6709\u8005\uff0c\u662f\u5408\u7ea6\u62e5\u6709\u8005\u624d\u80fd\u6267\u884c\n     */\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner_);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev \u8f6c\u8ba9\u5408\u7ea6\u6240\u6709\u6743\uff1a\u53ea\u6709\u5408\u7ea6\u6240\u6709\u8005\u80fd\u4f7f\u7528\uff0c\u8f6c\u8ba9\u5408\u7ea6\u6240\u6709\u6743\u7ed9newOwner\n\t * @param  newOwner \u65b0\u7684\u5408\u7ea6\u6240\u6709\u8005\n\t */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\trequire(newOwner != address(0));\n\t\temit OwnershipTransferred(owner_, newOwner);\n\t\towner_ = newOwner;\n\t}\n}\n\n\n\n// You task is to complete the smart contract BALC strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.5.1, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title BALC - A basic token contract with pausable functionality\n * @notice This contract implements a simple ERC20-like token with the ability to pause and unpause transfers.\n * @dev The contract uses SafeMath for arithmetic operations, and it is Ownable, meaning only the owner can pause and unpause the contract.\n */\ncontract BALC is Ownable {\n\n\tusing SafeMath for uint256; // Use SafeMath library for uint256 type\n\n\tstring private name_; // Token name\n\tstring private symbol_; // Token symbol, similar to a currency symbol\n\tuint256 private decimals_; // Number of decimal places\n\tuint256 private totalSupply_; // Total supply of tokens\n\tbool private paused_; // Whether the contract is paused\n\n\tmapping(address => uint256) internal balances; // Mapping of address to balance\n\tmapping(address => mapping(address => uint256)) internal allowed; // Mapping of address to spender to allowance\n\n\tevent Transfer(address indexed from, address indexed to, uint256 value); // Event for token transfer\n\tevent Approval(address indexed owner, address indexed spender, uint256 value); // Event for allowance approval\n\tevent Pause(); // Event for contract pause\n\tevent Unpause(); // Event for contract unpause\n\n\t/**\n\t * @dev Constructor: Initializes the contract with a name, symbol, decimals, total supply, and owner.\n\t * @param _name The name of the token.\n\t * @param _symbol The symbol of the token.\n\t * @param _decimals The number of decimal places for the token.\n\t * @param _totalSupply The initial total supply of the token (before considering decimals).\n\t * @param _owner The address of the contract owner.\n\t */\n\tconstructor(string memory _name, string memory _symbol, uint256 _decimals, uint256 _totalSupply, address _owner) public {\n\t\tname_ = _name;\n\t\tsymbol_ = _symbol;\n\t\tdecimals_ = _decimals;\n\t\ttotalSupply_ = _totalSupply.mul(10 ** decimals_);\n\t\tpaused_ = false;\n\t\towner_ = _owner;\n\t\tbalances[owner_] = totalSupply_;\n\t}\n\n\t/**\n\t * @dev Gets the name of the token.\n\t * @return string memory The name of the token.\n\t */\n\tfunction name() public view returns (string memory) {}\n\n\t/**\n\t * @dev Gets the symbol of the token.\n\t * @return string memory The symbol of the token.\n\t */\n\tfunction symbol() public view returns (string memory) {}\n\n\t/**\n\t * @dev Gets the number of decimal places for the token.\n\t * @return uint256 The number of decimal places.\n\t */\n\tfunction decimals() public view returns (uint256) {}\n\n\t/**\n\t * @dev Gets the total supply of tokens.\n\t * @return uint256 The total supply of tokens.\n\t */\n\tfunction totalSupply() public view returns (uint256) {}\n\n\t/**\n\t * @dev Checks if the contract is paused.\n\t * @return bool True if the contract is paused, false otherwise.\n\t */\n\tfunction isPaused() public view returns (bool) {}\n\n\t/**\n\t * @dev Modifier to allow function execution only when the contract is not paused.\n\t */\n\tmodifier whenNotPaused() {\n\t\trequire(!paused_);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Modifier to allow function execution only when the contract is paused.\n\t */\n\tmodifier whenPaused() {\n\t\trequire(paused_);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfers tokens from the caller (`msg.sender`) to a specified address.\n\t * Can only be executed when the contract is not paused.\n\t * @param _to The address to transfer tokens to.\n\t * @param _value The amount of tokens to transfer.\n\t * @return bool True if the transfer was successful.\n\t */\n\tfunction transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {}\n\n\t/**\n\t * @dev Gets the token balance of a specific account.\n\t * @param _account The address of the account to query.\n\t * @return uint256 The token balance of the account.\n\t */\n\tfunction balanceOf(address _account) public view returns (uint256) {}\n\n\t/**\n\t * @dev Approves a spender to withdraw a specific amount of tokens from the caller's (`msg.sender`) account.\n\t * Can only be executed when the contract is not paused.\n\t * @param _spender The address of the account to approve.\n\t * @param _value The amount of tokens to approve.\n\t * @return bool True if the approval was successful.\n\t */\n\tfunction approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {}\n\n\t/**\n\t * @dev Transfers tokens from one address to another using the allowance mechanism.\n\t * The caller (`msg.sender`) must have been approved to spend tokens on behalf of the `_from` address.\n\t * Can only be executed when the contract is not paused.\n\t * The amount transferred cannot exceed the `_from` address's balance or allowance.\n\t * @param _from The address to transfer tokens from.\n\t * @param _to The address to transfer tokens to.\n\t * @param _value The amount of tokens to transfer.\n\t * @return bool True if the transfer was successful.\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {}\n\n\t/**\n\t * @dev Checks the amount of tokens that an owner allowed a spender to withdraw.\n\t * @param _owner The address of the token owner.\n\t * @param _spender The address of the spender.\n\t * @return uint256 The amount of tokens the spender is allowed to withdraw.\n\t */\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {}\n\n\t/**\n\t * @dev Increases the allowance granted to a spender by the caller (`msg.sender`).\n\t * Can only be executed when the contract is not paused.\n\t * @param _spender The address of the spender.\n\t * @param _addedValue The amount to increase the allowance by.\n\t * @return bool True if the allowance increase was successful.\n\t */\n\tfunction increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool success) {}\n\n\t/**\n\t * @dev Decreases the allowance granted to a spender by the caller (`msg.sender`).\n\t * Can only be executed when the contract is not paused.\n\t * @param _spender The address of the spender.\n\t * @param _subtractedValue The amount to decrease the allowance by.\n\t * @return bool True if the allowance decrease was successful.\n\t */\n\tfunction decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool success) {}\n\n\t/**\n\t * @dev Pauses the contract. Only the contract owner can call this function.\n\t * Can only be executed when the contract is not paused.\n\t * @return bool True if pausing was successful.\n\t */\n\tfunction pause() onlyOwner whenNotPaused public returns (bool) {}\n\n\t/**\n\t * @dev Unpauses the contract. Only the contract owner can call this function.\n\t * Can only be executed when the contract is paused.\n\t * @return bool True if unpausing was successful.\n\t */\n\tfunction unpause() onlyOwner whenPaused public returns (bool) {}\n}\n"
}