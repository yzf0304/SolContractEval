{
    "contract_name": "ERC721",
    "ground_truth": "contract ERC721 is ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n    \n    uint256 private _totalMintsAllowed = 4;\n    \n    string private uriLink = \"https://spicypumpkins.com/api/json\";\n    \n    bool private _minting = true;\n    \n    address payable private _owner;\n    \n    uint256 private _count;\n    \n    string private _name;\n\n    string private _symbol;\n\n    mapping(uint256 => address) private _owners;\n    \n    mapping(uint256 => string) private _uri;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(uint256 => address) private _tokenApprovals;\n    \n    mapping(address => uint256) private _minted;\n\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _owners[0] = msg.sender;\n        _balances[msg.sender] = 1;\n        _owner = payable(msg.sender);\n    }\n    \n    function setMinting(bool boolean) external {\n        require(msg.sender == _owner);\n        _minting = boolean;\n    }\n    \n    function transferOwnership(address to) external {\n        require(msg.sender == _owner);\n        _owner = payable(to);\n    }\n    \n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC721).interfaceId\n            || interfaceId == type(IERC721Metadata).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n    \n    function totalSupply() external view override returns(uint256){return 4444;}\n\n    function tokenURI(uint256 tokenId) external view override returns (string memory) {\n        return _uri[tokenId];\n    }\n\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    function approve(address to, uint256 tokenId) external override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != msg.sender, \"ERC721: approve to caller\");\n\n        _operatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) external override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) external override {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, \"\"), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external override {\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = _owners[tokenId];\n        require(spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender), \"ERC721: Not approved or owner\");\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n    \n    function mint(address to) external payable returns(uint256 ID) {return internalMint(to);}\n    \n    function internalMint(address to) internal returns(uint256 ID){\n        require(_minted[msg.sender] < _totalMintsAllowed);\n        require(_count < 4444, \"All NFT's minted\");\n        require(_minting, \"Minting disabeled\");\n        require(msg.value == 50000000000000000, \"Insufficient Eth\");\n        _owner.transfer(address(this).balance);\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        \n        uint256 count = _count;\n        string memory link = uriLink;\n        \n        ++_balances[to];\n        _owners[count] = to;\n            \n        string memory uri = concat(link, count.toString());\n        uri = concat(uri, \".json\");\n        _uri[count] = uri;\n        \n        ++_count;\n        \n        emit Transfer(address(0), to, count);\n        \n        ++_minted[msg.sender];\n        return count;\n    }\n\n    function concat(string memory _base, string memory _value) pure internal returns (string memory) {\n        bytes memory _baseBytes = bytes(_base);\n        bytes memory _valueBytes = bytes(_value);\n        \n        string memory _tmpValue = new string(_baseBytes.length + _valueBytes.length);\n        bytes memory _newValue = bytes(_tmpValue);\n        \n        uint i;\n        uint j;\n        \n        for(i=0;i<_baseBytes.length;i++) {\n            _newValue[j++] = _baseBytes[i];\n        }\n        \n        for(i=0;i<_valueBytes.length;i++) {\n            _newValue[j++] = _valueBytes[i];\n        }\n        \n        return string(_newValue);\n    }\n    \n    function multiMint(address to, uint256 amount) external payable returns(uint256[] memory IDs){\n        require(msg.value == 50000000000000000 * amount, \"Insufficient Eth\");\n        IDs = new uint256[](amount);\n        for(uint256 t; t < amount; ++t) {\n            IDs[t] = internalMint(to);\n        }\n        \n    }\n    \n    function changeMax(uint256 newMax) external {\n        require(msg.sender == _owner);\n        _totalMintsAllowed = newMax;\n    }\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    // solhint-disable-next-line no-inline-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n}",
    "function_sum": 26,
    "compiler_version": "0.8.0",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n/**\n *Submitted for verification at Etherscan.io on 2021-09-26\n*/\n// SPDX-License-Identifier: MIT\n\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ninterface IERC721 is IERC165 {\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    function balanceOf(address _owner) external view returns (uint256);\n\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    \n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) external;\n\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    function approve(address _approved, uint256 _tokenId) external;\n\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n    \n}\n\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n    \n    function totalSupply() external view returns(uint256);\n    \n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nlibrary Strings {\n    bytes16 private constant alphabet = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = alphabet[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n}\n\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n\n\n// You task is to complete the smart contract ERC721 strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.8.0, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title ERC721 NFT Contract\n * @notice This contract implements the ERC721 standard for non-fungible tokens (NFTs) and includes additional functionalities such as minting, ownership transfer, and token URI management.\n * @dev The contract is designed to be a basic implementation of an NFT collection, with specific features like limited minting, custom URI generation, and owner-controlled minting status.\n */\ncontract ERC721 is ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n    \n    uint256 private _totalMintsAllowed = 4;\n    \n    string private uriLink = \"https://spicypumpkins.com/api/json\";\n    \n    bool private _minting = true;\n    \n    address payable private _owner;\n    \n    uint256 private _count;\n    \n    string private _name;\n\n    string private _symbol;\n\n    mapping(uint256 => address) private _owners;\n    \n    mapping(uint256 => string) private _uri;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(uint256 => address) private _tokenApprovals;\n    \n    mapping(address => uint256) private _minted;\n\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @notice Initializes the contract with the provided name and symbol.\n     * @param name_ The name of the NFT collection.\n     * @param symbol_ The symbol of the NFT collection.\n     * @dev Sets the initial owner and assigns the first token to the contract creator.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _owners[0] = msg.sender;\n        _balances[msg.sender] = 1;\n        _owner = payable(msg.sender);\n    }\n    \n    /**\n     * @notice Allows the owner to enable or disable minting.\n     * @param boolean The new minting status.\n     * @dev Only the contract owner can call this function.\n     */\n    function setMinting(bool boolean) external {\n    }\n    \n    /**\n     * @notice Transfers ownership of the contract to a new address.\n     * @param to The new owner's address.\n     * @dev Only the current owner can call this function.\n     */\n    function transferOwnership(address to) external {\n    }\n    \n    /**\n     * @notice Checks if the contract supports a given interface.\n     * @param interfaceId The ID of the interface to check.\n     * @return A boolean indicating whether the interface is supported.\n     * @dev Supports the ERC721 and ERC721Metadata interfaces.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {}\n\n    /**\n     * @notice Returns the balance of NFTs owned by a given address.\n     * @param owner The address to query the balance of.\n     * @return The number of NFTs owned by the address.\n     * @dev Reverts if the `owner` is the zero address.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {}\n\n    /**\n     * @notice Returns the owner of a given NFT.\n     * @param tokenId The ID of the NFT to query.\n     * @return The address of the NFT's owner.\n     * @dev Reverts if the `tokenId` does not exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {}\n\n    /**\n     * @notice Returns the name of the NFT collection.\n     * @return The name of the NFT collection.\n     */\n    function name() public view virtual override returns (string memory) {}\n\n    /**\n     * @notice Returns the symbol of the NFT collection.\n     * @return The symbol of the NFT collection.\n     */\n    function symbol() public view virtual override returns (string memory) {}\n    \n    /**\n     * @notice Returns the total supply of NFTs in the collection.\n     * @return The total number of NFTs in the collection.\n     * @dev This is a fixed value of 4444.\n     */\n    function totalSupply() external view override returns(uint256){}\n\n    /**\n     * @notice Returns the URI for a given NFT.\n     * @param tokenId The ID of the NFT to query.\n     * @return The URI of the NFT.\n     * @dev The URI is generated based on the `uriLink` and `tokenId`.\n     */\n    function tokenURI(uint256 tokenId) external view override returns (string memory) {}\n\n    /**\n     * @notice Returns the base URI for the NFTs.\n     * @return The base URI for the NFTs.\n     * @dev This is currently an empty string.\n     */\n    function _baseURI() internal view virtual returns (string memory) {}\n\n    /**\n     * @notice Approves a given address to manage a specific NFT.\n     * @param to The address to approve.\n     * @param tokenId The ID of the NFT to approve.\n     * @dev Only the owner or an approved operator can call this function.\n     */\n    function approve(address to, uint256 tokenId) external override {}\n\n    /**\n     * @notice Returns the address approved to manage a specific NFT.\n     * @param tokenId The ID of the NFT to query.\n     * @return The address approved to manage the NFT.\n     * @dev Reverts if the `tokenId` does not exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {}\n\n    /**\n     * @notice Sets the approval for all NFTs of the caller to a given address.\n     * @param operator The address to set the approval for.\n     * @param approved The new approval status.\n     * @dev Emits an `ApprovalForAll` event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {}\n\n    /**\n     * @notice Checks if an address is approved for all NFTs of another address.\n     * @param owner The address to check the approval for.\n     * @param operator The address to check the approval of.\n     * @return A boolean indicating whether the operator is approved for all NFTs of the owner.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {}\n\n    /**\n     * @notice Transfers an NFT from one address to another.\n     * @param from The address to transfer the NFT from.\n     * @param to The address to transfer the NFT to.\n     * @param tokenId The ID of the NFT to transfer.\n     * @dev Only the owner or an approved operator can call this function.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external override {}\n\n    /**\n     * @notice Safely transfers an NFT from one address to another.\n     * @param from The address to transfer the NFT from.\n     * @param to The address to transfer the NFT to.\n     * @param tokenId The ID of the NFT to transfer.\n     * @dev Ensures that the recipient is an ERC721Receiver.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external override {}\n\n    /**\n     * @notice Safely transfers an NFT from one address to another with additional data.\n     * @param from The address to transfer the NFT from.\n     * @param to The address to transfer the NFT to.\n     * @param tokenId The ID of the NFT to transfer.\n     * @param _data Additional data to send with the transfer.\n     * @dev Ensures that the recipient is an ERC721Receiver and processes the `_data`.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external override {}\n\n    /**\n     * @notice Safely transfers an NFT from one address to another with additional data.\n     * @param from The address to transfer the NFT from.\n     * @param to The address to transfer the NFT to.\n     * @param tokenId The ID of the NFT to transfer.\n     * @param _data Additional data to send with the transfer.\n     * @dev Ensures that the recipient is an ERC721Receiver and processes the `_data`.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {}\n\n    /**\n     * @notice Checks if an NFT exists.\n     * @param tokenId The ID of the NFT to check.\n     * @return A boolean indicating whether the NFT exists.\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {}\n\n    /**\n     * @notice Checks if an address is the owner or approved to manage a specific NFT.\n     * @param spender The address to check.\n     * @param tokenId The ID of the NFT to check.\n     * @return A boolean indicating whether the address is the owner or approved.\n     * @dev Reverts if the `tokenId` does not exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {}\n\n    /**\n     * @notice Mints a new NFT to a given address.\n     * @param to The address to mint the NFT to.\n     * @return ID The ID of the newly minted NFT.\n     * @dev Requires the sender to have sufficient ETH, and the minting to be enabled. The minting fee is transferred to the owner.\n     */\n    function mint(address to) external payable returns(uint256 ID) {}\n\n    /**\n     * @notice Internally mints a new NFT to a given address.\n     * @param to The address to mint the NFT to.\n     * @return ID The ID of the newly minted NFT.\n     * @dev Used by the `mint` function to handle the actual minting logic.\n     */\n    function internalMint(address to) internal returns(uint256 ID) {}\n\n    /**\n     * @notice Concatenates two strings.\n     * @param _base The base string.\n     * @param _value The value string to concatenate.\n     * @return The concatenated string.\n     * @dev Used to generate the URI for the NFT.\n     */\n    function concat(string memory _base, string memory _value) pure internal returns (string memory) {}\n\n    /**\n     * @notice Mints multiple NFTs to a given address.\n     * @param to The address to mint the NFTs to.\n     * @param amount The number of NFTs to mint.\n     * @return IDs An array of the IDs of the newly minted NFTs.\n     * @dev Requires the sender to have sufficient ETH for the specified amount of NFTs, and the minting to be enabled. The minting fee is transferred to the owner.\n     */\n    function multiMint(address to, uint256 amount) external payable returns(uint256[] memory IDs) {}\n\n    /**\n     * @notice Changes the maximum number of NFTs that can be minted by a single address.\n     * @param newMax The new maximum number of NFTs.\n     * @dev Only the contract owner can call this function.\n     */\n    function changeMax(uint256 newMax) external {}\n\n    /**\n     * @notice Transfers an NFT from one address to another.\n     * @param from The address to transfer the NFT from.\n     * @param to The address to transfer the NFT to.\n     * @param tokenId The ID of the NFT to transfer.\n     * @dev Internal function used by other transfer functions. Ensures the NFT is owned by the `from` address and the `to` address is valid.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {}\n\n    /**\n     * @notice Approves a given address to manage a specific NFT.\n     * @param to The address to approve.\n     * @param tokenId The ID of the NFT to approve.\n     * @dev Internal function used by the `approve` function. Emits an `Approval` event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {}\n\n    /**\n     * @notice Checks if a recipient is an ERC721Receiver.\n     * @param from The address sending the NFT.\n     * @param to The address receiving the NFT.\n     * @param tokenId The ID of the NFT being transferred.\n     * @param _data Additional data to send with the transfer.\n     * @return A boolean indicating whether the recipient is an ERC721Receiver.\n     * @dev Reverts if the recipient is a contract and does not implement the ERC721Receiver interface.\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool) {}\n\n    /**\n     * @notice Fallback function to accept ETH.\n     * @dev This function is called when the contract receives ETH without a function call.\n     */\n    receive() external payable {}\n}\n"
}