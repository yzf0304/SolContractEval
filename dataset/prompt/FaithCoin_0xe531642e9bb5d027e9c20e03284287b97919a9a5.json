{
    "contract_name": "FaithCoin",
    "ground_truth": "contract FaithCoin is ERC20 {\n\n    \n\n    address owner = msg.sender;\n\n\n\n    mapping (address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    \n\n    uint256 public totalSupply = 25000000 * 10**8;\n\n\n\n    function name() public constant returns (string) { return \"FaithCoin\"; }\n\n    function symbol() public constant returns (string) { return \"FAITH\"; }\n\n    function decimals() public constant returns (uint8) { return 8; }\n\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\n\n    event DistrFinished();\n\n\n\n    bool public distributionFinished = false;\n\n\n\n    modifier canDistr() {\n\n    require(!distributionFinished);\n\n    _;\n\n    }\n\n\n\n    function FaithCoin() public {\n\n        owner = msg.sender;\n\n        balances[msg.sender] = totalSupply;\n\n    }\n\n\n\n    modifier onlyOwner { \n\n        require(msg.sender == owner);\n\n        _;\n\n    }\n\n\n\n    function transferOwnership(address newOwner) onlyOwner public {\n\n        owner = newOwner;\n\n    }\n\n\n\n    function getEthBalance(address _addr) constant public returns(uint) {\n\n    return _addr.balance;\n\n    }\n\n\n\n    function distributeFAITH(address[] addresses, uint256 _value, uint256 _ethbal) onlyOwner canDistr public {\n\n         for (uint i = 0; i < addresses.length; i++) {\n\n\t     if (getEthBalance(addresses[i]) < _ethbal) {\n\n \t         continue;\n\n             }\n\n             balances[owner] -= _value;\n\n             balances[addresses[i]] += _value;\n\n             Transfer(owner, addresses[i], _value);\n\n         }\n\n    }\n\n    \n\n    function balanceOf(address _owner) constant public returns (uint256) {\n\n\t return balances[_owner];\n\n    }\n\n\n\n    // mitigates the ERC20 short address attack\n\n    modifier onlyPayloadSize(uint size) {\n\n        assert(msg.data.length >= size + 4);\n\n        _;\n\n    }\n\n    \n\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n\n\n\n         if (balances[msg.sender] >= _amount\n\n             && _amount > 0\n\n             && balances[_to] + _amount > balances[_to]) {\n\n             balances[msg.sender] -= _amount;\n\n             balances[_to] += _amount;\n\n             Transfer(msg.sender, _to, _amount);\n\n             return true;\n\n         } else {\n\n             return false;\n\n         }\n\n    }\n\n    \n\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n\n\n\n         if (balances[_from] >= _amount\n\n             && allowed[_from][msg.sender] >= _amount\n\n             && _amount > 0\n\n             && balances[_to] + _amount > balances[_to]) {\n\n             balances[_from] -= _amount;\n\n             allowed[_from][msg.sender] -= _amount;\n\n             balances[_to] += _amount;\n\n             Transfer(_from, _to, _amount);\n\n             return true;\n\n         } else {\n\n            return false;\n\n         }\n\n    }\n\n    \n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n\n        // mitigates the ERC20 spend/approval race condition\n\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n\n        \n\n        allowed[msg.sender][_spender] = _value;\n\n        \n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n\n    }\n\n    \n\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n\n        return allowed[_owner][_spender];\n\n    }\n\n\n\n    function finishDistribution() onlyOwner public returns (bool) {\n\n    distributionFinished = true;\n\n    DistrFinished();\n\n    return true;\n\n    }\n\n\n\n    function withdrawForeignTokens(address _tokenContract) public returns (bool) {\n\n        require(msg.sender == owner);\n\n        ForeignToken token = ForeignToken(_tokenContract);\n\n        uint256 amount = token.balanceOf(address(this));\n\n        return token.transfer(owner, amount);\n\n    }\n\n\n\n\n\n}",
    "function_sum": 12,
    "compiler_version": "0.4.19",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n/**\n\n *Submitted for verification at Etherscan.io on 2018-01-09\n\n*/\n/**\n\n  \n\n   In God We Trust\n\n   \n\n   God Bless the bearer of this token.\n\n   In the name of Jesus. Amen\n\n   \n\n   10 Commandments of God\n\n  \n\n   1.You shall have no other gods before Me.\n\n   2.You shall not make idols.\n\n   3.You shall not take the name of the LORD your God in vain.\n\n   4.Remember the Sabbath day, to keep it holy.\n\n   5.Honor your father and your mother.\n\n   6.You shall not murder.\n\n   7.You shall not commit adultery.\n\n   8.You shall not steal.\n\n   9.You shall not bear false witness against your neighbor.\n\n   10.You shall not covet.\n\n  \n\n   Our Mission\n\n   \n\n   1 Timothy 6:12 (NIV)\n\n  \"Fight the good fight of the faith. \n\n   Take hold of the eternal life to which you were called \n\n   when you made your good confession in the presence of many witnesses.\"\n\n   \n\n   Matthew 24:14 (NKJV)\n\n  \"And this gospel of the kingdom will be preached in all the world as a witness to all the nations,\n\n   and then the end will come.\"\n\n\n\n   Verse for Good Health\n\n   \n\n   3 John 1:2\n\n  \"Dear friend, I pray that you may enjoy good health and that all may go well with you, \n\n   even as your soul is getting along well.\"\n\n \n\n   Verse about Family\n\n   \n\n   Genesis 28:14\n\n   \"Your offspring shall be like the dust of the earth, \n\n   and you shall spread abroad to the west and to the east and to the north and to the south, \n\n   and in you and your offspring shall all the families of the earth be blessed.\"\n\n\n\n   \n\n\n\n   Verse About Friends\n\n   \n\n   Proverbs 18:24\n\n   \"One who has unreliable friends soon comes to ruin, but there is a friend who sticks closer than a brother.\"\n\n\n\n\n\n\n\n\n\n   God will Protect you\n\n   \n\n   Isaiah 43:2\n\n   \"When you pass through the waters, I will be with you; and when you pass through the rivers,\n\n   they will not sweep over you. When you walk through the fire, you will not be burned; \n\n   the flames will not set you ablaze.\"\n\n\n\n   \n\n\n\n   Trust in our GOD\n\n   \n\n   Proverbs 3:5-6\n\n \n\n   \"Trust in the LORD with all your heart and lean not on your own understanding; in all your ways submit to him,\n\n   and he will make your paths straight.\"\n\n   \n\n   \n\n   */\n\ncontract ForeignToken {\n\n    function balanceOf(address _owner) public constant returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n}\n\ncontract ERC20Basic {\n\n\n\n  uint256 public totalSupply;\n\n  function balanceOf(address who) public constant returns (uint256);\n\n  function transfer(address to, uint256 value) public returns (bool);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n}\n\ncontract ERC20 is ERC20Basic {\n\n\n\n  function allowance(address owner, address spender) public constant returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\n\n}\n\n\n\n// You task is to complete the smart contract FaithCoin strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.19, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title FaithCoin\n * @dev This contract implements an ERC20 token with additional features such as distribution and foreign token withdrawal.\n * @notice FaithCoin is a custom ERC20 token that includes functionalities for token distribution, ownership transfer, and withdrawing foreign tokens.\n */\ncontract FaithCoin is ERC20 {\n\n    /**\n     * @dev The owner of the contract, initially set to the deployer.\n     */\n    address owner = msg.sender;\n\n    /**\n     * @dev Mapping of addresses to their token balances.\n     */\n    mapping (address => uint256) balances;\n\n    /**\n     * @dev Mapping of allowances, where `allowed[owner][spender]` is the number of tokens that `spender` is allowed to spend on behalf of `owner`.\n     */\n    mapping (address => mapping (address => uint256)) allowed;\n\n    /**\n     * @dev Total supply of the token, set to 25,000,000 FAITH with 8 decimal places.\n     */\n    uint256 public totalSupply = 25000000 * 10**8;\n\n    /**\n     * @notice Returns the name of the token.\n     * @return The name of the token.\n     */\n    function name() public constant returns (string) { }\n\n    /**\n     * @notice Returns the symbol of the token.\n     * @return The symbol of the token.\n     */\n    function symbol() public constant returns (string) {}\n\n    /**\n     * @notice Returns the number of decimals the token uses.\n     * @return The number of decimals.\n     */\n    function decimals() public constant returns (uint8) {}\n\n    /**\n     * @dev Event triggered when tokens are transferred.\n     * @param _from The address from which the tokens were sent.\n     * @param _to The address to which the tokens were sent.\n     * @param _value The amount of tokens transferred.\n     */\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    /**\n     * @dev Event triggered when an allowance is approved.\n     * @param _owner The address that approved the spending.\n     * @param _spender The address that is allowed to spend.\n     * @param _value The amount of tokens approved.\n     */\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /**\n     * @dev Event triggered when the distribution is finished.\n     */\n    event DistrFinished();\n\n    /**\n     * @dev Indicates whether the distribution of tokens is finished.\n     */\n    bool public distributionFinished = false;\n\n    /**\n     * @dev Modifier to ensure the function can only be called if the distribution is not finished.\n     */\n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n\n    /**\n     * @dev Constructor to initialize the contract and assign the total supply to the owner.\n     */\n    function FaithCoin() public {\n        owner = msg.sender;\n        balances[msg.sender] = totalSupply;\n    }\n\n    /**\n     * @dev Modifier to ensure the function can only be called by the owner.\n     */\n    modifier onlyOwner { \n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new address.\n     * @param newOwner The address of the new owner.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n    }\n\n    /**\n     * @notice Returns the Ether balance of a given address.\n     * @param _addr The address to check the balance of.\n     * @return The Ether balance of the address.\n     */\n    function getEthBalance(address _addr) constant public returns(uint) {}\n\n    /**\n     * @notice Distributes tokens to a list of addresses, but only if their Ether balance meets a certain threshold.\n     * @param addresses The list of addresses to distribute tokens to.\n     * @param _value The amount of tokens to distribute to each address.\n     * @param _ethbal The minimum Ether balance required for an address to receive tokens.\n     */\n    function distributeFAITH(address[] addresses, uint256 _value, uint256 _ethbal) onlyOwner canDistr public {}\n\n    /**\n     * @notice Returns the token balance of a given address.\n     * @param _owner The address to check the balance of.\n     * @return The token balance of the address.\n     */\n    function balanceOf(address _owner) constant public returns (uint256) {}\n\n    /**\n     * @dev Modifier to mitigate the ERC20 short address attack by checking the payload size.\n     * @param size The expected size of the payload.\n     */\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n\n    /**\n     * @notice Transfers tokens from the sender's account to another address.\n     * @param _to The address to transfer tokens to.\n     * @param _amount The amount of tokens to transfer.\n     * @return True if the transfer was successful, false otherwise.\n     */\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {}\n\n    /**\n     * @notice Transfers tokens from one address to another, using the allowance mechanism.\n     * @param _from The address to transfer tokens from.\n     * @param _to The address to transfer tokens to.\n     * @param _amount The amount of tokens to transfer.\n     * @return True if the transfer was successful, false otherwise.\n     */\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {}\n\n    /**\n     * @notice Approves an address to spend a specified amount of tokens on behalf of the sender.\n     * @param _spender The address to approve.\n     * @param _value The amount of tokens to approve.\n     * @return True if the approval was successful, false otherwise.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {}\n\n    /**\n     * @notice Returns the amount of tokens that an address is allowed to spend on behalf of another address.\n     * @param _owner The address that owns the tokens.\n     * @param _spender The address that is allowed to spend the tokens.\n     * @return The amount of tokens allowed to be spent.\n     */\n    function allowance(address _owner, address _spender) constant public returns (uint256) {}\n\n    /**\n     * @notice Marks the distribution as finished and triggers the DistrFinished event.\n     * @return True if the distribution was successfully marked as finished.\n     */\n    function finishDistribution() onlyOwner public returns (bool) {}\n\n    /**\n     * @notice Allows the owner to withdraw any foreign tokens sent to this contract.\n     * @param _tokenContract The address of the foreign token contract.\n     * @return True if the withdrawal was successful, false otherwise.\n     */\n    function withdrawForeignTokens(address _tokenContract) public returns (bool) {}\n\n}\n"
}