{
    "contract_name": "ICSTCrowSale",
    "ground_truth": "contract ICSTCrowSale is Ownable{\n\tusing SafeMath for uint256;\n\n\t\n\tuint256 public totalFundingSupply;\n\tERC20 public token;\n\tuint256 public startTime;\n\tuint256 public endTime;\n\tuint256 public airdropSupply;\n\tuint256 public rate;\n\tevent Wasted(address to, uint256 value, uint256 date);\n\tfunction ICSTCrowSale(){\n\t\trate = 0;\n\t\tstartTime=0;\n\t\tendTime=0;\n\t\tairdropSupply = 0;\n\t\ttotalFundingSupply = 0;\n\t\ttoken=ERC20(0xe6bc60a00b81c7f3cbc8f4ef3b0a6805b6851753);\n\t}\n\n\tfunction () payable external\n\t{\n\t\t\trequire(now>startTime);\n\t\t\trequire(now<=endTime);\n\t\t\tuint256 amount=0;\n\t\t\tprocessFunding(msg.sender,msg.value,rate);\n\t\t\tamount=msg.value.mul(rate);\n\t\t\ttotalFundingSupply = totalFundingSupply.add(amount);\n\t}\n\n    function withdrawCoinToOwner(uint256 _value) external\n\t\tonlyOwner\n\t{\n\t\tprocessFunding(msg.sender,_value,1);\n\t}\n\t//\u7a7a\u6295\n    function airdrop(address [] _holders,uint256 paySize) external\n    \tonlyOwner \n\t{\n        uint256 count = _holders.length;\n        assert(paySize.mul(count) <= token.balanceOf(this));\n        for (uint256 i = 0; i < count; i++) {\n\t\t\tprocessFunding(_holders [i],paySize,1);\n\t\t\tairdropSupply = airdropSupply.add(paySize); \n        }\n        Wasted(owner, airdropSupply, now);\n    }\n\tfunction processFunding(address receiver,uint256 _value,uint256 _rate) internal\n\t{\n\t\tuint256 amount=_value.mul(_rate);\n\t\trequire(amount<=token.balanceOf(this));\n\t\tif(!token.transfer(receiver,amount)){\n\t\t\trevert();\n\t\t}\n\t}\n\n\t\n\tfunction etherProceeds() external\n\t\tonlyOwner\n\n\t{\n\t\tif(!msg.sender.send(this.balance)) revert();\n\t}\n\n\n\n\tfunction init(uint256 _startTime,uint256 _endTime,uint _rate) external\n\t\tonlyOwner\n\t{\n\t\tstartTime=_startTime;\n\t\tendTime=_endTime;\n\t\trate=_rate;\n\t}\n\n\tfunction changeToken(address _tokenAddress) external\n\t\tonlyOwner\n\t{\n\t\ttoken = ERC20(_tokenAddress);\n\t}\t\n\t  \n}",
    "function_sum": 7,
    "compiler_version": "0.4.21",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n// You task is to complete the smart contract ICSTCrowSale strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.21, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title ICSTCrowSale\n * @notice A smart contract for conducting a crowdsale, including functionalities for funding, airdrops, and token distribution.\n * @dev This contract uses SafeMath to prevent overflows and underflows. It inherits from the Ownable contract for access control.\n */\ncontract ICSTCrowSale is Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @notice The total amount of tokens that have been distributed through funding.\n     */\n    uint256 public totalFundingSupply;\n\n    /**\n     * @notice The ERC20 token being sold in the crowdsale.\n     */\n    ERC20 public token;\n\n    /**\n     * @notice The start time of the crowdsale.\n     */\n    uint256 public startTime;\n\n    /**\n     * @notice The end time of the crowdsale.\n     */\n    uint256 public endTime;\n\n    /**\n     * @notice The total supply of tokens reserved for airdrops.\n     */\n    uint256 public airdropSupply;\n\n    /**\n     * @notice The rate at which tokens are sold (tokens per wei).\n     */\n    uint256 public rate;\n\n    /**\n     * @notice Event emitted when tokens are wasted, typically during an airdrop.\n     * @param to The address to which the tokens were sent.\n     * @param value The amount of tokens sent.\n     * @param date The timestamp when the event occurred.\n     */\n    event Wasted(address to, uint256 value, uint256 date);\n\n    /**\n     * @notice Constructor for the ICSTCrowSale contract.\n     * @dev Initializes the contract with default values and sets the token address.\n     */\n    function ICSTCrowSale() {\n        rate = 0;\n        startTime = 0;\n        endTime = 0;\n        airdropSupply = 0;\n        totalFundingSupply = 0;\n        token = ERC20(0xe6bc60a00b81c7f3cbc8f4ef3b0a6805b6851753);\n    }\n\n    /**\n     * @notice Fallback function to handle incoming ether and process funding.\n     * @dev Requires the current time to be within the sale period.\n     */\n    function () payable external {\n        require(now > startTime);\n        require(now <= endTime);\n        uint256 amount = 0;\n        processFunding(msg.sender, msg.value, rate);\n        amount = msg.value.mul(rate);\n        totalFundingSupply = totalFundingSupply.add(amount);\n    }\n\n    /**\n     * @notice Allows the owner to withdraw a specified amount of tokens.\n     * @param _value The amount of tokens to withdraw.\n     * @dev Only the owner can call this function.\n     */\n    function withdrawCoinToOwner(uint256 _value) external onlyOwner {}\n\n    /**\n     * @notice Allows the owner to airdrop tokens to a list of addresses.\n     * @param _holders The list of addresses to receive the airdrop.\n     * @param paySize The amount of tokens each address will receive.\n     * @dev Only the owner can call this function. Ensures the contract has enough tokens to perform the airdrop.\n     */\n    function airdrop(address[] _holders, uint256 paySize) external onlyOwner {}\n\n    /**\n     * @notice Internal function to process the funding and transfer tokens to the receiver.\n     * @param receiver The address to receive the tokens.\n     * @param _value The amount of ether or tokens to convert.\n     * @param _rate The rate at which to convert the value to tokens.\n     * @dev Ensures the contract has enough tokens to transfer and performs the transfer.\n     */\n    function processFunding(address receiver, uint256 _value, uint256 _rate) internal {}\n\n    /**\n     * @notice Allows the owner to withdraw all ether from the contract.\n     * @dev Only the owner can call this function. Ensures the ether is successfully sent to the owner.\n     */\n    function etherProceeds() external onlyOwner {}\n\n    /**\n     * @notice Initializes the crowdsale with the start time, end time, and rate.\n     * @param _startTime The start time of the crowdsale.\n     * @param _endTime The end time of the crowdsale.\n     * @param _rate The rate at which tokens are sold (tokens per wei).\n     * @dev Only the owner can call this function.\n     */\n    function init(uint256 _startTime, uint256 _endTime, uint256 _rate) external onlyOwner {}\n\n    /**\n     * @notice Allows the owner to change the token address.\n     * @param _tokenAddress The new token address.\n     * @dev Only the owner can call this function.\n     */\n    function changeToken(address _tokenAddress) external onlyOwner {}\n}\n"
}