{
    "contract_name": "LiquidityMigration",
    "ground_truth": "contract LiquidityMigration is Timelocked, StrategyTypes {\n    using SafeERC20 for IERC20;\n\n    address public generic;\n    address public controller;\n    IStrategyProxyFactory public factory;\n\n    mapping (address => bool) public adapters;\n    mapping (address => uint256) public stakedCount;\n    mapping (address => mapping (address => uint256)) public staked;\n    mapping (address => bool) private _tempIsUnderlying;\n\n\n    event Staked(address adapter, address strategy, uint256 amount, address account);\n    event Migrated(address adapter, address lp, address strategy, address account);\n    event Created(address adapter, address lp, address strategy, address account);\n    event Refunded(address lp, uint256 amount, address account);\n\n    /**\n    * @dev Require adapter registered\n    */\n    modifier onlyRegistered(address _adapter) {\n        require(adapters[_adapter], \"Claimable#onlyState: not registered adapter\");\n        _;\n    }\n\n    /**\n    * @dev Require adapter allows lp\n    */\n    modifier onlyWhitelisted(address _adapter, address _lp) {\n        require(IAdapter(_adapter).isWhitelisted(_lp), \"Claimable#onlyState: not whitelisted strategy\");\n        _;\n    }\n\n    constructor(\n        address[] memory adapters_,\n        address generic_,\n        IStrategyProxyFactory factory_,\n        address controller_,\n        uint256 _unlock,\n        uint256 _modify,\n        address _owner\n    )\n        Timelocked(_unlock, _modify, _owner)\n    {\n        for (uint256 i = 0; i < adapters_.length; i++) {\n            adapters[adapters_[i]] = true;\n        }\n        generic = generic_;\n        factory = factory_;\n        controller = controller_;\n    }\n\n    function stake(\n        address _lp,\n        uint256 _amount,\n        address _adapter\n    )\n        public\n    {\n        IERC20(_lp).safeTransferFrom(msg.sender, address(this), _amount);\n        _stake(_lp, _amount, _adapter);\n    }\n\n    function buyAndStake(\n        address _lp,\n        address _adapter,\n        address _exchange,\n        uint256 _minAmountOut,\n        uint256 _deadline\n    )\n        external\n        payable\n    {\n        _buyAndStake(_lp, msg.value, _adapter, _exchange, _minAmountOut, _deadline);\n    }\n\n    function batchStake(\n        address[] memory _lp,\n        uint256[] memory _amount,\n        address[] memory _adapter\n    )\n        external\n    {\n        require(_lp.length == _amount.length, \"LiquidityMigration#batchStake: not same length\");\n        require(_amount.length == _adapter.length, \"LiquidityMigration#batchStake: not same length\");\n\n        for (uint256 i = 0; i < _lp.length; i++) {\n            stake(_lp[i], _amount[i], _adapter[i]);\n        }\n    }\n\n    function batchBuyAndStake(\n        address[] memory _lp,\n        uint256[] memory _amount,\n        address[] memory _adapter,\n        address[] memory _exchange,\n        uint256[] memory _minAmountOut,\n        uint256 _deadline\n    )\n        external\n        payable\n    {\n        require(_amount.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n        require(_adapter.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n        require(_exchange.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n        require(_minAmountOut.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n\n        uint256 total = 0;\n        for (uint256 i = 0; i < _lp.length; i++) {\n            total = total + _amount[i];\n            _buyAndStake(_lp[i], _amount[i], _adapter[i], _exchange[i], _minAmountOut[i], _deadline);\n        }\n        require(msg.value == total, \"LiquidityMigration#batchBuyAndStake: incorrect amounts\");\n    }\n\n    function migrate(\n        address _lp,\n        address _adapter,\n        IStrategy _strategy,\n        uint256 _slippage\n    )\n        external\n        onlyUnlocked\n    {\n        _migrate(msg.sender, _lp, _adapter, _strategy, _slippage);\n    }\n\n    function migrate(\n        address _user,\n        address _lp,\n        address _adapter,\n        IStrategy _strategy,\n        uint256 _slippage\n    )\n        external\n        onlyOwner\n        onlyUnlocked\n    {\n        _migrate(_user, _lp, _adapter, _strategy, _slippage);\n    }\n\n    function batchMigrate(\n        address[] memory _lp,\n        address[] memory _adapter,\n        IStrategy[] memory _strategy,\n        uint256[] memory _slippage\n    )\n        external\n        onlyUnlocked\n    {\n        require(_lp.length == _adapter.length);\n        require(_adapter.length == _strategy.length);\n\n        for (uint256 i = 0; i < _lp.length; i++) {\n            _migrate(msg.sender, _lp[i], _adapter[i], _strategy[i], _slippage[i]);\n        }\n    }\n\n    function batchMigrate(\n        address[] memory _user,\n        address[] memory _lp,\n        address[] memory _adapter,\n        IStrategy[] memory _strategy,\n        uint256[] memory _slippage\n    )\n        external\n        onlyOwner\n        onlyUnlocked\n    {\n        require(_user.length == _lp.length);\n        require(_lp.length == _adapter.length);\n        require(_adapter.length == _strategy.length);\n\n        for (uint256 i = 0; i < _lp.length; i++) {\n            _migrate(_user[i], _lp[i], _adapter[i], _strategy[i], _slippage[i]);\n        }\n    }\n\n    function refund(\n        address _user,\n        address _lp\n    )\n        public\n        onlyOwner\n    {\n        _refund(_user, _lp);\n    }\n\n    function batchRefund(address[] memory _users, address _lp)\n        public\n        onlyOwner\n    {\n        for (uint256 i = 0; i < _users.length; i++) {\n            _refund(_users[i], _lp);\n        }\n    }\n    function _refund(\n        address _user,\n        address _lp\n    )\n        internal\n    {\n        uint256 _amount = staked[_user][_lp];\n        require(_amount > 0, 'LiquidityMigration#_refund: no stake');\n        delete staked[_user][_lp];\n\n        IERC20(_lp).safeTransfer(_user, _amount);\n        emit Refunded(_lp, _amount, _user);\n    }\n\n    function _migrate(\n        address _user,\n        address _lp,\n        address _adapter,\n        IStrategy _strategy,\n        uint256 _slippage\n    )\n        internal\n        onlyRegistered(_adapter)\n        onlyWhitelisted(_adapter, _lp)\n    {\n        require(\n            IStrategyController(controller).initialized(address(_strategy)),\n            \"LiquidityMigration#_migrate: not enso strategy\"\n        );\n\n        uint256 _stakeAmount = staked[_user][_lp];\n        require(_stakeAmount > 0, \"LiquidityMigration#_migrate: not staked\");\n\n        delete staked[_user][_lp];\n        IERC20(_lp).safeTransfer(generic, _stakeAmount);\n\n        uint256 _before = _strategy.balanceOf(address(this));\n        bytes memory migrationData =\n            abi.encode(IAdapter(_adapter).encodeMigration(generic, address(_strategy), _lp, _stakeAmount));\n        IStrategyController(controller).deposit(_strategy, IStrategyRouter(generic), 0, _slippage, migrationData);\n        uint256 _after = _strategy.balanceOf(address(this));\n\n        _strategy.transfer(_user, (_after - _before));\n        emit Migrated(_adapter, _lp, address(_strategy), _user);\n    }\n\n    function _stake(\n        address _lp,\n        uint256 _amount,\n        address _adapter\n    )\n        internal\n        onlyRegistered(_adapter)\n        onlyWhitelisted(_adapter, _lp)\n    {\n        staked[msg.sender][_lp] += _amount;\n        stakedCount[_adapter] += 1;\n        emit Staked(_adapter, _lp, _amount, msg.sender);\n    }\n\n    function _buyAndStake(\n        address _lp,\n        uint256 _amount,\n        address _adapter,\n        address _exchange,\n        uint256 _minAmountOut,\n        uint256 _deadline\n    )\n        internal\n    {\n        uint256 balanceBefore = IERC20(_lp).balanceOf(address(this));\n        IAdapter(_adapter).buy{value: _amount}(_lp, _exchange, _minAmountOut, _deadline);\n        uint256 amountAdded = IERC20(_lp).balanceOf(address(this)) - balanceBefore;\n        _stake(_lp, amountAdded, _adapter);\n    }\n\n    function createStrategy(\n        address _lp,\n        address _adapter,\n        bytes calldata data\n    )\n        public\n        onlyRegistered(_adapter)\n        onlyWhitelisted(_adapter, _lp)\n    {\n        ( , , , StrategyItem[] memory strategyItems, , , ) = abi.decode(\n            data,\n            (address, string, string, StrategyItem[], InitialState, address, bytes)\n        );\n        _validateItems(_adapter, _lp, strategyItems);\n        address strategy = _createStrategy(data);\n        emit Created(_adapter, _lp, strategy, msg.sender);\n    }\n\n    function updateController(address _controller)\n        external\n        onlyOwner\n    {\n        require(controller != _controller, \"LiquidityMigration#updateController: already exists\");\n        controller = _controller;\n    }\n\n    function updateGeneric(address _generic)\n        external\n        onlyOwner\n    {\n        require(generic != _generic, \"LiquidityMigration#updateGeneric: already exists\");\n        generic = _generic;\n    }\n\n    function updateFactory(address _factory)\n        external\n        onlyOwner\n    {\n        require(factory != IStrategyProxyFactory(_factory), \"LiquidityMigration#updateFactory: already exists\");\n        factory = IStrategyProxyFactory(_factory);\n    }\n\n    function addAdapter(address _adapter)\n        external\n        onlyOwner\n    {\n        require(!adapters[_adapter], \"LiquidityMigration#updateAdapter: already exists\");\n        adapters[_adapter] = true;\n    }\n\n    function removeAdapter(address _adapter)\n        external\n        onlyOwner\n    {\n        require(adapters[_adapter], \"LiquidityMigration#updateAdapter: does not exist\");\n        adapters[_adapter] = false;\n    }\n\n    function hasStaked(address _account, address _lp)\n        external\n        view\n        returns(bool)\n    {\n        return staked[_account][_lp] > 0;\n    }\n\n    function getStakeCount(address _adapter)\n        external\n        view\n        returns(uint256)\n    {\n        return stakedCount[_adapter];\n    }\n\n    function _validateItems(address adapter, address lp, StrategyItem[] memory strategyItems) private {\n        address[] memory underlyingTokens = IAdapter(adapter).outputTokens(lp);\n        for (uint i = 0; i < underlyingTokens.length; i++) {\n            _tempIsUnderlying[underlyingTokens[i]] = true;\n        }\n        uint256 total = strategyItems.length;\n        for (uint i = 0; i < strategyItems.length; i++) {\n            // Strategies may have reserve tokens (such as weth) that don't have value\n            // So we must be careful not to invalidate a strategy for having them\n            if (!_tempIsUnderlying[strategyItems[i].item]) {\n                if (strategyItems[i].percentage == 0) {\n                    total--;\n                } else {\n                    revert(\"LiquidityMigration#createStrategy: incorrect length\");\n                }\n            } else {\n                // Otherwise just remove the cached bool after we've checked it\n                delete _tempIsUnderlying[strategyItems[i].item];\n            }\n        }\n        // If there are some cached bools that have not been deleted then this check will cause a revert\n        require(total == underlyingTokens.length, \"LiquidityMigration#createStrategy: does not exist\");\n    }\n\n    function _createStrategy(bytes memory data) private returns (address) {\n        (\n            address manager,\n            string memory name,\n            string memory symbol,\n            StrategyItem[] memory strategyItems,\n            InitialState memory strategyState,\n            address router,\n            bytes memory depositData\n        ) = abi.decode(\n            data,\n            (address, string, string, StrategyItem[], InitialState, address, bytes)\n        );\n        return factory.createStrategy(\n            manager,\n            name,\n            symbol,\n            strategyItems,\n            strategyState,\n            router,\n            depositData\n        );\n    }\n}",
    "function_sum": 21,
    "compiler_version": "0.8.2",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\ninterface StrategyTypes {\n\n    enum ItemCategory {BASIC, SYNTH, DEBT, RESERVE}\n    enum EstimatorCategory {\n      DEFAULT_ORACLE,\n      CHAINLINK_ORACLE,\n      UNISWAP_TWAP_ORACLE,\n      SUSHI_TWAP_ORACLE,\n      STRATEGY,\n      BLOCKED,\n      AAVE_V1,\n      AAVE_V2,\n      AAVE_DEBT,\n      BALANCER,\n      COMPOUND,\n      CURVE,\n      CURVE_GAUGE,\n      SUSHI_LP,\n      SUSHI_FARM,\n      UNISWAP_V2_LP,\n      UNISWAP_V3_LP,\n      YEARN_V1,\n      YEARN_V2\n    }\n    enum TimelockCategory {RESTRUCTURE, THRESHOLD, REBALANCE_SLIPPAGE, RESTRUCTURE_SLIPPAGE, TIMELOCK, PERFORMANCE}\n\n    struct StrategyItem {\n        address item;\n        int256 percentage;\n        TradeData data;\n    }\n\n    struct TradeData {\n        address[] adapters;\n        address[] path;\n        bytes cache;\n    }\n\n    struct InitialState {\n        uint32 timelock;\n        uint16 rebalanceThreshold;\n        uint16 rebalanceSlippage;\n        uint16 restructureSlippage;\n        uint16 performanceFee;\n        bool social;\n        bool set;\n    }\n\n    struct StrategyState {\n        uint32 timelock;\n        uint16 rebalanceSlippage;\n        uint16 restructureSlippage;\n        bool social;\n        bool set;\n    }\n\n    /**\n        @notice A time lock requirement for changing the state of this Strategy\n        @dev WARNING: Only one TimelockCategory can be pending at a time\n    */\n    struct Timelock {\n        TimelockCategory category;\n        uint256 timestamp;\n        bytes data;\n    }\n}\n\ninterface IAdapter {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    function outputTokens(address inputToken) external view returns (address[] memory outputs);\n\n    function encodeMigration(address _genericRouter, address _strategy, address _lp, uint256 _amount)\n        external view returns (Call[] memory calls);\n\n    function encodeWithdraw(address _lp, uint256 _amount) external view returns (Call[] memory calls);\n\n    function buy(address _lp, address _exchange, uint256 _minAmountOut, uint256 _deadline) external payable;\n\n    function getAmountOut(address _lp, address _exchange, uint256 _amountIn) external returns (uint256);\n\n    function isWhitelisted(address _token) external view returns (bool);\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IStrategyProxyFactory is StrategyTypes{\n    function createStrategy(\n        address manager,\n        string memory name,\n        string memory symbol,\n        StrategyItem[] memory strategyItems,\n        InitialState memory strategyInit,\n        address router,\n        bytes memory data\n    ) external payable returns (address);\n\n    function updateProxyVersion(address proxy) external;\n\n    function implementation() external view returns (address);\n\n    function controller() external view returns (address);\n\n    function oracle() external view returns (address);\n\n    function whitelist() external view returns (address);\n\n    function pool() external view returns (address);\n\n    function version() external view returns (string memory);\n\n    function getManager(address proxy) external view returns (address);\n\n    function salt(address manager, string memory name, string memory symbol) external pure returns (bytes32);\n}\n\ninterface IStrategy is IStrategyToken, StrategyTypes {\n    function approveToken(\n        address token,\n        address account,\n        uint256 amount\n    ) external;\n\n    function approveDebt(\n        address token,\n        address account,\n        uint256 amount\n    ) external;\n\n    function approveSynths(\n        address account,\n        uint256 amount\n    ) external;\n\n    function setStructure(StrategyItem[] memory newItems) external;\n\n    function setCollateral(address token) external;\n\n    function withdrawAll(uint256 amount) external;\n\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external returns (uint256);\n\n    function delegateSwap(\n        address adapter,\n        uint256 amount,\n        address tokenIn,\n        address tokenOut\n    ) external;\n\n    function settleSynths() external;\n\n    function issueStreamingFee() external;\n\n    function updateTokenValue(uint256 total, uint256 supply) external;\n\n    function updatePerformanceFee(uint16 fee) external;\n\n    function updateRebalanceThreshold(uint16 threshold) external;\n\n    function updateTradeData(address item, TradeData memory data) external;\n\n    function lock() external;\n\n    function unlock() external;\n\n    function locked() external view returns (bool);\n\n    function items() external view returns (address[] memory);\n\n    function synths() external view returns (address[] memory);\n\n    function debt() external view returns (address[] memory);\n\n    function rebalanceThreshold() external view returns (uint256);\n\n    function performanceFee() external view returns (uint256);\n\n    function getPercentage(address item) external view returns (int256);\n\n    function getTradeData(address item) external view returns (TradeData memory);\n\n    function getPerformanceFeeOwed(address account) external view returns (uint256);\n\n    function controller() external view returns (address);\n\n    function manager() external view returns (address);\n\n    function oracle() external view returns (IOracle);\n\n    function whitelist() external view returns (IWhitelist);\n\n    function supportsSynths() external view returns (bool);\n}\n\ninterface IStrategyController is StrategyTypes {\n    function setupStrategy(\n        address manager_,\n        address strategy_,\n        InitialState memory state_,\n        address router_,\n        bytes memory data_\n    ) external payable;\n\n    function deposit(\n        IStrategy strategy,\n        IStrategyRouter router,\n        uint256 amount,\n        uint256 slippage,\n        bytes memory data\n    ) external payable;\n\n    function withdrawETH(\n        IStrategy strategy,\n        IStrategyRouter router,\n        uint256 amount,\n        uint256 slippage,\n        bytes memory data\n    ) external;\n\n    function withdrawWETH(\n        IStrategy strategy,\n        IStrategyRouter router,\n        uint256 amount,\n        uint256 slippage,\n        bytes memory data\n    ) external;\n\n    function rebalance(\n        IStrategy strategy,\n        IStrategyRouter router,\n        bytes memory data\n    ) external;\n\n    function restructure(\n        IStrategy strategy,\n        StrategyItem[] memory strategyItems\n    ) external;\n\n    function finalizeStructure(\n        IStrategy strategy,\n        IStrategyRouter router,\n        bytes memory data\n    ) external;\n\n    function updateValue(\n        IStrategy strategy,\n        TimelockCategory category,\n        uint256 newValue\n    ) external;\n\n    function finalizeValue(address strategy) external;\n\n    function openStrategy(IStrategy strategy, uint256 fee) external;\n\n    function setStrategy(IStrategy strategy) external;\n\n    function initialized(address strategy) external view returns (bool);\n\n    function strategyState(address strategy) external view returns (StrategyState memory);\n\n    function verifyStructure(address strategy, StrategyItem[] memory newItems)\n        external\n        view\n        returns (bool);\n\n    function oracle() external view returns (IOracle);\n\n    function whitelist() external view returns (IWhitelist);\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function _setOwner(address owner_) \n        internal\n    {\n        _owner = owner_;\n        emit OwnershipTransferred(address(0), owner_);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract Timelocked is Ownable {\n\n    uint256 public unlocked; // timestamp unlock migration\n    uint256 public modify;   // timestamp disallow changes\n\n    /**\n    * @dev Require unlock time met\n    */\n    modifier onlyUnlocked() {\n        require(block.timestamp >= unlocked, \"Timelock#onlyUnlocked: not unlocked\");\n        _;\n    }\n\n    /**\n    * @dev Require modifier time not met\n    */\n    modifier onlyModify() {\n        require(block.timestamp < modify, \"Timelock#onlyModify: cannot modify\");\n        _;\n    }\n\n    constructor(uint256 unlock_, uint256 modify_, address owner_) {\n        require(unlock_ > block.timestamp, 'Timelock#not greater');\n        unlocked = unlock_;\n        modify = modify_;\n        _setOwner(owner_);\n    }\n\n    function updateUnlock(\n        uint256 unlock_\n    ) \n        public\n        onlyOwner\n        onlyModify\n    {\n        unlocked = unlock_;\n    }\n}\n\n\n\n// You task is to complete the smart contract LiquidityMigration strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.8.2, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title LiquidityMigration\n * @notice This contract allows users to stake, migrate, and refund liquidity tokens. It also supports creating new strategies.\n * @dev Inherits from Timelocked and StrategyTypes. Utilizes SafeERC20 for safe token transfers.\n */\ncontract LiquidityMigration is Timelocked, StrategyTypes {\n    using SafeERC20 for IERC20;\n\n    address public generic;\n    address public controller;\n    IStrategyProxyFactory public factory;\n\n    mapping (address => bool) public adapters;\n    mapping (address => uint256) public stakedCount;\n    mapping (address => mapping (address => uint256)) public staked;\n    mapping (address => bool) private _tempIsUnderlying;\n\n    event Staked(address adapter, address strategy, uint256 amount, address account);\n    event Migrated(address adapter, address lp, address strategy, address account);\n    event Created(address adapter, address lp, address strategy, address account);\n    event Refunded(address lp, uint256 amount, address account);\n\n    /**\n     * @notice Modifier to ensure the adapter is registered.\n     * @dev Reverts if the adapter is not registered.\n     */\n    modifier onlyRegistered(address _adapter) {\n        require(adapters[_adapter], \"Claimable#onlyState: not registered adapter\");\n        _;\n    }\n\n    /**\n     * @notice Modifier to ensure the adapter allows the specified LP token.\n     * @dev Reverts if the LP token is not whitelisted by the adapter.\n     */\n    modifier onlyWhitelisted(address _adapter, address _lp) {\n        require(IAdapter(_adapter).isWhitelisted(_lp), \"Claimable#onlyState: not whitelisted strategy\");\n        _;\n    }\n\n    constructor(\n        address[] memory adapters_,\n        address generic_,\n        IStrategyProxyFactory factory_,\n        address controller_,\n        uint256 _unlock,\n        uint256 _modify,\n        address _owner\n    )\n        Timelocked(_unlock, _modify, _owner)\n    {\n        for (uint256 i = 0; i < adapters_.length; i++) {\n            adapters[adapters_[i]] = true;\n        }\n        generic = generic_;\n        factory = factory_;\n        controller = controller_;\n    }\n\n    /**\n     * @notice Allows a user to stake a specified amount of an LP token.\n     * @dev Transfers the LP tokens from the user to this contract and records the stake.\n     * @param _lp The address of the LP token.\n     * @param _amount The amount of the LP token to stake.\n     * @param _adapter The address of the adapter.\n     */\n    function stake(\n        address _lp,\n        uint256 _amount,\n        address _adapter\n    )\n        public\n    {}\n\n    /**\n     * @notice Allows a user to buy and stake an LP token using ETH.\n     * @dev Buys the LP token with the provided ETH and stakes it.\n     * @param _lp The address of the LP token.\n     * @param _adapter The address of the adapter.\n     * @param _exchange The address of the exchange.\n     * @param _minAmountOut The minimum amount of LP tokens to receive.\n     * @param _deadline The deadline for the transaction.\n     */\n    function buyAndStake(\n        address _lp,\n        address _adapter,\n        address _exchange,\n        uint256 _minAmountOut,\n        uint256 _deadline\n    )\n        external\n        payable\n    {}\n\n    /**\n     * @notice Allows a user to batch stake multiple LP tokens.\n     * @dev Validates the input arrays and calls the `stake` function for each LP token.\n     * @param _lp The addresses of the LP tokens.\n     * @param _amount The amounts of the LP tokens to stake.\n     * @param _adapter The addresses of the adapters.\n     */\n    function batchStake(\n        address[] memory _lp,\n        uint256[] memory _amount,\n        address[] memory _adapter\n    )\n        external\n    {}\n\n    /**\n     * @notice Allows a user to batch buy and stake multiple LP tokens using ETH.\n     * @dev Validates the input arrays, buys and stakes each LP token, and ensures the total ETH matches the sum of the amounts.\n     * @param _lp The addresses of the LP tokens.\n     * @param _amount The amounts of the LP tokens to buy and stake.\n     * @param _adapter The addresses of the adapters.\n     * @param _exchange The addresses of the exchanges.\n     * @param _minAmountOut The minimum amounts of LP tokens to receive.\n     * @param _deadline The deadline for the transactions.\n     */\n    function batchBuyAndStake(\n        address[] memory _lp,\n        uint256[] memory _amount,\n        address[] memory _adapter,\n        address[] memory _exchange,\n        uint256[] memory _minAmountOut,\n        uint256 _deadline\n    )\n        external\n        payable\n    {}\n\n    /**\n     * @notice Allows a user to migrate their staked LP tokens to a new strategy.\n     * @dev Transfers the staked LP tokens to the generic address and migrates them to the new strategy.\n     * @param _lp The address of the LP token.\n     * @param _adapter The address of the adapter.\n     * @param _strategy The address of the new strategy.\n     * @param _slippage The allowed slippage for the migration.\n     */\n    function migrate(\n        address _lp,\n        address _adapter,\n        IStrategy _strategy,\n        uint256 _slippage\n    )\n        external\n        onlyUnlocked\n    {}\n\n    /**\n     * @notice Allows the owner to migrate another user's staked LP tokens to a new strategy.\n     * @dev Transfers the staked LP tokens to the generic address and migrates them to the new strategy.\n     * @param _user The address of the user.\n     * @param _lp The address of the LP token.\n     * @param _adapter The address of the adapter.\n     * @param _strategy The address of the new strategy.\n     * @param _slippage The allowed slippage for the migration.\n     */\n    function migrate(\n        address _user,\n        address _lp,\n        address _adapter,\n        IStrategy _strategy,\n        uint256 _slippage\n    )\n        external\n        onlyOwner\n        onlyUnlocked\n    {}\n\n    /**\n     * @notice Allows a user to batch migrate their staked LP tokens to new strategies.\n     * @dev Validates the input arrays and calls the `migrate` function for each LP token.\n     * @param _lp The addresses of the LP tokens.\n     * @param _adapter The addresses of the adapters.\n     * @param _strategy The addresses of the new strategies.\n     * @param _slippage The allowed slippages for the migrations.\n     */\n    function batchMigrate(\n        address[] memory _lp,\n        address[] memory _adapter,\n        IStrategy[] memory _strategy,\n        uint256[] memory _slippage\n    )\n        external\n        onlyUnlocked\n    {}\n\n    /**\n     * @notice Allows the owner to batch migrate other users' staked LP tokens to new strategies.\n     * @dev Validates the input arrays and calls the `migrate` function for each LP token.\n     * @param _user The addresses of the users.\n     * @param _lp The addresses of the LP tokens.\n     * @param _adapter The addresses of the adapters.\n     * @param _strategy The addresses of the new strategies.\n     * @param _slippage The allowed slippages for the migrations.\n     */\n    function batchMigrate(\n        address[] memory _user,\n        address[] memory _lp,\n        address[] memory _adapter,\n        IStrategy[] memory _strategy,\n        uint256[] memory _slippage\n    )\n        external\n        onlyOwner\n        onlyUnlocked\n    {}\n\n    /**\n     * @notice Allows the owner to refund a user's staked LP tokens.\n     * @dev Transfers the staked LP tokens back to the user.\n     * @param _user The address of the user.\n     * @param _lp The address of the LP token.\n     */\n    function refund(\n        address _user,\n        address _lp\n    )\n        public\n        onlyOwner\n    {}\n\n    /**\n     * @notice Allows the owner to batch refund multiple users' staked LP tokens.\n     * @dev Calls the `refund` function for each user.\n     * @param _users The addresses of the users.\n     * @param _lp The address of the LP token.\n     */\n    function batchRefund(address[] memory _users, address _lp)\n        public\n        onlyOwner\n    {}\n\n    /**\n     * @notice Internal function to refund a user's staked LP tokens.\n     * @dev Transfers the staked LP tokens back to the user and emits a `Refunded` event.\n     * @param _user The address of the user.\n     * @param _lp The address of the LP token.\n     */\n    function _refund(\n        address _user,\n        address _lp\n    )\n        internal\n    {}\n\n    /**\n     * @dev Migrates user's staked liquidity from one pool to another.\n     * @param _user Address of the user whose liquidity is being migrated\n     * @param _lp Address of the liquidity pool being migrated from\n     * @param _adapter Address of the adapter handling the migration\n     * @param _strategy Address of the target strategy for migration\n     * @param _slippage Maximum allowed slippage for the migration transaction\n     * @dev Requirements:\n     *   - Adapter must be registered\n     *   - Adapter must be whitelisted for the LP\n     *   - Strategy must be initialized in the controller\n     *   - User must have staked balance in the LP\n     * @dev Behavior:\n     *   - Validates migration prerequisites\n     *   - Transfers staked amount to generic handler\n     *   - Encodes migration data and executes migration through controller\n     *   - Calculates and transfers migrated amount to user\n     *   - Emits Migrated event\n     * @dev Notes:\n     *   - Uses safe transfer for token movement\n     *   - Implements slippage protection\n     *   - Maintains atomic migration process\n     */\n    function _migrate(\n        address _user,\n        address _lp,\n        address _adapter,\n        IStrategy _strategy,\n        uint256 _slippage\n    )\n        internal\n        onlyRegistered(_adapter)\n        onlyWhitelisted(_adapter, _lp)\n    {}\n\n    /**\n     * @notice Internal function to stake a specified amount of an LP token.\n     * @dev Records the stake and increments the staked count for the adapter.\n     * @param _lp The address of the LP token.\n     * @param _amount The amount of the LP token to stake.\n     * @param _adapter The address of the adapter.\n     */\n    function _stake(\n        address _lp,\n        uint256 _amount,\n        address _adapter\n    )\n        internal\n        onlyRegistered(_adapter)\n        onlyWhitelisted(_adapter, _lp)\n    {}\n\n    /**\n     * @notice Internal function to buy and stake an LP token using ETH.\n     * @dev Buys the LP token with the provided ETH and stakes it.\n     * @param _lp The address of the LP token.\n     * @param _amount The amount of ETH to use for buying the LP token.\n     * @param _adapter The address of the adapter.\n     * @param _exchange The address of the exchange.\n     * @param _minAmountOut The minimum amount of LP tokens to receive.\n     * @param _deadline The deadline for the transaction.\n     */\n    function _buyAndStake(\n        address _lp,\n        uint256 _amount,\n        address _adapter,\n        address _exchange,\n        uint256 _minAmountOut,\n        uint256 _deadline\n    )\n        internal\n    {}\n\n    /**\n     * @notice Allows a user to create a new strategy.\n     * @dev Decodes the provided data, validates the strategy items, and creates the new strategy.\n     * @param _lp The address of the LP token.\n     * @param _adapter The address of the adapter.\n     * @param data The encoded data for creating the strategy.\n     */\n    function createStrategy(\n        address _lp,\n        address _adapter,\n        bytes calldata data\n    )\n        public\n        onlyRegistered(_adapter)\n        onlyWhitelisted(_adapter, _lp)\n    {}\n\n    /**\n     * @notice Allows the owner to update the controller address.\n     * @dev Updates the controller address and ensures it is different from the current one.\n     * @param _controller The new controller address.\n     */\n    function updateController(address _controller)\n        external\n        onlyOwner\n    {}\n\n    /**\n     * @notice Allows the owner to update the generic address.\n     * @dev Updates the generic address and ensures it is different from the current one.\n     * @param _generic The new generic address.\n     */\n    function updateGeneric(address _generic)\n        external\n        onlyOwner\n    {}\n\n    /**\n     * @notice Allows the owner to update the factory address.\n     * @dev Updates the factory address and ensures it is different from the current one.\n     * @param _factory The new factory address.\n     */\n    function updateFactory(address _factory)\n        external\n        onlyOwner\n    {}\n\n    /**\n     * @notice Allows the owner to add a new adapter.\n     * @dev Adds the adapter and ensures it is not already registered.\n     * @param _adapter The address of the new adapter.\n     */\n    function addAdapter(address _adapter)\n        external\n        onlyOwner\n    {}\n\n    /**\n     * @notice Allows the owner to remove an existing adapter.\n     * @dev Removes the adapter and ensures it is currently registered.\n     * @param _adapter The address of the adapter to remove.\n     */\n    function removeAdapter(address _adapter)\n        external\n        onlyOwner\n    {}\n\n    /**\n     * @notice Checks if a user has staked a specific LP token.\n     * @dev Returns true if the user has staked the LP token, false otherwise.\n     * @param _account The address of the user.\n     * @param _lp The address of the LP token.\n     * @return bool True if the user has staked the LP token, false otherwise.\n     */\n    function hasStaked(address _account, address _lp)\n        external\n        view\n        returns(bool)\n    {}\n\n    /**\n     * @notice Gets the number of stakes for a specific adapter.\n     * @dev Returns the staked count for the adapter.\n     * @param _adapter The address of the adapter.\n     * @return uint256 The number of stakes for the adapter.\n     */\n    function getStakeCount(address _adapter)\n        external\n        view\n        returns(uint256)\n    {}\n\n    /**\n     * @dev Validates the items in a strategy against the adapter's output tokens.\n     * @param adapter Address of the adapter providing the token mapping\n     * @param lp Address of the liquidity pool\n     * @param strategyItems Array of strategy items to validate\n     * @dev Behavior:\n     *   1. Retrieves the adapter's output tokens for the LP\n     *   2. Caches these tokens in a temporary mapping for validation\n     *   3. Validates each strategy item:\n     *      - Ignores reserve tokens with 0 percentage\n     *      - Reverts if non-output tokens have non-zero percentage\n     *      - Cleans up cached tokens after validation\n     *   4. Ensures all output tokens are accounted for in the strategy\n     * @dev Notes:\n     *   - Uses a temporary mapping to track validation state\n     *   - Allows reserve tokens (like WETH) with 0 percentage\n     *   - Enforces strict validation of strategy composition\n     * @dev Error Cases:\n     *   - Reverts if non-output tokens are included with non-zero percentage\n     *   - Reverts if output tokens are missing from the strategy\n     */\n    function _validateItems(address adapter, address lp, StrategyItem[] memory strategyItems) private {}\n\n    /**\n     * @notice Private function to create a new strategy.\n     * @dev Decodes the provided data and creates the new strategy using the factory.\n     * @param data The encoded data for creating the strategy.\n     * @return address The address of the newly created strategy.\n     */\n    function _createStrategy(bytes memory data) private returns (address) {}\n}\n"
}