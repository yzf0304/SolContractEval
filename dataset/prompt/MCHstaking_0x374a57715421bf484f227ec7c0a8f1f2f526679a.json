{
    "contract_name": "MCHstaking",
    "ground_truth": "contract MCHstaking is MCHstakingInterface {\n    \n    address private _owner;\n    mapping (address => bool) private _allowence;\n    IERC20 MCH;\n    contract2 MCF;\n    \n    mapping (address => uint256) private _staking;\n    mapping (address => uint256) private _block;\n    \n    uint256 _totalStaked;\n    \n    mapping (address => bool) private _blackListed;\n    \n    constructor(address MCHtoken) {\n        MCH = IERC20(MCHtoken);\n        _owner = msg.sender;\n        _allowence[msg.sender] = true;\n    }\n    \n    function setMCFcontract(address contractAddress) external {\n        require(msg.sender == _owner);\n        MCF = contract2(contractAddress);\n        _allowence[contractAddress] = true;\n    }\n    \n    //staking stats of a user\n    function stakingStats(address user) external view override returns(uint256 amount, uint256 stakingBlock){\n        amount = _staking[user];\n        stakingBlock = _block[user];\n    }\n    \n    function totalStaked() external view override returns(uint256){\n        return _totalStaked;\n    }\n    //shows if a user is black listed or not\n    function showBlackUser(address user) external view override returns(bool){\n        require(_allowence[msg.sender]);\n        return _blackListed[user];\n    }\n    \n    //shows if a user has allowance or not\n    function allowance(address user) external view override returns(bool){\n        require(_allowence[msg.sender]);\n        return _allowence[user];\n    }\n    \n    //======================================================================================================================================================\n    \n    function transferOwnership(address to) external override {\n        require(_owner == msg.sender);\n        _owner = to;\n    }\n    \n    function giveAllowence(address user) external override {\n        require(msg.sender == _owner);\n        _allowence[user] = true;\n    }\n    \n    function removeAllowence(address user) external override {\n        require(msg.sender == _owner);\n        _allowence[user] = false;\n    }  \n    \n    function addToBlackList(address user) external override {\n        require(_owner == msg.sender);\n        _blackListed[user] = true;\n    }\n\n    function removeFromBlackList(address user) external override {\n        require(_owner == msg.sender);\n        _blackListed[user] = false;\n    }    \n    \n    function stakeMCH(uint256 amount) external override {\n        MCH.transferFrom(msg.sender, address(this), amount);\n            \n        if(address(MCF) != address(0)){MCF.claimRewards(msg.sender);}\n        _staking[msg.sender] += amount;\n        _block[msg.sender] = block.number;\n        _totalStaked += amount;\n        emit Stake(msg.sender, amount);\n    }\n    \n    function unstake(address user, uint256 amount) external override {\n        require(_allowence[msg.sender]);\n        _staking[user] -= amount;\n        _block[user] = block.number;\n        _totalStaked -= amount;\n    }\n    \n    function refreshBlock(address user) external override {\n        require(_allowence[msg.sender]);\n        _block[user] = block.number;\n    }\n    \n    function setData(address user, uint256 staked, uint256 stakingBlock, uint256 stakedMCH) external override {\n        require(_allowence[msg.sender]);\n        _staking[user] = staked;\n        _block[user] = stakingBlock;\n        _totalStaked = stakedMCH;\n        \n    }\n    \n    function transferMCH(address to, uint256 amount) external override {\n        require(_allowence[msg.sender]);\n        require(MCH.balanceOf(address(this)) - _totalStaked >= amount);\n        MCH.transfer(to, amount);\n    }\n    \n    function emergencyWithdraw(uint256 amount) external override {\n        require(msg.sender == _owner);\n        MCH.transfer(_owner, amount);\n    }\n}",
    "function_sum": 16,
    "compiler_version": "0.8.4",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n/**\n *Submitted for verification at Etherscan.io on 2021-05-06\n*/\n\ninterface IERC20{\n\n  function balanceOf(address account) external view returns (uint256);\n\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  function allowance(address _owner, address spender) external view returns (uint256);\n  \n  function approve(address spender, uint256 amount) external returns (bool);\n  \n  function increaseAllowance(address spender, uint256 addedValue) external;\n\n  function decreaseAllowance(address spender, uint256 subtractedValue) external;\n\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n}\n\ninterface contract2{\n    \n    function claimRewards(address user) external returns(bool);\n}\n\ninterface MCHstakingInterface {\n    \n    function stakingStats(address user) external view returns(uint256 amount, uint256 stakingBlock) ;\n    \n    function totalStaked() external view returns(uint256);\n    \n    function showBlackUser(address user) external view returns(bool) ;\n    \n    function allowance(address user) external view returns(bool) ;\n    \n    function transferOwnership(address to) external ;\n    \n    function giveAllowence(address user) external ;\n    \n    function removeAllowence(address user) external ;\n    \n    function addToBlackList(address user) external ;\n\n    function removeFromBlackList(address user) external ;\n    \n    function stakeMCH(uint256 amount) external ;\n    \n    function unstake(address user, uint256 amount) external ;\n    \n    function refreshBlock(address user) external ;    \n    \n    function setData(address user, uint256 staked, uint256 stakingBlock, uint256 stakedMCH) external ;    \n    \n    function transferMCH(address to, uint256 amount) external ;\n    \n    function emergencyWithdraw(uint256 amount) external ;    \n    \n    event Stake(address indexed staker, uint256 indexed amount);\n}\n\n\n\n// You task is to complete the smart contract MCHstaking strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.8.4, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title MCHstaking\n * @notice This contract allows users to stake MCH tokens and provides functionalities for managing staking, blacklisting, and allowances.\n * @dev The contract is designed to interact with an MCH token (ERC20) and a secondary contract (MCF). It also includes owner-only functions for management.\n */\ncontract MCHstaking is MCHstakingInterface {\n    \n    address private _owner;\n    mapping (address => bool) private _allowence;\n    IERC20 MCH;\n    contract2 MCF;\n    \n    mapping (address => uint256) private _staking;\n    mapping (address => uint256) private _block;\n    \n    uint256 _totalStaked;\n    \n    mapping (address => bool) private _blackListed;\n    \n    constructor(address MCHtoken) {\n        MCH = IERC20(MCHtoken);\n        _owner = msg.sender;\n        _allowence[msg.sender] = true;\n    }\n    \n    /**\n     * @notice Sets the MCF contract address.\n     * @dev Only the contract owner can call this function.\n     * @param contractAddress The address of the MCF contract.\n     */\n    function setMCFcontract(address contractAddress) external {\n    }\n    \n    /**\n     * @notice Returns the staking statistics of a user.\n     * @dev This function returns the amount staked and the block number at which the user last staked.\n     * @param user The address of the user.\n     * @return amount The amount of MCH staked by the user.\n     * @return stakingBlock The block number at which the user last staked.\n     */\n    function stakingStats(address user) external view override returns(uint256 amount, uint256 stakingBlock){\n    }\n    \n    /**\n     * @notice Returns the total amount of MCH staked in the contract.\n     * @dev This function is used to get the total staked amount.\n     * @return The total amount of MCH staked.\n     */\n    function totalStaked() external view override returns(uint256){\n    }\n    \n    /**\n     * @notice Checks if a user is blacklisted.\n     * @dev Only addresses with allowance can call this function.\n     * @param user The address of the user.\n     * @return A boolean indicating whether the user is blacklisted.\n     */\n    function showBlackUser(address user) external view override returns(bool){\n    }\n    \n    /**\n     * @notice Checks if a user has allowance.\n     * @dev Only addresses with allowance can call this function.\n     * @param user The address of the user.\n     * @return A boolean indicating whether the user has allowance.\n     */\n    function allowance(address user) external view override returns(bool){\n    }\n    \n    //======================================================================================================================================================\n    \n    /**\n     * @notice Transfers ownership of the contract to a new address.\n     * @dev Only the current owner can call this function.\n     * @param to The address of the new owner.\n     */\n    function transferOwnership(address to) external override {\n    }\n    \n    /**\n     * @notice Grants allowance to a user.\n     * @dev Only the contract owner can call this function.\n     * @param user The address of the user to grant allowance to.\n     */\n    function giveAllowence(address user) external override {\n    }\n    \n    /**\n     * @notice Revokes allowance from a user.\n     * @dev Only the contract owner can call this function.\n     * @param user The address of the user to revoke allowance from.\n     */\n    function removeAllowence(address user) external override {\n    }  \n    \n    /**\n     * @notice Adds a user to the blacklist.\n     * @dev Only the contract owner can call this function.\n     * @param user The address of the user to add to the blacklist.\n     */\n    function addToBlackList(address user) external override {\n    }\n\n    /**\n     * @notice Removes a user from the blacklist.\n     * @dev Only the contract owner can call this function.\n     * @param user The address of the user to remove from the blacklist.\n     */\n    function removeFromBlackList(address user) external override {\n    }    \n    \n    /**\n     * @notice Allows a user to stake MCH tokens.\n     * @dev This function transfers MCH tokens from the user to the contract and updates the staking data.\n     * @param amount The amount of MCH to stake.\n     */\n    function stakeMCH(uint256 amount) external override {\n    }\n    \n    /**\n     * @notice Allows a user to unstake MCH tokens.\n     * @dev Only addresses with allowance can call this function.\n     * @param user The address of the user to unstake.\n     * @param amount The amount of MCH to unstake.\n     */\n    function unstake(address user, uint256 amount) external override {\n    }\n    \n    /**\n     * @notice Refreshes the block number for a user's staking.\n     * @dev Only addresses with allowance can call this function.\n     * @param user The address of the user.\n     */\n    function refreshBlock(address user) external override {\n    }\n    \n    /**\n     * @notice Sets the staking data for a user.\n     * @dev Only addresses with allowance can call this function.\n     * @param user The address of the user.\n     * @param staked The amount of MCH staked by the user.\n     * @param stakingBlock The block number at which the user last staked.\n     * @param stakedMCH The total amount of MCH staked in the contract.\n     */\n    function setData(address user, uint256 staked, uint256 stakingBlock, uint256 stakedMCH) external override {\n    }\n    \n    /**\n     * @notice Transfers MCH tokens to another address.\n     * @dev Only addresses with allowance can call this function. The transfer amount must not exceed the available balance.\n     * @param to The address to transfer the MCH tokens to.\n     * @param amount The amount of MCH to transfer.\n     */\n    function transferMCH(address to, uint256 amount) external override {\n    }\n    \n    /**\n     * @notice Allows the owner to withdraw MCH tokens in case of an emergency.\n     * @dev Only the contract owner can call this function.\n     * @param amount The amount of MCH to withdraw.\n     */\n    function emergencyWithdraw(uint256 amount) external override {\n    }\n}\n"
}