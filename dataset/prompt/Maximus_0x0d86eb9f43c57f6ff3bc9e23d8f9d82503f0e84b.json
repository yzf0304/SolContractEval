{
    "contract_name": "HEXToken",
    "ground_truth": "contract HEXToken {\n  function currentDay() external view returns (uint256){}\n  function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external {}\n  function approve(address spender, uint256 amount) external returns (bool) {}\n  function transfer(address recipient, uint256 amount) public returns (bool) {}\n  function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) public {}\n  function stakeCount(address stakerAddr) external view returns (uint256) {}\n}",
    "function_sum": 6,
    "compiler_version": "0.8.13",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n\n\n// Your task is to complete the smart contract HEXToken strictly based on the provided context and the contract description below. Note that the contract is deployed using compiler version 0.8.13, and you must not introduce any new contracts.\n\n/**\n * @notice HEXToken contract is designed to manage the staking, transferring, and approval of HEX tokens.\n * @dev This contract includes functions for staking, unstaking, transferring, and approving HEX tokens. \n * It also provides a way to check the current day and the number of stakes for a given address.\n */\ncontract HEXToken {\n  /**\n   * @notice Returns the current day in the context of the contract.\n   * @dev This function is useful for determining the current day, which can be used for various calculations within the contract.\n   * @return uint256 The current day.\n   */\n  function currentDay() external view returns (uint256){}\n\n  /**\n   * @notice Starts a new stake with a specified amount of HEX and duration.\n   * @dev This function allows users to stake their HEX tokens for a certain number of days. The staked amount and duration are recorded.\n   * @param newStakedHearts The amount of HEX to be staked.\n   * @param newStakedDays The number of days for which the HEX will be staked.\n   */\n  function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external {}\n\n  /**\n   * @notice Approves a spender to transfer a specified amount of HEX on behalf of the message sender.\n   * @dev This function sets the allowance for a spender, allowing them to transfer up to the specified amount of HEX.\n   * @param spender The address that will be allowed to spend the HEX.\n   * @param amount The amount of HEX that the spender is allowed to transfer.\n   * @return bool True if the approval was successful, otherwise false.\n   */\n  function approve(address spender, uint256 amount) external returns (bool) {}\n\n  /**\n   * @notice Transfers a specified amount of HEX to a recipient.\n   * @dev This function transfers HEX from the message sender to the recipient. It checks for sufficient balance and updates the balances accordingly.\n   * @param recipient The address to which the HEX will be transferred.\n   * @param amount The amount of HEX to be transferred.\n   * @return bool True if the transfer was successful, otherwise false.\n   */\n  function transfer(address recipient, uint256 amount) public returns (bool) {}\n\n  /**\n   * @notice Ends a stake by specifying the stake index and stake ID.\n   * @dev This function allows users to end a specific stake, releasing the staked HEX back to the user's balance.\n   * @param stakeIndex The index of the stake to be ended.\n   * @param stakeIdParam The ID of the stake to be ended.\n   */\n  function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) public {}\n\n  /**\n   * @notice Returns the number of stakes for a given address.\n   * @dev This function is useful for querying the number of active stakes for a specific address.\n   * @param stakerAddr The address for which to count the stakes.\n   * @return uint256 The number of stakes for the given address.\n   */\n  function stakeCount(address stakerAddr) external view returns (uint256) {}\n}\n"
}