{
    "contract_name": "MoneroGold",
    "ground_truth": "contract MoneroGold {\n\n\n\n    string public name = \"Monero Gold\";      //  token name\n\n    string public symbol = \"XMRG\";           //  token symbol\n\n    uint256 public decimals = 8;            //  token digit\n\n\n\n    mapping (address => uint256) public balanceOf;\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n\n\n    uint256 public totalSupply = 21000000 * (10**decimals);\n\n    address public owner;\n\n\n\n    modifier isOwner {\n\n        assert(owner == msg.sender);\n\n        _;\n\n    }\n\n    function MoneroGold() {\n\n        owner = msg.sender;\n\n        balanceOf[owner] = totalSupply;\n\n    }\n\n\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n\n        require(balanceOf[msg.sender] >= _value);\n\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        balanceOf[msg.sender] -= _value;\n\n        balanceOf[_to] += _value;\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n\n    }\n\n\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\n        require(balanceOf[_from] >= _value);\n\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        require(allowance[_from][msg.sender] >= _value);\n\n        balanceOf[_to] += _value;\n\n        balanceOf[_from] -= _value;\n\n        allowance[_from][msg.sender] -= _value;\n\n        Transfer(_from, _to, _value);\n\n        return true;\n\n    }\n\n\n\n    function approve(address _spender, uint256 _value) returns (bool success)\n\n    {\n\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n\n        allowance[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n\n    }\n\n    \n\n    function setName(string _name) isOwner \n\n    {\n\n        name = _name;\n\n    }\n\n    function burnSupply(uint256 _amount) isOwner\n\n    {\n\n        balanceOf[owner] -= _amount;\n\n        SupplyBurn(_amount);\n\n    }\n\n    function burnTotalSupply(uint256 _amount) isOwner\n\n    {\n\n        totalSupply-= _amount;\n\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event SupplyBurn(uint256 _amount);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}",
    "function_sum": 7,
    "compiler_version": "0.4.18",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n\n\n// You task is to complete the smart contract MoneroGold strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.18, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title MoneroGold\n * @notice A simple ERC20-like token contract for Monero Gold (XMRG).\n * @dev This contract includes basic token functionalities such as transfer, transferFrom, and approve.\n * It also includes owner-specific functions to set the token name and burn tokens.\n */\ncontract MoneroGold {\n\n    string public name = \"Monero Gold\";      //  token name\n    string public symbol = \"XMRG\";           //  token symbol\n    uint256 public decimals = 8;            //  token digit\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 21000000 * (10**decimals);\n    address public owner;\n\n    /**\n     * @notice Modifier to ensure that only the owner can call certain functions.\n     * @dev This modifier checks if the caller is the owner of the contract.\n     */\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract and assigns the total supply to the contract owner.\n     * @dev The constructor sets the owner and assigns the total supply to the owner's balance.\n     */\n    function MoneroGold() {\n        owner = msg.sender;\n        balanceOf[owner] = totalSupply;\n    }\n\n    /**\n     * @notice Transfers a specified amount of tokens from the sender to the recipient.\n     * @param _to The address of the recipient.\n     * @param _value The amount of tokens to transfer.\n     * @return success True if the transfer is successful, false otherwise.\n     * @dev This function checks for sufficient balance and updates the balances accordingly.\n     * Emit Transfer event\n     */\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n\n    /**\n     * @notice Transfers a specified amount of tokens from one address to another, using an allowance.\n     * @param _from The address to transfer tokens from.\n     * @param _to The address to transfer tokens to.\n     * @param _value The amount of tokens to transfer.\n     * @return success True if the transfer is successful, false otherwise.\n     * @dev This function checks for sufficient balance and allowance, then updates the balances and allowances.\n     * Emit Transfer event\n     */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n    /**\n     * @notice Allows the message sender to set an allowance for a spender.\n     * @param _spender The address of the spender.\n     * @param _value The amount of tokens to allow the spender to spend.\n     * @return success True if the approval is successful, false otherwise.\n     * @dev This function ensures that the allowance is either zero or the spender has no existing allowance.\n     * Emit Approval event\n     */\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n\n    /**\n     * @notice Sets the token name.\n     * @param _name The new name of the token.\n     * @dev This function can only be called by the contract owner.\n     */\n    function setName(string _name) isOwner {}\n\n    /**\n     * @notice Burns a specified amount of tokens from the owner's balance.\n     * @param _amount The amount of tokens to burn.\n     * @dev This function can only be called by the contract owner and reduces the owner's balance.\n     * Emit SupplyBurn event\n     */\n    function burnSupply(uint256 _amount) isOwner {}\n\n    /**\n     * @notice Burns a specified amount of tokens from the total supply.\n     * @param _amount The amount of tokens to burn from the total supply.\n     * @dev This function can only be called by the contract owner and reduces the total supply.\n     */\n    function burnTotalSupply(uint256 _amount) isOwner {}\n\n    /**\n     * @dev Event emitted when tokens are transferred.\n     * @param _from The address of the sender.\n     * @param _to The address of the recipient.\n     * @param _value The amount of tokens transferred.\n     */\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    /**\n     * @dev Event emitted when tokens are burned.\n     * @param _amount The amount of tokens burned.\n     */\n    event SupplyBurn(uint256 _amount);\n\n    /**\n     * @dev Event emitted when an allowance is approved.\n     * @param _owner The address of the token owner.\n     * @param _spender The address of the spender.\n     * @param _value The amount of tokens allowed to spend.\n     */\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n"
}