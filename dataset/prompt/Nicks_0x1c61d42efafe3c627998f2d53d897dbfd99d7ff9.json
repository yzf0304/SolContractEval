{
    "contract_name": "Nicks",
    "ground_truth": "contract Nicks {\n\n  mapping (address => string) private nickOfOwner;\n\n  mapping (string => address) private ownerOfNick;\n\n\n\n  event Set (string indexed _nick, address indexed _owner);\n\n  event Unset (string indexed _nick, address indexed _owner);\n\n\n\n  function Nicks () public {\n\n  }\n\n\n\n  function nickOf (address _owner) public view returns (string _nick) {\n\n    return nickOfOwner[_owner];\n\n  }\n\n\n\n  function ownerOf (string _nick) public view returns (address _owner) {\n\n    return ownerOfNick[_nick];\n\n  }\n\n\n\n  function set (string _nick) public {\n\n    require(bytes(_nick).length > 2);\n\n    require(ownerOf(_nick) == address(0));\n\n\n\n    address owner = msg.sender;\n\n    string storage oldNick = nickOfOwner[owner];\n\n\n\n    if (bytes(oldNick).length > 0) {\n\n      Unset(oldNick, owner);\n\n      delete ownerOfNick[oldNick];\n\n    }\n\n\n\n    nickOfOwner[owner] = _nick;\n\n    ownerOfNick[_nick] = owner;\n\n    Set(_nick, owner);\n\n  }\n\n\n\n  function unset () public {\n\n    require(bytes(nickOfOwner[msg.sender]).length > 0);\n\n\n\n    address owner = msg.sender;\n\n    string storage oldNick = nickOfOwner[owner];\n\n\n\n    Unset(oldNick, owner);\n\n\n\n    delete ownerOfNick[oldNick];\n\n    delete nickOfOwner[owner];\n\n  }\n\n}",
    "function_sum": 5,
    "compiler_version": "0.4.20",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n\n\n// You task is to complete the smart contract Nicks strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.20, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title Nicks\n * @notice A contract that allows users to set and unset unique nicknames. Each nickname is linked to a single Ethereum address.\n * @dev The contract ensures that each nickname is unique and can only be owned by one address at a time.\n */\ncontract Nicks {\n\n  mapping (address => string) private nickOfOwner;\n  mapping (string => address) private ownerOfNick;\n\n  event Set (string indexed _nick, address indexed _owner);\n  event Unset (string indexed _nick, address indexed _owner);\n\n  /**\n   * @notice Initializes the contract.\n   * @dev The constructor does not perform any specific initialization in this contract.\n   */\n  function Nicks () public {\n    // empty\n  }\n\n  /**\n   * @notice Retrieves the nickname associated with a given address.\n   * @param _owner The Ethereum address of the user.\n   * @return _nick The nickname associated with the address.\n   * @dev If the address has no nickname, an empty string will be returned.\n   */\n  function nickOf (address _owner) public view returns (string _nick) {}\n\n  /**\n   * @notice Retrieves the address associated with a given nickname.\n   * @param _nick The nickname to look up.\n   * @return _owner The Ethereum address associated with the nickname.\n   * @dev If the nickname is not set, the zero address will be returned.\n   */\n  function ownerOf (string _nick) public view returns (address _owner) {}\n\n  /**\n   * @notice Sets a new nickname for the sender's address.\n   * @param _nick The new nickname to set.\n   * @dev The nickname must be more than 2 characters long and must not already be in use.\n   *      If the sender already has a nickname, it will be unset before setting the new one.\n   *      Emits a `Set` event on successful nickname assignment.\n   */\n  function set (string _nick) public {}\n\n  /**\n   * @notice Unsets the current nickname for the sender's address.\n   * @dev The sender must have a nickname set to call this function.\n   *      Emits an `Unset` event on successful unsetting of the nickname.\n   */\n  function unset () public {}\n\n  /**\n   * @notice Fallback function to handle receiving Ether.\n   * @dev This function is left empty as the contract does not handle Ether.\n   */\n  receive() external payable {}\n}\n"
}