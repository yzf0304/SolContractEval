{
    "contract_name": "OMNIDOORS",
    "ground_truth": "contract OMNIDOORS is Ownable, ERC721, NonblockingReceiver {\n    address public _owner;\n    string private baseURI;\n    uint256 nextTokenId = 5900;\n    uint256 MAX_NETWORK_MINT = 9300;\n\n    uint256 gasForDestinationLzReceive = 350000;\n\n    constructor(string memory baseURI_, address _layerZeroEndpoint)\n        ERC721(\"Omni Doors\", \"odoors\")\n    {\n        _owner = msg.sender;\n        endpoint = ILayerZeroEndpoint(_layerZeroEndpoint);\n        baseURI = baseURI_;\n        for (uint256 i = 0; i < 330; i++) {\n            _safeMint(_owner, ++nextTokenId);\n        }\n    }\n\n    function mint(uint8 numTokens) external payable {\n        require(numTokens < 2, \"OMNI DOORS: Max 1 NFTs per transaction\");\n        require(\n            nextTokenId + numTokens <= MAX_NETWORK_MINT,\n            \"OMNI DOORS: Mint exceeds supply for this network\"\n        );\n\tfor (uint8 i = 0; i < numTokens; i++) {\n            _safeMint(msg.sender, ++nextTokenId);\n\t}\n    }\n\n    function traverseChains(uint16 _chainId, uint256 tokenId) public payable {\n        require(\n            msg.sender == ownerOf(tokenId),\n            \"You must own the token to traverse\"\n        );\n        require(\n            trustedRemoteLookup[_chainId].length > 0,\n            \"This chain is currently unavailable for travel\"\n        );\n\n        // burn NFT, eliminating it from circulation on src chain\n        _burn(tokenId);\n\n        // abi.encode() the payload with the values to send\n        bytes memory payload = abi.encode(msg.sender, tokenId);\n\n        // encode adapterParams to specify more gas for the destination\n        uint16 version = 1;\n        bytes memory adapterParams = abi.encodePacked(\n            version,\n            gasForDestinationLzReceive\n        );\n\n        // get the fees we need to pay to LayerZero + Relayer to cover message delivery\n        // you will be refunded for extra gas paid\n        (uint256 messageFee, ) = endpoint.estimateFees(\n            _chainId,\n            address(this),\n            payload,\n            false,\n            adapterParams\n        );\n\n        require(\n            msg.value >= messageFee,\n            \"OMNI DOORS: msg.value not enough to cover messageFee. Send gas for message fees\"\n        );\n\n        endpoint.send{value: msg.value}(\n            _chainId, // destination chainId\n            trustedRemoteLookup[_chainId], // destination address of nft contract\n            payload, // abi.encoded()'ed bytes\n            payable(msg.sender), // refund address\n            address(0x0), // 'zroPaymentAddress' unused for this\n            adapterParams // txParameters\n        );\n    }\n\n    function setBaseURI(string memory URI) external onlyOwner {\n        baseURI = URI;\n    }\n\n    function donate() external payable {\n    }\n\n    function withdraw(uint256 amt) external onlyOwner {\n        (bool sent, ) = payable(_owner).call{value: amt}(\"\");\n        require(sent, \"OMNI DOORS: Failed to withdraw funds\");\n    }\n\n    function setGasForDestinationLzReceive(uint256 newVal) external onlyOwner {\n        gasForDestinationLzReceive = newVal;\n    }\n\n    function _LzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal override {\n        // decode\n        (address toAddr, uint256 tokenId) = abi.decode(\n            _payload,\n            (address, uint256)\n        );\n\n        // mint the tokens back into existence on destination chain\n        _safeMint(toAddr, tokenId);\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return baseURI;\n    }\n}",
    "function_sum": 8,
    "compiler_version": "0.8.7",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(\n        uint16 _dstChainId,\n        bytes calldata _destination,\n        bytes calldata _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint64 _nonce,\n        uint256 _gasLimit,\n        bytes calldata _payload\n    ) external;\n\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress)\n        external\n        view\n        returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress)\n        external\n        view\n        returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(\n        uint16 _dstChainId,\n        address _userApplication,\n        bytes calldata _payload,\n        bool _payInZRO,\n        bytes calldata _adapterParam\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        bytes calldata _payload\n    ) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress)\n        external\n        view\n        returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication)\n        external\n        view\n        returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication)\n        external\n        view\n        returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address _userApplication,\n        uint256 _configType\n    ) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication)\n        external\n        view\n        returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication)\n        external\n        view\n        returns (uint16);\n}\n\ninterface ILayerZeroReceiver {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external;\n}\n\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ninterface IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\ninterface IERC165 {\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\nabstract contract ERC165 is IERC165 {\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\ninterface IERC721 is IERC165 {\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function approve(address to, uint256 tokenId) external;\n\n    function getApproved(uint256 tokenId)\n        external\n        view\n        returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\ninterface IERC721Metadata is IERC721 {\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function balanceOf(address owner)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(\n            owner != address(0),\n            \"ERC721: balance query for the zero address\"\n        );\n        return _balances[owner];\n    }\n\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        address owner = _owners[tokenId];\n        require(\n            owner != address(0),\n            \"ERC721: owner query for nonexistent token\"\n        );\n        return owner;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n    }\n\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    function getApproved(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: approved query for nonexistent token\"\n        );\n\n        return _tokenApprovals[tokenId];\n    }\n\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: operator query for nonexistent token\"\n        );\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(\n            ERC721.ownerOf(tokenId) == from,\n            \"ERC721: transfer of token that is not own\"\n        );\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    _msgSender(),\n                    from,\n                    tokenId,\n                    _data\n                )\n            returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\n                    );\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\nabstract contract NonblockingReceiver is Ownable, ILayerZeroReceiver {\n    ILayerZeroEndpoint internal endpoint;\n\n    struct FailedMessages {\n        uint256 payloadLength;\n        bytes32 payloadHash;\n    }\n\n    mapping(uint16 => mapping(bytes => mapping(uint256 => FailedMessages)))\n        public failedMessages;\n    mapping(uint16 => bytes) public trustedRemoteLookup;\n\n    event MessageFailed(\n        uint16 _srcChainId,\n        bytes _srcAddress,\n        uint64 _nonce,\n        bytes _payload\n    );\n\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) external override {\n        require(msg.sender == address(endpoint)); // boilerplate! lzReceive must be called by the endpoint for security\n        require(\n            _srcAddress.length == trustedRemoteLookup[_srcChainId].length &&\n                keccak256(_srcAddress) ==\n                keccak256(trustedRemoteLookup[_srcChainId]),\n            \"NonblockingReceiver: invalid source sending contract\"\n        );\n\n        // try-catch all errors/exceptions\n        // having failed messages does not block messages passing\n        try this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\n            // do nothing\n        } catch {\n            // error / exception\n            failedMessages[_srcChainId][_srcAddress][_nonce] = FailedMessages(\n                _payload.length,\n                keccak256(_payload)\n            );\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\n        }\n    }\n\n    function onLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) public {\n        // only internal transaction\n        require(\n            msg.sender == address(this),\n            \"NonblockingReceiver: caller must be Bridge.\"\n        );\n\n        // handle incoming message\n        _LzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    // abstract function\n    function _LzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual;\n\n    function _lzSend(\n        uint16 _dstChainId,\n        bytes memory _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _txParam\n    ) internal {\n        endpoint.send{value: msg.value}(\n            _dstChainId,\n            trustedRemoteLookup[_dstChainId],\n            _payload,\n            _refundAddress,\n            _zroPaymentAddress,\n            _txParam\n        );\n    }\n\n    function retryMessage(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external payable {\n        // assert there is message to retry\n        FailedMessages storage failedMsg = failedMessages[_srcChainId][\n            _srcAddress\n        ][_nonce];\n        require(\n            failedMsg.payloadHash != bytes32(0),\n            \"NonblockingReceiver: no stored message\"\n        );\n        require(\n            _payload.length == failedMsg.payloadLength &&\n                keccak256(_payload) == failedMsg.payloadHash,\n            \"LayerZero: invalid payload\"\n        );\n        // clear the stored message\n        failedMsg.payloadLength = 0;\n        failedMsg.payloadHash = bytes32(0);\n        // execute the message. revert if it fails again\n        this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    function setTrustedRemote(uint16 _chainId, bytes calldata _trustedRemote)\n        external\n        onlyOwner\n    {\n        trustedRemoteLookup[_chainId] = _trustedRemote;\n    }\n}\n\n\n\n// You task is to complete the smart contract OMNIDOORS strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.8.7, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title OMNIDOORS\n * @notice This contract is an ERC721 token that allows minting, burning, and traversing NFTs across different chains using LayerZero.\n * @dev The contract uses the Ownable, ERC721, and NonblockingReceiver patterns. It also includes functionality for setting base URI, donating, and withdrawing funds.\n */\ncontract OMNIDOORS is Ownable, ERC721, NonblockingReceiver {\n    address public _owner;\n    string private baseURI;\n    uint256 nextTokenId = 5900;\n    uint256 MAX_NETWORK_MINT = 9300;\n\n    uint256 gasForDestinationLzReceive = 350000;\n\n    /**\n     * @notice Initializes the contract with the provided base URI and LayerZero endpoint.\n     * @dev Mints 330 tokens to the contract owner upon deployment.\n     * @param baseURI_ The base URI for the NFTs.\n     * @param _layerZeroEndpoint The LayerZero endpoint address.\n     */\n    constructor(string memory baseURI_, address _layerZeroEndpoint)\n        ERC721(\"Omni Doors\", \"odoors\")\n    {\n        _owner = msg.sender;\n        endpoint = ILayerZeroEndpoint(_layerZeroEndpoint);\n        baseURI = baseURI_;\n        for (uint256 i = 0; i < 330; i++) {\n            _safeMint(_owner, ++nextTokenId);\n        }\n    }\n\n    /**\n     * @notice Allows users to mint up to one NFT per transaction.\n     * @dev Checks if the number of tokens to mint does not exceed the maximum allowed per transaction and the total supply limit.\n     * @param numTokens The number of tokens to mint (must be 1).\n     */\n    function mint(uint8 numTokens) external payable {}\n\n    /**\n     * @dev Transfers an NFT to another chain via LayerZero.\n     * Requirements\n     * - Caller must be the NFT owner\n     * - Destination chain must be available in trustedRemoteLookup\n     * Process\n     * 1. Verifies ownership and chain availability\n     * 2. Burns the NFT on source chain\n     * 3. Prepares payload with sender and token ID\n     * 4. Sets adapter parameters for gas requirements\n     * 5. Estimates message fees (refundable excess)\n     * 6. Sends cross-chain message with payment\n     * @param _chainId Destination chain ID\n     * @param tokenId ID of the NFT to transfer\n     * @notice Emits Transfer event when burning the NFT\n     * @dev\n     * - Uses LayerZero endpoint for cross-chain messaging\n     * - msg.value covers message delivery fees\n     * - Refunds unused gas sent with msg.value\n     * - Requires trustedRemoteLookup[_chainId] to be set\n     */\n    function traverseChains(uint16 _chainId, uint256 tokenId) public payable {}\n\n    /**\n     * @notice Allows the contract owner to set the base URI for the NFTs.\n     * @dev Only the contract owner can call this function.\n     * @param URI The new base URI.\n     */\n    function setBaseURI(string memory URI) external onlyOwner {}\n\n    /**\n     * @notice Allows anyone to donate ETH to the contract.\n     * @dev This function is payable and can receive ETH.\n     */\n    function donate() external payable {}\n\n    /**\n     * @notice Allows the contract owner to withdraw a specified amount of ETH from the contract.\n     * @dev Only the contract owner can call this function.\n     * @param amt The amount of ETH to withdraw.\n     */\n    function withdraw(uint256 amt) external onlyOwner {}\n\n    /**\n     * @notice Allows the contract owner to set the gas for the destination LayerZero receive function.\n     * @dev Only the contract owner can call this function.\n     * @param newVal The new gas value.\n     */\n    function setGasForDestinationLzReceive(uint256 newVal) external onlyOwner {}\n\n    /**\n     * @notice Internal function to handle LayerZero messages.\n     * @dev Decodes the payload and mints the NFT on the destination chain.\n     * @param _srcChainId The source chain ID.\n     * @param _srcAddress The source address.\n     * @param _nonce The nonce of the message.\n     * @param _payload The encoded payload.\n     */\n    function _LzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal override {}\n\n    /**\n     * @notice Returns the base URI for the NFTs.\n     * @dev Overrides the _baseURI function from ERC721.\n     * @return The base URI.\n     */\n    function _baseURI() internal view override returns (string memory) {}\n}\n"
}