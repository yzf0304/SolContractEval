{
    "contract_name": "Data",
    "ground_truth": "contract Data is Ownable {\n\n    // node => its parent\n    mapping (address => address) private parent;\n\n    // node => its status\n    mapping (address => uint8) public statuses;\n\n    // node => sum of all his child deposits in USD cents\n    mapping (address => uint) public referralDeposits;\n\n    // client => balance in wei*10^(-6) available for withdrawal\n    mapping(address => uint256) private balances;\n\n    // investor => balance in wei*10^(-6) available for withdrawal\n    mapping(address => uint256) private investorBalances;\n\n    function parentOf(address _addr) public constant returns (address) {\n        return parent[_addr];\n    }\n\n    function balanceOf(address _addr) public constant returns (uint256) {\n        return balances[_addr] / 1000000;\n    }\n\n    function investorBalanceOf(address _addr) public constant returns (uint256) {\n        return investorBalances[_addr] / 1000000;\n    }\n\n    /**\n     * @dev The Data constructor to set up the first depositer\n     */\n    function Data() public {\n        // DirectorOfRegion - 7\n        statuses[msg.sender] = 7;\n    }\n\n    function addBalance(address _addr, uint256 amount) onlyOwner public {\n        balances[_addr] += amount;\n    }\n\n    function subtrBalance(address _addr, uint256 amount) onlyOwner public {\n        require(balances[_addr] >= amount);\n        balances[_addr] -= amount;\n    }\n\n    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n        investorBalances[_addr] += amount;\n    }\n\n    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n        require(investorBalances[_addr] >= amount);\n        investorBalances[_addr] -= amount;\n    }\n\n    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {\n        referralDeposits[_addr] += amount;\n    }\n\n    function setStatus(address _addr, uint8 _status) onlyOwner public {\n        statuses[_addr] = _status;\n    }\n\n    function setParent(address _addr, address _parent) onlyOwner public {\n        parent[_addr] = _parent;\n    }\n\n}",
    "function_sum": 11,
    "compiler_version": "0.4.19",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\ncontract Ownable {\n\n    /**\n     * @dev set `owner` of the contract to the sender\n     */\n    address public owner = msg.sender;\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n}\n\n\n\n// You task is to complete the smart contract Data strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.19, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title Data\n * @notice A contract for managing a hierarchical structure of nodes, their statuses, and balances.\n * @dev This contract allows the owner to manage the status, parent, and balance of each node. It also provides functions to get the parent, balance, and investor balance of a node.\n */\ncontract Data is Ownable {\n\n    // node => its parent\n    mapping (address => address) private parent;\n\n    // node => its status\n    mapping (address => uint8) public statuses;\n\n    // node => sum of all his child deposits in USD cents\n    mapping (address => uint) public referralDeposits;\n\n    // client => balance in wei*10^(-6) available for withdrawal\n    mapping(address => uint256) private balances;\n\n    // investor => balance in wei*10^(-6) available for withdrawal\n    mapping(address => uint256) private investorBalances;\n\n    /**\n     * @notice Returns the parent of a given node.\n     * @param _addr The address of the node.\n     * @return The address of the parent node.\n     */\n    function parentOf(address _addr) public constant returns (address) {}\n\n    /**\n     * @notice Returns the balance of a given node in wei.\n     * @param _addr The address of the node.\n     * @return The balance of the node in wei.\n     */\n    function balanceOf(address _addr) public constant returns (uint256) {}\n\n    /**\n     * @notice Returns the investor balance of a given node in wei.\n     * @param _addr The address of the node.\n     * @return The investor balance of the node in wei.\n     */\n    function investorBalanceOf(address _addr) public constant returns (uint256) {}\n\n    /**\n     * @dev The Data constructor to set up the first depositer with a specific status.\n     */\n    function Data() public {\n        // DirectorOfRegion - 7\n        statuses[msg.sender] = 7;\n    }\n\n    /**\n     * @notice Adds a specified amount to the balance of a given node.\n     * @dev Only the contract owner can call this function.\n     * @param _addr The address of the node.\n     * @param amount The amount to add to the balance.\n     */\n    function addBalance(address _addr, uint256 amount) onlyOwner public {}\n\n    /**\n     * @notice Subtracts a specified amount from the balance of a given node.\n     * @dev Only the contract owner can call this function. Requires the balance to be sufficient.\n     * @param _addr The address of the node.\n     * @param amount The amount to subtract from the balance.\n     */\n    function subtrBalance(address _addr, uint256 amount) onlyOwner public {}\n\n    /**\n     * @notice Adds a specified amount to the investor balance of a given node.\n     * @dev Only the contract owner can call this function.\n     * @param _addr The address of the node.\n     * @param amount The amount to add to the investor balance.\n     */\n    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {}\n\n    /**\n     * @notice Subtracts a specified amount from the investor balance of a given node.\n     * @dev Only the contract owner can call this function. Requires the investor balance to be sufficient.\n     * @param _addr The address of the node.\n     * @param amount The amount to subtract from the investor balance.\n     */\n    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {}\n\n    /**\n     * @notice Adds a specified amount to the referral deposit of a given node.\n     * @dev Only the contract owner can call this function.\n     * @param _addr The address of the node.\n     * @param amount The amount to add to the referral deposit.\n     */\n    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {}\n\n    /**\n     * @notice Sets the status of a given node.\n     * @dev Only the contract owner can call this function.\n     * @param _addr The address of the node.\n     * @param _status The new status to set.\n     */\n    function setStatus(address _addr, uint8 _status) onlyOwner public {}\n\n    /**\n     * @notice Sets the parent of a given node.\n     * @dev Only the contract owner can call this function.\n     * @param _addr The address of the node.\n     * @param _parent The address of the new parent node.\n     */\n    function setParent(address _addr, address _parent) onlyOwner public {}\n}\n"
}