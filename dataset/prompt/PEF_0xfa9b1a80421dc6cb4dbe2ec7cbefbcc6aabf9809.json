{
    "contract_name": "owned",
    "ground_truth": "contract owned {\n\n    address public owner;\n\n    address public ownerCandidate;\n\n\n\n    function owned() public {\n\n        owner = msg.sender;\n\n    }\n\n\n\n    modifier onlyOwner {\n\n        assert(owner == msg.sender);\n\n        _;\n\n    }\n\n\n\n    modifier onlyOwnerCandidate() {\n\n        assert(msg.sender == ownerCandidate);\n\n        _;\n\n    }\n\n\n\n    function transferOwnership(address candidate) external onlyOwner {\n\n        ownerCandidate = candidate;\n\n    }\n\n\n\n    function acceptOwnership() external onlyOwnerCandidate {\n\n        owner = ownerCandidate;\n\n        ownerCandidate = 0x0;\n\n    }\n\n}",
    "function_sum": 3,
    "compiler_version": "0.4.18",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n\n\n// You task is to complete the smart contract owned strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.18, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @notice This contract provides basic ownership control functionality. It allows for the transfer of ownership through a two-step process: nomination and acceptance.\n * @dev The contract includes a modifier `onlyOwner` to restrict certain functions to the current owner, and `onlyOwnerCandidate` to restrict certain functions to the nominated owner candidate.\n */\ncontract owned {\n\n    address public owner;\n\n    address public ownerCandidate;\n\n    /**\n     * @notice Initializes the contract setting the deployer as the initial owner.\n     * @dev The constructor sets the `owner` to the address that deploys the contract.\n     */\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Modifier to check that the caller is the current owner of the contract.\n     * @dev Reverts if the caller is not the owner.\n     */\n    modifier onlyOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    /**\n     * @dev Modifier to check that the caller is the current owner candidate.\n     * @dev Reverts if the caller is not the owner candidate.\n     */\n    modifier onlyOwnerCandidate() {\n        assert(msg.sender == ownerCandidate);\n        _;\n    }\n\n    /**\n     * @notice Allows the current owner to nominate a new owner candidate.\n     * @dev Only the current owner can call this function.\n     * @param candidate The address of the new owner candidate.\n     */\n    function transferOwnership(address candidate) external onlyOwner {}\n\n    /**\n     * @notice Allows the nominated owner candidate to accept the ownership.\n     * @dev Only the nominated owner candidate can call this function.\n     * @dev After the ownership is accepted, the `owner` is set to the `ownerCandidate`, and `ownerCandidate` is reset to 0x0.\n     */\n    function acceptOwnership() external onlyOwnerCandidate {}\n}\n"
}