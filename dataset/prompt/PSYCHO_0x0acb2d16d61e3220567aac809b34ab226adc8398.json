{
    "contract_name": "PSYCHO",
    "ground_truth": "contract PSYCHO is Ownable, ERC721A {\n    uint256 public maxSupply                    = 8888;\n    uint256 public maxFreeSupply                = 8888;\n    uint256 public maxPerTxDuringMint           = 20;\n    uint256 public maxPerAddressDuringMint      = 21;\n    uint256 public maxPerAddressDuringFreeMint  = 1;\n    uint256 public price                        = 0.003 ether;\n    bool    public saleIsActive                 = true;\n    bool    public revealed                     = false;\n\n    address constant internal TEAM_ADDRESS = 0x06C8033719b4fa22DE97d4632b4120D2F429c538;\n    string public baseURI = \"\";\n    string public constant baseExtension = \"\";\n    string public hiddenMetadataUri;\n    mapping(address => uint256) public freeMintedAmount;\n    mapping(address => uint256) public mintedAmount;\n    constructor() ERC721A(\"PSYCHO\", \"PSYCHO\") {_safeMint(msg.sender, 1); setHiddenMetadataUri(\"https://gateway.pinata.cloud/ipfs/QmcJ9dJMmgNiUD9oSASjgxhbuqam7y2WVSxDKLuX3GFyz5\");}\n    \n    modifier mintCompliance() {require(saleIsActive, \"Sale is not active yet.\"); require(tx.origin == msg.sender, \"Wrong Caller\"); _;}\n    function mint(uint256 _quantity) external payable mintCompliance() {require (msg.value >= price * _quantity, \"GDZ: Insufficient Fund.\");\n        require(maxSupply >= totalSupply() + _quantity, \"GDZ: Exceeds max supply.\"); uint256 _mintedAmount = mintedAmount[msg.sender];\n        require(_mintedAmount + _quantity <= maxPerAddressDuringMint, \"GDZ: Exceeds max mints per address!\");\n        require(_quantity > 0 && _quantity <= maxPerTxDuringMint, \"Invalid mint amount.\"); mintedAmount[msg.sender] = _mintedAmount + _quantity; _safeMint(msg.sender, _quantity);}\n    function freeMint(uint256 _quantity) external mintCompliance() {\n        require(maxFreeSupply >= totalSupply() + _quantity, \"GDZ: Exceeds max supply.\"); uint256 _freeMintedAmount = freeMintedAmount[msg.sender];\n        require(_freeMintedAmount + _quantity <= maxPerAddressDuringFreeMint, \"GDZ: Exceeds max free mints per address!\"); freeMintedAmount[msg.sender] = _freeMintedAmount + _quantity; _safeMint(msg.sender, _quantity);}\n    function setPrice(uint256 _price) external onlyOwner {price = _price;}\n    function setMaxPerTx(uint256 _amount) external onlyOwner {maxPerTxDuringMint = _amount;}\n    function setMaxPerAddress(uint256 _amount) external onlyOwner {maxPerAddressDuringMint = _amount;}\n    function setMaxFreePerAddress(uint256 _amount) external onlyOwner {maxPerAddressDuringFreeMint = _amount;}\n    function flipSale() public onlyOwner {saleIsActive = !saleIsActive;}\n    function setMaxSupply(uint256 newSupply) public onlyOwner {maxSupply = newSupply;}\n    function cutMaxSupply(uint256 _amount) public onlyOwner {require(maxSupply - _amount >= totalSupply(), \"Supply cannot fall below minted tokens.\"); maxSupply -= _amount;}\n    function setRevealed(bool _state) public onlyOwner {revealed = _state;}\n    function setBaseURI(string memory baseURI_) external onlyOwner {baseURI = baseURI_;}\n    function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {hiddenMetadataUri = _hiddenMetadataUri;}\n    function _baseURI() internal view virtual override returns (string memory) {return baseURI;}\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) \n        {require(_exists(_tokenId), \"Token does not exist.\"); if (revealed == false) {return hiddenMetadataUri;} \n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, Strings.toString(_tokenId), baseExtension)) : \"\";}\n    function withdrawBalance() external payable onlyOwner {(bool success, ) = payable(TEAM_ADDRESS).call{value: address(this).balance} (\"\"); require(success, \"transfer failed.\");}}",
    "function_sum": 15,
    "compiler_version": "0.8.13",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n/**\n *Submitted for verification at Etherscan.io on 2022-06-09\n*/\n// \u5c38\u4e02\u311a\u2f15\u5efe\u9fb1\n// SPDX-License-Identifier: MIT\n// File: contracts/psychonft.sol\n// File: @openzeppelin/contracts/utils/Context.sol\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\n    function _msgData() internal view virtual returns (bytes calldata) {return msg.data;}}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\nabstract contract Ownable is Context {address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    constructor() {_transferOwnership(_msgSender());}\n    function owner() public view virtual returns (address) {return _owner;}\n    modifier onlyOwner() {require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); _;}\n    function renounceOwnership() public virtual onlyOwner {_transferOwnership(address(0));}\n    function transferOwnership(address newOwner) public virtual onlyOwner {require(newOwner != address(0), \"Ownable: new owner is the zero address\"); _transferOwnership(newOwner);}\n    function _transferOwnership(address newOwner) internal virtual {address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner);}}\n\n// File @openzeppelin/contracts/utils/[email\u00a0protected]\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    function toString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {return \"0\";} uint256 temp = value; uint256 digits; while (temp != 0) {digits++; temp /= 10;} bytes memory buffer = new bytes(digits);\n        while (value != 0) {digits -= 1; buffer[digits] = bytes1(uint8(48 + uint256(value % 10))); value /= 10;} return string(buffer);}\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {return \"0x00\";} uint256 temp = value; uint256 length = 0; while (temp != 0) {length++; temp >>= 8;} return toHexString(value, length);}\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {bytes memory buffer = new bytes(2 * length + 2); buffer[0] = \"0\"; buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {buffer[i] = _HEX_SYMBOLS[value & 0xf]; value >>= 4;} require(value == 0, \"Strings: hex length insufficient\"); return string(buffer);}}\n\n// File: erc721a/contracts/IERC721A.sol\n// ERC721A Contracts v4.0.0\n\ninterface IERC721A {error ApprovalCallerNotOwnerNorApproved();\n    error ApprovalQueryForNonexistentToken();\n    error ApproveToCaller();\n    error ApprovalToCurrentOwner();\n    error BalanceQueryForZeroAddress();\n    error MintToZeroAddress();\n    error MintZeroQuantity();\n    error OwnerQueryForNonexistentToken();\n    error TransferCallerNotOwnerNorApproved();\n    error TransferFromIncorrectOwner();\n    error TransferToNonERC721ReceiverImplementer();\n    error TransferToZeroAddress();\n    error URIQueryForNonexistentToken();\n    struct TokenOwnership {address addr; uint64 startTimestamp; bool burned;}\n    function totalSupply() external view returns (uint256);\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    function approve(address to, uint256 tokenId) external;\n    function setApprovalForAll(address operator, bool _approved) external;\n    function getApproved(uint256 tokenId) external view returns (address operator);\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);}\n\n// File: erc721a/contracts/ERC721A.sol\n// ERC721A Contracts v4.0.0\n\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);}\n\ncontract ERC721A is IERC721A {\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\n    uint256 private constant BITPOS_AUX = 192;\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\n    uint256 private constant BITMASK_BURNED = 1 << 224;\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\n    uint256 private _currentIndex;\n    uint256 private _burnCounter;\n    string private _name;\n    string private _symbol;\n    mapping(uint256 => uint256) private _packedOwnerships;\n    mapping(address => uint256) private _packedAddressData;\n    mapping(uint256 => address) private _tokenApprovals;\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n    constructor(string memory name_, string memory symbol_) {_name = name_; _symbol = symbol_; _currentIndex = _startTokenId();}\n    function _startTokenId() internal view virtual returns (uint256) {return 1;}\n    function _nextTokenId() internal view returns (uint256) {return _currentIndex;}\n    function totalSupply() public view override returns (uint256) {unchecked {return _currentIndex - _burnCounter - _startTokenId();}}\n    function _totalMinted() internal view returns (uint256) {unchecked {return _currentIndex - _startTokenId();}}\n    function _totalBurned() internal view returns (uint256) {return _burnCounter;}\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {return interfaceId == 0x01ffc9a7 || interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;}\n    function balanceOf(address owner) public view override returns (uint256) {if (owner == address(0)) revert BalanceQueryForZeroAddress(); return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;}\n    function _numberMinted(address owner) internal view returns (uint256) {return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;}\n    function _numberBurned(address owner) internal view returns (uint256) {return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;}\n    function _getAux(address owner) internal view returns (uint64) {return uint64(_packedAddressData[owner] >> BITPOS_AUX);}\n    function _setAux(address owner, uint64 aux) internal {uint256 packed = _packedAddressData[owner]; uint256 auxCasted; assembly {auxCasted := aux}\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);_packedAddressData[owner] = packed;}\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {uint256 curr = tokenId; unchecked {\n        if (_startTokenId() <= curr) \n        if (curr < _currentIndex) {uint256 packed = _packedOwnerships[curr]; \n        if (packed & BITMASK_BURNED == 0) {while (packed == 0) {packed = _packedOwnerships[--curr];} return packed; }}} revert OwnerQueryForNonexistentToken();}\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed)); ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP); ownership.burned = packed & BITMASK_BURNED != 0;}\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {return _unpackedOwnership(_packedOwnerships[index]);}\n    function _initializeOwnershipAt(uint256 index) internal {if (_packedOwnerships[index] == 0) {_packedOwnerships[index] = _packedOwnershipOf(index);}}\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {return _unpackedOwnership(_packedOwnershipOf(tokenId));}\n    function ownerOf(uint256 tokenId) public view override returns (address) {return address(uint160(_packedOwnershipOf(tokenId)));}\n    function name() public view virtual override returns (string memory) {return _name;}\n    function symbol() public view virtual override returns (string memory) {return _symbol;}\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken(); string memory baseURI = _baseURI(); return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';}\n    function _baseURI() internal view virtual returns (string memory) {return '';}\n    function _addressToUint256(address value) private pure returns (uint256 result) {assembly {result := value}}\n    function _boolToUint256(bool value) private pure returns (uint256 result) {assembly {result := value}}\n    function approve(address to, uint256 tokenId) public override {address owner = address(uint160(_packedOwnershipOf(tokenId)));\n        if (to == owner) revert ApprovalToCurrentOwner();\n        if (_msgSenderERC721A() != owner)\n        if (!isApprovedForAll(owner, _msgSenderERC721A())) {revert ApprovalCallerNotOwnerNorApproved();}_tokenApprovals[tokenId] = to;emit Approval(owner, to, tokenId);}\n    function getApproved(uint256 tokenId) public view override returns (address) {if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken(); return _tokenApprovals[tokenId];}\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller(); _operatorApprovals[_msgSenderERC721A()][operator] = approved; emit ApprovalForAll(_msgSenderERC721A(), operator, approved);}\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {return _operatorApprovals[owner][operator];}\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {_transfer(from, to, tokenId);}\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {safeTransferFrom(from, to, tokenId, '');}\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {_transfer(from, to, tokenId);\n        if (to.code.length != 0)\n        if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {revert TransferToNonERC721ReceiverImplementer();}}\n    function _exists(uint256 tokenId) internal view returns (bool) {return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex &&\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0;}\n    function _safeMint(address to, uint256 quantity) internal {_safeMint(to, quantity, '');}\n    function _safeMint(address to, uint256 quantity, bytes memory _data) internal {uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity(); _beforeTokenTransfers(address(0), to, startTokenId, quantity); unchecked {_packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1); _packedOwnerships[startTokenId] = _addressToUint256(to) | (block.timestamp << BITPOS_START_TIMESTAMP) | (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED); uint256 updatedIndex = startTokenId; uint256 end = updatedIndex + quantity;\n        if (to.code.length != 0) {do {emit Transfer(address(0), to, updatedIndex);\n        if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {revert TransferToNonERC721ReceiverImplementer();}} while (updatedIndex < end);\n        if (_currentIndex != startTokenId) revert();} else {do {emit Transfer(address(0), to, updatedIndex++);} while (updatedIndex < end);} _currentIndex = updatedIndex;} _afterTokenTransfers(address(0), to, startTokenId, quantity);}\n    function _mint(address to, uint256 quantity) internal {uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity(); _beforeTokenTransfers(address(0), to, startTokenId, quantity); unchecked {_packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\n            _packedOwnerships[startTokenId] = _addressToUint256(to) | (block.timestamp << BITPOS_START_TIMESTAMP) | (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\n            uint256 updatedIndex = startTokenId; uint256 end = updatedIndex + quantity;\n            do {emit Transfer(address(0), to, updatedIndex++); } while (updatedIndex < end); _currentIndex = updatedIndex;} _afterTokenTransfers(address(0), to, startTokenId, quantity);}\n    function _transfer(address from, address to, uint256 tokenId) private {uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner(); bool isApprovedOrOwner = (_msgSenderERC721A() == from || isApprovedForAll(from, _msgSenderERC721A()) || getApproved(tokenId) == _msgSenderERC721A());\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress(); _beforeTokenTransfers(from, to, tokenId, 1); delete _tokenApprovals[tokenId];\n        unchecked { --_packedAddressData[from]; ++_packedAddressData[to]; _packedOwnerships[tokenId] = _addressToUint256(to) | (block.timestamp << BITPOS_START_TIMESTAMP) | BITMASK_NEXT_INITIALIZED;\n        if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {uint256 nextTokenId = tokenId + 1;\n        if (_packedOwnerships[nextTokenId] == 0) {\n        if (nextTokenId != _currentIndex) {_packedOwnerships[nextTokenId] = prevOwnershipPacked;}}}} emit Transfer(from, to, tokenId); _afterTokenTransfers(from, to, tokenId, 1);}\n    function _burn(uint256 tokenId) internal virtual {_burn(tokenId, false);}\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId); address from = address(uint160(prevOwnershipPacked));\n        if (approvalCheck) {bool isApprovedOrOwner = (_msgSenderERC721A() == from || isApprovedForAll(from, _msgSenderERC721A()) || getApproved(tokenId) == _msgSenderERC721A());\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();} _beforeTokenTransfers(from, address(0), tokenId, 1); delete _tokenApprovals[tokenId];\n            unchecked {_packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1; _packedOwnerships[tokenId] = _addressToUint256(from) | (block.timestamp << BITPOS_START_TIMESTAMP) | BITMASK_BURNED |  BITMASK_NEXT_INITIALIZED;\n        if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {uint256 nextTokenId = tokenId + 1;\n        if (_packedOwnerships[nextTokenId] == 0) {\n        if (nextTokenId != _currentIndex) {_packedOwnerships[nextTokenId] = prevOwnershipPacked;}}}} emit Transfer(from, address(0), tokenId); _afterTokenTransfers(from, address(0), tokenId, 1); unchecked {_burnCounter++;}}\n    function _checkContractOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (bytes4 retval) {return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;} catch (bytes memory reason) {\n        if (reason.length == 0) {revert TransferToNonERC721ReceiverImplementer();} else {assembly {revert(add(32, reason), mload(reason))}}}}\n    function _beforeTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\n    function _afterTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\n    function _msgSenderERC721A() internal view virtual returns (address) {return msg.sender;}\n    function _toString(uint256 value) internal pure returns (string memory ptr) {assembly {ptr := add(mload(0x40), 128) mstore(0x40, ptr) let end := ptr\n        for {let temp := value ptr := sub(ptr, 1) mstore8(ptr, add(48, mod(temp, 10))) temp := div(temp, 10)} temp {temp := div(temp, 10)} \n            {ptr := sub(ptr, 1) mstore8(ptr, add(48, mod(temp, 10)))} let length := sub(end, ptr) ptr := sub(ptr, 32) mstore(ptr, length)}}}\n\n\n\n// You task is to complete the smart contract PSYCHO strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.8.13, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title PSYCHO\n * @notice This contract is an ERC721A NFT minting contract with features for both paid and free mints, and various administrative controls.\n * @dev The contract inherits from Ownable and ERC721A. It includes functions to manage the minting process, set prices, and control the sale state.\n */\ncontract PSYCHO is Ownable, ERC721A {\n    uint256 public maxSupply                    = 8888;\n    uint256 public maxFreeSupply                = 8888;\n    uint256 public maxPerTxDuringMint           = 20;\n    uint256 public maxPerAddressDuringMint      = 21;\n    uint256 public maxPerAddressDuringFreeMint  = 1;\n    uint256 public price                        = 0.003 ether;\n    bool    public saleIsActive                 = true;\n    bool    public revealed                     = false;\n\n    address constant internal TEAM_ADDRESS = 0x06C8033719b4fa22DE97d4632b4120D2F429c538;\n    string public baseURI = \"\";\n    string public constant baseExtension = \"\";\n    string public hiddenMetadataUri;\n    mapping(address => uint256) public freeMintedAmount;\n    mapping(address => uint256) public mintedAmount;\n\n    /**\n     * @notice Initializes the contract and sets the name, symbol, and mints the first token to the contract owner.\n     * @dev The constructor also sets the hidden metadata URI.\n     */\n    constructor() ERC721A(\"PSYCHO\", \"PSYCHO\") {_safeMint(msg.sender, 1); setHiddenMetadataUri(\"https://gateway.pinata.cloud/ipfs/QmcJ9dJMmgNiUD9oSASjgxhbuqam7y2WVSxDKLuX3GFyz5\");}\n\n    /**\n     * @notice Modifier to ensure that the sale is active and the caller is not a contract.\n     * @dev This modifier checks if the sale is active and if the transaction origin is the same as the message sender.\n     */\n    modifier mintCompliance() {require(saleIsActive, \"Sale is not active yet.\"); require(tx.origin == msg.sender, \"Wrong Caller\"); _;}\n\n    /**\n     * @notice Allows users to mint a specified number of tokens by paying the required amount.\n     * @dev Ensures the user has sufficient funds, does not exceed the max supply, and complies with per-transaction and per-address limits.\n     * @param _quantity The number of tokens to mint.\n     */\n    function mint(uint256 _quantity) external payable mintCompliance() {}\n\n    /**\n     * @notice Allows users to mint a specified number of tokens for free.\n     * @dev Ensures the user does not exceed the max free supply and complies with per-address limits.\n     * @param _quantity The number of tokens to mint.\n     */\n    function freeMint(uint256 _quantity) external mintCompliance() {}\n\n    /**\n     * @notice Sets the price for minting a single token.\n     * @dev Only the contract owner can call this function.\n     * @param _price The new price for minting a token.\n     */\n    function setPrice(uint256 _price) external onlyOwner {}\n\n    /**\n     * @notice Sets the maximum number of tokens that can be minted in a single transaction.\n     * @dev Only the contract owner can call this function.\n     * @param _amount The new maximum number of tokens per transaction.\n     */\n    function setMaxPerTx(uint256 _amount) external onlyOwner {}\n\n    /**\n     * @notice Sets the maximum number of tokens that can be minted by a single address during the mint period.\n     * @dev Only the contract owner can call this function.\n     * @param _amount The new maximum number of tokens per address.\n     */\n    function setMaxPerAddress(uint256 _amount) external onlyOwner {}\n\n    /**\n     * @notice Sets the maximum number of tokens that can be minted for free by a single address.\n     * @dev Only the contract owner can call this function.\n     * @param _amount The new maximum number of free mints per address.\n     */\n    function setMaxFreePerAddress(uint256 _amount) external onlyOwner {}\n\n    /**\n     * @notice Toggles the sale state (active or inactive).\n     * @dev Only the contract owner can call this function.\n     */\n    function flipSale() public onlyOwner {}\n\n    /**\n     * @notice Sets the maximum supply of tokens.\n     * @dev Only the contract owner can call this function.\n     * @param newSupply The new maximum supply of tokens.\n     */\n    function setMaxSupply(uint256 newSupply) public onlyOwner {}\n\n    /**\n     * @notice Reduces the maximum supply of tokens.\n     * @dev Only the contract owner can call this function and ensures the new supply is not less than the total supply.\n     * @param _amount The amount to reduce the maximum supply by.\n     */\n    function cutMaxSupply(uint256 _amount) public onlyOwner {}\n\n    /**\n     * @notice Sets the reveal state of the tokens.\n     * @dev Only the contract owner can call this function.\n     * @param _state The new reveal state (true for revealed, false for hidden).\n     */\n    function setRevealed(bool _state) public onlyOwner {}\n\n    /**\n     * @notice Sets the base URI for the token metadata.\n     * @dev Only the contract owner can call this function.\n     * @param baseURI_ The new base URI for the token metadata.\n     */\n    function setBaseURI(string memory baseURI_) external onlyOwner {}\n\n    /**\n     * @notice Sets the hidden metadata URI for unrevealed tokens.\n     * @dev Only the contract owner can call this function.\n     * @param _hiddenMetadataUri The new hidden metadata URI.\n     */\n    function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {}\n\n    /**\n     * @notice Returns the base URI for the token metadata.\n     * @dev This function overrides the default implementation in ERC721A.\n     * @return The base URI for the token metadata.\n     */\n    function _baseURI() internal view virtual override returns (string memory) {}\n\n    /**\n     * @notice Returns the URI for a specific token.\n     * @dev If the token is not revealed, it returns the hidden metadata URI. Otherwise, it constructs the URI using the base URI and token ID.\n     * @param _tokenId The ID of the token.\n     * @return The URI for the token.\n     */\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {}\n\n    /**\n     * @notice Withdraws the contract balance to the team's address.\n     * @dev Only the contract owner can call this function.\n     */\n    function withdrawBalance() external payable onlyOwner {}\n}\n"
}