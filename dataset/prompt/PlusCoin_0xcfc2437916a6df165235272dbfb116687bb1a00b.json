{
    "contract_name": "PlusCoin",
    "ground_truth": "contract PlusCoin {\n    address public owner; // Token owner address\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    string public standard = 'PlusCoin 2.0';\n    string public constant name = \"PlusCoin\";\n    string public constant symbol = \"PLCN\";\n    uint   public constant decimals = 18;\n    uint public totalSupply;\n\n    address public allowed_contract;\n\n    //\n    // Events\n    // This generates a publics event on the blockchain that will notify clients\n    \n    event Sent(address from, address to, uint amount);\n    event Buy(address indexed sender, uint eth, uint fbt);\n    event Withdraw(address indexed sender, address to, uint eth);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    //\n    // Modifiers\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    modifier onlyAllowedContract() {\n        require(msg.sender == allowed_contract);\n        _;\n    }\n\n    //\n    // Functions\n    // \n\n    // Constructor\n    constructor() public {\n        owner = msg.sender;\n        totalSupply = 28272323624 * 1000000000000000000;\n        balances[owner] = totalSupply;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n      if (newOwner != address(0)) {\n        owner = newOwner;\n      }\n    }\n\n    function safeMul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c>=a && c>=b);\n        return c;\n    }\n\n \n\n\tfunction setAllowedContract(address _contract_address) public\n        onlyOwner\n        returns (bool success)\n    {\n        allowed_contract = _contract_address;\n        return true;\n    }\n\n\n    function withdrawEther(address _to) public \n        onlyOwner\n    {\n        _to.transfer(address(this).balance);\n    }\n\n\n\n    /**\n     * ERC 20 token functions\n     *\n     * https://github.com/ethereum/EIPs/issues/20\n     */\n    \n    function transfer(address _to, uint256 _value) public\n        returns (bool success) \n    {\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public\n        returns (bool success)\n    {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success)\n    {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public\n        constant returns (uint256 remaining)\n    {\n      return allowed[_owner][_spender];\n    }\n\n}",
    "function_sum": 11,
    "compiler_version": "0.4.23",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n\n\n// You task is to complete the smart contract PlusCoin strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.23, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title PlusCoin\n * @notice This contract implements the ERC-20 token standard and includes additional functionalities like ownership transfer and setting an allowed contract.\n * @dev The contract is designed to be owned by a specific address, and only the owner can perform certain actions like transferring ownership or setting the allowed contract.\n */\ncontract PlusCoin {\n    address public owner; // Token owner address\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    string public standard = 'PlusCoin 2.0';\n    string public constant name = \"PlusCoin\";\n    string public constant symbol = \"PLCN\";\n    uint   public constant decimals = 18;\n    uint public totalSupply;\n\n    address public allowed_contract;\n\n    //\n    // Events\n    // This generates a publics event on the blockchain that will notify clients\n    \n    event Sent(address from, address to, uint amount);\n    event Buy(address indexed sender, uint eth, uint fbt);\n    event Withdraw(address indexed sender, address to, uint eth);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    //\n    // Modifiers\n\n    /**\n     * @dev Ensures that only the owner of the contract can call the function.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Ensures that only the allowed contract can call the function.\n     */\n    modifier onlyAllowedContract() {\n        require(msg.sender == allowed_contract);\n        _;\n    }\n\n    //\n    // Functions\n    // \n\n    // Constructor\n    constructor() public {\n        owner = msg.sender;\n        totalSupply = 28272323624 * 1000000000000000000;\n        balances[owner] = totalSupply;\n    }\n\n    /**\n     * @notice Allows the current owner to transfer control of the contract to a new owner.\n     * @param newOwner The address to transfer ownership to.\n     * @dev This function can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {}\n\n    /**\n     * @dev Safely multiplies two numbers and checks for overflow.\n     * @param a First number to multiply.\n     * @param b Second number to multiply.\n     * @return The result of the multiplication.\n     */\n    function safeMul(uint a, uint b) internal pure returns (uint) {}\n\n    /**\n     * @dev Safely subtracts one number from another and checks for underflow.\n     * @param a The number to subtract from.\n     * @param b The number to subtract.\n     * @return The result of the subtraction.\n     */\n    function safeSub(uint a, uint b) internal pure returns (uint) {}\n\n    /**\n     * @dev Safely adds two numbers and checks for overflow.\n     * @param a First number to add.\n     * @param b Second number to add.\n     * @return The result of the addition.\n     */\n    function safeAdd(uint a, uint b) internal pure returns (uint) {}\n\n    /**\n     * @notice Sets the allowed contract address.\n     * @param _contract_address The address of the allowed contract.\n     * @return A boolean indicating if the operation was successful.\n     * @dev This function can only be called by the contract owner.\n     */\n    function setAllowedContract(address _contract_address) public onlyOwner returns (bool success) {}\n\n    /**\n     * @notice Transfers the contract's Ether balance to the specified address.\n     * @param _to The address to transfer the Ether to.\n     * @dev This function can only be called by the contract owner.\n     */\n    function withdrawEther(address _to) public onlyOwner {}\n\n    /**\n     * @notice Transfers a specified amount of tokens from the caller's account to another account.\n     * @param _to The address to transfer the tokens to.\n     * @param _value The amount of tokens to transfer.\n     * @return A boolean indicating if the transfer was successful.\n     * @dev Emits a `Transfer` event.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {}\n\n    /**\n     * @notice Transfers a specified amount of tokens from one account to another, with approval.\n     * @param _from The address to transfer the tokens from.\n     * @param _to The address to transfer the tokens to.\n     * @param _value The amount of tokens to transfer.\n     * @return A boolean indicating if the transfer was successful.\n     * @dev Emits a `Transfer` event.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\n\n    /**\n     * @notice Returns the balance of the specified address.\n     * @param _owner The address to check the balance of.\n     * @return The balance of the specified address.\n     */\n    function balanceOf(address _owner) constant public returns (uint256 balance) {}\n\n    /**\n     * @notice Approves the spender to spend a specified amount of tokens on behalf of the caller.\n     * @param _spender The address of the spender.\n     * @param _value The amount of tokens to approve.\n     * @return A boolean indicating if the approval was successful.\n     * @dev Emits an `Approval` event.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {}\n\n    /**\n     * @notice Returns the remaining allowance of the spender for the owner.\n     * @param _owner The address of the owner.\n     * @param _spender The address of the spender.\n     * @return The remaining allowance.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {}\n}\n"
}