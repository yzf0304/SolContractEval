{
    "contract_name": "RBInformationStore",
    "ground_truth": "contract RBInformationStore is Ownable {\n\n    address public profitContainerAddress;\n\n    address public companyWalletAddress;\n\n    uint public etherRatioForOwner;\n\n    address public multiSigAddress;\n\n    address public accountAddressForSponsee;\n\n    bool public isPayableEnabledForAll = true;\n\n\n\n    modifier onlyMultiSig() {\n\n        require(multiSigAddress == msg.sender);\n\n        _;\n\n    }\n\n\n\n    function RBInformationStore\n\n    (\n\n        address _profitContainerAddress,\n\n        address _companyWalletAddress,\n\n        uint _etherRatioForOwner,\n\n        address _multiSigAddress,\n\n        address _accountAddressForSponsee\n\n    ) {\n\n        profitContainerAddress = _profitContainerAddress;\n\n        companyWalletAddress = _companyWalletAddress;\n\n        etherRatioForOwner = _etherRatioForOwner;\n\n        multiSigAddress = _multiSigAddress;\n\n        accountAddressForSponsee = _accountAddressForSponsee;\n\n    }\n\n\n\n    function changeProfitContainerAddress(address _address) onlyMultiSig {\n\n        profitContainerAddress = _address;\n\n    }\n\n\n\n    function changeCompanyWalletAddress(address _address) onlyMultiSig {\n\n        companyWalletAddress = _address;\n\n    }\n\n\n\n    function changeEtherRatioForOwner(uint _value) onlyMultiSig {\n\n        etherRatioForOwner = _value;\n\n    }\n\n\n\n    function changeMultiSigAddress(address _address) onlyMultiSig {\n\n        multiSigAddress = _address;\n\n    }\n\n\n\n    function changeOwner(address _address) onlyMultiSig {\n\n        owner = _address;\n\n    }\n\n\n\n    function changeAccountAddressForSponsee(address _address) onlyMultiSig {\n\n        accountAddressForSponsee = _address;\n\n    }\n\n\n\n    function changeIsPayableEnabledForAll() onlyMultiSig {\n\n        isPayableEnabledForAll = !isPayableEnabledForAll;\n\n    }\n\n}",
    "function_sum": 8,
    "compiler_version": "0.4.18",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n/**\n\n *Submitted for verification at Etherscan.io on 2017-12-01\n\n*/\n\ncontract Ownable {\n\n  address public owner;\n\n\n\n  function Ownable() {\n\n    owner = msg.sender;\n\n  }\n\n\n\n  modifier onlyOwner() {\n\n    if (msg.sender != owner) {\n\n      revert();\n\n    }\n\n    _;\n\n  }\n\n}\n\n\n\n// You task is to complete the smart contract RBInformationStore strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.18, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @notice This contract, RBInformationStore, is designed to store and manage various addresses and a ratio related to the distribution of profits and control. It inherits from the Ownable contract to restrict certain functions to the owner or a multi-signature wallet.\n * @dev The contract allows for the modification of stored addresses and the ether ratio only by a specified multi-signature address. Additionally, it controls whether the contract can receive Ether.\n */\ncontract RBInformationStore is Ownable {\n\n    /**\n     * @notice Public address representing the profit container.\n     * @dev This address is used to store the address of the profit container.\n     */\n    address public profitContainerAddress;\n\n    /**\n     * @notice Public address representing the company's wallet.\n     * @dev This address is used to store the address of the company's wallet.\n     */\n    address public companyWalletAddress;\n\n    /**\n     * @notice Public uint representing the ratio of Ether for the owner.\n     * @dev This value is used to determine the percentage of Ether that should be allocated to the owner.\n     */\n    uint public etherRatioForOwner;\n\n    /**\n     * @notice Public address representing the multi-signature wallet.\n     * @dev This address is used to store the address of the multi-signature wallet, which has special privileges in this contract.\n     */\n    address public multiSigAddress;\n\n    /**\n     * @notice Public address representing the account address for the sponsee.\n     * @dev This address is used to store the account address for the sponsee.\n     */\n    address public accountAddressForSponsee;\n\n    /**\n     * @notice Public boolean indicating if the contract is payable by all.\n     * @dev This boolean is used to enable or disable the ability for the contract to receive Ether from anyone.\n     */\n    bool public isPayableEnabledForAll;\n\n    /**\n     * @notice Modifier to restrict function access to the multi-signature wallet.\n     * @dev This modifier ensures that only the multi-signature wallet can call the function it modifies.\n     */\n    modifier onlyMultiSig() {\n        require(multiSigAddress == msg.sender);\n        _;\n    }\n\n    /**\n     * @notice Constructor to initialize the contract with the necessary addresses and values.\n     * @param _profitContainerAddress The address of the profit container.\n     * @param _companyWalletAddress The address of the company's wallet.\n     * @param _etherRatioForOwner The ratio of Ether for the owner.\n     * @param _multiSigAddress The address of the multi-signature wallet.\n     * @param _accountAddressForSponsee The account address for the sponsee.\n     */\n    function RBInformationStore(\n        address _profitContainerAddress,\n        address _companyWalletAddress,\n        uint _etherRatioForOwner,\n        address _multiSigAddress,\n        address _accountAddressForSponsee\n    ) {\n        profitContainerAddress = _profitContainerAddress;\n        companyWalletAddress = _companyWalletAddress;\n        etherRatioForOwner = _etherRatioForOwner;\n        multiSigAddress = _multiSigAddress;\n        accountAddressForSponsee = _accountAddressForSponsee;\n    }\n\n    /**\n     * @notice Function to change the profit container address.\n     * @param _address The new address for the profit container.\n     * @dev Only the multi-signature wallet can call this function.\n     */\n    function changeProfitContainerAddress(address _address) onlyMultiSig {\n    }\n\n    /**\n     * @notice Function to change the company wallet address.\n     * @param _address The new address for the company wallet.\n     * @dev Only the multi-signature wallet can call this function.\n     */\n    function changeCompanyWalletAddress(address _address) onlyMultiSig {\n    }\n\n    /**\n     * @notice Function to change the ether ratio for the owner.\n     * @param _value The new ether ratio for the owner.\n     * @dev Only the multi-signature wallet can call this function.\n     */\n    function changeEtherRatioForOwner(uint _value) onlyMultiSig {\n    }\n\n    /**\n     * @notice Function to change the multi-signature wallet address.\n     * @param _address The new address for the multi-signature wallet.\n     * @dev Only the multi-signature wallet can call this function.\n     */\n    function changeMultiSigAddress(address _address) onlyMultiSig {\n    }\n\n    /**\n     * @notice Function to change the owner of the contract.\n     * @param _address The new owner address.\n     * @dev Only the multi-signature wallet can call this function.\n     */\n    function changeOwner(address _address) onlyMultiSig {\n    }\n\n    /**\n     * @notice Function to change the account address for the sponsee.\n     * @param _address The new account address for the sponsee.\n     * @dev Only the multi-signature wallet can call this function.\n     */\n    function changeAccountAddressForSponsee(address _address) onlyMultiSig {\n    }\n\n    /**\n     * @notice Function to toggle the payable status for all.\n     * @dev This function toggles the `isPayableEnabledForAll` boolean, allowing or disallowing the contract to receive Ether. Only the multi-signature wallet can call this function.\n     */\n    function changeIsPayableEnabledForAll() onlyMultiSig {\n    }\n}\n"
}