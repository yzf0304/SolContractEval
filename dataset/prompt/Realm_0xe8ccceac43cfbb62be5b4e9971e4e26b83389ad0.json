{
    "contract_name": "AccessControl",
    "ground_truth": "contract AccessControl {\n\n    address public creatorAddress;\n\n    uint16 public totalSeraphims = 0;\n\n    mapping (address => bool) public seraphims;\n\n\n\n    bool public isMaintenanceMode = true;\n\n \n\n    modifier onlyCREATOR() {\n\n        require(msg.sender == creatorAddress);\n\n        _;\n\n    }\n\n\n\n    modifier onlySERAPHIM() {\n\n        require(seraphims[msg.sender] == true);\n\n        _;\n\n    }\n\n    \n\n    modifier isContractActive {\n\n        require(!isMaintenanceMode);\n\n        _;\n\n    }\n\n    \n\n    // Constructor\n\n    function AccessControl() public {\n\n        creatorAddress = msg.sender;\n\n    }\n\n    \n\n\n\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n\n        if (seraphims[_newSeraphim] == false) {\n\n            seraphims[_newSeraphim] = true;\n\n            totalSeraphims += 1;\n\n        }\n\n    }\n\n    \n\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n\n        if (seraphims[_oldSeraphim] == true) {\n\n            seraphims[_oldSeraphim] = false;\n\n            totalSeraphims -= 1;\n\n        }\n\n    }\n\n\n\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n\n        isMaintenanceMode = _isMaintaining;\n\n    }\n\n\n\n  \n\n}",
    "function_sum": 4,
    "compiler_version": "0.4.19",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n\n\n// You task is to complete the smart contract AccessControl strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.19, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title AccessControl\n * @notice A contract that manages access control and maintenance mode for a system.\n * @dev This contract allows the creator to add or remove addresses with SERAPHIM role and toggle maintenance mode.\n */\ncontract AccessControl {\n\n    address public creatorAddress;\n\n    uint16 public totalSeraphims = 0;\n\n    mapping (address => bool) public seraphims;\n\n    bool public isMaintenanceMode = true;\n\n \n\n    /**\n     * @notice Modifier to restrict function calls to the contract creator.\n     * @dev Ensures that only the creator can call the function.\n     */\n    modifier onlyCREATOR() {\n        require(msg.sender == creatorAddress);\n        _;\n    }\n\n    /**\n     * @notice Modifier to restrict function calls to addresses with the SERAPHIM role.\n     * @dev Ensures that only addresses with the SERAPHIM role can call the function.\n     */\n    modifier onlySERAPHIM() {\n        require(seraphims[msg.sender] == true);\n        _;\n    }\n\n    /**\n     * @notice Modifier to restrict function calls when the contract is in maintenance mode.\n     * @dev Ensures that the contract is not in maintenance mode before allowing the function call.\n     */\n    modifier isContractActive {\n        require(!isMaintenanceMode);\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract and sets the creator address.\n     * @dev The constructor sets the `creatorAddress` to the address of the contract deployer.\n     */\n    function AccessControl() public {\n        creatorAddress = msg.sender;\n    }\n\n    /**\n     * @notice Adds a new address with the SERAPHIM role.\n     * @dev Only the creator can call this function. The address must not already have the SERAPHIM role.\n     * @param _newSeraphim The address to be added as a SERAPHIM.\n     */\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {}\n\n    /**\n     * @notice Removes an address from the SERAPHIM role.\n     * @dev Only the creator can call this function. The address must currently have the SERAPHIM role.\n     * @param _oldSeraphim The address to be removed from the SERAPHIM role.\n     */\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {}\n\n    /**\n     * @notice Toggles the maintenance mode of the contract.\n     * @dev Only the creator can call this function. Sets the `isMaintenanceMode` state variable.\n     * @param _isMaintaining The new state of the maintenance mode (true for active, false for inactive).\n     */\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {}\n}\n"
}