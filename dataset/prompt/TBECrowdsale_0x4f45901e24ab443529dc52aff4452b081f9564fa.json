{
    "contract_name": "TBECrowdsale",
    "ground_truth": "contract TBECrowdsale {\n    \n    Token public tokenReward;\n    uint256 public price;\n    address public creator;\n    address public owner = 0x700635ad386228dEBCfBb5705d2207F529af8323;\n    uint256 public startDate;\n    uint256 public endDate;\n    \n\n    mapping (address => bool) public tokenAddress;\n    mapping (address => uint256) public balanceOfEther;\n    mapping (address => uint256) public balanceOf;\n\n    modifier isCreator() {\n        require(msg.sender == creator);\n        _;\n    }\n\n    event FundTransfer(address backer, uint amount, bool isContribution);\n\n    function TBECrowdsale() public {\n        creator = msg.sender;\n        price = 100;\n        startDate = now;\n        endDate = startDate + 3 days;\n        tokenReward = Token(0xf18b97b312EF48C5d2b5C21c739d499B7c65Cf96);\n    }\n\n\n\n    function setOwner(address _owner) isCreator public {\n        owner = _owner;      \n    }\n\n    function setStartDate(uint256 _startDate) isCreator public {\n        startDate = _startDate;      \n    }\n\n    function setEndtDate(uint256 _endDate) isCreator public {\n        endDate = _endDate;      \n    }\n    \n   function setPrice(uint256 _price) isCreator public {\n        price = _price;      \n    }\n    \n    function setToken(address _token) isCreator public {\n        tokenReward = Token(_token);      \n    }\n\n    function sendToken(address _to, uint256 _value) isCreator public {\n        tokenReward.transfer(_to, _value);      \n    }\n\n    \n    function () payable public {\n        require(now > startDate);\n        require(now < endDate);\n        \n        \n        uint256 amount = price;\n\n       \n        balanceOfEther[msg.sender] += msg.value / 1 ether;\n        tokenReward.transfer(msg.sender, amount);\n        FundTransfer(msg.sender, amount, true);\n        owner.transfer(msg.value);\n    }\n}",
    "function_sum": 7,
    "compiler_version": "0.4.24",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\ninterface Token {\n    function transfer(address _to, uint256 _value) external;\n}\n\n\n\n// You task is to complete the smart contract TBECrowdsale strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.24, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @notice This contract is designed to manage a crowdsale for a token, allowing users to purchase tokens by sending Ether.\n * @dev The contract includes functionalities for setting the price, start and end dates, and managing the token distribution. \n * Only the creator of the contract can set these parameters. The contract also ensures that contributions are only accepted within the specified time frame.\n */\ncontract TBECrowdsale {\n    \n    Token public tokenReward;\n    uint256 public price;\n    address public creator;\n    address public owner = 0x700635ad386228dEBCfBb5705d2207F529af8323;\n    uint256 public startDate;\n    uint256 public endDate;\n    \n\n    mapping (address => bool) public tokenAddress;\n    mapping (address => uint256) public balanceOfEther;\n    mapping (address => uint256) public balanceOf;\n\n    /**\n     * @notice Modifier to ensure that only the creator can call certain functions.\n     * @dev This modifier checks if the message sender is the creator of the contract.\n     */\n    modifier isCreator() {\n        require(msg.sender == creator);\n        _;\n    }\n\n    /**\n     * @notice Event emitted when a fund transfer occurs.\n     * @param backer The address of the backer.\n     * @param amount The amount of Ether or tokens transferred.\n     * @param isContribution Boolean indicating if the transfer is a contribution.\n     */\n    event FundTransfer(address backer, uint amount, bool isContribution);\n\n    /**\n     * @notice Initializes the crowdsale with the creator's address, price, start and end dates, and the token reward contract.\n     * @dev The constructor sets the initial values for the crowdsale parameters and the token reward contract.\n     */\n    function TBECrowdsale() public {\n        creator = msg.sender;\n        price = 100;\n        startDate = now;\n        endDate = startDate + 3 days;\n        tokenReward = Token(0xf18b97b312EF48C5d2b5C21c739d499B7c65Cf96);\n    }\n\n    /**\n     * @notice Sets the owner of the contract.\n     * @param _owner The new owner's address.\n     * @dev Only the creator can call this function.\n     */\n    function setOwner(address _owner) isCreator public {}\n\n    /**\n     * @notice Sets the start date of the crowdsale.\n     * @param _startDate The new start date.\n     * @dev Only the creator can call this function.\n     */\n    function setStartDate(uint256 _startDate) isCreator public {}\n\n    /**\n     * @notice Sets the end date of the crowdsale.\n     * @param _endDate The new end date.\n     * @dev Only the creator can call this function.\n     */\n    function setEndtDate(uint256 _endDate) isCreator public {}\n\n    /**\n     * @notice Sets the price of the token in terms of Ether.\n     * @param _price The new price.\n     * @dev Only the creator can call this function.\n     */\n    function setPrice(uint256 _price) isCreator public {}\n\n    /**\n     * @notice Sets the token contract address.\n     * @param _token The new token contract address.\n     * @dev Only the creator can call this function.\n     */\n    function setToken(address _token) isCreator public {}\n\n    /**\n     * @notice Sends a specified amount of tokens to a given address.\n     * @param _to The recipient's address.\n     * @param _value The amount of tokens to send.\n     * @dev Only the creator can call this function.\n     */\n    function sendToken(address _to, uint256 _value) isCreator public {}\n\n    /**\n     * @notice Fallback function to handle incoming Ether and distribute tokens.\n     * @dev This function ensures that contributions are only accepted within the specified time frame, transfers tokens to the sender, and forwards the Ether to the owner.\n     */\n    function () payable public {\n        require(now > startDate);\n        require(now < endDate);\n        \n        \n        uint256 amount = price;\n\n       \n        balanceOfEther[msg.sender] += msg.value / 1 ether;\n        tokenReward.transfer(msg.sender, amount);\n        FundTransfer(msg.sender, amount, true);\n        owner.transfer(msg.value);\n    }\n}\n"
}