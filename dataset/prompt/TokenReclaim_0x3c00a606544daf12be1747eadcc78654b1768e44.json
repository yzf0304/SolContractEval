{
    "contract_name": "TokenReclaim",
    "ground_truth": "contract TokenReclaim{\n    mapping (address=>string) internal _ethToSphtx;\n    mapping (string =>string) internal _accountToPubKey;\n    event AccountRegister (address ethAccount, string sphtxAccount, string pubKey);\n\n    function register(string name, string pubKey) public{\n        require(bytes(name).length >= 3 && bytes(name).length <= 16);\n        bytes memory b = bytes(name);\n        require( (b[0] >='a' && b[0] <='z') || (b[0] >='0' && b[0] <= '9'));\n        for(uint i=1;i< bytes(name).length; i++){\n            require( (b[i] >='a' && b[i] <='z') || (b[i] >='0' && b[i] <= '9') || b[i] == '-' || b[i] =='.'  );\n        }\n        require(bytes(pubKey).length <= 64 && bytes(pubKey).length >= 50 );\n\n        require(bytes(_ethToSphtx[msg.sender]).length == 0 || keccak256(bytes((_ethToSphtx[msg.sender]))) ==  keccak256(bytes(name)));//check that the address is not yet registered;\n\n        require(bytes(_accountToPubKey[name]).length == 0 || keccak256(bytes((_ethToSphtx[msg.sender]))) ==  keccak256(bytes(name))); //check that the name is not yet used\n        _accountToPubKey[name] = pubKey;\n        _ethToSphtx[msg.sender] = name;\n        emit AccountRegister(msg.sender, name, pubKey);\n    }\n\n    function account(address addr) constant public returns (string){\n        return _ethToSphtx[addr];\n    }\n\n    function keys(address addr) constant public returns (string){\n        return _accountToPubKey[_ethToSphtx[addr]];\n    }\n\n    function nameAvailable(string name) constant public returns (bool){\n        if( bytes(_accountToPubKey[name]).length != 0 )\n           return false;\n        if(bytes(name).length < 3 && bytes(name).length > 16)\n           return false;\n        bytes memory b = bytes(name);\n        if( (b[0] < 'a' || b[0] > 'z') && ( b[0] < '0' || b[0] > '9' ) )\n           return false;\n        for(uint i=1;i< bytes(name).length; i++)\n           if( (b[0] < 'a' || b[0] > 'z') && ( b[0] < '0' || b[0] > '9' ) && b[i] != '-' && b[i] != '.' )\n              return false;\n        return true;\n    }\n\n\n}",
    "function_sum": 4,
    "compiler_version": "0.4.23",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n\n\n// You task is to complete the smart contract TokenReclaim strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.23, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @notice This contract allows users to register an account with a public key and an SPHTX name.\n * @dev The contract ensures that each Ethereum address can only register one unique SPHTX name, and each SPHTX name is unique across the system.\n */\ncontract TokenReclaim {\n    mapping (address => string) internal _ethToSphtx;\n    mapping (string => string) internal _accountToPubKey;\n\n    /**\n     * @notice Emitted when an account is registered.\n     * @param ethAccount The Ethereum address of the user.\n     * @param sphtxAccount The SPHTX name of the user.\n     * @param pubKey The public key associated with the user's SPHTX name.\n     */\n    event AccountRegister(address ethAccount, string sphtxAccount, string pubKey);\n\n    /**\n     * @notice Registers an SPHTX name and associates it with a public key for the caller.\n     * @param name The SPHTX name to be registered. Must meet specific formatting requirements.\n     * @param pubKey The public key to be associated with the SPHTX name. Must meet length requirements.\n     * @dev\n     * - The SPHTX name must:\n     *   - Be between 3 and 16 characters long\n     *   - Start with a lowercase letter (a-z) or digit (0-9)\n     *   - Only contain lowercase letters (a-z), digits (0-9), hyphens (-), and periods (.)\n     * - The public key must be between 50 and 64 characters long\n     * - The function performs the following validations:\n     *   1. Validates the name length and format\n     *   2. Validates the public key length\n     *   3. Ensures the caller's address is not already registered\n     *   4. Ensures the name is not already in use by another account\n     * - If all validations pass:\n     *   - Stores the name-to-public key mapping\n     *   - Stores the Ethereum address-to-SPHTX name mapping\n     *   - Emits an AccountRegister event\n     * @dev The function uses keccak256 hashes for comparison to prevent storage gas    optimization attacks\n     * @notice This registration is a one-time operation per address - subsequent calls will fail if the address is already registered\n     * @dev The name format restrictions help maintain a consistent naming convention across the system\n     */\n    function register(string memory name, string memory pubKey) public {\n        // Function body\n    }\n\n    /**\n     * @notice Returns the SPHTX name associated with the given Ethereum address.\n     * @param addr The Ethereum address to query.\n     * @return The SPHTX name associated with the address.\n     * @dev If the address has not registered an SPHTX name, it returns an empty string.\n     */\n    function account(address addr) public view returns (string memory) {\n        // Function body\n    }\n\n    /**\n     * @notice Returns the public key associated with the SPHTX name of the given Ethereum address.\n     * @param addr The Ethereum address to query.\n     * @return The public key associated with the SPHTX name.\n     * @dev If the address has not registered an SPHTX name, it returns an empty string.\n     */\n    function keys(address addr) public view returns (string memory) {\n        // Function body\n    }\n\n    /**\n     * @notice Checks if a SPHTX name is available for registration.\n     * @param name The SPHTX name to check availability for.\n     * @return bool True if the name is available, false otherwise.\n     * @dev\n     * - Returns false if the name is already mapped to a public key in _accountToPubKey\n     * - Validates name length (must be between 3 and 16 characters)\n     * - Validates name format:\n     *   - Must start with a lowercase letter (a-z) or digit (0-9)\n     *   - Subsequent characters can be lowercase letters, digits, hyphens (-), or periods (.)\n     * - Returns true only if all validation checks pass and the name is not in use\n     * @notice This function performs static checks without modifying state\n     */\n    function nameAvailable(string memory name) public view returns (bool) {\n        // Function body\n    }\n}\n"
}