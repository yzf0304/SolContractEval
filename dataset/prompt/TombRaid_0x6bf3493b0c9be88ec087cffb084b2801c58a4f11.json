{
    "contract_name": "TombRaid",
    "ground_truth": "contract TombRaid is Ownable {\n    IBoneheadz public Boneheadz;\n\n    uint256 internal cutoff;\n\n    uint256 public immutable SEASON;\n    uint256 public immutable MAX_TIER;\n\n    uint256 public raidPrice = 0.005 ether;\n\n    mapping(uint256 => uint256) public tokenTiers;\n    mapping(uint256 => bool) public isLocked;\n\n    bool public raidActive = false;\n\n    event Locked(uint256 indexed tokenId);\n    event TierUpdated(uint256 indexed tokenId, uint256 tier);\n\n    constructor(\n        address boneheadz,\n        uint256 _cutoff,\n        uint256 maxTier,\n        uint256 season\n    ) {\n        Boneheadz = IBoneheadz(boneheadz);\n        cutoff = _cutoff;\n        MAX_TIER = maxTier;\n        SEASON = season;\n    }\n\n    // MODIFIERS\n\n    modifier onlyTokenOwner(uint256 tokenId) {\n        require(msg.sender == Boneheadz.ownerOf(tokenId), \"Caller is not the token owner\");\n        _;\n    }\n\n    // OWNER FUNCTIONS\n\n    function flipRaidStatus() external onlyOwner {\n        raidActive = !raidActive;\n    }\n\n    function setRaidPrice(uint256 price) external onlyOwner {\n        raidPrice = price;\n    }\n\n    function setCutoff(uint256 _cutoff) external onlyOwner {\n        cutoff = _cutoff;\n    }\n\n    function flipLockStatuses(uint256[] calldata tokenIds) public onlyOwner {\n        uint256 numIds = tokenIds.length;\n        for (uint256 i; i < numIds; i++) {\n            isLocked[tokenIds[i]] = !isLocked[tokenIds[i]];\n        }\n    }\n\n    function withdraw(address recipient) external onlyOwner {\n        (bool success, ) = recipient.call{value: address(this).balance}(\"\");\n        require(success, \"Withdraw failed\");\n    }\n\n    // RAID FUNCTIONS\n\n    function raid(uint256 tokenId) public payable onlyTokenOwner(tokenId) {\n        require(msg.sender == tx.origin, \"Caller not allowed\");\n        require(raidActive, \"Raiding not active\");\n        require(!isLocked[tokenId], \"Bonehead is locked\");\n        require(tokenTiers[tokenId] < MAX_TIER, \"Already max tier\");\n        require(msg.value == raidPrice, \"Not enough ETH sent\");\n\n        uint256 pseudoRandomNumber = _genPseudoRandomNumber(tokenId);\n        if (pseudoRandomNumber < cutoff) {\n            tokenTiers[tokenId]++;\n            emit TierUpdated(tokenId, tokenTiers[tokenId]);\n        } else {\n            isLocked[tokenId] = true;\n            emit Locked(tokenId);\n        }\n    }\n\n    // VIEW FUNCTIONS\n\n    function numPerTier() public view returns (uint256[] memory) {\n        uint256[] memory counts = new uint256[](MAX_TIER);\n        for (uint256 tier; tier < MAX_TIER; tier++) {\n            uint256 numAtTier = 0;\n            uint256 totalSupply = Boneheadz.totalSupply();\n            for (uint256 id; id < totalSupply; id++) {\n                if (tokenTiers[id] == tier) {\n                    numAtTier++;\n                }\n            }\n            counts[tier] = numAtTier;\n        }\n        return counts;\n    }\n\n    function numLockedPerTier() public view returns (uint256[] memory) {\n        uint256[] memory counts = new uint256[](MAX_TIER);\n        for (uint256 tier; tier < MAX_TIER; tier++) {\n            uint256 numLockedAtTier = 0;\n            uint256 totalSupply = Boneheadz.totalSupply();\n            for (uint256 id; id < totalSupply; id++) {\n                if (tokenTiers[id] == tier && isLocked[id]) {\n                    numLockedAtTier++;\n                }\n            }\n            counts[tier] = numLockedAtTier;\n        }\n        return counts;\n    }\n\n    function _genPseudoRandomNumber(uint256 tokenId) private view returns (uint256) {\n        uint256 pseudoRandomHash = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, tokenId)));\n        return pseudoRandomHash % 10;\n    }\n}",
    "function_sum": 9,
    "compiler_version": "0.8.13",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n/**\n *Submitted for verification at Etherscan.io on 2022-05-07\n*/\n// File: @openzeppelin/contracts/utils/Context.sol\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: TombRaid.sol\n\ninterface IBoneheadz {\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    function totalSupply() external view returns (uint256);\n}\n\n\n\n// You task is to complete the smart contract TombRaid strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.8.13, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title TombRaid\n * @notice A smart contract for managing a raiding game where Boneheadz NFTs can be raided to increase their tier or get locked.\n * @dev The contract allows the owner to control the raid status, price, and other parameters. It also includes functions for raiding, viewing tiers, and locking statuses.\n */\ncontract TombRaid is Ownable {\n    IBoneheadz public Boneheadz;\n\n    uint256 internal cutoff;\n\n    uint256 public immutable SEASON;\n    uint256 public immutable MAX_TIER;\n\n    uint256 public raidPrice = 0.005 ether;\n\n    mapping(uint256 => uint256) public tokenTiers;\n    mapping(uint256 => bool) public isLocked;\n\n    bool public raidActive = false;\n\n    event Locked(uint256 indexed tokenId);\n    event TierUpdated(uint256 indexed tokenId, uint256 tier);\n\n    /**\n     * @notice Initializes the contract with the provided parameters.\n     * @param boneheadz The address of the Boneheadz NFT contract.\n     * @param _cutoff The cutoff value for the pseudo-random number generation.\n     * @param maxTier The maximum tier a Boneheadz NFT can reach.\n     * @param season The current season of the game.\n     */\n    constructor(\n        address boneheadz,\n        uint256 _cutoff,\n        uint256 maxTier,\n        uint256 season\n    ) {\n        Boneheadz = IBoneheadz(boneheadz);\n        cutoff = _cutoff;\n        MAX_TIER = maxTier;\n        SEASON = season;\n    }\n\n    // MODIFIERS\n\n    /**\n     * @notice Modifier to ensure that only the owner of the specified token can call the function.\n     * @param tokenId The ID of the token to check ownership for.\n     */\n    modifier onlyTokenOwner(uint256 tokenId) {\n        require(msg.sender == Boneheadz.ownerOf(tokenId), \"Caller is not the token owner\");\n        _;\n    }\n\n    // OWNER FUNCTIONS\n\n    /**\n     * @notice Toggles the raid status on or off.\n     * @dev Only the contract owner can call this function.\n     */\n    function flipRaidStatus() external onlyOwner {}\n\n    /**\n     * @notice Sets the price required to raid a Boneheadz NFT.\n     * @param price The new raid price in wei.\n     * @dev Only the contract owner can call this function.\n     */\n    function setRaidPrice(uint256 price) external onlyOwner {}\n\n    /**\n     * @notice Sets the cutoff value for the pseudo-random number generation.\n     * @param _cutoff The new cutoff value.\n     * @dev Only the contract owner can call this function.\n     */\n    function setCutoff(uint256 _cutoff) external onlyOwner {}\n\n    /**\n     * @notice Toggles the lock status for an array of token IDs.\n     * @param tokenIds An array of token IDs to toggle the lock status for.\n     * @dev Only the contract owner can call this function.\n     */\n    function flipLockStatuses(uint256[] calldata tokenIds) public onlyOwner {}\n\n    /**\n     * @notice Transfers the contract's balance to the specified recipient.\n     * @param recipient The address to receive the funds.\n     * @dev Only the contract owner can call this function.\n     */\n    function withdraw(address recipient) external onlyOwner {}\n\n    // RAID FUNCTIONS\n\n    /**\n     * @notice Allows the owner of a Boneheadz NFT to raid it, potentially increasing its tier or getting it locked.\n     * @param tokenId The ID of the token to raid.\n     * @dev The caller must be the owner of the token, and the raid must be active.\n     */\n    function raid(uint256 tokenId) public payable onlyTokenOwner(tokenId) {}\n\n    // VIEW FUNCTIONS\n\n    /**\n     * @notice Returns the number of tokens at each tier.\n     * @return counts An array where each index represents the count of tokens at that tier.\n     */\n    function numPerTier() public view returns (uint256[] memory) {}\n\n    /**\n     * @notice Returns the number of locked tokens at each tier.\n     * @return counts An array where each index represents the count of locked tokens at that tier.\n     */\n    function numLockedPerTier() public view returns (uint256[] memory) {}\n\n    /**\n     * @notice Generates a pseudo-random number based on the block difficulty, timestamp, and token ID.\n     * @param tokenId The ID of the token to generate the pseudo-random number for.\n     * @return pseudoRandomHash The generated pseudo-random number.\n     * @dev This function is private and used internally by the contract.\n     */\n    function _genPseudoRandomNumber(uint256 tokenId) private view returns (uint256) {}\n}\n"
}