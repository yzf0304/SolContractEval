{
    "contract_name": "Pausable",
    "ground_truth": "contract Pausable is Context, Ownable {\n    \n    event Pause();\n    event Unpause();\n    event PauserChanged(address indexed newAddress);\n\n    address public pauser;\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"Network paused by administrator\");\n        _;\n    }\n\n    /**\n     * @dev throws if called by any account other than the pauser\n     */\n    modifier onlyPauser() {\n        require(msg.sender == pauser, \"Caller is not the pause administrator\");\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() external onlyPauser {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() external onlyPauser {\n        paused = false;\n        emit Unpause();\n    }\n\n    /**\n     * @dev update the pauser role\n     */\n    function updatePauser(address _newPauser) external onlyOwner {\n        require(\n            _newPauser != address(0),\n            \"Pausable: new pauser is the zero address\"\n        );\n        pauser = _newPauser;\n        emit PauserChanged(pauser);\n    }\n}",
    "function_sum": 3,
    "compiler_version": "0.8.0",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\ncontract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n   \n\n\n     //renounceOwnership() delete by Steve\n    //renounceOwnership() delete by Steve\n    //renounceOwnership() delete by Steve\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n\n// You task is to complete the smart contract Pausable strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.8.0, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title Pausable\n * @dev This contract allows the owner to pause and unpause all functions that use the `whenNotPaused` modifier.\n * @notice The pauser, initially set by the contract owner, can change the paused state of the contract. \n * Only the owner can change the pauser role.\n */\ncontract Pausable is Context, Ownable {\n    \n    event Pause();\n    event Unpause();\n    event PauserChanged(address indexed newAddress);\n\n    address public pauser;\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     * @notice Functions with this modifier will revert if the contract is paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"Network paused by administrator\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to restrict access to the pauser.\n     * @notice Only the account with the pauser role can call functions with this modifier.\n     */\n    modifier onlyPauser() {\n        require(msg.sender == pauser, \"Caller is not the pause administrator\");\n        _;\n    }\n\n    /**\n     * @dev Allows the pauser to pause the contract, preventing any further actions until it is unpaused.\n     * @notice Emits a {Pause} event.\n     */\n    function pause() external onlyPauser {}\n\n    /**\n     * @dev Allows the pauser to unpause the contract, allowing normal operations to resume.\n     * @notice Emits an {Unpause} event.\n     */\n    function unpause() external onlyPauser {}\n\n    /**\n     * @dev Allows the owner to update the pauser role.\n     * @notice Reverts if the new pauser is the zero address. Emits a {PauserChanged} event.\n     */\n    function updatePauser(address _newPauser) external onlyOwner {}\n}\n"
}