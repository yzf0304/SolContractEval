{
    "contract_name": "Wagmipet",
    "ground_truth": "contract Wagmipet {\n    address _owner;\n    bool _birthed;\n    \n    event CaretakerLoved(address indexed caretaker, uint256 indexed amount);\n    \n    uint256 lastFeedBlock;\n    uint256 lastCleanBlock;\n    uint256 lastPlayBlock;\n    uint256 lastSleepBlock;\n    \n    uint8 internal hunger;\n    uint8 internal uncleanliness;\n    uint8 internal boredom;\n    uint8 internal sleepiness;\n    \n    mapping (address => uint256) public love;\n    \n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n    \n    constructor() {\n        _owner = msg.sender;\n        lastFeedBlock = block.number;\n        lastCleanBlock = block.number;\n        lastPlayBlock = block.number;\n        lastSleepBlock = block.number;\n        \n        hunger = 0;\n        uncleanliness = 0;\n        boredom = 0;\n        sleepiness = 0;\n    }\n    \n    function addLove(address caretaker, uint256 amount) internal {\n        love[caretaker] += amount;\n        emit CaretakerLoved(caretaker, amount);\n    }\n    \n    function feed() public {\n        require(getAlive(), \"no longer with us\");\n        require(getBoredom() < 80, \"im too tired to eat\");\n        require(getUncleanliness() < 80, \"im feeling too gross to eat\");\n        // require(getHunger() > 0, \"i dont need to eat\");\n        \n        lastFeedBlock = block.number;\n        \n        hunger = 0;\n        boredom += 10;\n        uncleanliness += 3;\n\n        addLove(msg.sender, 1);\n    }\n    \n    function clean() public {\n        require(getAlive(), \"no longer with us\");\n        require(getUncleanliness() > 0, \"i dont need a bath\");\n        lastCleanBlock = block.number;\n        \n        uncleanliness = 0;\n        \n        addLove(msg.sender, 1);\n    }\n    \n    function play() public {\n        require(getAlive(), \"no longer with us\");\n        require(getHunger() < 80, \"im too hungry to play\");\n        require(getSleepiness() < 80, \"im too sleepy to play\");\n        require(getUncleanliness() < 80, \"im feeling too gross to play\");\n        // require(getBoredom() > 0, \"i dont wanna play\");\n        \n        lastPlayBlock = block.number;\n        \n        boredom = 0;\n        hunger += 10;\n        sleepiness += 10;\n        uncleanliness += 5;\n        \n        addLove(msg.sender, 1);\n    }\n    \n    function sleep() public {\n        require(getAlive(), \"no longer with us\");\n        require(getUncleanliness() < 80, \"im feeling too gross to sleep\");\n        require(getSleepiness() > 0, \"im not feeling sleepy\");\n        \n        lastSleepBlock = block.number;\n        \n        sleepiness = 0;\n        uncleanliness += 5;\n        \n        addLove(msg.sender, 1);\n    }\n    \n    function getStatus() public view returns (string memory) {\n        uint256 mostNeeded = 0;\n        \n        string[4] memory goodStatus = [\n            \"gm\",\n            \"im feeling great\",\n            \"all good\",\n            \"i love u\"\n        ];\n        \n        string memory status = goodStatus[block.number % 4];\n        \n        uint256 _hunger = getHunger();\n        uint256 _uncleanliness = getUncleanliness();\n        uint256 _boredom = getBoredom();\n        uint256 _sleepiness = getSleepiness();\n        \n        if (getAlive() == false) {\n            return \"no longer with us\";\n        }\n        \n        if (_hunger > 50 && _hunger > mostNeeded) {\n            mostNeeded = _hunger;\n            status = \"im hungry\";\n        }\n        \n        if (_uncleanliness > 50 && _uncleanliness > mostNeeded) {\n            mostNeeded = _uncleanliness;\n            status = \"i need a bath\";\n        }\n        \n        if (_boredom > 50 && _boredom > mostNeeded) {\n            mostNeeded = _boredom;\n            status = \"im bored\";\n        }\n        \n        if (_sleepiness > 50 && _sleepiness > mostNeeded) {\n            mostNeeded = _sleepiness;\n            status = \"im sleepy\";\n        }\n        \n        return status;\n    }\n    \n    function getAlive() public view returns (bool) {\n        return getHunger() < 101 && getUncleanliness() < 101 &&\n            getBoredom() < 101 && getSleepiness() < 101;\n    }\n    \n    function getHunger() public view returns (uint256) {\n        return hunger + ((block.number - lastFeedBlock) / 50);\n    }\n    \n    function getUncleanliness() public view returns (uint256) {\n        return uncleanliness + ((block.number - lastCleanBlock) / 50);\n    }\n    \n    function getBoredom() public view returns (uint256) {\n        return boredom + ((block.number - lastPlayBlock) / 50);\n    }\n    \n    function getSleepiness() public view returns (uint256) {\n        return sleepiness + ((block.number - lastSleepBlock) / 50);\n    }\n}",
    "function_sum": 11,
    "compiler_version": "0.8.7",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n\n\n// You task is to complete the smart contract Wagmipet strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.8.7, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title Wagmipet\n * @notice A simple pet simulation contract where the pet's needs (hunger, uncleanliness, boredom, sleepiness) must be managed.\n * @dev The pet's conditions deteriorate over time and must be maintained by calling specific functions. If any condition exceeds 100, the pet is no longer alive.\n */\ncontract Wagmipet {\n    address _owner;\n    bool _birthed;\n    \n    event CaretakerLoved(address indexed caretaker, uint256 indexed amount);\n    \n    uint256 lastFeedBlock;\n    uint256 lastCleanBlock;\n    uint256 lastPlayBlock;\n    uint256 lastSleepBlock;\n    \n    uint8 internal hunger;\n    uint8 internal uncleanliness;\n    uint8 internal boredom;\n    uint8 internal sleepiness;\n    \n    mapping (address => uint256) public love;\n    \n    /**\n     * @dev Modifier to restrict function calls to the owner of the contract.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n    \n    /**\n     * @notice Initializes the contract, setting the owner and initial state of the pet.\n     * @dev Sets the initial values for the pet's needs and the owner of the contract.\n     */\n    constructor() {\n        _owner = msg.sender;\n        lastFeedBlock = block.number;\n        lastCleanBlock = block.number;\n        lastPlayBlock = block.number;\n        lastSleepBlock = block.number;\n        \n        hunger = 0;\n        uncleanliness = 0;\n        boredom = 0;\n        sleepiness = 0;\n    }\n    \n    /**\n     * @notice Internal function to add love points to a caretaker.\n     * @dev Emits an event when a caretaker is given love points.\n     * @param caretaker The address of the caretaker.\n     * @param amount The amount of love points to add.\n     */\n    function addLove(address caretaker, uint256 amount) internal {}\n    \n    /**\n     * @notice Feeds the entity, resetting hunger and increasing other stats.\n     * @dev Reverts if entity is dead, too bored, or too dirty to eat.\n     * @dev Increases boredom by 10 and uncleanliness by 3 after feeding.\n     * @dev Adds 1 love point to the caller.\n     */\n    function feed() public {}\n    \n    /**\n     * @notice Cleans the entity, resetting uncleanliness.\n     * @dev Reverts if entity is dead or already clean.\n     * @dev Adds 1 love point to the caller.\n     */\n    function clean() public {}\n    \n    /**\n     * @notice Lets the entity play, resetting boredom but increasing other stats.\n     * @dev Reverts if entity is dead, too hungry, sleepy, or dirty to play.\n     * @dev Increases hunger by 10, sleepiness by 10, and uncleanliness by 5 after playing.\n     * @dev Adds 1 love point to the caller.\n     */\n    function play() public {}\n    \n    /**\n     * @notice Puts the entity to sleep, resetting sleepiness and increasing uncleanliness.\n     * @dev\n     * - Reverts if the entity is not alive\n     * - Reverts if the entity is too dirty (uncleanliness >= 80)\n     * - Reverts if the entity isn't sleepy (sleepiness <= 0)\n     * - Updates last sleep block timestamp\n     * - Resets sleepiness to 0\n     * - Increases uncleanliness by 5\n     * - Adds 1 love point to the caller\n     * @notice This function represents the entity taking a restful sleep\n     * @dev The function includes basic health checks before allowing sleep\n     */\n    function sleep() public {}\n    \n    /**\n     * @notice Retrieves the current status of the entity.\n     * @return string The status message reflecting the entity's condition.\n     * @dev\n     * - Returns a random \"good\" status from a predefined list if all needs are below threshold\n     * - Checks the entity's vital stats (hunger, cleanliness, boredom, sleepiness)\n     * - Returns the most critical need if any stat exceeds 50\n     * - Returns \"no longer with us\" if the entity is not alive\n     * - Uses block number modulo 4 to select a random good status\n     * @dev The good status messages are: \"gm\", \"im feeling great\", \"all good\", \"i love u\"\n     * @dev Status priority (from highest to lowest):\n     *      1. Sleepiness > 50\n     *      2. Boredom > 50\n     *      3. Uncleanliness > 50\n     *      4. Hunger > 50\n     * @dev If multiple stats exceed 50, the one with the highest value takes priority\n     */\n    function getStatus() public view returns (string memory) {}\n    \n    /**\n     * @notice Checks if the pet is still alive.\n     * @dev The pet is considered alive if all its needs are below 101.\n     * @return A boolean indicating whether the pet is alive.\n     */\n    function getAlive() public view returns (bool) {}\n    \n    /**\n     * @notice Gets the current hunger level of the pet.\n     * @dev Hunger increases over time and is reset by feeding the pet.\n     * @return The current hunger level as a uint256.\n     */\n    function getHunger() public view returns (uint256) {}\n    \n    /**\n     * @notice Gets the current uncleanliness level of the pet.\n     * @dev Uncleanliness increases over time and is reset by cleaning the pet.\n     * @return The current uncleanliness level as a uint256.\n     */\n    function getUncleanliness() public view returns (uint256) {}\n    \n    /**\n     * @notice Gets the current boredom level of the pet.\n     * @dev Boredom increases over time and is reset by playing with the pet.\n     * @return The current boredom level as a uint256.\n     */\n    function getBoredom() public view returns (uint256) {}\n    \n    /**\n     * @notice Gets the current sleepiness level of the pet.\n     * @dev Sleepiness increases over time and is reset by putting the pet to sleep.\n     * @return The current sleepiness level as a uint256.\n     */\n    function getSleepiness() public view returns (uint256) {}\n}\n"
}