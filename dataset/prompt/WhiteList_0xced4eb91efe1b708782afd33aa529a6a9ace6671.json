{
    "contract_name": "WhiteList",
    "ground_truth": "contract WhiteList is Ownable {\n\n    \n    mapping(address => bool) public whiteList;\n    uint public totalWhiteListed; //white listed users number\n\n    event LogWhiteListed(address indexed user, uint whiteListedNum);\n    event LogWhiteListedMultiple(uint whiteListedNum);\n    event LogRemoveWhiteListed(address indexed user);\n\n    // @notice it will return status of white listing\n    // @return true if user is white listed and false if is not\n    function isWhiteListed(address _user) external view returns (bool) {\n\n        return whiteList[_user]; \n    }\n\n    // @notice it will remove whitelisted user\n    // @param _contributor {address} of user to unwhitelist\n    function removeFromWhiteList(address _user) external onlyOwner() returns (bool) {\n       \n        require(whiteList[_user] == true);\n        whiteList[_user] = false;\n        totalWhiteListed--;\n        LogRemoveWhiteListed(_user);\n        return true;\n    }\n\n    // @notice it will white list one member\n    // @param _user {address} of user to whitelist\n    // @return true if successful\n    function addToWhiteList(address _user) external onlyOwner() returns (bool) {\n\n        if (whiteList[_user] != true) {\n            whiteList[_user] = true;\n            totalWhiteListed++;\n            LogWhiteListed(_user, totalWhiteListed);            \n        }\n        return true;\n    }\n\n    // @notice it will white list multiple members\n    // @param _user {address[]} of users to whitelist\n    // @return true if successful\n    function addToWhiteListMultiple(address[] _users) external onlyOwner() returns (bool) {\n\n        for (uint i = 0; i < _users.length; ++i) {\n\n            if (whiteList[_users[i]] != true) {\n                whiteList[_users[i]] = true;\n                totalWhiteListed++;                          \n            }           \n        }\n        LogWhiteListedMultiple(totalWhiteListed); \n        return true;\n    }\n}",
    "function_sum": 4,
    "compiler_version": "0.4.18",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n\ncontract Ownable {\n    address public owner;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n\n// You task is to complete the smart contract WhiteList strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.18, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title WhiteList\n * @notice A contract for managing a whitelist of addresses. Only the owner can add or remove addresses from the whitelist.\n * @dev Inherits from Ownable to restrict certain functions to the contract owner.\n */\ncontract WhiteList is Ownable {\n\n    // @notice Mapping to store the whitelist status of an address.\n    // @dev The key is the address, and the value is a boolean indicating whether the address is whitelisted.\n    mapping(address => bool) public whiteList;\n\n    // @notice Total number of whitelisted addresses.\n    // @dev This count is updated when addresses are added or removed from the whitelist.\n    uint public totalWhiteListed; //white listed users number\n\n    // @dev Event emitted when an address is whitelisted.\n    event LogWhiteListed(address indexed user, uint whiteListedNum);\n\n    // @dev Event emitted when multiple addresses are whitelisted.\n    event LogWhiteListedMultiple(uint whiteListedNum);\n\n    // @dev Event emitted when an address is removed from the whitelist.\n    event LogRemoveWhiteListed(address indexed user);\n\n    /**\n     * @notice Checks if a given address is whitelisted.\n     * @param _user The address to check.\n     * @return true if the address is whitelisted, false otherwise.\n     */\n    function isWhiteListed(address _user) external view returns (bool) {\n        return whiteList[_user]; \n    }\n\n    /**\n     * @notice Removes an address from the whitelist.\n     * @dev Only the contract owner can call this function.\n     * @param _user The address to remove from the whitelist.\n     * @return true if the address was successfully removed.\n     */\n    function removeFromWhiteList(address _user) external onlyOwner() returns (bool) {\n        require(whiteList[_user] == true);\n        whiteList[_user] = false;\n        totalWhiteListed--;\n        emit LogRemoveWhiteListed(_user);\n        return true;\n    }\n\n    /**\n     * @notice Adds an address to the whitelist.\n     * @dev Only the contract owner can call this function.\n     * @param _user The address to add to the whitelist.\n     * @return true if the address was successfully added.\n     */\n    function addToWhiteList(address _user) external onlyOwner() returns (bool) {\n        if (whiteList[_user] != true) {\n            whiteList[_user] = true;\n            totalWhiteListed++;\n            emit LogWhiteListed(_user, totalWhiteListed);            \n        }\n        return true;\n    }\n\n    /**\n     * @notice Adds multiple addresses to the whitelist.\n     * @dev Only the contract owner can call this function.\n     * @param _users An array of addresses to add to the whitelist.\n     * @return true if all addresses were successfully added.\n     */\n    function addToWhiteListMultiple(address[] calldata _users) external onlyOwner() returns (bool) {\n        for (uint i = 0; i < _users.length; ++i) {\n            if (whiteList[_users[i]] != true) {\n                whiteList[_users[i]] = true;\n                totalWhiteListed++;                          \n            }           \n        }\n        emit LogWhiteListedMultiple(totalWhiteListed); \n        return true;\n    }\n}\n"
}