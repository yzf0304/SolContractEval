{
    "contract_name": "StandardToken",
    "ground_truth": "contract StandardToken is ERC20, SafeMath {\n\n    mapping (address => uint) balances;\n\n    mapping (address => mapping (address => uint)) allowed;\n\n\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n\n        balances[_to] = safeAdd(balances[_to], _value);\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n\n    }\n\n\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n\n        var _allowance = allowed[_from][msg.sender];\n\n\n\n        balances[_to] = safeAdd(balances[_to], _value);\n\n        balances[_from] = safeSub(balances[_from], _value);\n\n        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n\n        Transfer(_from, _to, _value);\n\n        return true;\n\n    }\n\n\n\n    function balanceOf(address _owner) public constant returns (uint balance) {\n\n        return balances[_owner];\n\n    }\n\n\n\n    function approve(address _spender, uint _value) public returns (bool success) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n\n    }\n\n\n\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n\n        return allowed[_owner][_spender];\n\n    }\n\n\n\n}",
    "function_sum": 5,
    "compiler_version": "0.4.19",
    "prompt": "// Below are some contexts potentially relevant to contract code generation.\n\n/**\n\n *Submitted for verification at Etherscan.io on 2018-01-26\n\n*/\n\ncontract SafeMath {\n\n    function safeSub(uint a, uint b) pure internal returns (uint) {\n\n        assert(b <= a);\n\n        return a - b;\n\n    }\n\n\n\n    function safeAdd(uint a, uint b) pure internal returns (uint) {\n\n        uint c = a + b;\n\n        assert(c >= a && c >= b);\n\n        return c;\n\n    }\n\n}\n\ncontract ERC20 {\n\n    uint public totalSupply;\n\n    function balanceOf(address who) public constant returns (uint);\n\n    function allowance(address owner, address spender) public constant returns (uint);\n\n    function transfer(address toAddress, uint value) public returns (bool ok);\n\n    function transferFrom(address fromAddress, address toAddress, uint value) public returns (bool ok);\n\n    function approve(address spender, uint value) public returns (bool ok);\n\n    event Transfer(address indexed fromAddress, address indexed toAddress, uint value);\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n}\n\n\n\n// You task is to complete the smart contract StandardToken strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.4.19, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.\n\n/**\n * @title StandardToken\n * @dev Implementation of the basic standard token with ERC20 and SafeMath.\n * @notice This contract provides a standard implementation of an ERC20 token, including transfer, transferFrom, approve, and allowance functions.\n */\ncontract StandardToken is ERC20, SafeMath {\n\n    mapping (address => uint) balances;\n\n    mapping (address => mapping (address => uint)) allowed;\n\n    /**\n     * @notice Transfers `_value` amount of tokens from the message sender to `_to`.\n     * @param _to The address to which the tokens will be transferred.\n     * @param _value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded.\n     * @dev Emits a Transfer event and uses SafeMath for arithmetic operations.\n     */\n    function transfer(address _to, uint _value) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @notice Transfers `_value` amount of tokens from `_from` to `_to`, using the allowance mechanism.\n     * @param _from The address from which the tokens will be transferred.\n     * @param _to The address to which the tokens will be transferred.\n     * @param _value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded.\n     * @dev Emits a Transfer event, updates the allowance, and uses SafeMath for arithmetic operations.\n     */\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        var _allowance = allowed[_from][msg.sender];\n        balances[_to] = safeAdd(balances[_to], _value);\n        balances[_from] = safeSub(balances[_from], _value);\n        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @notice Returns the balance of the `_owner` address.\n     * @param _owner The address whose balance is to be queried.\n     * @return The balance of the `_owner` address.\n     * @dev This function is constant and does not modify the state.\n     */\n    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * @notice Approves `_spender` to spend up to `_value` amount of tokens on behalf of the message sender.\n     * @param _spender The address that is being approved to spend the tokens.\n     * @param _value The maximum amount of tokens that can be spent.\n     * @return A boolean value indicating whether the operation succeeded.\n     * @dev Emits an Approval event. Be aware of the risks associated with setting the allowance to 0 before calling this function.\n     */\n    function approve(address _spender, uint _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @notice Returns the remaining amount of tokens that `_spender` is allowed to spend on behalf of `_owner`.\n     * @param _owner The address that owns the tokens.\n     * @param _spender The address that is allowed to spend the tokens.\n     * @return The remaining amount of tokens that `_spender` is allowed to spend.\n     * @dev This function is constant and does not modify the state.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n"
}