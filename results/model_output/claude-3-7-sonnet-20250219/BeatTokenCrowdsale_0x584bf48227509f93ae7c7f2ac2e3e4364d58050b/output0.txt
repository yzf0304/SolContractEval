```solidity
contract BeatTokenCrowdsale is Ownable {
    enum Stages {
        Deployed,
        PreIco,
        IcoPhase1,
        IcoPhase2,
        IcoPhase3,
        IcoEnded,
        Finalized
    }

    Stages public stage;

    using SafeMath for uint256;

    BeatToken public token;

    uint256 public contractStartTime;
    uint256 public preIcoEndTime;
    uint256 public icoPhase1EndTime;
    uint256 public icoPhase2EndTime;
    uint256 public icoPhase3EndTime;
    uint256 public contractEndTime;

    address public ethTeamWallet;
    address public beatTeamWallet;

    uint256 public ethWeiRaised;
    mapping(address => uint256) public balanceOf;

    uint public constant PRE_ICO_PERIOD = 28 days;
    uint public constant ICO_PHASE1_PERIOD = 28 days;
    uint public constant ICO_PHASE2_PERIOD = 28 days;
    uint public constant ICO_PHASE3_PERIOD = 28 days;

    uint256 public constant PRE_ICO_BONUS_PERCENTAGE = 100;
    uint256 public constant ICO_PHASE1_BONUS_PERCENTAGE = 75;
    uint256 public constant ICO_PHASE2_BONUS_PERCENTAGE = 50;
    uint256 public constant ICO_PHASE3_BONUS_PERCENTAGE = 25;

    uint256 public constant PRE_ICO_AMOUNT = 5000 * (10 ** 6) * (10 ** 18);
    uint256 public constant ICO_PHASE1_AMOUNT = 7000 * (10 ** 6) * (10 ** 18);
    uint256 public constant ICO_PHASE2_AMOUNT = 10500 * (10 ** 6) * (10 ** 18);
    uint256 public constant ICO_PHASE3_AMOUNT = 11875 * (10 ** 6) * (10 ** 18);

    uint256 public constant PRE_ICO_LIMIT = PRE_ICO_AMOUNT;
    uint256 public constant ICO_PHASE1_LIMIT = PRE_ICO_LIMIT + ICO_PHASE1_AMOUNT;
    uint256 public constant ICO_PHASE2_LIMIT = ICO_PHASE1_LIMIT + ICO_PHASE2_AMOUNT;
    uint256 public constant ICO_PHASE3_LIMIT = ICO_PHASE2_LIMIT + ICO_PHASE3_AMOUNT;

    uint256 public constant HARD_CAP = 230 * (10 ** 9) * (10 ** 18);

    uint256 public ethPriceInEuroCent;

    event BeatTokenPurchased(address indexed purchaser, address indexed beneficiary, uint256 ethWeiAmount, uint256 beatWeiAmount);
    event BeatTokenEthPriceChanged(uint256 newPrice);
    event BeatTokenPreIcoStarted();
    event BeatTokenIcoPhase1Started();
    event BeatTokenIcoPhase2Started();
    event BeatTokenIcoPhase3Started();
    event BeatTokenIcoFinalized();

    function BeatTokenCrowdsale(address _ethTeamWallet, address _beatTeamWallet) public {
        require(_ethTeamWallet != address(0));
        require(_beatTeamWallet != address(0));

        token = new BeatToken(HARD_CAP);
        stage = Stages.Deployed;
        ethTeamWallet = _ethTeamWallet;
        beatTeamWallet = _beatTeamWallet;
        ethPriceInEuroCent = 0;

        contractStartTime = 0;
        preIcoEndTime = 0;
        icoPhase1EndTime = 0;
        icoPhase2EndTime = 0;
        icoPhase3EndTime = 0;
        contractEndTime = 0;
    }

    function setEtherPriceInEuroCent(uint256 _ethPriceInEuroCent) onlyOwner public {
        require(_ethPriceInEuroCent > 0);
        ethPriceInEuroCent = _ethPriceInEuroCent;
        BeatTokenEthPriceChanged(_ethPriceInEuroCent);
    }

    function start() onlyOwner public {
        require(stage == Stages.Deployed);
        require(ethPriceInEuroCent > 0);

        contractStartTime = now;
        preIcoEndTime = contractStartTime + PRE_ICO_PERIOD;
        
        stage = Stages.PreIco;
        BeatTokenPreIcoStarted();
    }

    function finalize() onlyOwner public {
        require(stage == Stages.IcoEnded || now > contractEndTime);
        
        uint256 remainingTokens = HARD_CAP.sub(token.getTotalSupply());
        if (remainingTokens > 0) {
            token.mint(beatTeamWallet, remainingTokens);
        }
        
        stage = Stages.Finalized;
        BeatTokenIcoFinalized();
    }

    function() payable public {
        buyTokens(msg.sender);
    }

    function buyTokens(address beneficiary) payable public {
        require(beneficiary != address(0));
        require(msg.value > 0);
        require(isWithinValidIcoPhase());
        require(ethPriceInEuroCent > 0);

        uint256 ethWeiAmount = msg.value;
        uint256 beatWeiAmount = calculateBeatWeiAmount(ethWeiAmount);

        require(isWithinTokenAllocLimit(beatWeiAmount));

        determineCurrentStage(beatWeiAmount);

        token.mint(beneficiary, beatWeiAmount);
        balanceOf[beneficiary] = balanceOf[beneficiary].add(beatWeiAmount);
        ethWeiRaised = ethWeiRaised.add(ethWeiAmount);

        ethTeamWallet.transfer(ethWeiAmount);
        BeatTokenPurchased(msg.sender, beneficiary, ethWeiAmount, beatWeiAmount);
    }

    function isWithinValidIcoPhase() internal view returns (bool) {
        return stage == Stages.PreIco ||
               stage == Stages.IcoPhase1 ||
               stage == Stages.IcoPhase2 ||
               stage == Stages.IcoPhase3;
    }

    function calculateBeatWeiAmount(uint256 ethWeiAmount) internal view returns (uint256) {
        // Base calculation: 1 EUR = 100 BEAT tokens
        // 1 ETH = ethPriceInEuroCent / 100 EUR
        // beatAmount = ethAmount * (ethPriceInEuroCent / 100) * 100
        // Simplified: beatAmount = ethAmount * ethPriceInEuroCent
        uint256 beatBaseAmount = ethWeiAmount.mul(ethPriceInEuroCent);
        
        uint256 bonusPercentage = 0;
        if (stage == Stages.PreIco) {
            bonusPercentage = PRE_ICO_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase1) {
            bonusPercentage = ICO_PHASE1_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase2) {
            bonusPercentage = ICO_PHASE2_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase3) {
            bonusPercentage = ICO_PHASE3_BONUS_PERCENTAGE;
        }
        
        uint256 bonusAmount = beatBaseAmount.mul(bonusPercentage).div(100);
        return beatBaseAmount.add(bonusAmount);
    }

    function isWithinTokenAllocLimit(uint256 beatWeiAmount) internal view returns (bool) {
        uint256 currentSupply = token.getTotalSupply();
        uint256 newTotalSupply = currentSupply.add(beatWeiAmount);
        
        if (stage == Stages.PreIco) {
            return newTotalSupply <= PRE_ICO_LIMIT;
        } else if (stage == Stages.IcoPhase1) {
            return newTotalSupply <= ICO_PHASE1_LIMIT;
        } else if (stage == Stages.IcoPhase2) {
            return newTotalSupply <= ICO_PHASE2_LIMIT;
        } else if (stage == Stages.IcoPhase3) {
            return newTotalSupply <= ICO_PHASE3_LIMIT;
        }
        
        return false;
    }

    function determineCurrentStage(uint256 beatWeiAmount) internal {
        uint256 currentSupply = token.getTotalSupply();
        uint256 newTotalSupply = currentSupply.add(beatWeiAmount);
        
        if (stage == Stages.PreIco) {
            if (newTotalSupply >= PRE_ICO_LIMIT || now >= preIcoEndTime) {
                stage = Stages.IcoPhase1;
                icoPhase1EndTime = now + ICO_PHASE1_PERIOD;
                BeatTokenIcoPhase1Started();
            }
        } else if (stage == Stages.IcoPhase1) {
            if (newTotalSupply >= ICO_PHASE1_LIMIT || now >= icoPhase1EndTime) {
                stage = Stages.IcoPhase2;
                icoPhase2EndTime = now + ICO_PHASE2_PERIOD;
                BeatTokenIcoPhase2Started();
            }
        } else if (stage == Stages.IcoPhase2) {
            if (newTotalSupply >= ICO_PHASE2_LIMIT || now >= icoPhase2EndTime) {
                stage = Stages.IcoPhase3;
                icoPhase3EndTime = now + ICO_PHASE3_PERIOD;
                contractEndTime = icoPhase3EndTime;
                BeatTokenIcoPhase3Started();
            }
        } else if (stage == Stages.IcoPhase3) {
            if (newTotalSupply >= ICO_PHASE3_LIMIT || now >= icoPhase3EndTime) {
                stage = Stages.IcoEnded;
            }
        }
    }
}
```