I'll complete the `BotMinting` contract according to the provided context and requirements:

```solidity
contract BotMinting is BotAuction {

    uint256 public constant PROMO_CREATION_LIMIT = 5000;
    uint256 public constant GEN0_CREATION_LIMIT = 45000;
    uint256 public constant GEN0_STARTING_PRICE = 10 finney;
    uint256 public constant GEN0_AUCTION_DURATION = 1 days;
    uint256 public promoCreatedCount;
    uint256 public gen0CreatedCount;

    /**
     * @notice Creates a promo bot with the specified genes and assigns it to an owner.
     * @dev Only the COO can call this function. The bot owner defaults to the COO if not specified.
     * @param _genes The genetic makeup of the bot.
     * @param _owner The address of the owner of the new bot.
     */
    function createPromoBot(uint256 _genes, address _owner) external onlyCOO {
        address botOwner = _owner;
        if (botOwner == address(0)) {
            botOwner = cooAddress;
        }
        
        require(promoCreatedCount < PROMO_CREATION_LIMIT);
        
        promoCreatedCount++;
        _createBot(0, 0, 0, _genes, botOwner);
    }

    /**
     * @notice Creates a Gen0 bot with the specified genes and starts an auction for it.
     * @dev Only the COO can call this function. The bot is initially owned by the contract and then put up for auction.
     * @param _genes The genetic makeup of the bot.
     */
    function createGen0Auction(uint256 _genes) external onlyCOO {
        require(gen0CreatedCount < GEN0_CREATION_LIMIT);
        
        uint256 botId = _createBot(0, 0, 0, _genes, address(this));
        
        _approve(botId, saleAuction);
        
        saleAuction.createAuction(
            botId,
            _computeNextGen0Price(),
            GEN0_STARTING_PRICE,
            GEN0_AUCTION_DURATION,
            address(this)
        );
        
        gen0CreatedCount++;
    }

    /**
     * @notice Computes the next price for a Gen0 bot based on the average sale price.
     * @dev The price is calculated as the average sale price plus half of the average sale price. If the computed price is below the starting price, it defaults to the starting price.
     * @return The next price for a Gen0 bot.
     */
    function _computeNextGen0Price() internal view returns (uint256) {
        uint256 averagePrice = saleAuction.averageGen0SalePrice();
        
        // If the average price is zero (no sales yet), return the starting price
        if (averagePrice == 0) {
            return GEN0_STARTING_PRICE;
        }
        
        // Calculate 150% of the average price
        uint256 nextPrice = averagePrice + (averagePrice / 2);
        
        // If the calculated price is below the starting price, use the starting price
        if (nextPrice < GEN0_STARTING_PRICE) {
            nextPrice = GEN0_STARTING_PRICE;
        }
        
        return nextPrice;
    }
}
```

This implementation follows the provided specifications:

1. It enforces the creation limits for both promotional and Gen0 bots
2. The promotional bots are assigned directly to the specified owner or to the COO if no owner is specified
3. Gen0 bots are created and immediately put up for auction
4. The price calculation for Gen0 auctions is based on the average sale price plus 50%, with a minimum of the GEN0_STARTING_PRICE
5. All functions properly utilize the underlying contract functionality for bot creation and auction setup