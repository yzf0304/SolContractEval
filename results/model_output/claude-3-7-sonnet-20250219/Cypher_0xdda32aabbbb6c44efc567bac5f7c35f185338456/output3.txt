Here's the complete implementation of the ERC721 contract according to the provided context:

```solidity
/**
 * @notice Implementation of the ERC721 Non-Fungible Token Standard, including the Metadata extension.
 * @dev This contract provides a basic implementation of the ERC721 standard, including token creation, transfer, and approval functionalities.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @notice Checks if the contract implements a specific interface.
     * @dev See {IERC165-supportsInterface}.
     * @param interfaceId The interface identifier to check.
     * @return A boolean indicating if the interface is supported.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return interfaceId == type(IERC721).interfaceId || 
               interfaceId == type(IERC721Metadata).interfaceId || 
               super.supportsInterface(interfaceId);
    }

    /**
     * @notice Returns the number of tokens in `owner`'s account.
     * @dev See {IERC721-balanceOf}.
     * @param owner The address of the token holder.
     * @return The balance of the specified address.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @notice Returns the owner of the `tokenId` token.
     * @dev See {IERC721-ownerOf}.
     * @param tokenId The ID of the token to query.
     * @return The owner of the specified token.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @notice Returns the name of the token.
     * @dev See {IERC721Metadata-name}.
     * @return The name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @notice Returns the symbol of the token.
     * @dev See {IERC721Metadata-symbol}.
     * @return The symbol of the token.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @notice Returns the URI for a given token.
     * @dev See {IERC721Metadata-tokenURI}.
     * @param tokenId The ID of the token to query.
     * @return The URI of the specified token.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overriden in child contracts.
     * @return The base URI.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @notice Approves another address to transfer the given token ID.
     * @dev See {IERC721-approve}.
     * @param to The address to approve.
     * @param tokenId The ID of the token to approve.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @notice Gets the approved address for a token ID, or zero if no address is set.
     * @dev See {IERC721-getApproved}.
     * @param tokenId The ID of the token to query.
     * @return The approved address for the specified token.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @notice Sets or unsets the approval of a given operator for an owner.
     * @dev See {IERC721-setApprovalForAll}.
     * @param operator The address to set or unset approval for.
     * @param approved A boolean indicating if the operator is approved.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != _msgSender(), "ERC721: approve to caller");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @notice Queries the approval status of an operator for a given owner.
     * @dev See {IERC721-isApprovedForAll}.
     * @param owner The address of the token owner.
     * @param operator The address of the operator to check.
     * @return A boolean indicating if the operator is approved for all.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @notice Transfers a token from one address to another.
     * @dev See {IERC721-transferFrom}.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param tokenId The ID of the token to transfer.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @notice Safely transfers a token from one address to another, checking that the recipient is aware of the ERC721 protocol.
     * @dev See {IERC721-safeTransferFrom}.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param tokenId The ID of the token to transfer.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @notice Safely transfers a token from one address to another, with additional data, checking that the recipient is aware of the ERC721 protocol.
     * @dev See {IERC721-safeTransferFrom}.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param tokenId The ID of the token to transfer.
     * @param _data Additional data to send along with the transfer.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param tokenId The ID of the token to transfer.
     * @param _data Additional data to send along with the transfer.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     * @param tokenId The ID of the token to check.
     * @return A boolean indicating if the token exists.
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     * @param spender The address to check.
     * @param tokenId The ID of the token to check.
     * @return A boolean indicating if the spender is approved or the owner.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     * @param to The address to mint the token to.
     * @param tokenId The ID of the token to mint.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {_safeMint}, with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     * @param to The address to mint the token to.
     * @param tokenId The ID of the token to mint.
     * @param _data Additional data to send along with the transfer.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     * @param to The address to mint the token to.
     * @param tokenId The ID of the token to mint.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * @param tokenId The ID of the token to burn.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param tokenId The ID of the token to transfer.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     * @param to The address to approve.
     * @param tokenId The ID of the token to approve.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * @param from The address representing the previous owner of the given token ID.
     * @param to The target address that will receive the tokens.
     * @param tokenId The ID of the token to be transferred.
     * @param _data Optional data to send along with the call.
     * @return A boolean indicating if the call correctly returned the expected magic value.
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting and burning.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param tokenId The ID of the token to transfer.
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}
```

This implementation provides a complete ERC721 contract that follows the EIP-721 standard, including all required functionality for non-fungible tokens. The contract handles token ownership, transfers, approvals, and metadata, with appropriate safeguards and events for tracking token movements.