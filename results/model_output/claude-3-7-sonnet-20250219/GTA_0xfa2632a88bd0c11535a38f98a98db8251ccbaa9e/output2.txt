I'll complete the StandardToken contract according to the requirements. Here's the full implementation:

```solidity
contract StandardToken is ERC20 {

    using SafeMath for uint256;

    mapping(address => uint256) balances;

    mapping (address => mapping (address => uint256)) allowed;

    /**
     * @notice Returns the balance of the specified address.
     * @param _owner The address to query the balance of.
     * @return The balance of the specified address.
     * @dev This function is used to check the balance of a specific address.
     */
    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
    
    /**
     * @notice Transfer token to a specified address.
     * @param _to The address to transfer to.
     * @param _value The amount to be transferred.
     * @return True if the transfer was successful.
     * @dev This function is used to transfer tokens from the sender to another address.
     */
    function transfer(address _to, uint256 _value) returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Transfer tokens from one address to another.
     * @param _from The address which you want to send tokens from.
     * @param _to The address which you want to transfer to.
     * @param _value The amount of tokens to be transferred.
     * @return True if the transfer was successful.
     * @dev This function is used to transfer tokens from one address to another when approved.
     */
    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Approves the specified address to spend a certain amount of tokens on behalf of the message sender.
     * @param _spender The address which will spend the funds.
     * @param _value The amount of tokens to be spent.
     * @return True if the approval was successful.
     * @dev To change the approve amount, you first have to reduce the addresses' allowance to zero by calling `approve(_spender, 0)` if it is not already 0 to mitigate the race condition described here: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     */
    function approve(address _spender, uint256 _value) returns (bool) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Returns the remaining number of tokens that `_spender` is allowed to spend on behalf of `_owner`.
     * @param _owner The address of the token owner.
     * @param _spender The address of the spender.
     * @return The remaining allowance for the spender.
     * @dev This function is used to check the remaining allowance for a specific spender.
     */
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}
```

Note: The contract uses SafeMath for arithmetic operations to prevent overflows and underflows. The `using SafeMath for uint256;` statement indicates this dependency, but the actual SafeMath library isn't included in the provided code. In a real-world scenario, you would need to include the SafeMath library or contract in your project.