```solidity
/**
 * @notice This contract manages the bonus distribution for an ICO, allowing the owner to enable or disable bonuses,
 *         calculate bonuses based on time and ETH amount, and manage bonus balances for participants.
 * @dev This contract inherits from IcoPhase and Ownable. It uses SafeMath for arithmetic operations.
 */
contract Bonus is IcoPhase, Ownable {

    using SafeMath for uint256;

    //decimals of tokens
    uint256 constant decimals = 18;

    //enable/disable
    bool public isBonus;

    //storage
    mapping(address => uint256) public bonusAccountBalances;
    mapping(uint256 => address) public bonusAccountIndex;
    uint256 public bonusAccountCount;

    /**
     * @notice Initializes the contract with bonuses enabled.
     * @dev Constructor sets the initial state of the contract.
     */
    function Bonus() public {
        isBonus = true;
    }

    /**
     * @notice Enables the bonus system.
     * @dev Can only be called by the contract owner and when bonuses are currently disabled.
     * @return A boolean indicating the success of the operation.
     */
    function enableBonus() public onlyOwner returns (bool) {
        require(isBonus == false);
        isBonus = true;
        return true;
    }

    /**
     * @notice Disables the bonus system.
     * @dev Can only be called by the contract owner and when bonuses are currently enabled.
     * @return A boolean indicating the success of the operation.
     */
    function disableBonus() public onlyOwner returns (bool) {
        require(isBonus == true);
        isBonus = false;
        return true;
    }

    /**
     * @notice Gets the bonus percentage based on the current time.
     * @dev Checks the current time against predefined phases and returns the corresponding bonus percentage.
     * @return The bonus percentage as a uint256.
     */
    function getBonusByTime() public constant returns(uint256) {
        if (now >= phasePresale_From && now <= phasePresale_To) {
            return 40; // 40% bonus during presale
        } else if (now >= phasePublicSale1_From && now <= phasePublicSale1_To) {
            return 20; // 20% bonus during public sale phase 1
        } else if (now >= phasePublicSale2_From && now <= phasePublicSale2_To) {
            return 15; // 15% bonus during public sale phase 2
        } else if (now >= phasePublicSale3_From && now <= phasePublicSale3_To) {
            return 10; // 10% bonus during public sale phase 3
        } else {
            return 0;  // No bonus outside of defined phases
        }
    }

    /**
     * @notice Calculates the bonus amount based on the provided ETH value.
     * @dev Determines the bonus amount based on the current phase and the provided ETH value.
     * @param _value The amount of ETH to convert to a bonus.
     * @return The bonus amount as a uint256.
     */
    function getBonusByETH(uint256 _value) public constant returns(uint256) {
        if (!isBonus) {
            return 0;
        }
        
        uint256 bonusPercent = getBonusByTime();
        
        // Apply additional bonus based on ETH amount
        if (_value >= 100 ether) {
            bonusPercent = bonusPercent.add(10);
        } else if (_value >= 50 ether) {
            bonusPercent = bonusPercent.add(5);
        } else if (_value >= 10 ether) {
            bonusPercent = bonusPercent.add(3);
        }
        
        // Calculate the bonus amount: _value * bonusPercent / 100
        return _value.mul(bonusPercent).div(100);
    }

    /**
     * @notice Returns the bonus balance of a specific account.
     * @dev Fetches the bonus balance from the storage mapping.
     * @param _owner The address of the account to check the bonus balance for.
     * @return The bonus balance as a uint256.
     */
    function balanceBonusOf(address _owner) public constant returns (uint256 balance) {
        return bonusAccountBalances[_owner];
    }

    /**
     * @notice Pays a bonus to a specified address.
     * @dev Only the contract owner can call this function. The actual implementation of paying the bonus should be defined.
     * @param _address The address to which the bonus will be paid.
     * @return A boolean indicating the success of the operation.
     */
    function payBonusToAddress(address _address) public onlyOwner returns (bool success) {
        require(_address != 0x0);
        require(bonusAccountBalances[_address] > 0);
        
        uint256 bonusAmount = bonusAccountBalances[_address];
        bonusAccountBalances[_address] = 0;
        
        // Record the address if it's new
        if (bonusAccountBalances[_address] == 0) {
            bonusAccountIndex[bonusAccountCount] = _address;
            bonusAccountCount = bonusAccountCount.add(1);
        }
        
        // The bonus is considered paid even if the transfer fails
        // In a real implementation, you would likely want to handle this differently
        _address.transfer(bonusAmount);
        
        return true;
    }

    /**
     * @notice Fallback function to receive Ether.
     * @dev This function allows the contract to receive Ether.
     */
    function() public payable {
        // Accept ETH transfers
    }
}
```