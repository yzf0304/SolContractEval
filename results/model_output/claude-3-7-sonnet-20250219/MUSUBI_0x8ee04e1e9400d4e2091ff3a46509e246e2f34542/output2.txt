I'll complete the MUSUBI contract according to the provided context and description. Here's the fully implemented contract:

```solidity
contract MUSUBI is Context, IERC20, Ownable {
    using SafeMath for uint256;

    // Mappings to store the balance, allowances, and fee exclusion status of addresses
    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => User) private cooldown;

    // Constants and variables for token and fee management
    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _tTotal = 1e12 * 10**9;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;
    string private constant _name = unicode"Musubi";
    string private constant _symbol = unicode"MUSUBI";
    uint8 private constant _decimals = 9;
    uint256 private _taxFee = 6;
    uint256 private _teamFee = 4;
    uint256 private _feeRate = 5;
    uint256 private _feeMultiplier = 1000;
    uint256 private _launchTime;
    uint256 private _previousTaxFee = _taxFee;
    uint256 private _previousteamFee = _teamFee;
    uint256 private _maxBuyAmount;
    address payable private _FeeAddress;
    address payable private _marketingWalletAddress;
    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen;
    bool private _cooldownEnabled = true;
    bool private inSwap = false;
    bool private _useImpactFeeSetter = true;
    uint256 private buyLimitEnd;

    // Struct to store user-specific data
    struct User {
        uint256 buy;
        uint256 sell;
        bool exists;
    }

    // Events for logging important state changes
    event MaxBuyAmountUpdated(uint _maxBuyAmount);
    event CooldownEnabledUpdated(bool _cooldown);
    event FeeMultiplierUpdated(uint _multiplier);
    event FeeRateUpdated(uint _rate);

    // Modifier to prevent reentrancy during swaps
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor (address payable FeeAddress, address payable marketingWalletAddress) {
        _FeeAddress = FeeAddress;
        _marketingWalletAddress = marketingWalletAddress;
        _rOwned[_msgSender()] = _rTotal;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[FeeAddress] = true;
        _isExcludedFromFee[marketingWalletAddress] = true;
        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount.div(currentRate);
    }

    function removeAllFee() private {
        if(_taxFee == 0 && _teamFee == 0) return;
        
        _previousTaxFee = _taxFee;
        _previousteamFee = _teamFee;
        
        _taxFee = 0;
        _teamFee = 0;
    }
    
    function restoreAllFee() private {
        _taxFee = _previousTaxFee;
        _teamFee = _previousteamFee;
    }

    function setFee(uint256 impactFee) private {
        // Ensure the impact fee is between 10 and 40
        if (impactFee < 10) {
            impactFee = 10;
        } else if (impactFee > 40) {
            impactFee = 40;
        }
        
        // Make sure impact fee is even
        if (impactFee % 2 != 0) {
            impactFee = impactFee + 1;
        }
        
        // Set tax fee as 60% of impact fee
        _taxFee = impactFee * 6 / 10;
        
        // Set team fee as 40% of impact fee
        _teamFee = impactFee * 4 / 10;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        
        // Trading restrictions for non-owners
        if (from != owner() && to != owner()) {
            // Check if trading is open
            require(tradingOpen, "Trading not yet enabled");
            
            // Apply buy limit during initial period
            if (block.timestamp < buyLimitEnd && from == uniswapV2Pair) {
                require(amount <= _maxBuyAmount, "Buy exceeds the limit");
            }
            
            // Implement cooldown mechanism
            if (_cooldownEnabled) {
                // Create user entry if it doesn't exist
                if (!cooldown[from].exists) {
                    cooldown[from] = User(0, 0, true);
                }
                if (!cooldown[to].exists) {
                    cooldown[to] = User(0, 0, true);
                }
                
                // Handle buy cooldown
                if (from == uniswapV2Pair) {
                    require(cooldown[to].buy < block.timestamp, "Cooldown active");
                    // 45 second cooldown for buys during initial period
                    if (block.timestamp < _launchTime + 120) {
                        cooldown[to].buy = block.timestamp + 45;
                    }
                    cooldown[to].sell = block.timestamp + 15;  // 15 second cooldown after buying before selling
                }
                
                // Handle sell cooldown
                if (to == uniswapV2Pair) {
                    require(cooldown[from].sell < block.timestamp, "Cooldown active");
                }
            }
        }
        
        bool takeFee = true;
        
        // Don't take fee if sender or recipient is excluded from fee
        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
            takeFee = false;
        }
        
        // Handle token swapping when not in swap and sender is not the pair
        uint256 contractTokenBalance = balanceOf(address(this));
        if (
            !inSwap && 
            from != uniswapV2Pair && 
            contractTokenBalance > 0
        ) {
            swapTokensForEth(contractTokenBalance);
            uint256 contractETHBalance = address(this).balance;
            if(contractETHBalance > 0) {
                sendETHToFee(address(this).balance);
            }
        }
        
        // Dynamic fees for sells
        if (takeFee && to == uniswapV2Pair && _useImpactFeeSetter) {
            uint256 sellAmount = amount;
            uint256 tokensInPool = amountInPool();
            uint256 impactFee;
            
            // Calculate fee based on impact (5% of the pool = 40% fee)
            if (tokensInPool > 0) {
                impactFee = sellAmount.mul(_feeMultiplier).div(tokensInPool).mul(_feeRate);
                setFee(impactFee);
            }
        }
        
        // Transfer tokens
        _tokenTransfer(from, to, amount, takeFee);
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // Execute the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function sendETHToFee(uint256 amount) private {
        uint256 half = amount.div(2);
        uint256 otherHalf = amount.sub(half);
        
        _FeeAddress.transfer(half);
        _marketingWalletAddress.transfer(otherHalf);
    }

    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
        if(!takeFee)
            removeAllFee();
            
        _transferStandard(sender, recipient, amount);
        
        if(!takeFee)
            restoreAllFee();
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        
        _takeTeam(tTeam);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, _getRate());
        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
    }

    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {
        uint256 tFee = tAmount.mul(taxFee).div(100);
        uint256 tTeam = tAmount.mul(TeamFee).div(100);
        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
        return (tTransferAmount, tFee, tTeam);
    }

    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        return (rSupply, tSupply);
    }

    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rTeam = tTeam.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
        return (rAmount, rTransferAmount, rFee);
    }

    function _takeTeam(uint256 tTeam) private {
        uint256 currentRate =  _getRate();
        uint256 rTeam = tTeam.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
    }

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    receive() external payable {}

    function addLiquidity() external onlyOwner() {
        require(!tradingOpen,"trading is already open");
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Router = _uniswapV2Router;
        _approve(address(this), address(uniswapV2Router), _tTotal);
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
        _maxBuyAmount = 3000000000 * 10**9;
        _launchTime = block.timestamp;
        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
    }

    function openTrading() public onlyOwner {
        tradingOpen = true;
        buyLimitEnd = block.timestamp + 120; // 2 minutes buy limit period
    }

    function manualswap() external {
        require(_msgSender() == _FeeAddress);
        uint256 contractBalance = balanceOf(address(this));
        swapTokensForEth(contractBalance);
    }

    function manualsend() external {
        require(_msgSender() == _FeeAddress);
        uint256 contractETHBalance = address(this).balance;
        sendETHToFee(contractETHBalance);
    }

    function setFeeRate(uint256 rate) external {
        require(_msgSender() == _FeeAddress);
        require(rate <= 50, "Rate cannot exceed 50%");
        _feeRate = rate;
        emit FeeRateUpdated(rate);
    }

    function setCooldownEnabled(bool onoff) external onlyOwner() {
        _cooldownEnabled = onoff;
        emit CooldownEnabledUpdated(onoff);
    }

    function thisBalance() public view returns (uint) {
        return address(this).balance;
    }

    function cooldownEnabled() public view returns (bool) {
        return _cooldownEnabled;
    }

    function timeToBuy(address buyer) public view returns (uint) {
        if (!cooldown[buyer].exists) return 0;
        if (cooldown[buyer].buy <= block.timestamp) return 0;
        return cooldown[buyer].buy - block.timestamp;
    }

    function timeToSell(address buyer) public view returns (uint) {
        if (!cooldown[buyer].exists) return 0;
        if (cooldown[buyer].sell <= block.timestamp) return 0;
        return cooldown[buyer].sell - block.timestamp;
    }

    function amountInPool() public view returns (uint) {
        return IERC20(address(this)).balanceOf(uniswapV2Pair);
    }
}
```

This implementation includes all the required functionality as described in the context:

1. ERC20 token with reflection mechanism
2. Dynamic fee structure with higher fees for larger sells (10% to 40%)
3. Buy cooldown period (45 seconds during initial period)
4. 15-second cooldown after buying before selling
5. Initial buy limit of 3 billion tokens for the first 2 minutes
6. 10% fee on buys (6% tax fee, 4% team fee)
7. Fee distribution between fee and marketing wallets
8. Token swapping functionality for ETH
9. Owner-only functions for managing the contract parameters

The contract is designed to discourage whale manipulation while allowing for normal trading activities.