I'll complete the OdinToken contract with the missing function implementations based on the provided context and descriptions.

```solidity
/**
 * @notice OdinToken is an ERC20 token with additional features such as airdrop restrictions and owner-controlled whitelisting.
 * @dev This contract extends the ERC20Interface and Owned contracts, providing basic token functionality along with specific rules for airdropped tokens and whitelisting.
 */
contract OdinToken is ERC20Interface, Owned {

  using SafeMath for uint256;

    string public symbol;
    string public name;
    uint8 public decimals;
    uint private _totalSupply;
    bool private _whitelistAll;

    struct balanceData {  
       bool locked;
       uint balance;
       uint airDropQty;
    }

    mapping(address => balanceData) balances;
    mapping(address => mapping(address => uint)) allowed;

  /**
  * @dev Constructor for Odin creation
  * @dev Initially assigns the totalSupply to the contract creator
  */
    function OdinToken() public {
        
        // owner of this contract
        owner = msg.sender;
        symbol = "ODIN";
        name = "ODIN Token";
        decimals = 18;
        _whitelistAll=false;
        _totalSupply = 100000000000000000000000;
        balances[owner].balance = _totalSupply;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }

  /**
  * @notice Returns the total supply of the token.
  * @return The total supply of the token.
  * @dev This function returns the total number of tokens in circulation.
  */
    function totalSupply() constant public returns (uint256 totalSupply) {
        return _totalSupply;
    }

  /**
  * @notice Whitelist an address to allow it to receive airdrops.
  * @param to The address to whitelist.
  * @return A boolean indicating whether the operation was successful.
  * @dev This function sets the airdrop quantity for the specified address to 0, effectively whitelisting it.
  */
    function whitelistAddress(address to) onlyOwner public returns (bool) {
        balances[to].airDropQty = 0;
        return true;
    }

  /**
  * @notice Whitelist all addresses early.
  * @return A boolean indicating whether the operation was successful.
  * @dev This function sets the `_whitelistAll` flag to true, allowing all addresses to be whitelisted.
  */
    function whitelistAllAddresses() onlyOwner public returns (bool) {
        _whitelistAll = true;
        return true;
    }

  /**
  * @notice Gets the balance of the specified address.
  * @param tokenOwner The address to query the balance of.
  * @return The amount owned by the passed address.
  * @dev This function returns the balance of the specified address.
  */
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner].balance;
    }

  /**
    * @dev Transfers tokens from sender to recipient with transfer restrictions.
    * 
    * Restrictions:
    * - Cannot send to self or address(0)
    * - Sender must have sufficient balance
    * - Air-dropped tokens have time-based transfer limits (if whitelistAll=false):
    *   - Before Sep 1 2018: Cannot transfer any air-dropped tokens
    *   - Sep 1-Sep 30 2018: Max 10% transfer of air-dropped tokens
    *   - Oct 1-Dec 31 2018: Max 25% transfer of air-dropped tokens
    *   - Jan 1-Mar 31 2019: Max 50% transfer of air-dropped tokens
    *   - Apr 1-Jun 30 2019: Max 75% transfer of air-dropped tokens
    *   - After Jun 30 2019: No restrictions
    * 
    * @param to Recipient address (cannot be zero address)
    * @param tokens Amount to transfer (must be â‰¤ sender's balance)
    * @return success Always returns true if transfer succeeds
    * 
    * @notice Emits Transfer event
    * @dev AirDropQty tracks air-dropped tokens for each account
    *      Owner transfers bypass air-drop restrictions
    */
    function transfer(address to, uint tokens) public returns (bool success) {
        // Check if the sender is sending to themselves or to the zero address
        require(to != address(0) && to != msg.sender);
        
        // Check if the sender has enough balance
        require(balances[msg.sender].balance >= tokens);
        
        // If sender is the owner, or whitelistAll is true, transfer without restrictions
        if (msg.sender == owner || _whitelistAll) {
            balances[msg.sender].balance = balances[msg.sender].balance.sub(tokens);
            balances[to].balance = balances[to].balance.add(tokens);
            emit Transfer(msg.sender, to, tokens);
            return true;
        }
        
        // Check airdrop restrictions based on time
        uint airDropAvailable = 0;
        
        // Get current time as timestamp
        uint currentTime = now;
        
        // Define time thresholds
        uint sep1_2018 = 1535760000;  // September 1, 2018
        uint sep30_2018 = 1538265600; // September 30, 2018
        uint dec31_2018 = 1546214400; // December 31, 2018
        uint mar31_2019 = 1553990400; // March 31, 2019
        uint jun30_2019 = 1561852800; // June 30, 2019
        
        // Calculate available airdrop tokens based on time
        if (currentTime < sep1_2018) {
            // Before Sep 1 2018: No airdropped tokens can be transferred
            airDropAvailable = 0;
        } else if (currentTime < sep30_2018) {
            // Sep 1-30 2018: 10% of airdropped tokens can be transferred
            airDropAvailable = balances[msg.sender].airDropQty.mul(10).div(100);
        } else if (currentTime < dec31_2018) {
            // Oct 1-Dec 31 2018: 25% of airdropped tokens can be transferred
            airDropAvailable = balances[msg.sender].airDropQty.mul(25).div(100);
        } else if (currentTime < mar31_2019) {
            // Jan 1-Mar 31 2019: 50% of airdropped tokens can be transferred
            airDropAvailable = balances[msg.sender].airDropQty.mul(50).div(100);
        } else if (currentTime < jun30_2019) {
            // Apr 1-Jun 30 2019: 75% of airdropped tokens can be transferred
            airDropAvailable = balances[msg.sender].airDropQty.mul(75).div(100);
        } else {
            // After Jun 30 2019: All tokens can be transferred
            airDropAvailable = balances[msg.sender].airDropQty;
        }
        
        // Calculate non-airdropped tokens (purchased tokens)
        uint purchasedTokens = balances[msg.sender].balance.sub(balances[msg.sender].airDropQty);
        
        // Calculate total transferable tokens
        uint transferableTokens = purchasedTokens.add(airDropAvailable);
        
        // Check if the sender has enough transferable tokens
        require(transferableTokens >= tokens);
        
        // Perform the transfer
        balances[msg.sender].balance = balances[msg.sender].balance.sub(tokens);
        balances[to].balance = balances[to].balance.add(tokens);
        
        // Update airdropped tokens count if needed
        if (tokens > purchasedTokens) {
            uint airDropTokensUsed = tokens.sub(purchasedTokens);
            balances[msg.sender].airDropQty = balances[msg.sender].airDropQty.sub(airDropTokensUsed);
        }
        
        emit Transfer(msg.sender, to, tokens);
        return true;
    }

  /**
  * @notice Approve the spender to spend a specified amount of tokens.
  * @param spender The address that will spend the tokens.
  * @param tokens The amount of tokens to approve.
  * @return A boolean indicating whether the operation was successful.
  * @dev This function is not implemented in this contract.
  */
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

  /**
  * @notice Transfer tokens from one address to another, using the allowance mechanism.
  * @param from The address to transfer from.
  * @param to The address to transfer to.
  * @param tokens The amount to be transferred.
  * @return A boolean indicating whether the operation was successful.
  * @dev This function is not implemented in this contract.
  */
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        require(to != address(0) && to != from);
        require(balances[from].balance >= tokens);
        require(allowed[from][msg.sender] >= tokens);
        
        balances[from].balance = balances[from].balance.sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to].balance = balances[to].balance.add(tokens);
        
        emit Transfer(from, to, tokens);
        return true;
    }

  /**
  * @notice Get the remaining number of tokens that `spender` is allowed to spend on behalf of `tokenOwner`.
  * @param tokenOwner The address that owns the tokens.
  * @param spender The address that will spend the tokens.
  * @return The remaining allowance.
  * @dev This function is not implemented in this contract.
  */
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }

  /**
  * @notice Approve the spender to spend a specified amount of tokens and call a contract.
  * @param spender The address that will spend the tokens.
  * @param tokens The amount of tokens to approve.
  * @param data Extra data to send to the approved contract.
  * @return A boolean indicating whether the operation was successful.
  * @dev This function is not implemented in this contract.
  */
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
        // Not implemented as per requirements
        revert();
    }

  /**
  * @notice Burn a specified amount of tokens from the owner's balance.
  * @param tokens The amount of tokens to burn.
  * @return A boolean indicating whether the operation was successful.
  * @dev This function burns a specified amount of tokens from the owner's balance, reducing the total supply.
  */
    function burn(uint256 tokens) onlyOwner public returns (bool) {
        require(balances[owner].balance >= tokens);
        
        balances[owner].balance = balances[owner].balance.sub(tokens);
        _totalSupply = _totalSupply.sub(tokens);
        
        emit Burn(tokens);
        return true;
    }

    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
}
```

This implementation completes the OdinToken contract with all the required functionality:
- totalSupply returns the total token supply
- whitelistAddress allows the owner to whitelist specific addresses
- whitelistAllAddresses enables the owner to whitelist all addresses
- balanceOf returns the balance of a specific address
- transfer implements the token transfer logic with time-based airdrop restrictions
- approve, transferFrom, and allowance implement standard ERC20 functionality
- burn allows the owner to burn tokens, reducing the total supply
- The fallback function rejects any direct ETH transfers

The contract maintains the structure provided in the context and implements the functions according to the specified requirements and descriptions.