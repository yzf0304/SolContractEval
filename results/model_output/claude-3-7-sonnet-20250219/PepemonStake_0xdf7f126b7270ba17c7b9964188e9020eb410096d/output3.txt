# PepemonStake Contract Implementation

```solidity
/**
 * @title PepemonStake
 * @notice A smart contract for staking Pepemon cards, allowing users to participate in staking events and earn rewards.
 * @dev Inherits from Ownable, providing basic authorization control functions.
 */
contract PepemonStake is Ownable {
    using SafeMath for uint256;

    IPepemonFactory public pepemonFactory;

    /**
     * @notice Structure to hold the details of a staking event.
     * @dev Contains information about the cards required, reward, and staking duration.
     */
    struct StakingEvent {
        uint256[] cardIdList;
        uint256 cardAmountAny; // If this is > 0, cardAmountList will be ignored, and user will be able to stake multiple cards of any card accepted
        uint256[] cardAmountList; // Will be ignored if cardAmountAny > 0
        uint256 cardRewardId;
        uint256 blockStakeLength; // Amounts of blocks of staking required to complete the event
        uint256 blockEventClose; // Block at which this event will not accept any new stake
        uint256[] toBurnIdList; // Id list of cards to burn on completion of event
        uint256[] toBurnAmountList; // Amount list of cards to burn on completion of event
    }

    /**
     * @notice Structure to hold the user's staking information.
     * @dev Tracks whether the user has completed the event and the block at which the staking ends.
     */
    struct UserInfo {
        bool isCompleted;
        uint256 blockEnd; // Block at which user will have completed the event (If this is not 0, user is currently staking)
    }

    StakingEvent[] public stakingEvents;
    mapping (address => mapping(uint256 => UserInfo)) public userInfo;
    mapping (address => mapping(uint256 => mapping(uint256 => uint256))) public cardsStaked; // address => eventId => cardId => amountStaked

    ////
    // Events
    ////

    /**
     * @notice Emitted when a new staking event is created.
     * @param eventId The ID of the newly created staking event.
     */
    event StakingEventCreated(uint256 eventId);

    /**
     * @notice Emitted when a user enters a staking event.
     * @param user The address of the user entering the staking event.
     * @param eventId The ID of the staking event.
     */
    event StakingEventEntered(address indexed user, uint256 eventId);

    /**
     * @notice Emitted when a user completes a staking event.
     * @param user The address of the user completing the staking event.
     * @param eventId The ID of the staking event.
     */
    event StakingEventCompleted(address indexed user, uint256 eventId);

    /**
     * @notice Emitted when a user cancels their participation in a staking event.
     * @param user The address of the user canceling the staking event.
     * @param eventId The ID of the staking event.
     */
    event StakingEventCancelled(address indexed user, uint256 eventId);

    //////////////

    constructor(IPepemonFactory _pepemonFactoryAddress) public {
        pepemonFactory = _pepemonFactoryAddress;
    }

    ////
    // View
    ////

    /**
     * @notice Returns the total number of staking events.
     * @return The length of the stakingEvents array.
     */
    function getStakingEventsLength() external view returns(uint256) {
        return stakingEvents.length;
    }

    /**
     * @notice Returns all staking events.
     * @return An array of all staking events.
     */
    function getAllEvents() public view returns(StakingEvent[] memory) {
        return stakingEvents;
    }

    /**
     * @notice Returns the IDs of all active staking events.
     * @return An array of IDs of active staking events.
     */
    function getActiveEvents() external view returns(uint256[] memory) {
        uint256 count = 0;
        
        // Count active events
        for (uint256 i = 0; i < stakingEvents.length; i++) {
            if (stakingEvents[i].blockEventClose > block.number) {
                count++;
            }
        }
        
        // Create array of active event IDs
        uint256[] memory activeEventIds = new uint256[](count);
        uint256 index = 0;
        
        for (uint256 i = 0; i < stakingEvents.length; i++) {
            if (stakingEvents[i].blockEventClose > block.number) {
                activeEventIds[index] = i;
                index++;
            }
        }
        
        return activeEventIds;
    }

    /**
     * @notice Returns the IDs of all closed staking events.
     * @return An array of IDs of closed staking events.
     */
    function getClosedEvents() external view returns(uint256[] memory) {
        uint256 count = 0;
        
        // Count closed events
        for (uint256 i = 0; i < stakingEvents.length; i++) {
            if (stakingEvents[i].blockEventClose <= block.number) {
                count++;
            }
        }
        
        // Create array of closed event IDs
        uint256[] memory closedEventIds = new uint256[](count);
        uint256 index = 0;
        
        for (uint256 i = 0; i < stakingEvents.length; i++) {
            if (stakingEvents[i].blockEventClose <= block.number) {
                closedEventIds[index] = i;
                index++;
            }
        }
        
        return closedEventIds;
    }

    /**
     * @notice Returns the list of card IDs for a specific staking event.
     * @param _eventId The ID of the staking event.
     * @return An array of card IDs for the specified staking event.
     */
    function getCardIdListOfEvent(uint256 _eventId) external view returns(uint256[] memory) {
        require(_eventId < stakingEvents.length, "Event does not exist");
        return stakingEvents[_eventId].cardIdList;
    }

    /**
     * @notice Returns the list of card amounts for a specific staking event.
     * @param _eventId The ID of the staking event.
     * @return An array of card amounts for the specified staking event.
     */
    function getCardAmountListOfEvent(uint256 _eventId) external view returns(uint256[] memory) {
        require(_eventId < stakingEvents.length, "Event does not exist");
        return stakingEvents[_eventId].cardAmountList;
    }

    /**
     * @notice Returns the progress of a user towards completing a staking event.
     * @param _user The address of the user.
     * @param _eventId The ID of the staking event.
     * @return The progress as a percentage (100% = 1e5).
     */
    function getUserProgress(address _user, uint256 _eventId) external view returns(uint256) {
        require(_eventId < stakingEvents.length, "Event does not exist");
        
        UserInfo memory info = userInfo[_user][_eventId];
        
        if (info.isCompleted) {
            return 100000; // 100% (scaled by 1e3)
        }
        
        if (info.blockEnd == 0) {
            return 0; // Not staking
        }
        
        StakingEvent memory event_ = stakingEvents[_eventId];
        
        if (block.number >= info.blockEnd) {
            return 100000; // 100%
        }
        
        uint256 blocksPassed = block.number.sub(info.blockEnd.sub(event_.blockStakeLength));
        return blocksPassed.mul(100000).div(event_.blockStakeLength);
    }

    //////////////

    /**
     * @notice Creates a new staking event.
     * @param _cardIdList The list of card IDs required for the event.
     * @param _cardAmountAny The amount of any card required for the event.
     * @param _cardAmountList The list of card amounts required for the event.
     * @param _cardRewardId The ID of the card to be rewarded.
     * @param _blockStakeLength The number of blocks required to complete the event.
     * @param _blockEventClose The block at which the event will close.
     * @param _toBurnIdList The list of card IDs to be burned on completion.
     * @param _toBurnAmountList The list of card amounts to be burned on completion.
     */
    function createStakingEvent(uint256[] memory _cardIdList, uint256 _cardAmountAny, uint256[] memory _cardAmountList, uint256 _cardRewardId,
        uint256 _blockStakeLength, uint256 _blockEventClose, uint256[] memory _toBurnIdList, uint256[] memory _toBurnAmountList) public onlyOwner {
        
        require(_cardIdList.length > 0, "Card ID list cannot be empty");
        require(_blockStakeLength > 0, "Block stake length must be greater than 0");
        require(_blockEventClose > block.number, "Event close block must be in the future");
        
        // If cardAmountAny is 0, then cardAmountList must be provided and match cardIdList length
        if (_cardAmountAny == 0) {
            require(_cardAmountList.length == _cardIdList.length, "Card amount list must match card ID list length");
        }
        
        // If burn lists are provided, they must match in length
        if (_toBurnIdList.length > 0) {
            require(_toBurnIdList.length == _toBurnAmountList.length, "Burn ID list and amount list must match in length");
        }
        
        stakingEvents.push(StakingEvent({
            cardIdList: _cardIdList,
            cardAmountAny: _cardAmountAny,
            cardAmountList: _cardAmountList,
            cardRewardId: _cardRewardId,
            blockStakeLength: _blockStakeLength,
            blockEventClose: _blockEventClose,
            toBurnIdList: _toBurnIdList,
            toBurnAmountList: _toBurnAmountList
        }));
        
        emit StakingEventCreated(stakingEvents.length - 1);
    }

    /**
     * @notice Closes a staking event prematurely.
     * @param _eventId The ID of the staking event to be closed.
     */
    function closeStakingEvent(uint256 _eventId) public onlyOwner {
        require(_eventId < stakingEvents.length, "Event does not exist");
        require(stakingEvents[_eventId].blockEventClose > block.number, "Event already closed");
        
        stakingEvents[_eventId].blockEventClose = block.number;
    }

    //////////////

    /**
     * @dev Stakes multiple cards for a staking event.
     * 
     * @param _eventId The ID of the staking event
     * @param _cardIdList List of card IDs to stake
     * @param _cardAmountList Corresponding amounts of each card
     * 
     * @notice Emits StakingEventEntered event
     */
    function stakeAny(uint256 _eventId, uint256[] memory _cardIdList, uint256[] memory _cardAmountList) public {
        require(_eventId < stakingEvents.length, "Event does not exist");
        require(_cardIdList.length == _cardAmountList.length, "Card ID and amount arrays must have the same length");
        
        StakingEvent memory event_ = stakingEvents[_eventId];
        UserInfo storage user = userInfo[msg.sender][_eventId];
        
        require(event_.blockEventClose > block.number, "Event has closed");
        require(user.blockEnd == 0, "Already staking in this event");
        require(user.isCompleted == false, "Already completed this event");
        require(event_.cardAmountAny > 0, "This event doesn't support staking any cards");
        
        // Check that all cards are in the allowed list and calculate total amount
        uint256 totalAmount = 0;
        for (uint256 i = 0; i < _cardIdList.length; i++) {
            require(_isInArray(_cardIdList[i], event_.cardIdList), "Card not accepted for this event");
            totalAmount = totalAmount.add(_cardAmountList[i]);
        }
        
        require(totalAmount >= event_.cardAmountAny, "Insufficient cards staked");
        
        // Transfer cards from user to contract
        pepemonFactory.safeBatchTransferFrom(
            msg.sender, 
            address(this), 
            _cardIdList, 
            _cardAmountList, 
            ""
        );
        
        // Record staked cards
        for (uint256 i = 0; i < _cardIdList.length; i++) {
            cardsStaked[msg.sender][_eventId][_cardIdList[i]] = _cardAmountList[i];
        }
        
        // Set user staking info
        user.blockEnd = block.number.add(event_.blockStakeLength);
        
        emit StakingEventEntered(msg.sender, _eventId);
    }

    /**
     * @notice Allows a user to stake specific cards into a staking event.
     * @param _eventId The ID of the staking event.
     */
    function stake(uint256 _eventId) public {
        require(_eventId < stakingEvents.length, "Event does not exist");
        
        StakingEvent memory event_ = stakingEvents[_eventId];
        UserInfo storage user = userInfo[msg.sender][_eventId];
        
        require(event_.blockEventClose > block.number, "Event has closed");
        require(user.blockEnd == 0, "Already staking in this event");
        require(user.isCompleted == false, "Already completed this event");
        require(event_.cardAmountAny == 0, "This event doesn't support specific card staking");
        require(event_.cardIdList.length == event_.cardAmountList.length, "Event configuration error");
        
        // Transfer all required cards to the contract
        for (uint256 i = 0; i < event_.cardIdList.length; i++) {
            pepemonFactory.safeTransferFrom(
                msg.sender,
                address(this),
                event_.cardIdList[i],
                event_.cardAmountList[i],
                ""
            );
            
            // Record staked cards
            cardsStaked[msg.sender][_eventId][event_.cardIdList[i]] = event_.cardAmountList[i];
        }
        
        // Set user staking info
        user.blockEnd = block.number.add(event_.blockStakeLength);
        
        emit StakingEventEntered(msg.sender, _eventId);
    }

    /**
     * @notice Allows a user to claim their staked cards and the reward.
     * @param _eventId The ID of the staking event.
     */
    function claim(uint256 _eventId) public {
        require(_eventId < stakingEvents.length, "Event does not exist");
        
        StakingEvent memory event_ = stakingEvents[_eventId];
        UserInfo storage user = userInfo[msg.sender][_eventId];
        
        require(user.blockEnd > 0, "Not staking in this event");
        require(!user.isCompleted, "Already claimed for this event");
        require(block.number >= user.blockEnd, "Staking period not completed");
        
        // Mark as completed
        user.isCompleted = true;
        
        // Return staked cards (not burning them)
        _withdrawCardsStaked(_eventId, false);
        
        // Burn cards if required
        if (event_.toBurnIdList.length > 0) {
            for (uint256 i = 0; i < event_.toBurnIdList.length; i++) {
                pepemonFactory.burn(msg.sender, event_.toBurnIdList[i], event_.toBurnAmountList[i]);
            }
        }
        
        // Mint reward
        pepemonFactory.mint(msg.sender, event_.cardRewardId, 1, "");
        
        emit StakingEventCompleted(msg.sender, _eventId);
    }

    /**
     * @notice Allows a user to cancel their participation in a staking event and withdraw their staked cards.
     * @param _eventId The ID of the staking event.
     */
    function cancel(uint256 _eventId) public {
        require(_eventId < stakingEvents.length, "Event does not exist");
        
        UserInfo storage user = userInfo[msg.sender][_eventId];
        
        require(user.blockEnd > 0, "Not staking in this event");
        require(!user.isCompleted, "Already completed this event");
        
        // Reset staking info
        user.blockEnd = 0;
        
        // Return staked cards (not burning them)
        _withdrawCardsStaked(_eventId, false);
        
        emit StakingEventCancelled(msg.sender, _eventId);
    }

    function _withdrawCardsStaked(uint256 _eventId, bool _burn) internal {
        StakingEvent memory event_ = stakingEvents[_eventId];
        
        // Return or burn all staked cards
        for (uint256 i = 0; i < event_.cardIdList.length; i++) {
            uint256 cardId = event_.cardIdList[i];
            uint256 amount = cardsStaked[msg.sender][_eventId][cardId];
            
            if (amount > 0) {
                if (_burn) {
                    pepemonFactory.burn(address(this), cardId, amount);
                } else {
                    pepemonFactory.safeTransferFrom(
                        address(this),
                        msg.sender,
                        cardId,
                        amount,
                        ""
                    );
                }
                
                // Reset staked amount
                cardsStaked[msg.sender][_eventId][cardId] = 0;
            }
        }
    }

    function _isInArray(uint256 _value, uint256[] memory _array) internal pure returns(bool) {
        for (uint256 i = 0; i < _array.length; i++) {
            if (_array[i] == _value) {
                return true;
            }
        }
        return false;
    }

    /////////
    /////////
    /////////

    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4) {
        return 0xf23a6e61;
    }

    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4) {
        return 0xbc197c81;
    }

    function supportsInterface(bytes4 interfaceID) external view returns (bool) {
        return  interfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).
        interfaceID == 0x4e2312e0;      // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)")) ^ bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`).
    }
}
```