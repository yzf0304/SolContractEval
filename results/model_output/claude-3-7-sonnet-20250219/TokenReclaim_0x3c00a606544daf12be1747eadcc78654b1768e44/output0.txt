```solidity
/**
 * @notice This contract allows users to register an account with a public key and an SPHTX name.
 * @dev The contract ensures that each Ethereum address can only register one unique SPHTX name, and each SPHTX name is unique across the system.
 */
contract TokenReclaim {
    mapping (address => string) internal _ethToSphtx;
    mapping (string => string) internal _accountToPubKey;

    /**
     * @notice Emitted when an account is registered.
     * @param ethAccount The Ethereum address of the user.
     * @param sphtxAccount The SPHTX name of the user.
     * @param pubKey The public key associated with the user's SPHTX name.
     */
    event AccountRegister(address ethAccount, string sphtxAccount, string pubKey);

    /**
     * @notice Registers an SPHTX name and associates it with a public key for the caller.
     * @param name The SPHTX name to be registered. Must meet specific formatting requirements.
     * @param pubKey The public key to be associated with the SPHTX name. Must meet length requirements.
     * @dev
     * - The SPHTX name must:
     *   - Be between 3 and 16 characters long
     *   - Start with a lowercase letter (a-z) or digit (0-9)
     *   - Only contain lowercase letters (a-z), digits (0-9), hyphens (-), and periods (.)
     * - The public key must be between 50 and 64 characters long
     * - The function performs the following validations:
     *   1. Validates the name length and format
     *   2. Validates the public key length
     *   3. Ensures the caller's address is not already registered
     *   4. Ensures the name is not already in use by another account
     * - If all validations pass:
     *   - Stores the name-to-public key mapping
     *   - Stores the Ethereum address-to-SPHTX name mapping
     *   - Emits an AccountRegister event
     * @dev The function uses keccak256 hashes for comparison to prevent storage gas    optimization attacks
     * @notice This registration is a one-time operation per address - subsequent calls will fail if the address is already registered
     * @dev The name format restrictions help maintain a consistent naming convention across the system
     */
    function register(string memory name, string memory pubKey) public {
        // Validate name availability
        require(nameAvailable(name), "Name is unavailable");
        
        // Validate pubKey length
        require(bytes(pubKey).length >= 50 && bytes(pubKey).length <= 64, "Public key length must be between 50 and 64 characters");
        
        // Check if the address is already registered
        require(bytes(_ethToSphtx[msg.sender]).length == 0, "Address already registered");
        
        // Store mappings
        _accountToPubKey[name] = pubKey;
        _ethToSphtx[msg.sender] = name;
        
        // Emit event
        emit AccountRegister(msg.sender, name, pubKey);
    }

    /**
     * @notice Returns the SPHTX name associated with the given Ethereum address.
     * @param addr The Ethereum address to query.
     * @return The SPHTX name associated with the address.
     * @dev If the address has not registered an SPHTX name, it returns an empty string.
     */
    function account(address addr) public view returns (string memory) {
        return _ethToSphtx[addr];
    }

    /**
     * @notice Returns the public key associated with the SPHTX name of the given Ethereum address.
     * @param addr The Ethereum address to query.
     * @return The public key associated with the SPHTX name.
     * @dev If the address has not registered an SPHTX name, it returns an empty string.
     */
    function keys(address addr) public view returns (string memory) {
        string memory sphtxName = _ethToSphtx[addr];
        if (bytes(sphtxName).length == 0) {
            return "";
        }
        return _accountToPubKey[sphtxName];
    }

    /**
     * @notice Checks if a SPHTX name is available for registration.
     * @param name The SPHTX name to check availability for.
     * @return bool True if the name is available, false otherwise.
     * @dev
     * - Returns false if the name is already mapped to a public key in _accountToPubKey
     * - Validates name length (must be between 3 and 16 characters)
     * - Validates name format:
     *   - Must start with a lowercase letter (a-z) or digit (0-9)
     *   - Subsequent characters can be lowercase letters, digits, hyphens (-), or periods (.)
     * - Returns true only if all validation checks pass and the name is not in use
     * @notice This function performs static checks without modifying state
     */
    function nameAvailable(string memory name) public view returns (bool) {
        // Check if name already exists in mapping
        if (bytes(_accountToPubKey[name]).length > 0) {
            return false;
        }
        
        // Check name length
        bytes memory nameBytes = bytes(name);
        if (nameBytes.length < 3 || nameBytes.length > 16) {
            return false;
        }
        
        // Check first character (must be lowercase letter or digit)
        byte firstChar = nameBytes[0];
        if (!((firstChar >= 0x61 && firstChar <= 0x7A) || (firstChar >= 0x30 && firstChar <= 0x39))) {
            return false;
        }
        
        // Check remaining characters (lowercase letters, digits, hyphens, periods)
        for (uint i = 1; i < nameBytes.length; i++) {
            byte char = nameBytes[i];
            bool isValid = (char >= 0x61 && char <= 0x7A) || // lowercase a-z
                          (char >= 0x30 && char <= 0x39) || // digits 0-9
                          char == 0x2D || // hyphen
                          char == 0x2E;   // period
            
            if (!isValid) {
                return false;
            }
        }
        
        return true;
    }
}
```