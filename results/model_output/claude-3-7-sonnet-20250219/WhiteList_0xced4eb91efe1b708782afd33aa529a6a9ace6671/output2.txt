Your code has a few issues that need to be fixed to make it compatible with Solidity 0.4.18:

1. The `calldata` keyword wasn't available in 0.4.18
2. The `emit` keyword wasn't used in 0.4.18 - events were triggered by just calling them
3. You're missing implementations of two functions

Here's the corrected contract:

```solidity
/**
 * @title WhiteList
 * @notice A contract for managing a whitelist of addresses. Only the owner can add or remove addresses from the whitelist.
 * @dev Inherits from Ownable to restrict certain functions to the contract owner.
 */
contract WhiteList is Ownable {

    // @notice Mapping to store the whitelist status of an address.
    // @dev The key is the address, and the value is a boolean indicating whether the address is whitelisted.
    mapping(address => bool) public whiteList;

    // @notice Total number of whitelisted addresses.
    // @dev This count is updated when addresses are added or removed from the whitelist.
    uint public totalWhiteListed; //white listed users number

    // @dev Event emitted when an address is whitelisted.
    event LogWhiteListed(address indexed user, uint whiteListedNum);

    // @dev Event emitted when multiple addresses are whitelisted.
    event LogWhiteListedMultiple(uint whiteListedNum);

    // @dev Event emitted when an address is removed from the whitelist.
    event LogRemoveWhiteListed(address indexed user);

    /**
     * @notice Checks if a given address is whitelisted.
     * @param _user The address to check.
     * @return true if the address is whitelisted, false otherwise.
     */
    function isWhiteListed(address _user) external view returns (bool) {
        return whiteList[_user]; 
    }

    /**
     * @notice Removes an address from the whitelist.
     * @dev Only the contract owner can call this function.
     * @param _user The address to remove from the whitelist.
     * @return true if the address was successfully removed.
     */
    function removeFromWhiteList(address _user) external onlyOwner returns (bool) {
        require(whiteList[_user] == true);
        whiteList[_user] = false;
        totalWhiteListed--;
        LogRemoveWhiteListed(_user);
        return true;
    }

    /**
     * @notice Adds an address to the whitelist.
     * @dev Only the contract owner can call this function.
     * @param _user The address to add to the whitelist.
     * @return true if the address was successfully added.
     */
    function addToWhiteList(address _user) external onlyOwner returns (bool) {
        if (whiteList[_user] != true) {
            whiteList[_user] = true;
            totalWhiteListed++;
            LogWhiteListed(_user, totalWhiteListed);            
        }
        return true;
    }

    /**
     * @notice Adds multiple addresses to the whitelist.
     * @dev Only the contract owner can call this function.
     * @param _users An array of addresses to add to the whitelist.
     * @return true if all addresses were successfully added.
     */
    function addToWhiteListMultiple(address[] _users) external onlyOwner returns (bool) {
        for (uint i = 0; i < _users.length; ++i) {
            if (whiteList[_users[i]] != true) {
                whiteList[_users[i]] = true;
                totalWhiteListed++;                          
            }           
        }
        LogWhiteListedMultiple(totalWhiteListed); 
        return true;
    }
}
```

Key changes:
1. Removed `calldata` keyword from function parameters
2. Replaced `emit Event()` with direct event calls (`Event()`)
3. Simplified function modifiers by removing unnecessary parentheses after `onlyOwner`

This contract now properly implements a whitelist functionality that allows the owner to add and remove addresses while keeping track of the total number of whitelisted addresses.