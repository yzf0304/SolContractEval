To solve this problem, we need to implement a basic ERC20 token contract called `BasicToken` that inherits from the `ERC20Basic` interface. The contract should use SafeMath for arithmetic operations and ensure all tokens are pre-assigned to the creator. The key functionalities include querying the total supply, checking balances, and transferring tokens with proper validations.

### Approach
1. **Inheritance and Libraries**: The `BasicToken` contract inherits from `ERC20Basic` and uses the `SafeMath` library for safe arithmetic operations to prevent overflow and underflow.
2. **State Variables**: Maintain a mapping of address balances and a total supply variable.
3. **Core Functions**:
   - `totalSupply()`: Returns the total token supply.
   - `balanceOf(address _owner)`: Returns the token balance of a specified address.
   - `transfer(address _to, uint256 _value)`: Transfers tokens from the sender to a specified address with validations for zero address, self-transfer, and sufficient balance.
   - Internal validation function `_preValidateTransfer` for future extensibility.
4. **Utility Function**: `msgSender()` to return the sender's address, aiding in validation and testing.

### Solution Code
```solidity
contract BasicToken is ERC20Basic {
    using SafeMath for uint256;

    mapping(address => uint256) balances;

    uint256 totalSupply_;

    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    function msgSender() 
        public
        view
        returns (address)
    {
        return msg.sender;
    }

    function transfer(
        address _to, 
        uint256 _value
    ) 
        public 
        returns (bool) 
    {
        require(_to != address(0));
        require(_to != msg.sender);
        require(_value <= balances[msg.sender]);

        _preValidateTransfer(msg.sender, _to, _value);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    function _preValidateTransfer(
        address _from, 
        address _to, 
        uint256 _value
    ) 
        internal 
    {
        // This function is intended to be overridden if additional validations are needed
    }
}
```

### Explanation
- **Inheritance and Libraries**: The contract uses `SafeMath` for arithmetic operations to ensure safety and inherits from `ERC20Basic` to adhere to the ERC20 standard.
- **State Variables**: `balances` keeps track of token balances per address, and `totalSupply_` stores the total number of tokens.
- **totalSupply()**: Simply returns the total token supply stored in `totalSupply_`.
- **balanceOf()**: Returns the balance of the specified address by querying the `balances` mapping.
- **transfer()**: Validates the recipient address is not zero, not the sender, and the sender has sufficient balance. It then adjusts balances using SafeMath and emits a transfer event.
- **msgSender()**: Utility function to return the sender's address, facilitating checks and validations.
- **_preValidateTransfer()**: An internal function for additional validations, left empty for future extensions.

This implementation ensures the contract meets the ERC20 standard with necessary validations and safe arithmetic operations, providing a secure and functional token contract.