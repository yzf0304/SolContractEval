Here's the complete implementation of the `Freezable` contract:

```solidity
contract Freezable is Ownable {
    mapping(address => bool) private _frozen;

    event Freeze(address indexed target);
    event Unfreeze(address indexed target);

    modifier whenNotFrozen(address target) {
        require(!_frozen[target], "Freezable : target is frozen");
        _;
    }

    function freeze(address target) external onlyOwner returns (bool success) {
        _frozen[target] = true;
        emit Freeze(target);
        return true;
    }

    function unFreeze(address target) external onlyOwner returns (bool success) {
        _frozen[target] = false;
        emit Unfreeze(target);
        return true;
    }

    function isFrozen(address target) external view returns (bool frozen) {
        return _frozen[target];
    }
}
```

This implementation:
1. Maintains a private mapping to track frozen addresses
2. Uses the `onlyOwner` modifier from `Ownable` to protect freeze/unfreeze operations
3. Emits events for state changes
4. Provides view function to check frozen status
5. Follows the same error message style as the parent `Ownable` contract
6. Returns boolean success status for state-changing operations as specified

The contract works with Solidity 0.8.0 and requires no additional dependencies.