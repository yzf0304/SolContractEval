To complete the `Freezable` contract, we need to implement the `freeze`, `unFreeze`, and `isFrozen` functions while adhering to the provided specifications. The contract must allow the owner to freeze and unfreeze addresses, check the frozen status, and emit corresponding events. Here's the solution:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Freezable is Ownable {
    mapping(address => bool) private _frozen;

    event Freeze(address indexed target);
    event Unfreeze(address indexed target);

    modifier whenNotFrozen(address target) {
        require(!_frozen[target], "Freezable : target is frozen");
        _;
    }

    function freeze(address target) external onlyOwner returns (bool success) {
        require(!_frozen[target], "Freezable: target already frozen");
        _frozen[target] = true;
        emit Freeze(target);
        success = true;
    }

    function unFreeze(address target) external onlyOwner returns (bool success) {
        require(_frozen[target], "Freezable: target not frozen");
        _frozen[target] = false;
        emit Unfreeze(target);
        success = true;
    }

    function isFrozen(address target) external view returns (bool frozen) {
        frozen = _frozen[target];
    }
}
```

**Step-by-Step Explanation:**

1. **Freeze Function:**
   - **Access Control:** The `onlyOwner` modifier ensures only the owner can call this function.
   - **Check Current State:** A `require` statement checks if the target is not already frozen to prevent redundant operations.
   - **Update State:** The target's frozen status is set to `true`.
   - **Event Emission:** The `Freeze` event is emitted to log the action.
   - **Return:** Returns `true` indicating success.

2. **Unfreeze Function:**
   - **Access Control:** Similarly, uses `onlyOwner` to restrict access.
   - **Check Current State:** Ensures the target is currently frozen before proceeding.
   - **Update State:** Sets the target's frozen status to `false`.
   - **Event Emission:** Emits the `Unfreeze` event.
   - **Return:** Returns `true` upon success.

3. **IsFrozen Function:**
   - **View Function:** Simply returns the frozen status of a given address by querying the `_frozen` mapping.

This implementation ensures that state changes only occur when necessary, events are emitted appropriately, and the contract adheres to the specified functionality and security practices.