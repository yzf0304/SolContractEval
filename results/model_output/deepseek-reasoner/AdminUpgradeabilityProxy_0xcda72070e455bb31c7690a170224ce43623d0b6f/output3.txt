Here is the completed `UpgradeabilityProxy` contract with all functions implemented according to the provided specifications:

```solidity
contract UpgradeabilityProxy is Proxy {

  constructor(address _logic, bytes memory _data) public payable {
    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));
    _setImplementation(_logic);
    if(_data.length > 0) {
      (bool success,) = _logic.delegatecall(_data);
      require(success);
    }
  }  

  event Upgraded(address indexed implementation);

  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;

  function _implementation() internal override view returns (address impl) {
    bytes32 slot = IMPLEMENTATION_SLOT;
    assembly {
      impl := sload(slot)
    }
  }

  function _upgradeTo(address newImplementation) internal {
    _setImplementation(newImplementation);
    emit Upgraded(newImplementation);
  }

  function _setImplementation(address newImplementation) internal {
    require(Address.isContract(newImplementation), "Address: call to non-contract");
    bytes32 slot = IMPLEMENTATION_SLOT;
    assembly {
      sstore(slot, newImplementation)
    }
  }

  receive() external payable {}
}
```

**Key Implementation Details:**

1. **_implementation()**  
   Reads the current implementation address directly from the EIP-1967 specified storage slot using inline assembly.

2. **_upgradeTo()**  
   Updates the implementation address and emits the upgrade event. Calls `_setImplementation` for actual storage update.

3. **_setImplementation()**  
   Contains critical safety check using `Address.isContract()` to prevent setting non-contract addresses. Stores implementation address in the designated slot.

4. **Storage Slot**  
   Uses the standardized EIP-1967 slot `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc` to ensure compatibility with tooling and prevent collisions.

The contract maintains full compatibility with the Proxy pattern while enabling safe upgrade functionality through EIP-1967 standards.