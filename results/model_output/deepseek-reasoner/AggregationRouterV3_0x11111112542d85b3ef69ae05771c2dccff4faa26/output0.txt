Here is the complete implementation of the AggregationRouterV3 contract:

```solidity
// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;

contract AggregationRouterV3 is Ownable, UnoswapRouter {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;
    using UniERC20 for IERC20;

    uint256 private constant _PARTIAL_FILL = 0x01;
    uint256 private constant _REQUIRES_EXTRA_ETH = 0x02;
    uint256 private constant _SHOULD_CLAIM = 0x04;
    uint256 private constant _BURN_FROM_MSG_SENDER = 0x08;
    uint256 private constant _BURN_FROM_TX_ORIGIN = 0x10;

    struct SwapDescription {
        IERC20 srcToken;
        IERC20 dstToken;
        address srcReceiver;
        address dstReceiver;
        uint256 amount;
        uint256 minReturnAmount;
        uint256 flags;
        bytes permit;
    }

    event Swapped(
        address sender,
        IERC20 srcToken,
        IERC20 dstToken,
        address dstReceiver,
        uint256 spentAmount,
        uint256 returnAmount
    );

    function discountedSwap(
        IAggregationExecutor caller,
        SwapDescription calldata desc,
        bytes calldata data
    )
        external
        payable
        returns (uint256 returnAmount, uint256 gasLeft, uint256 chiSpent)
    {
        uint256 initialGas = gasleft();

        (returnAmount, gasLeft) = swap(caller, desc, data);

        uint256 gasUsed = initialGas - gasLeft;
        uint256 threshold = caller.gasDiscountThreshold();
        chiSpent = (gasUsed + threshold - 1) / threshold;

        if (chiSpent > 0) {
            IChi chi = caller.chi();
            chi.freeFromUpTo(msg.sender, chiSpent);
        }
    }

    function swap(
        IAggregationExecutor caller,
        SwapDescription calldata desc,
        bytes calldata data
    )
        external
        payable
        returns (uint256 returnAmount, uint256 gasLeft)
    {
        require(address(caller) != address(0), "Zero executor");
        require(desc.amount > 0, "Zero amount");
        require(desc.minReturnAmount > 0, "Zero min return");

        uint256 initialDstBalance = desc.dstToken.uniBalanceOf(address(this));

        if (desc.srcToken.isETH()) {
            if (desc.flags & _REQUIRES_EXTRA_ETH != 0) {
                require(msg.value >= desc.amount, "Insufficient ETH");
            } else {
                require(msg.value == desc.amount, "ETH mismatch");
            }
            if (desc.srcReceiver != address(this)) {
                payable(desc.srcReceiver).transfer(desc.amount);
            }
        } else {
            require(msg.value == 0, "Non-ETH swap with ETH");
            _permit(desc.srcToken, desc.amount, desc.permit);
            desc.srcToken.safeTransferFrom(msg.sender, desc.srcReceiver, desc.amount);
        }

        caller.callBytes{value: desc.srcToken.isETH() ? msg.value - desc.amount : 0}(data);

        uint256 finalDstBalance = desc.dstToken.uniBalanceOf(address(this));
        returnAmount = finalDstBalance.sub(initialDstBalance);

        if ((desc.flags & _PARTIAL_FILL) == 0) {
            require(returnAmount >= desc.minReturnAmount, "Return too low");
        }

        if (returnAmount > 0) {
            desc.dstToken.uniTransfer(payable(desc.dstReceiver), returnAmount);
        }

        emit Swapped(
            msg.sender,
            desc.srcToken,
            desc.dstToken,
            desc.dstReceiver,
            desc.amount,
            returnAmount
        );

        gasLeft = gasleft();
    }

    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {
        token.uniTransfer(payable(msg.sender), amount);
    }

    function destroy() external onlyOwner {
        selfdestruct(payable(owner()));
    }
}
```

This implementation:

1. **swap()**: Handles token swaps with proper ETH value validation, permit handling, token transfers, and swap execution through the aggregation executor. It calculates return amount and ensures minimum return requirements.

2. **discountedSwap()**: Extends the swap functionality with CHI token burning for gas discounts based on gas usage calculations.

3. **rescueFunds()**: Allows contract owner to rescue any ERC20 tokens or ETH from the contract.

4. **destroy()**: Allows contract owner to selfdestruct the contract and send remaining ETH to owner.

Key features:
- Proper ETH value validation using flags
- ERC20 permit support
- Partial fill and extra ETH flags handling
- Safe token transfers using OpenZeppelin libraries
- Gas-efficient assembly code from inherited UnoswapRouter
- Chi token integration for gas discounts
- Owner-only administrative functions

The implementation strictly follows the provided context and maintains compatibility with Solidity 0.6.12 while using all referenced helper contracts and libraries.