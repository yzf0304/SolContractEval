```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.7.6;

interface IERC20Permit {
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;
}

contract AggregationRouter is Permitable, Ownable {
    using SafeMath for uint256;

    address public immutable WETH;
    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);
    uint256 private constant _PARTIAL_FILL = 0x01;
    uint256 private constant _REQUIRES_EXTRA_ETH = 0x02;
    uint256 private constant _SHOULD_CLAIM = 0x04;
    uint256 private constant _BURN_FROM_MSG_SENDER = 0x08;
    uint256 private constant _BURN_FROM_TX_ORIGIN = 0x10;

    struct SwapDescription {
        IERC20 srcToken;
        IERC20 dstToken;
        address srcReceiver;
        address dstReceiver;
        uint256 amount;
        uint256 minReturnAmount;
        uint256 flags;
        bytes permit;
    }

    event Swapped(
        address sender,
        IERC20 srcToken,
        IERC20 dstToken,
        address dstReceiver,
        uint256 spentAmount,
        uint256 returnAmount
    );

    event Exchange(address pair, uint256 amountOut, address output);

    constructor(address _WETH) public {
        WETH = _WETH;
    }

    receive() external payable {
        require(msg.sender == WETH, "Router: Invalid sender");
    }

    function swap(
        IAggregationExecutor caller,
        SwapDescription calldata desc,
        bytes calldata data
    ) external payable returns (uint256 returnAmount) {
        require(desc.minReturnAmount > 0, "Invalid min return");
        require(data.length > 0, "Empty data");

        bool isSrcETH = isETH(desc.srcToken);
        uint256 msgValue = msg.value;

        if (isSrcETH) {
            require(desc.srcReceiver == address(0), "Invalid srcReceiver");
            if (desc.flags & _REQUIRES_EXTRA_ETH != 0) {
                require(msgValue >= desc.amount, "Insufficient ETH");
                if (msgValue > desc.amount) {
                    TransferHelper.safeTransferETH(msg.sender, msgValue - desc.amount);
                    msgValue = desc.amount;
                }
            } else {
                require(msgValue == desc.amount, "ETH amount mismatch");
            }
        } else {
            require(msgValue == 0, "Msg.value must be 0");
            if (desc.permit.length != 0) {
                _permit(desc.srcToken, desc.amount, desc.permit);
            }
            TransferHelper.safeTransferFrom(
                address(desc.srcToken),
                msg.sender,
                desc.srcReceiver,
                desc.amount
            );
        }

        uint256 initialDstBalance = getBalance(desc.dstToken, address(this));
        caller.callBytes{value: isSrcETH ? msgValue : 0}(data);

        returnAmount = getBalance(desc.dstToken, address(this)).sub(initialDstBalance);
        require(returnAmount >= desc.minReturnAmount, "Insufficient output");

        if (isETH(desc.dstToken)) {
            TransferHelper.safeTransferETH(desc.dstReceiver, returnAmount);
        } else {
            TransferHelper.safeTransfer(address(desc.dstToken), desc.dstReceiver, returnAmount);
        }

        emit Swapped(
            msg.sender,
            desc.srcToken,
            desc.dstToken,
            desc.dstReceiver,
            desc.amount,
            returnAmount
        );
    }

    function getBalance(IERC20 token, address account) internal view returns (uint256) {
        return isETH(token) ? account.balance : token.balanceOf(account);
    }

    function isETH(IERC20 token) internal pure returns (bool) {
        return address(token) == ETH_ADDRESS;
    }

    function rescueFunds(address token, uint256 amount) external onlyOwner {
        if (token == ETH_ADDRESS) {
            TransferHelper.safeTransferETH(msg.sender, amount);
        } else {
            TransferHelper.safeTransfer(token, msg.sender, amount);
        }
    }
}
```