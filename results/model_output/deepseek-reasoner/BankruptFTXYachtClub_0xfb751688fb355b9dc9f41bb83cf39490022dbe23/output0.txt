Here is the complete and functional implementation of the `BankruptFTXYachtClub` contract:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract BankruptFTXYachtClub is ERC721A, Ownable {
    using Strings for uint256;

    string private uriPrefix;
    string private uriSuffix = ".json";
    string public hiddenURL;

    uint256 public cost = 0.0025 ether;
    uint16 public maxSupply = 6969;
    uint8 public maxMintAmountPerTx = 21;
    uint8 public maxFreeMintAmountPerWallet = 1;

    bool public paused = true;
    bool public reveal = false;

    mapping(address => uint8) public NFTPerPublicAddress;

    constructor() ERC721A("Bankrupt FTX Yacht Club", "BFTX") {}

    function mint(uint8 _mintAmount) external payable {
        require(!paused, "Contract is paused");
        require(_mintAmount > 0, "Invalid mint amount");
        require(_mintAmount <= maxMintAmountPerTx, "Exceeds transaction limit");
        require(totalSupply() + _mintAmount <= maxSupply, "Exceeds max supply");

        uint8 alreadyMinted = NFTPerPublicAddress[msg.sender];
        uint8 remainingFree = maxFreeMintAmountPerWallet > alreadyMinted 
            ? maxFreeMintAmountPerWallet - alreadyMinted 
            : 0;
        uint256 paidQuantity = _mintAmount > remainingFree 
            ? _mintAmount - remainingFree 
            : 0;
        
        require(msg.value >= paidQuantity * cost, "Insufficient ETH");

        NFTPerPublicAddress[msg.sender] += _mintAmount;
        _safeMint(msg.sender, _mintAmount);
    }

    function Reserve(uint16 _mintAmount, address _receiver) external onlyOwner {
        require(totalSupply() + _mintAmount <= maxSupply, "Exceeds max supply");
        _safeMint(_receiver, _mintAmount);
    }

    function Airdrop(uint8 _amountPerAddress, address[] calldata addresses) external onlyOwner {
        uint256 totalMint = _amountPerAddress * addresses.length;
        require(totalSupply() + totalMint <= maxSupply, "Exceeds max supply");
        
        for (uint256 i = 0; i < addresses.length; i++) {
            _safeMint(addresses[i], _amountPerAddress);
        }
    }

    function setMaxSupply(uint16 _maxSupply) external onlyOwner {
        require(_maxSupply >= totalSupply(), "Cannot reduce below current supply");
        maxSupply = _maxSupply;
    }

    function tokenURI(uint256 _tokenId) public view override returns (string memory) {
        require(_exists(_tokenId), "Non-existent token");
        if (!reveal) return hiddenURL;
        return string(abi.encodePacked(uriPrefix, _tokenId.toString(), uriSuffix));
    }

    function setFreeMaxLimitPerAddress(uint8 _limit) external onlyOwner {
        maxFreeMintAmountPerWallet = _limit;
    }

    function setUriPrefix(string memory _uriPrefix) external onlyOwner {
        uriPrefix = _uriPrefix;
    }

    function setHiddenUri(string memory _uriPrefix) external onlyOwner {
        hiddenURL = _uriPrefix;
    }

    function setPaused() external onlyOwner {
        paused = !paused;
    }

    function setCost(uint256 _cost) external onlyOwner {
        cost = _cost;
    }

    function setRevealed() external onlyOwner {
        reveal = !reveal;
    }

    function setMaxMintAmountPerTx(uint8 _maxtx) external onlyOwner {
        maxMintAmountPerTx = _maxtx;
    }

    function withdraw() external onlyOwner {
        (bool success, ) = owner().call{value: address(this).balance}("");
        require(success, "Withdrawal failed");
    }

    function _baseURI() internal view override returns (string memory) {
        return uriPrefix;
    }

    receive() external payable {}
}
```

This implementation includes all required features:
- ERC721A standard with optimized batch minting
- Free mint allowance per wallet
- Owner reservation and airdrop capabilities
- Reveal mechanics with hidden metadata
- Flexible configuration of mint limits and pricing
- Withdrawal functionality for contract funds
- Compliance with OpenZeppelin contracts for security
- Gas-efficient batch operations

The contract maintains all specified business logic while following best practices for security and gas optimization.