```solidity
pragma solidity ^0.4.18;

contract BeatTokenCrowdsale is Ownable {
    using SafeMath for uint256;

    enum Stages {
        Deployed,
        PreIco,
        IcoPhase1,
        IcoPhase2,
        IcoPhase3,
        IcoEnded,
        Finalized
    }

    Stages public stage;
    BeatToken public token;
    uint256 public contractStartTime;
    uint256 public preIcoEndTime;
    uint256 public icoPhase1EndTime;
    uint256 public icoPhase2EndTime;
    uint256 public icoPhase3EndTime;
    uint256 public contractEndTime;
    address public ethTeamWallet;
    address public beatTeamWallet;
    uint256 public ethWeiRaised;
    mapping(address => uint256) public balanceOf;
    uint256 public ethPriceInEuroCent;

    function BeatTokenCrowdsale(address _ethTeamWallet, address _beatTeamWallet) public {
        require(_ethTeamWallet != address(0));
        require(_beatTeamWallet != address(0));

        token = new BeatToken(HARD_CAP);
        stage = Stages.Deployed;
        ethTeamWallet = _ethTeamWallet;
        beatTeamWallet = _beatTeamWallet;
        ethPriceInEuroCent = 0;

        contractStartTime = 0;
        preIcoEndTime = 0;
        icoPhase1EndTime = 0;
        icoPhase2EndTime = 0;
        icoPhase3EndTime = 0;
        contractEndTime = 0;
    }

    function setEtherPriceInEuroCent(uint256 _ethPriceInEuroCent) onlyOwner public {
        ethPriceInEuroCent = _ethPriceInEuroCent;
        emit BeatTokenEthPriceChanged(_ethPriceInEuroCent);
    }

    function start() onlyOwner public {
        require(stage == Stages.Deployed);
        contractStartTime = now;
        preIcoEndTime = now.add(PRE_ICO_PERIOD);
        stage = Stages.PreIco;
        emit BeatTokenPreIcoStarted();
    }

    function finalize() onlyOwner public {
        require(stage == Stages.IcoEnded);
        uint256 remainingTokens = HARD_CAP.sub(token.getTotalSupply());
        if (remainingTokens > 0) {
            token.mint(beatTeamWallet, remainingTokens);
        }
        token.transferOwnership(beatTeamWallet);
        stage = Stages.Finalized;
        emit BeatTokenIcoFinalized();
    }

    function() payable public {
        buyTokens(msg.sender);
    }

    function buyTokens(address beneficiary) payable public {
        require(beneficiary != address(0));
        require(msg.value > 0);
        require(ethPriceInEuroCent > 0);
        require(isWithinValidIcoPhase());

        uint256 beatWeiAmount = calculateBeatWeiAmount(msg.value);
        require(isWithinTokenAllocLimit(beatWeiAmount));

        balanceOf[beneficiary] = balanceOf[beneficiary].add(beatWeiAmount);
        ethWeiRaised = ethWeiRaised.add(msg.value);
        token.mint(beneficiary, beatWeiAmount);
        ethTeamWallet.transfer(msg.value);
        emit BeatTokenPurchased(msg.sender, beneficiary, msg.value, beatWeiAmount);
        determineCurrentStage(beatWeiAmount);
    }

    function isWithinValidIcoPhase() internal view returns (bool) {
        if (stage == Stages.PreIco) {
            return now <= preIcoEndTime;
        } else if (stage == Stages.IcoPhase1) {
            return now <= icoPhase1EndTime;
        } else if (stage == Stages.IcoPhase2) {
            return now <= icoPhase2EndTime;
        } else if (stage == Stages.IcoPhase3) {
            return now <= icoPhase3EndTime;
        }
        return false;
    }

    function calculateBeatWeiAmount(uint256 ethWeiAmount) internal view returns (uint256) {
        uint256 bonusPercentage;
        if (stage == Stages.PreIco) {
            bonusPercentage = PRE_ICO_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase1) {
            bonusPercentage = ICO_PHASE1_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase2) {
            bonusPercentage = ICO_PHASE2_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase3) {
            bonusPercentage = ICO_PHASE3_BONUS_PERCENTAGE;
        } else {
            revert();
        }

        uint256 beatWei = ethWeiAmount.mul(ethPriceInEuroCent);
        beatWei = beatWei.mul(100 + bonusPercentage).div(100);
        beatWei = beatWei.div(1e18);
        return beatWei;
    }

    function isWithinTokenAllocLimit(uint256 beatWeiAmount) internal view returns (bool) {
        uint256 currentSupply = token.getTotalSupply();
        uint256 newSupply = currentSupply.add(beatWeiAmount);
        if (stage == Stages.PreIco) {
            return newSupply <= PRE_ICO_LIMIT;
        } else if (stage == Stages.IcoPhase1) {
            return newSupply <= ICO_PHASE1_LIMIT;
        } else if (stage == Stages.IcoPhase2) {
            return newSupply <= ICO_PHASE2_LIMIT;
        } else if (stage == Stages.IcoPhase3) {
            return newSupply <= ICO_PHASE3_LIMIT;
        }
        return false;
    }

    function determineCurrentStage(uint256 beatWeiAmount) internal {
        uint256 currentSupply = token.getTotalSupply();
        uint256 newSupply = currentSupply.add(beatWeiAmount);

        if (stage == Stages.PreIco) {
            if (now >= preIcoEndTime || newSupply > PRE_ICO_LIMIT) {
                stage = Stages.IcoPhase1;
                icoPhase1EndTime = now.add(ICO_PHASE1_PERIOD);
                emit BeatTokenIcoPhase1Started();
            }
        } else if (stage == Stages.IcoPhase1) {
            if (now >= icoPhase1EndTime || newSupply > ICO_PHASE1_LIMIT) {
                stage = Stages.IcoPhase2;
                icoPhase2EndTime = now.add(ICO_PHASE2_PERIOD);
                emit BeatTokenIcoPhase2Started();
            }
        } else if (stage == Stages.IcoPhase2) {
            if (now >= icoPhase2EndTime || newSupply > ICO_PHASE2_LIMIT) {
                stage = Stages.IcoPhase3;
                icoPhase3EndTime = now.add(ICO_PHASE3_PERIOD);
                emit BeatTokenIcoPhase3Started();
            }
        } else if (stage == Stages.IcoPhase3) {
            if (now >= icoPhase3EndTime || newSupply > ICO_PHASE3_LIMIT) {
                stage = Stages.IcoEnded;
                contractEndTime = now;
            }
        }
    }
}
```