To solve this problem, we need to create a smart contract for a crowdsale of the BEAT token, which includes different phases (Pre-ICO and three ICO phases) with varying bonus percentages. The contract must manage token distribution, handle phase transitions based on time and supply, and ensure compliance with the hard cap.

### Approach
1. **Phases Management**: The contract uses an enum to track the current stage of the crowdsale. Each phase has a specific duration and token allocation limit.
2. **Bonus Calculation**: Each phase applies a different bonus percentage to the token amount purchased. The bonus is calculated based on the current phase.
3. **Phase Transitions**: The contract automatically transitions between phases when the token supply exceeds the phase's limit or the phase's time duration expires.
4. **Token Minting**: Tokens are minted during each purchase, and unsold tokens are minted to the BEAT team wallet upon finalization.
5. **Validation**: The contract ensures that purchases are only allowed during active phases and within the phase's allocation limits.

### Solution Code
```solidity
pragma solidity ^0.4.18;

contract BeatTokenCrowdsale is Ownable {
    using SafeMath for uint256;

    enum Stages {
        Deployed,
        PreIco,
        IcoPhase1,
        IcoPhase2,
        IcoPhase3,
        IcoEnded,
        Finalized
    }

    Stages public stage;
    BeatToken public token;
    uint256 public contractStartTime;
    uint256 public preIcoEndTime;
    uint256 public icoPhase1EndTime;
    uint256 public icoPhase2EndTime;
    uint256 public icoPhase3EndTime;
    uint256 public contractEndTime;
    address public ethTeamWallet;
    address public beatTeamWallet;
    uint256 public ethWeiRaised;
    mapping(address => uint256) public balanceOf;
    uint public constant PRE_ICO_PERIOD = 28 days;
    uint public constant ICO_PHASE1_PERIOD = 28 days;
    uint public constant ICO_PHASE2_PERIOD = 28 days;
    uint public constant ICO_PHASE3_PERIOD = 28 days;
    uint256 public constant PRE_ICO_BONUS_PERCENTAGE = 100;
    uint256 public constant ICO_PHASE1_BONUS_PERCENTAGE = 75;
    uint256 public constant ICO_PHASE2_BONUS_PERCENTAGE = 50;
    uint256 public constant ICO_PHASE3_BONUS_PERCENTAGE = 25;
    uint256 public constant PRE_ICO_AMOUNT = 5000 * (10 ** 6) * (10 ** 18);
    uint256 public constant ICO_PHASE1_AMOUNT = 7000 * (10 ** 6) * (10 ** 18);
    uint256 public constant ICO_PHASE2_AMOUNT = 10500 * (10 ** 6) * (10 ** 18);
    uint256 public constant ICO_PHASE3_AMOUNT = 11875 * (10 ** 6) * (10 ** 18);
    uint256 public constant PRE_ICO_LIMIT = PRE_ICO_AMOUNT;
    uint256 public constant ICO_PHASE1_LIMIT = PRE_ICO_LIMIT + ICO_PHASE1_AMOUNT;
    uint256 public constant ICO_PHASE2_LIMIT = ICO_PHASE1_LIMIT + ICO_PHASE2_AMOUNT;
    uint256 public constant ICO_PHASE3_LIMIT = ICO_PHASE2_LIMIT + ICO_PHASE3_AMOUNT;
    uint256 public constant HARD_CAP = 230 * (10 ** 9) * (10 ** 18);
    uint256 public ethPriceInEuroCent;

    event BeatTokenPurchased(address indexed purchaser, address indexed beneficiary, uint256 ethWeiAmount, uint256 beatWeiAmount);
    event BeatTokenEthPriceChanged(uint256 newPrice);
    event BeatTokenPreIcoStarted();
    event BeatTokenIcoPhase1Started();
    event BeatTokenIcoPhase2Started();
    event BeatTokenIcoPhase3Started();
    event BeatTokenIcoFinalized();

    function BeatTokenCrowdsale(address _ethTeamWallet, address _beatTeamWallet) public {
        require(_ethTeamWallet != address(0));
        require(_beatTeamWallet != address(0));

        token = new BeatToken(HARD_CAP);
        stage = Stages.Deployed;
        ethTeamWallet = _ethTeamWallet;
        beatTeamWallet = _beatTeamWallet;
        ethPriceInEuroCent = 0;

        contractStartTime = 0;
        preIcoEndTime = 0;
        icoPhase1EndTime = 0;
        icoPhase2EndTime = 0;
        icoPhase3EndTime = 0;
        contractEndTime = 0;
    }

    function setEtherPriceInEuroCent(uint256 _ethPriceInEuroCent) onlyOwner public {
        require(_ethPriceInEuroCent > 0);
        ethPriceInEuroCent = _ethPriceInEuroCent;
        emit BeatTokenEthPriceChanged(_ethPriceInEuroCent);
    }

    function start() onlyOwner public {
        require(stage == Stages.Deployed);
        stage = Stages.PreIco;
        contractStartTime = now;
        preIcoEndTime = contractStartTime.add(PRE_ICO_PERIOD);
        emit BeatTokenPreIcoStarted();
    }

    function finalize() onlyOwner public {
        require(stage == Stages.IcoEnded);
        stage = Stages.Finalized;
        uint256 totalSupply = token.getTotalSupply();
        uint256 unsold = HARD_CAP.sub(totalSupply);
        if (unsold > 0) {
            token.mint(beatTeamWallet, unsold);
        }
        token.finishMinting();
        emit BeatTokenIcoFinalized();
    }

    function() payable public {
        buyTokens(msg.sender);
    }

    function buyTokens(address beneficiary) payable public {
        require(beneficiary != address(0));
        require(msg.value > 0);
        require(ethPriceInEuroCent > 0);
        require(isWithinValidIcoPhase());

        uint256 ethWeiAmount = msg.value;
        uint256 beatWeiAmount = calculateBeatWeiAmount(ethWeiAmount);
        require(isWithinTokenAllocLimit(beatWeiAmount));

        determineCurrentStage(beatWeiAmount);

        token.mint(beneficiary, beatWeiAmount);
        balanceOf[beneficiary] = balanceOf[beneficiary].add(beatWeiAmount);
        ethWeiRaised = ethWeiRaised.add(ethWeiAmount);
        ethTeamWallet.transfer(ethWeiAmount);
        emit BeatTokenPurchased(msg.sender, beneficiary, ethWeiAmount, beatWeiAmount);
    }

    function isWithinValidIcoPhase() internal view returns (bool) {
        return (stage == Stages.PreIco || stage == Stages.IcoPhase1 || stage == Stages.IcoPhase2 || stage == Stages.IcoPhase3);
    }

    function calculateBeatWeiAmount(uint256 ethWeiAmount) internal view returns (uint256) {
        uint256 euroCents = ethWeiAmount.mul(ethPriceInEuroCent).div(1 ether);
        uint256 rate;

        if (stage == Stages.PreIco) {
            rate = 100 + PRE_ICO_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase1) {
            rate = 100 + ICO_PHASE1_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase2) {
            rate = 100 + ICO_PHASE2_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase3) {
            rate = 100 + ICO_PHASE3_BONUS_PERCENTAGE;
        } else {
            revert();
        }

        return euroCents.mul(rate).div(100);
    }

    function isWithinTokenAllocLimit(uint256 beatWeiAmount) internal view returns (bool) {
        uint256 totalAfter = token.getTotalSupply().add(beatWeiAmount);
        if (stage == Stages.PreIco) {
            return totalAfter <= PRE_ICO_LIMIT;
        } else if (stage == Stages.IcoPhase1) {
            return totalAfter <= ICO_PHASE1_LIMIT;
        } else if (stage == Stages.IcoPhase2) {
            return totalAfter <= ICO_PHASE2_LIMIT;
        } else if (stage == Stages.IcoPhase3) {
            return totalAfter <= ICO_PHASE3_LIMIT;
        }
        return false;
    }

    function determineCurrentStage(uint256 beatWeiAmount) internal {
        uint256 currentSupply = token.getTotalSupply();
        uint256 projectedSupply = currentSupply.add(beatWeiAmount);

        if (stage == Stages.PreIco) {
            if (projectedSupply > PRE_ICO_LIMIT || now >= preIcoEndTime) {
                stage = Stages.IcoPhase1;
                icoPhase1EndTime = now.add(ICO_PHASE1_PERIOD);
                emit BeatTokenIcoPhase1Started();
            }
        } else if (stage == Stages.IcoPhase1) {
            if (projectedSupply > ICO_PHASE1_LIMIT || now >= icoPhase1EndTime) {
                stage = Stages.IcoPhase2;
                icoPhase2EndTime = now.add(ICO_PHASE2_PERIOD);
                emit BeatTokenIcoPhase2Started();
            }
        } else if (stage == Stages.IcoPhase2) {
            if (projectedSupply > ICO_PHASE2_LIMIT || now >= icoPhase2EndTime) {
                stage = Stages.IcoPhase3;
                icoPhase3EndTime = now.add(ICO_PHASE3_PERIOD);
                emit BeatTokenIcoPhase3Started();
            }
        } else if (stage == Stages.IcoPhase3) {
            if (projectedSupply > ICO_PHASE3_LIMIT || now >= icoPhase3EndTime) {
                stage = Stages.IcoEnded;
                contractEndTime = now;
            }
        }
    }
}
```

### Explanation
1. **Phases Management**: The contract uses an enum to track stages (Deployed, PreIco, IcoPhase1, etc.). Each phase transitions automatically based on time or token supply.
2. **Bonus Calculation**: Tokens are calculated using the current phase's bonus percentage. For example, Pre-ICO offers a 100% bonus.
3. **Phase Transitions**: The `determineCurrentStage` function checks if the current phase's supply limit is exceeded or the time has expired, transitioning to the next phase if needed.
4. **Token Minting**: Tokens are minted during purchases and unsold tokens are minted to the BEAT team upon finalization.
5. **Validation**: The contract ensures purchases are within active phases and allocation limits, reverting transactions that violate these rules.