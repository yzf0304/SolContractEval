To solve this problem, we need to complete the `BotMinting` smart contract, which is responsible for minting promo and Gen0 bots, as well as managing their creation limits and auction prices. The contract must handle the creation of these bots and ensure they are auctioned correctly based on specified rules.

### Approach
1. **Create Promo Bots**: The `createPromoBot` function allows the COO to mint promo bots up to a predefined limit. Each promo bot is assigned to an owner, defaulting to the COO if not specified.
2. **Create Gen0 Auctions**: The `createGen0Auction` function allows the COO to mint Gen0 bots up to a predefined limit and immediately start an auction for each bot. The starting price of each auction is determined based on the average sale price of previous Gen0 bots, with a minimum starting price.
3. **Compute Next Gen0 Price**: The `_computeNextGen0Price` function calculates the starting price for Gen0 auctions using the average of the last five Gen0 sales, ensuring it does not fall below a minimum value.

### Solution Code
```solidity
contract BotMinting is BotAuction {

    uint256 public constant PROMO_CREATION_LIMIT = 5000;
    uint256 public constant GEN0_CREATION_LIMIT = 45000;
    uint256 public constant GEN0_STARTING_PRICE = 10 finney;
    uint256 public constant GEN0_AUCTION_DURATION = 1 days;

    uint256 public promoCreatedCount;
    uint256 public gen0CreatedCount;

    function createPromoBot(uint256 _genes, address _owner) external onlyCOO {
        require(promoCreatedCount < PROMO_CREATION_LIMIT);
        promoCreatedCount++;
        address owner = _owner == address(0) ? cooAddress : _owner;
        _createBot(0, 0, 0, _genes, owner);
    }

    function createGen0Auction(uint256 _genes) external onlyCOO {
        require(gen0CreatedCount < GEN0_CREATION_LIMIT);
        gen0CreatedCount++;
        uint256 botId = _createBot(0, 0, 0, _genes, address(this));
        _approve(botId, saleAuction);
        saleAuction.createAuction(
            botId,
            _computeNextGen0Price(),
            0,
            GEN0_AUCTION_DURATION,
            address(this)
        );
    }

    function _computeNextGen0Price() internal view returns (uint256) {
        uint256 averagePrice = saleAuction.averageGen0SalePrice();
        uint256 nextPrice = averagePrice + (averagePrice / 2);
        if (nextPrice < GEN0_STARTING_PRICE) {
            return GEN0_STARTING_PRICE;
        }
        return nextPrice;
    }
}
```

### Explanation
1. **createPromoBot**:
   - Checks if the promo bot creation limit is not exceeded.
   - Increments the promo bot count.
   - Assigns the owner to the COO if not specified.
   - Creates a new bot with no parents, generation 0, and specified genes.

2. **createGen0Auction**:
   - Checks if the Gen0 bot creation limit is not exceeded.
   - Increments the Gen0 bot count.
   - Creates a new bot owned by the contract.
   - Approves the sale auction contract to manage the bot.
   - Starts an auction with a computed starting price, ending price of 0, and a duration of 1 day.

3. **_computeNextGen0Price**:
   - Calculates the next starting price as 1.5 times the average of the last five Gen0 sales.
   - Ensures the starting price does not fall below a minimum threshold (10 finney).

This approach ensures that promo and Gen0 bots are created within their respective limits and that Gen0 bots are auctioned with dynamically adjusted prices based on market activity.