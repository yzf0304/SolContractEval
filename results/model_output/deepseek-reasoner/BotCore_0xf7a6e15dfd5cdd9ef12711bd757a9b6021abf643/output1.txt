Here is the complete implementation of the `BotMinting` contract:

```solidity
contract BotMinting is BotAuction {

    uint256 public constant PROMO_CREATION_LIMIT = 5000;
    uint256 public constant GEN0_CREATION_LIMIT = 45000;
    uint256 public constant GEN0_STARTING_PRICE = 10 finney;
    uint256 public constant GEN0_AUCTION_DURATION = 1 days;

    uint256 public promoCreatedCount;
    uint256 public gen0CreatedCount;

    function createPromoBot(uint256 _genes, address _owner) external onlyCOO {
        require(promoCreatedCount < PROMO_CREATION_LIMIT);
        promoCreatedCount++;
        
        address owner = _owner;
        if (owner == address(0)) {
            owner = cooAddress;
        }
        
        _createBot(0, 0, 0, _genes, owner);
    }

    function createGen0Auction(uint256 _genes) external onlyCOO {
        require(gen0CreatedCount < GEN0_CREATION_LIMIT);
        gen0CreatedCount++;
        
        uint256 botId = _createBot(0, 0, 0, _genes, address(this));
        _approve(botId, saleAuction);
        
        saleAuction.createAuction(
            botId,
            _computeNextGen0Price(),
            0,
            GEN0_AUCTION_DURATION,
            address(this)
        );
    }

    function _computeNextGen0Price() internal view returns (uint256) {
        uint256 averagePrice = saleAuction.averageGen0SalePrice();
        uint256 nextPrice = averagePrice + (averagePrice / 2);

        if (nextPrice < GEN0_STARTING_PRICE) {
            nextPrice = GEN0_STARTING_PRICE;
        }
        return nextPrice;
    }
}
```

This implementation:

1. **createPromoBot**: 
   - Enforces promo creation limits
   - Uses COO address as fallback owner
   - Creates bots with generation 0 and no parentage
   - Properly tracks created count

2. **createGen0Auction**:
   - Enforces Gen0 creation limits
   - Creates bots owned by contract
   - Sets up auctions with dynamic pricing
   - Uses computed next price from average sales

3. **_computeNextGen0Price**:
   - Implements price calculation logic per spec
   - Maintains price floor using GEN0_STARTING_PRICE
   - Integrates with sale auction contract for average price

The code maintains all security checks from parent contracts and properly integrates with the auction system while adhering to the specified compiler version constraints.