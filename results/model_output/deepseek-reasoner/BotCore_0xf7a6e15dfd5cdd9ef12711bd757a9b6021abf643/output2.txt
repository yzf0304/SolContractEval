Here is the complete implementation of the `BotMinting` contract based on the provided context and requirements:

```solidity
contract BotMinting is BotAuction {

    uint256 public constant PROMO_CREATION_LIMIT = 5000;
    uint256 public constant GEN0_CREATION_LIMIT = 45000;
    uint256 public constant GEN0_STARTING_PRICE = 10 finney;
    uint256 public constant GEN0_AUCTION_DURATION = 1 days;

    uint256 public promoCreatedCount;
    uint256 public gen0CreatedCount;

    function createPromoBot(uint256 _genes, address _owner) external onlyCOO {
        require(promoCreatedCount < PROMO_CREATION_LIMIT);
        promoCreatedCount++;

        address owner = _owner;
        if (owner == address(0)) {
            owner = cooAddress;
        }

        _createBot(0, 0, 0, _genes, owner);
    }

    function createGen0Auction(uint256 _genes) external onlyCOO {
        require(gen0CreatedCount < GEN0_CREATION_LIMIT);
        gen0CreatedCount++;

        uint256 botId = _createBot(0, 0, 0, _genes, address(this));

        _approve(botId, saleAuction);

        saleAuction.createAuction(
            botId,
            _computeNextGen0Price(),
            0,
            GEN0_AUCTION_DURATION,
            address(this)
        );
    }

    function _computeNextGen0Price() internal view returns (uint256) {
        uint256 avgPrice = saleAuction.averageGen0SalePrice();
        uint256 nextPrice = avgPrice + (avgPrice / 2);

        if (nextPrice < GEN0_STARTING_PRICE) {
            nextPrice = GEN0_STARTING_PRICE;
        }
        return nextPrice;
    }
}
```

This implementation:
1. Enforces promo bot creation limits and assigns ownership to COO when no address is specified
2. Tracks Gen0 bot creation and uses declining price auctions with a duration of 1 day
3. Automatically calculates Gen0 auction prices based on the average of the last 5 sales
4. Maintains protocol-owned Gen0 bots before auctioning them
5. Uses proper access control through inherited `onlyCOO` modifier
6. Integrates with the existing auction system through approved transfers

The contract maintains all specified constants and state variables while following the inheritance structure and patterns established in the parent contracts.