```solidity
contract BotMinting is BotAuction {

    uint256 public constant PROMO_CREATION_LIMIT = 5000;
    uint256 public constant GEN0_CREATION_LIMIT = 45000;
    uint256 public constant GEN0_STARTING_PRICE = 10 finney;
    uint256 public constant GEN0_AUCTION_DURATION = 1 days;

    uint256 public promoCreatedCount;
    uint256 public gen0CreatedCount;

    function createPromoBot(uint256 _genes, address _owner) external onlyCOO {
        require(promoCreatedCount < PROMO_CREATION_LIMIT);
        promoCreatedCount++;
        
        address owner = _owner;
        if (owner == address(0)) {
            owner = cooAddress;
        }
        
        _createBot(0, 0, 0, _genes, owner);
    }

    function createGen0Auction(uint256 _genes) external onlyCOO {
        require(gen0CreatedCount < GEN0_CREATION_LIMIT);
        gen0CreatedCount++;
        
        uint256 botId = _createBot(0, 0, 0, _genes, address(this));
        _approve(botId, saleAuction);
        
        uint256 startingPrice = _computeNextGen0Price();
        saleAuction.createAuction(
            botId,
            startingPrice,
            0,
            GEN0_AUCTION_DURATION,
            address(this)
        );
    }

    function _computeNextGen0Price() internal view returns (uint256) {
        uint256 averagePrice = saleAuction.averageGen0SalePrice();
        uint256 nextPrice = averagePrice + (averagePrice / 2);
        
        if (nextPrice < GEN0_STARTING_PRICE) {
            nextPrice = GEN0_STARTING_PRICE;
        }
        return nextPrice;
    }
}
```