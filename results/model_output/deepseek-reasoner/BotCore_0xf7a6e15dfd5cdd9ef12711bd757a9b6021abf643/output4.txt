```solidity
contract BotMinting is BotAuction {

    uint256 public constant PROMO_CREATION_LIMIT = 5000;
    uint256 public constant GEN0_CREATION_LIMIT = 45000;
    uint256 public constant GEN0_STARTING_PRICE = 10 finney;
    uint256 public constant GEN0_AUCTION_DURATION = 1 days;

    uint256 public promoCreatedCount;
    uint256 public gen0CreatedCount;

    function createPromoBot(uint256 _genes, address _owner) external onlyCOO {
        require(promoCreatedCount < PROMO_CREATION_LIMIT);
        address owner = _owner;
        if (owner == address(0)) {
            owner = cooAddress;
        }
        _createBot(0, 0, 0, _genes, owner);
        promoCreatedCount++;
    }

    function createGen0Auction(uint256 _genes) external onlyCOO {
        require(gen0CreatedCount < GEN0_CREATION_LIMIT);
        uint256 botId = _createBot(0, 0, 0, _genes, address(this));
        gen0CreatedCount++;
        uint256 startingPrice = _computeNextGen0Price();
        _approve(botId, saleAuction);
        saleAuction.createAuction(
            botId,
            startingPrice,
            0,
            GEN0_AUCTION_DURATION,
            address(this)
        );
    }

    function _computeNextGen0Price() internal view returns (uint256) {
        uint256 averagePrice = saleAuction.averageGen0SalePrice();
        uint256 nextPrice = averagePrice + (averagePrice / 2);
        if (nextPrice < GEN0_STARTING_PRICE) {
            return GEN0_STARTING_PRICE;
        }
        return nextPrice;
    }
}
```

**Step-by-Step Explanation:**

1. **createPromoBot Function:**
   - **Access Control:** Only the COO can execute this function.
   - **Limit Check:** Ensures the promo bot creation limit (5000) is not exceeded.
   - **Owner Assignment:** Uses the provided owner address, defaults to COO if address(0) is passed.
   - **Bot Creation:** Calls `_createBot` with matronId, sireId, and generation set to 0, using the specified genes and owner.
   - **Counter Increment:** Increments the `promoCreatedCount` to track created promo bots.

2. **createGen0Auction Function:**
   - **Access Control:** Only the COO can execute this function.
   - **Limit Check:** Ensures the Gen0 bot creation limit (45000) is not exceeded.
   - **Bot Creation:** Creates a Gen0 bot owned by the contract itself (`address(this)`).
   - **Price Calculation:** Computes the starting price using `_computeNextGen0Price`.
   - **Auction Setup:** Approves the sale auction contract and creates a descending price auction starting from the computed price, ending at 0, lasting 1 day.

3. **_computeNextGen0Price Function:**
   - **Average Price Fetch:** Retrieves the average of the last 5 Gen0 sale prices from the auction contract.
   - **Next Price Calculation:** Sets next price to 1.5x the average. If below the starting price (10 finney), defaults to the starting price to maintain a minimum floor.

This implementation adheres to the provided specifications, integrates with existing contract structures, and maintains required access controls and state management.