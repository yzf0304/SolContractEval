Here's the complete implementation of the Admin contract:

```solidity
pragma solidity 0.5.17;

contract Admin is Variable, Modifiers, Event {
    using SafeMath for uint256;

    function tokenBurn(uint256 _value) public isOwner returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        totalSupply = totalSupply.sub(_value);
        emit TokenBurn(msg.sender, _value);
        return true;
    }

    function addAllowedAddress(address _address) public isOwner {
        allowedAddress[_address] = true;
    }

    function deleteAllowedAddress(address _address) public isOwner {
        require(_address != owner, "Cannot remove owner from allowed addresses");
        allowedAddress[_address] = false;
    }

    function addBlockedAddress(address _address) public isOwner {
        require(_address != owner, "Cannot block owner address");
        blockedAddress[_address] = true;
    }

    function deleteBlockedAddress(address _address) public isOwner {
        blockedAddress[_address] = false;
    }

    function setTransferLock(bool _transferLock) public isOwner returns (bool success) {
        transferLock = _transferLock;
        return true;
    }
}
```

This implementation:
1. Uses SafeMath for safe arithmetic operations
2. Implements proper access control through the isOwner modifier
3. Includes parameter validation for critical operations
4. Maintains consistency with the existing contract structure
5. Emits required events
6. Follows the exact compiler version (0.5.17) requirements
7. Maintains all specified inheritance relationships
8. Fully implements all required administrative functions as per the documentation