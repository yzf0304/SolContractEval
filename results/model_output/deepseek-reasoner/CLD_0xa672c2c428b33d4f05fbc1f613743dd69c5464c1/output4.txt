```solidity
pragma solidity 0.5.17;

contract Admin is Variable, Modifiers, Event {
    using SafeMath for uint256;

    function tokenBurn(uint256 _value) public isOwner returns (bool success) {
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        totalSupply = totalSupply.sub(_value);
        emit TokenBurn(msg.sender, _value);
        return true;
    }

    function addAllowedAddress(address _address) public isOwner {
        allowedAddress[_address] = true;
    }

    function deleteAllowedAddress(address _address) public isOwner {
        require(_address != owner, "Cannot remove owner from allowed");
        allowedAddress[_address] = false;
    }

    function addBlockedAddress(address _address) public isOwner {
        require(_address != owner, "Cannot block owner");
        blockedAddress[_address] = true;
    }

    function deleteBlockedAddress(address _address) public isOwner {
        blockedAddress[_address] = false;
    }

    function setTransferLock(bool _transferLock) public isOwner returns (bool success) {
        transferLock = _transferLock;
        return true;
    }
}
```