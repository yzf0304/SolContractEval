Here is the complete implementation of the `OperationalControl` contract:

```solidity
contract OperationalControl {
    event ContractUpgrade(address newContract);

    address public gameManagerPrimary;
    address public gameManagerSecondary;
    address public bankManager;

    bool public paused = false;
    bool public error = false;

    modifier onlyGameManager() {
        require(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary);
        _;
    }

    modifier onlyBanker() {
        require(msg.sender == bankManager);
        _;
    }

    modifier anyOperator() {
        require(
            msg.sender == gameManagerPrimary ||
            msg.sender == gameManagerSecondary ||
            msg.sender == bankManager
        );
        _;
    }

    function setPrimaryGameManager(address _newGM) external onlyGameManager {
        gameManagerPrimary = _newGM;
    }

    function setSecondaryGameManager(address _newGM) external onlyGameManager {
        gameManagerSecondary = _newGM;
    }

    function setBanker(address _newBK) external onlyGameManager {
        bankManager = _newBK;
    }

    modifier whenNotPaused() {
        require(!paused);
        _;
    }

    modifier whenPaused {
        require(paused);
        _;
    }

    modifier whenError {
        require(error);
        _;
    }

    function pause() external onlyGameManager whenNotPaused {
        paused = true;
    }

    function unpause() public onlyGameManager whenPaused {
        paused = false;
    }

    function hasError() public onlyGameManager whenPaused {
        error = true;
    }

    function noError() public onlyGameManager whenPaused {
        error = false;
    }
}
```

This implementation:
1. Fills all function bodies with appropriate state changes
2. Maintains strict role-based access control using modifiers
3. Implements pausable functionality with separate paused/error states
4. Follows the exact structure and compiler version (0.4.21) requirements
5. Uses minimal gas-efficient operations for state management
6. Maintains the inheritance-ready structure mentioned in comments

The contract maintains full control flow integrity through modifier checks while keeping all state transitions explicit and auditable.