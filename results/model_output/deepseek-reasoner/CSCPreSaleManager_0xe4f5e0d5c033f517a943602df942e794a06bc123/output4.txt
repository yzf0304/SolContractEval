```solidity
pragma solidity ^0.4.21;

/**
 * @title OperationalControl
 * @notice This contract facilitates access and control for a game, with defined roles for Game Managers and Banker.
 *         The Game Managers (Primary/Secondary) have universal control over all game elements but cannot withdraw funds.
 *         The Banker can withdraw funds and adjust fees or prices.
 * @dev The contract includes pausable and error handling functionalities to manage the state of the game.
 */
contract OperationalControl {
    event ContractUpgrade(address newContract);

    address public gameManagerPrimary;
    address public gameManagerSecondary;
    address public bankManager;

    bool public paused = false;
    bool public error = false;

    modifier onlyGameManager() {
        require(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary);
        _;
    }

    modifier onlyBanker() {
        require(msg.sender == bankManager);
        _;
    }

    modifier anyOperator() {
        require(
            msg.sender == gameManagerPrimary ||
            msg.sender == gameManagerSecondary ||
            msg.sender == bankManager
        );
        _;
    }

    function setPrimaryGameManager(address _newGM) external onlyGameManager {
        gameManagerPrimary = _newGM;
    }

    function setSecondaryGameManager(address _newGM) external onlyGameManager {
        gameManagerSecondary = _newGM;
    }

    function setBanker(address _newBK) external onlyGameManager {
        bankManager = _newBK;
    }

    modifier whenNotPaused() {
        require(!paused);
        _;
    }

    modifier whenPaused {
        require(paused);
        _;
    }

    modifier whenError {
        require(error);
        _;
    }

    function pause() external onlyGameManager whenNotPaused {
        paused = true;
    }

    function unpause() public onlyGameManager whenPaused {
        paused = false;
    }

    function hasError() public onlyGameManager whenPaused {
        error = true;
    }

    function noError() public onlyGameManager whenPaused {
        error = false;
    }
}
```