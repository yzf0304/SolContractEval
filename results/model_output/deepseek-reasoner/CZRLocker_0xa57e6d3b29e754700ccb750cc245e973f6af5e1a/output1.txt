```solidity
contract CZRLocker is owned {
    event AddLock(address addr, uint index, uint startLockTime, uint lockMonth, uint lockedAmount);
    event RemoveLock(address addr, uint index);
    event Unlock(address addr, uint index, uint unlockAmount);

    address public tokenAddr;
    address public unlocker;

    struct LockedCZR {
        uint startLockTime;
        uint lockMonth;
        uint lockedAmount;
        uint unlockedAmount;
    }

    mapping(address => LockedCZR[]) public lockedCZRMap;

    function CZRLocker(address _tokenAddr, address _unlocker) public {
        tokenAddr = _tokenAddr;
        unlocker = _unlocker;
    }

    function removeCZRLock(address addr, uint index) onlyOwner public {
        require(index < lockedCZRMap[addr].length);
        delete lockedCZRMap[addr][index];
        emit RemoveLock(addr, index);
    }

    function addCZRLock(address addr, uint startLockTime, uint amount, uint lockMonth) onlyOwner public {
        if (startLockTime == 0) {
            startLockTime = now;
        }
        LockedCZR memory newLock = LockedCZR({
            startLockTime: startLockTime,
            lockMonth: lockMonth,
            lockedAmount: amount,
            unlockedAmount: 0
        });
        lockedCZRMap[addr].push(newLock);
        token t = token(tokenAddr);
        require(t.transferFrom(addr, address(this), amount));
        emit AddLock(addr, lockedCZRMap[addr].length - 1, startLockTime, lockMonth, amount);
    }

    function unlockCZR(address addr, uint limit) public {
        require(msg.sender == owner || msg.sender == unlocker);
        LockedCZR[] storage locks = lockedCZRMap[addr];
        require(locks.length > 0);

        uint processed = 0;
        for (uint i = 0; i < locks.length; i++) {
            if (limit != 0 && processed >= limit) {
                break;
            }
            LockedCZR storage lock = locks[i];
            if (lock.lockedAmount == 0) continue;

            uint timePassed = now - lock.startLockTime;
            uint monthsPassed = timePassed / 2592000;
            if (monthsPassed > lock.lockMonth) {
                monthsPassed = lock.lockMonth;
            }

            uint totalUnlockable = (lock.lockedAmount * monthsPassed) / lock.lockMonth;
            uint currentUnlock = totalUnlockable - lock.unlockedAmount;
            if (currentUnlock == 0) continue;

            token t = token(tokenAddr);
            require(t.transfer(addr, currentUnlock));
            lock.unlockedAmount += currentUnlock;
            emit Unlock(addr, i, currentUnlock);
            processed++;
        }
    }

    function withdrawEth(address to, uint256 value) onlyOwner public {
        require(to != address(0));
        to.transfer(value);
    }

    function() payable public {}
}
```