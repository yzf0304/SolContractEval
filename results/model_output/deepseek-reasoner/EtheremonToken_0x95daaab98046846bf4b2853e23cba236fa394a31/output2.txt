```solidity
contract TokenERC20 {

    uint256 public totalSupply;

    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Burn(address indexed _from, uint256 _value);

    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != address(0));
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
    }

    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(allowance[_from][msg.sender] >= _value);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }

    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        TokenRecipient spender = TokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }

    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        emit Burn(msg.sender, _value);
        return true;
    }

    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(allowance[_from][msg.sender] >= _value);
        require(balanceOf[_from] >= _value);
        allowance[_from][msg.sender] -= _value;
        balanceOf[_from] -= _value;
        totalSupply -= _value;
        emit Burn(_from, _value);
        return true;
    }
}
```

**Step-by-Step Explanation:**

1. **Internal Transfer (`_transfer`):**
   - Validates recipient isn't zero address.
   - Checks sender's balance sufficiency.
   - Prevents overflow in recipient's balance.
   - Updates balances and emits `Transfer` event.

2. **Public Transfer (`transfer`):**
   - Calls `_transfer` with `msg.sender` as sender.

3. **Transfer From (`transferFrom`):**
   - Ensures spender's allowance is sufficient.
   - Reduces allowance before transferring.
   - Uses `_transfer` for actual balance changes.

4. **Approval Mechanism (`approve`):**
   - Sets allowance without event emission (as per provided context).

5. **Approval with Callback (`approveAndCall`):**
   - Sets allowance then triggers recipient's callback function.

6. **Token Burning (`burn`):**
   - Reduces sender's balance and total supply.
   - Emits `Burn` event.

7. **Burning from Allowance (`burnFrom`):**
   - Checks allowance and balance before burning.
   - Adjusts allowance and emits burn event.