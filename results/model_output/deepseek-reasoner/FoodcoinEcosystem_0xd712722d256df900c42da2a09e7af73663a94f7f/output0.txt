Here's the complete implementation of the Manager contract following the specified requirements and maintaining consistency with the existing pattern:

```solidity
contract Manager is SpecialManager {

    mapping ( address => bool ) public managerAddressMap;
    mapping ( address => uint256 ) public managerAddressNumberMap;
    mapping ( uint256 => address ) public managerListMap;
    uint256 public managerCountInt = 0;

    modifier isManagerOrOwner {
        require(managerAddressMap[msg.sender] || ownerAddressMap[msg.sender]);
        _;
    }

    function managerOn(address _onManagerAddress) external isOwner returns (bool retrnVal) {
        require(_onManagerAddress != address(0));
        
        if (managerAddressNumberMap[_onManagerAddress] > 0) {
            if (!managerAddressMap[_onManagerAddress]) {
                managerAddressMap[_onManagerAddress] = true;
                emit ContractManagementUpdate("Manager", msg.sender, _onManagerAddress, true);
                retrnVal = true;
            } else {
                retrnVal = false;
            }
        } else {
            managerAddressMap[_onManagerAddress] = true;
            managerAddressNumberMap[_onManagerAddress] = managerCountInt;
            managerListMap[managerCountInt] = _onManagerAddress;
            managerCountInt++;
            emit ContractManagementUpdate("Manager", msg.sender, _onManagerAddress, true);
            retrnVal = true;
        }
    }

    function managerOff(address _offManagerAddress) external isOwner returns (bool retrnVal) {
        if (managerAddressNumberMap[_offManagerAddress] > 0 && managerAddressMap[_offManagerAddress]) {
            managerAddressMap[_offManagerAddress] = false;
            emit ContractManagementUpdate("Manager", msg.sender, _offManagerAddress, false);
            retrnVal = true;
        } else {
            retrnVal = false;
        }
    }

    function Manager() public {
        managerAddressMap[msg.sender] = true;
        managerAddressNumberMap[msg.sender] = managerCountInt;
        managerListMap[managerCountInt] = msg.sender;
        managerCountInt++;
    }
}
```

This implementation:
1. Maintains three mappings to track manager status, numbering, and list position
2. Uses the same event system as parent contracts with "Manager" type
3. Follows the same index management pattern as Owner/SpecialManager
4. Prevents modification of the initial manager (index 0)
5. Includes proper access control through inheritance
6. Maintains consistent numbering and count management
7. Uses the same return pattern for enable/disable operations as parent contracts

The contract maintains full compatibility with Solidity 0.4.16 and requires no additional dependencies.