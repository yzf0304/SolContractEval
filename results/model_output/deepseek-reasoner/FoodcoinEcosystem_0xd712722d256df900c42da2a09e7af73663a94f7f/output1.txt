Here's the complete implementation of the Manager contract with full functionality:

```solidity
contract Manager is SpecialManager {

    mapping ( address => bool ) public managerAddressMap;
    mapping ( address => uint256 ) public managerAddressNumberMap;
    mapping ( uint256 => address ) public managerListMap;
    uint256 public managerCountInt = 0;

    modifier isManagerOrOwner {
        require(managerAddressMap[msg.sender] || ownerAddressMap[msg.sender]);
        _;
    }

    function managerOn(address _onManagerAddress) external isOwner returns (bool retrnVal) {
        require(_onManagerAddress != address(0));
        
        if (managerAddressNumberMap[_onManagerAddress] > 0) {
            if (!managerAddressMap[_onManagerAddress]) {
                managerAddressMap[_onManagerAddress] = true;
                emit ContractManagementUpdate("Manager", msg.sender, _onManagerAddress, true);
                retrnVal = true;
            } else {
                retrnVal = false;
            }
        } else {
            managerAddressMap[_onManagerAddress] = true;
            managerAddressNumberMap[_onManagerAddress] = managerCountInt;
            managerListMap[managerCountInt] = _onManagerAddress;
            managerCountInt++;
            emit ContractManagementUpdate("Manager", msg.sender, _onManagerAddress, true);
            retrnVal = true;
        }
    }

    function managerOff(address _offManagerAddress) external isOwner returns (bool retrnVal) {
        if (managerAddressNumberMap[_offManagerAddress] > 0 && managerAddressMap[_offManagerAddress]) {
            managerAddressMap[_offManagerAddress] = false;
            emit ContractManagementUpdate("Manager", msg.sender, _offManagerAddress, false);
            retrnVal = true;
        } else {
            retrnVal = false;
        }
    }

    function Manager() public {
        managerAddressMap[msg.sender] = true;
        managerAddressNumberMap[msg.sender] = managerCountInt;
        managerListMap[managerCountInt] = msg.sender;
        managerCountInt++;
    }
}
```

This implementation:
1. Maintains three tracking mappings for managers with identical structure to Owner/SpecialManager contracts
2. Implements proper access control using modifiers
3. Follows the same pattern for manager activation/deactivation as parent contracts
4. Ensures the initial manager (contract creator) cannot be disabled
5. Uses the same event emission pattern with type "Manager"
6. Maintains sequential numbering of managers through managerCountInt
7. Includes zero-address checks for safety
8. Provides consistent return values matching specified requirements

The code maintains complete compatibility with the existing contract architecture while implementing the specified manager management functionality.