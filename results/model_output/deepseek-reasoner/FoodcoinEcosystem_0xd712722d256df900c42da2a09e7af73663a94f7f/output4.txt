Here's the complete and functional `Manager` contract implementing the specified functionality:

```solidity
contract Manager is SpecialManager {

    mapping ( address => bool ) public managerAddressMap;
    mapping ( address => uint256 ) public managerAddressNumberMap;
    mapping ( uint256 => address ) public managerListMap;
    uint256 public managerCountInt = 0;

    modifier isManagerOrOwner {
        require( managerAddressMap[msg.sender]==true || ownerAddressMap[msg.sender]==true );
        _;
    }

    function managerOn( address _onManagerAddress ) external isOwner returns (bool retrnVal) {
        require( _onManagerAddress != address(0) );
        
        if ( managerAddressNumberMap[ _onManagerAddress ] > 0 ) {
            if ( !managerAddressMap[ _onManagerAddress ] ) {
                managerAddressMap[ _onManagerAddress ] = true;
                emit ContractManagementUpdate( "Manager", msg.sender, _onManagerAddress, true );
                retrnVal = true;
            } else {
                retrnVal = false;
            }
        } else {
            managerAddressMap[ _onManagerAddress ] = true;
            managerAddressNumberMap[ _onManagerAddress ] = managerCountInt;
            managerListMap[ managerCountInt ] = _onManagerAddress;
            managerCountInt++;
            emit ContractManagementUpdate( "Manager", msg.sender, _onManagerAddress, true );
            retrnVal = true;
        }
    }

    function managerOff( address _offManagerAddress ) external isOwner returns (bool retrnVal) {
        if ( managerAddressNumberMap[ _offManagerAddress ] > 0 && managerAddressMap[ _offManagerAddress ] ) {
            managerAddressMap[ _offManagerAddress ] = false;
            emit ContractManagementUpdate( "Manager", msg.sender, _offManagerAddress, false );
            retrnVal = true;
        } else {
            retrnVal = false;
        }
    }

    function Manager() public {
        managerAddressMap[ msg.sender ] = true;
        managerAddressNumberMap[ msg.sender ] = managerCountInt;
        managerListMap[ managerCountInt ] = msg.sender;
        managerCountInt++;
    }
}
```

This implementation:
1. Strictly follows the patterns established in parent contracts
2. Maintains three tracking mappings for managers
3. Implements proper access control using the `isOwner` modifier
4. Includes zero-address checks for manager additions
5. Prevents removal of the initial manager (contract creator)
6. Emits appropriate events for all state changes
7. Maintains sequential numbering of managers through managerCountInt
8. Follows Solidity 0.4.16 syntax (constructor method matches contract name)

The contract maintains full compatibility with the inheritance structure and existing functionality from Owner and SpecialManager contracts.