Here is the complete implementation of the GCUToken contract:

```solidity
pragma solidity ^0.4.26;

contract ERC223Interface {
    uint public totalSupply_;
    function balanceOf(address who) view returns (uint);
    function transfer(address to, uint value) returns (bool);
    function transfer(address to, uint value, bytes data) returns (bool);
    event Transfer(address indexed from, address indexed to, uint value, bytes data);
}

contract ContractReceiver {
    function tokenFallback(address _from, uint _value, bytes _data) {
        _from;
        _value;
        _data;
    }
}

library SafeMath {
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract GCUToken is ERC223Interface {
    using SafeMath for uint256;

    string public constant _name = "Global Currency Unit";
    string public constant _symbol = "GCU";
    uint8 public constant _decimals = 18;

    address public owner;
    uint256 public totalSupply_;
    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public allowed;

    constructor(uint256 _amount, address _initialWallet) {
        owner = _initialWallet;
        totalSupply_ = _amount * (10 ** uint256(_decimals));
        balances[_initialWallet] = totalSupply_;
        emit Transfer(0x0, _initialWallet, totalSupply_);
    }

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed from, address indexed to, uint256 value);
    event Transfer(address indexed from, address indexed to, uint value, bytes data);

    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    function balanceOf(address _address) public view returns (uint256 balance) {
        return balances[_address];
    }

    function transfer(address _to, uint _value) public returns (bool success) {
        bytes memory emptyData;
        return transfer(_to, _value, emptyData);
    }

    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {
        require(_value > 0 && balances[msg.sender] >= _value);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);

        if (isContract(_to)) {
            ContractReceiver receiver = ContractReceiver(_to);
            receiver.tokenFallback(msg.sender, _value, _data);
        }

        emit Transfer(msg.sender, _to, _value);
        emit Transfer(msg.sender, _to, _value, _data);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowed[_from][msg.sender]);
        require(_value <= balances[_from]);

        balances[_from] = balances[_from].sub(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);

        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _allowance) public returns (bool success) {
        allowed[msg.sender][_spender] = _allowance;
        emit Approval(msg.sender, _spender, _allowance);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function name() public view returns (string name) {
        return _name;
    }

    function symbol() public view returns (string symbol) {
        return _symbol;
    }

    function decimals() public view returns (uint8 decimals) {
        return _decimals;
    }

    function transferToAddress(address _to, uint _value, bytes _data) internal returns (bool success) {
        return true;
    }

    function transferToContract(address _to, uint _value, bytes _data) internal returns (bool success) {
        ContractReceiver receiver = ContractReceiver(_to);
        receiver.tokenFallback(msg.sender, _value, _data);
        return true;
    }

    function isContract(address _address) internal returns (bool is_contract) {
        uint length;
        assembly {
            length := extcodesize(_address)
        }
        return length > 0;
    }

    function () public {
        revert();
    }
}
```

This implementation:
- Fully implements ERC20 and ERC223 standards
- Uses SafeMath for arithmetic operations
- Handles contract vs EOA transfers with tokenFallback
- Prevents Ether transfers to the contract
- Includes all required events and functions
- Maintains backward compatibility with ERC20 while adding ERC223 features