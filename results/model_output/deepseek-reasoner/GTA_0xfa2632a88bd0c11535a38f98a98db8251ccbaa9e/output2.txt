To complete the `StandardToken` contract, we need to implement all the required ERC20 functions using SafeMath for arithmetic operations and ensure events are emitted appropriately. Here's the complete contract:

```solidity
contract StandardToken is ERC20 {
    using SafeMath for uint256;
    mapping(address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;

    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value) returns (bool) {
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {
        uint256 _allowance = allowed[_from][msg.sender];
        allowed[_from][msg.sender] = _allowance.sub(_value);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) returns (bool) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}
```

**Explanation:**
- **balanceOf:** Returns the token balance of the specified address.
- **transfer:** Moves tokens from the sender's balance to another address using SafeMath to prevent underflow/overflow, and emits a Transfer event.
- **transferFrom:** Allows a spender to transfer tokens from an owner's balance, adjusting both the allowance and balances, with SafeMath checks and a Transfer event.
- **approve:** Sets the allowance for a spender and emits an Approval event.
- **allowance:** Returns the remaining tokens a spender can transfer on behalf of an owner.

This implementation ensures compliance with the ERC20 standard while using SafeMath for secure arithmetic operations and emitting required events.