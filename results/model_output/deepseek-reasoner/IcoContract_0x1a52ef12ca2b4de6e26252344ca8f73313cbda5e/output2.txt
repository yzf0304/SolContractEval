```solidity
pragma solidity ^0.4.18;

contract Bonus is IcoPhase, Ownable {
    using SafeMath for uint256;

    uint256 constant decimals = 18;
    bool public isBonus;

    mapping(address => uint256) public bonusAccountBalances;
    mapping(uint256 => address) public bonusAccountIndex;
    uint256 public bonusAccountCount;

    function Bonus() public {
        isBonus = true;
    }

    function enableBonus() public onlyOwner returns (bool) {
        require(!isBonus);
        isBonus = true;
        return true;
    }

    function disableBonus() public onlyOwner returns (bool) {
        require(isBonus);
        isBonus = false;
        return true;
    }

    function getBonusByTime() public constant returns (uint256) {
        if (now >= phasePresale_From && now <= phasePresale_To) {
            return 20;
        } else if (now >= phasePublicSale1_From && now <= phasePublicSale1_To) {
            return 15;
        } else if (now >= phasePublicSale2_From && now <= phasePublicSale2_To) {
            return 10;
        } else if (now >= phasePublicSale3_From && now <= phasePublicSale3_To) {
            return 5;
        } else {
            return 0;
        }
    }

    function getBonusByETH(uint256 _value) public constant returns (uint256) {
        uint256 bonusPercentage = getBonusByTime();
        return _value.mul(bonusPercentage).div(100);
    }

    function balanceBonusOf(address _owner) public constant returns (uint256 balance) {
        return bonusAccountBalances[_owner];
    }

    function payBonusToAddress(address _address) public onlyOwner returns (bool success) {
        require(bonusAccountBalances[_address] > 0);
        bonusAccountBalances[_address] = 0;
        return true;
    }

    function() external payable {
        if (isBonus) {
            uint256 bonus = getBonusByETH(msg.value);
            if (bonus > 0) {
                if (bonusAccountBalances[msg.sender] == 0) {
                    bonusAccountIndex[bonusAccountCount] = msg.sender;
                    bonusAccountCount += 1;
                }
                bonusAccountBalances[msg.sender] = bonusAccountBalances[msg.sender].add(bonus);
            }
        }
    }
}
```