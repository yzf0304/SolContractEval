Here is the completed Solidity smart contract for the Bonus system based on the provided context and requirements:

```solidity
pragma solidity ^0.4.18;

contract Bonus is IcoPhase, Ownable {
    using SafeMath for uint256;

    uint256 constant decimals = 18;
    bool public isBonus;
    
    mapping(address => uint256) public bonusAccountBalances;
    mapping(uint256 => address) public bonusAccountIndex;
    uint256 public bonusAccountCount;

    function Bonus() public {
        isBonus = true;
    }

    function enableBonus() public onlyOwner returns (bool) {
        require(!isBonus);
        isBonus = true;
        return true;
    }

    function disableBonus() public onlyOwner returns (bool) {
        require(isBonus);
        isBonus = false;
        return true;
    }

    function getBonusByTime() public view returns (uint256) {
        if (now >= phasePresale_From && now <= phasePresale_To) {
            return 30;
        } else if (now >= phasePublicSale1_From && now <= phasePublicSale1_To) {
            return 20;
        } else if (now >= phasePublicSale2_From && now <= phasePublicSale2_To) {
            return 15;
        } else if (now >= phasePublicSale3_From && now <= phasePublicSale3_To) {
            return 10;
        }
        return 0;
    }

    function getBonusByETH(uint256 _value) public view returns (uint256) {
        uint256 ethBonus = 0;
        if (_value >= 30 ether) {
            ethBonus = 5;
        } else if (_value >= 10 ether) {
            ethBonus = 2;
        }
        return ethBonus;
    }

    function balanceBonusOf(address _owner) public view returns (uint256 balance) {
        return bonusAccountBalances[_owner];
    }

    function payBonusToAddress(address _address) public onlyOwner returns (bool success) {
        require(bonusAccountBalances[_address] > 0);
        bonusAccountBalances[_address] = 0;
        return true;
    }

    function() public payable {}
}
```

Key implementation details:

1. **Bonus Toggle Functions**:
   - `enableBonus()` and `disableBonus()` allow the owner to control bonus availability while enforcing state validity

2. **Time-Based Bonuses**:
   - `getBonusByTime()` calculates bonuses using precise timestamp checks against presale/public sale periods
   - Returns percentage bonuses (30%, 20%, 15%, 10%) based on current phase

3. **ETH Amount Bonuses**:
   - `getBonusByETH()` provides additional bonuses (5% or 2%) based on contribution size
   - Thresholds set at 30 ETH and 10 ETH respectively

4. **Bonus Accounting**:
   - `bonusAccountBalances` tracks accrued bonuses per address
   - `payBonusToAddress()` allows owner to clear bonuses after distribution
   - Fallback function enables ETH receipt while maintaining compatibility

This implementation maintains compatibility with Solidity 0.4.18 and integrates properly with the provided Ownable and IcoPhase contracts while using SafeMath for secure arithmetic operations.