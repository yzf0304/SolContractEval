Here is the completed code for the KyberGenesisToken contract:

```solidity
contract KyberGenesisToken is Ownable {
  string  public  constant name     = "Kyber Genesis Token";
  string  public  constant symbol   = "KGT";
  uint    public  constant decimals = 0;

  uint                   public totalSupply = 0;
  mapping(address=>uint) public balanceOf;

  function KyberGenesisToken( address minter ) {
    transferOwnership(minter);
  }

  event Transfer(address indexed _from, address indexed _to, uint _value);
  event EndMinting( uint timestamp );
  event Approval(address indexed _owner, address indexed _spender, uint _value);

  function mint( address[] recipients ) onlyOwner {
    for (uint i = 0; i < recipients.length; i++) {
      address recipient = recipients[i];
      if (recipient == address(0) || balanceOf[recipient] != 0) continue;
      balanceOf[recipient] = 1;
      totalSupply += 1;
      Transfer(address(0), recipient, 1);
    }
  }

  function endMinting() onlyOwner {
    address deadAddress = 0x000000000000000000000000000000000000dEaD;
    transferOwnership(deadAddress);
    EndMinting(block.timestamp);
  }

  function burn() {
    require(balanceOf[msg.sender] == 1);
    balanceOf[msg.sender] = 0;
    totalSupply -= 1;
    Transfer(msg.sender, address(0), 1);
  }

  function emergencyERC20Drain( ERC20Interface token, uint amount ){
    require(token.transfer(owner, amount));
  }

  function transfer(address _to, uint _value) returns (bool){
    throw;
  }

  function transferFrom(address _from, address _to, uint _value) returns (bool){
    throw;
  }

  function approve(address _spender, uint _value) returns (bool){
    throw;
  }

  function allowance(address _owner, address _spender) constant returns (uint){
    return 0;
  }
}
```

This implementation addresses all requirements:
1. Minting tokens to addresses (1 per address)
2. Burning tokens from sender's balance
3. Ending minting by transferring ownership to a dead address
4. ERC20 emergency drain functionality
5. Proper event emissions
6. ERC20 function stubs that revert transactions
7. Compliance with Solidity 0.4.15 syntax and features
8. Integration with the provided Ownable contract