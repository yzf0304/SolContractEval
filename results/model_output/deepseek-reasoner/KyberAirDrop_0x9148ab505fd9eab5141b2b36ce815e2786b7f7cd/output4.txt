Here's the complete implementation of the KyberGenesisToken contract:

```solidity
contract KyberGenesisToken is Ownable {
  string  public  constant name     = "Kyber Genesis Token";
  string  public  constant symbol   = "KGT";
  uint    public  constant decimals = 0;

  uint                   public totalSupply = 0;
  mapping(address=>uint) public balanceOf;

  function KyberGenesisToken( address minter ) {
    transferOwnership(minter);
  }

  event Transfer(address indexed _from, address indexed _to, uint _value);
  event EndMinting( uint timestamp );
  event Approval(address indexed _owner, address indexed _spender, uint _value);

  function mint( address[] recipients ) onlyOwner {
    for (uint i = 0; i < recipients.length; i++) {
        address recipient = recipients[i];
        if (balanceOf[recipient] == 0) {
            balanceOf[recipient] = 1;
            totalSupply += 1;
            Transfer(address(0), recipient, 1);
        }
    }
  }

  function endMinting() onlyOwner {
    owner = address(0);
    EndMinting(block.timestamp);
  }

  function burn() {
    require(balanceOf[msg.sender] == 1);
    balanceOf[msg.sender] = 0;
    totalSupply -= 1;
    Transfer(msg.sender, address(0), 1);
  }

  function emergencyERC20Drain( ERC20Interface token, uint amount ){
    require(token.transfer(owner, amount));
  }

  function transfer(address _to, uint _value) returns (bool){
    throw;
  }

  function transferFrom(address _from, address _to, uint _value) returns (bool){
    throw;
  }

  function approve(address _spender, uint _value) returns (bool){
    throw;
  }

  function allowance(address _owner, address _spender) constant returns (uint){
    return 0;
  }
}
```

This implementation:
1. Enforces single token per address in minting
2. Properly ends minting by nullifying ownership
3. Implements burning with balance checks
4. Handles ERC20 token drainage to owner
5. Reverts on standard ERC20 operations except burning
6. Maintains proper event emissions
7. Follows inheritance and ownership structure from Ownable

The contract uses Solidity 0.4.15 compatible syntax and follows all specified requirements while maintaining gas efficiency through batch minting and proper state management.