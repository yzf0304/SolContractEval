Here is the complete implementation of the KyberGenesisToken contract:

```solidity
contract KyberGenesisToken is Ownable {
  string  public  constant name     = "Kyber Genesis Token";
  string  public  constant symbol   = "KGT";
  uint    public  constant decimals = 0;

  uint                   public totalSupply = 0;
  mapping(address=>uint) public balanceOf;

  function KyberGenesisToken( address minter ) {
    transferOwnership(minter);
  }

  event Transfer(address indexed _from, address indexed _to, uint _value);
  event EndMinting( uint timestamp );

  function mint( address[] recipients ) onlyOwner {
    for (uint i = 0; i < recipients.length; i++) {
      address recipient = recipients[i];
      if (balanceOf[recipient] == 0) {
        balanceOf[recipient] = 1;
        totalSupply += 1;
        emit Transfer(address(0), recipient, 1);
      }
    }
  }

  function endMinting() onlyOwner {
    emit EndMinting(block.timestamp);
    owner = address(0);
  }

  function burn() {
    require(balanceOf[msg.sender] == 1);
    balanceOf[msg.sender] = 0;
    totalSupply -= 1;
    emit Transfer(msg.sender, address(0), 1);
  }

  function emergencyERC20Drain( ERC20Interface token, uint amount ) {
    require(token.transfer(owner, amount));
  }

  function transfer(address _to, uint _value) returns (bool) {
    revert();
  }

  function transferFrom(address _from, address _to, uint _value) returns (bool) {
    revert();
  }

  function approve(address _spender, uint _value) returns (bool) {
    revert();
  }

  function allowance(address _owner, address _spender) constant returns (uint) {
    return 0;
  }

  event Approval(address indexed _owner, address indexed _spender, uint _value);
}
```

This implementation:
1. Enforces single token per address through minting checks
2. Allows owner to mint tokens and permanently disable minting
3. Lets users burn their token to remove it from circulation
4. Prevents token transfers through reverting ERC20 methods
5. Includes emergency drain functionality for accidentally sent ERC20 tokens
6. Uses Solidity 0.4.x compatible syntax and patterns
7. Maintains strict ownership controls inherited from Ownable