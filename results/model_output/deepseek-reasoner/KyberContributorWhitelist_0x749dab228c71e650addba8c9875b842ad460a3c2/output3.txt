Here is the complete implementation of the KyberContributorWhitelist contract:

```solidity
contract KyberContributorWhitelist is Ownable {
    uint public slackUsersCap = 7;
    mapping(address => uint) public addressCap;

    function KyberContributorWhitelist() Ownable() {}

    event ListAddress(address _user, uint _cap, uint _time);

    function listAddress(address _user, uint _cap) onlyOwner {
        addressCap[_user] = _cap;
        emit ListAddress(_user, _cap, now);
    }

    function listAddresses(address[] _users, uint[] _cap) onlyOwner {
        require(_users.length == _cap.length);
        for (uint i = 0; i < _users.length; i++) {
            addressCap[_users[i]] = _cap[i];
            emit ListAddress(_users[i], _cap[i], now);
        }
    }

    function setSlackUsersCap(uint _cap) onlyOwner {
        slackUsersCap = _cap;
    }

    function getCap(address _user) constant returns (uint) {
        uint cap = addressCap[_user];
        return cap == 1 ? slackUsersCap : cap;
    }

    function destroy() onlyOwner {
        selfdestruct(owner);
    }
}
```

This implementation:
1. Inherits from the provided Ownable contract
2. Properly initializes ownership through the constructor
3. Implements all required whitelist management functions
4. Includes event emission for address listing
5. Maintains proper access control through onlyOwner modifiers
6. Implements batched address listing for efficiency
7. Provides proper cap lookup logic accounting for the slackUsersCap
8. Includes self-destruct functionality with ownership protection

The contract follows Solidity 0.4.13 syntax and maintains compatibility with the provided Ownable implementation.