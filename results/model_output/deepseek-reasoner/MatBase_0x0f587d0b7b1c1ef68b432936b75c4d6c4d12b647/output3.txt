Here is the complete and functional implementation of the `MatBase` contract based on the provided context and requirements:

```solidity
pragma solidity ^0.4.17;

contract MatBase is Ownable, MatToken, MatBonus {
    using SafeMath for uint256;

    uint256 public startTime;
    uint256 public endTime;
    address public wallet;
    address public p_wallet;
    address public t_wallet;
    uint256 public totalCollected;
    uint256 public rate;
    bool public isWhitelistOn;
    uint256 public whiteListLimit;
    mapping (address => FundReservation) public whitelist;

    function setStartTime(uint256 _startTime) public onlyOwner {
        startTime = _startTime;
    }

    function setEndTime(uint256 _endTime) public onlyOwner {
        endTime = _endTime;
    }

    function hasEnded() public constant returns (bool) {
        return now > endTime;
    }

    function mint(address _to, uint256 _tokens) internal returns (bool) {
        require(totalSupply.add(_tokens) <= MAT_TOTAL_SUPPLY_LIMIT);
        balances[_to] = balances[_to].add(_tokens);
        totalSupply = totalSupply.add(_tokens);
        emit Mint(_to, _tokens);
        emit Transfer(address(0), _to, _tokens);
        return true;
    }

    function forwardFunds() internal {
        wallet.transfer(msg.value);
    }

    function validPurchase() internal constant returns (bool) {
        return (now >= startTime && now <= endTime) && msg.value != 0;
    }

    function () payable {
        buyTokens(msg.sender);
    }

    function buyTokens(address beneficiary) public payable {
        require(beneficiary != address(0));
        require(validPurchase());

        uint256 weiAmount = msg.value;
        uint256 baseTokens = weiAmount.mul(rate);
        uint256 bonus = calcBonus(baseTokens);
        uint256 totalTokens = baseTokens.add(bonus);

        if (isWhitelistOn) {
            require(beneficiary == msg.sender);
            FundReservation storage fr = whitelist[msg.sender];
            require(fr.status == WLS.listed && fr.reserved >= totalTokens);
            fr.reserved = fr.reserved.sub(totalTokens);
            if (fr.reserved == 0) {
                fr.status = WLS.fulfilled;
            }
        }

        require(mint(beneficiary, totalTokens));
        forwardFunds();

        if (bonus > 0) {
            emit Bonus(beneficiary, bonus);
        }
        emit TokenPurchase(msg.sender, beneficiary, weiAmount, totalTokens, "");
    }

    function buyTokensReferral(address beneficiary, string referral) public payable {
        require(beneficiary != address(0));
        require(validPurchase());

        uint256 weiAmount = msg.value;
        uint256 baseTokens = weiAmount.mul(rate);
        uint256 bonus = calcBonus(baseTokens);
        uint256 totalTokens = baseTokens.add(bonus);

        if (isWhitelistOn) {
            require(beneficiary == msg.sender);
            FundReservation storage fr = whitelist[msg.sender];
            require(fr.status == WLS.listed && fr.reserved >= totalTokens);
            fr.reserved = fr.reserved.sub(totalTokens);
            if (fr.reserved == 0) {
                fr.status = WLS.fulfilled;
            }
        }

        require(mint(beneficiary, totalTokens));
        forwardFunds();

        if (bonus > 0) {
            emit Bonus(beneficiary, bonus);
        }
        emit TokenPurchase(msg.sender, beneficiary, weiAmount, totalTokens, referral);
    }

    function stopWhitelistReservation() onlyOwner public {
        isWhitelistOn = false;
    }

    function setWhiteListStatus(bool _isWhitelistOn) onlyOwner public {
        isWhitelistOn = _isWhitelistOn;
    }

    function regWL(address wlmember, uint256 reservation) onlyOwner public returns (bool) {
        require(wlmember != address(0));
        require(whiteListLimit >= reservation);
        
        whitelist[wlmember].status = WLS.listed;
        whitelist[wlmember].reserved = reservation;
        whiteListLimit = whiteListLimit.sub(reservation);
        
        emit White(wlmember, reservation);
        return true;
    }

    function convert(address _to, uint256 _pretokens, uint256 _tokens) onlyOwner public returns (bool) {
        require(_to != address(0));
        require(msg.sender == PRESALE_CONTRACT);
        require(mint(_to, _tokens));
        return true;
    }

    function MatBase() {
        startTime = _START_DATE;
        endTime = _END_DATE;
        wallet = ICO_ADDRESS;
        rate = CROWDSALE_PRICE;
        p_wallet = PARTNERS_WALLET;
        t_wallet = TEAM_WALLET;
        balances[p_wallet] = MAT_PARTNERS_SUPPLY_LIMIT;
        balances[t_wallet] = MAT_TEAM_SUPPLY_LIMIT;
        totalSupply = MAT_PARTNERS_SUPPLY_LIMIT + MAT_TEAM_SUPPLY_LIMIT;
        whiteListLimit = MAT_TOTAL_SUPPLY_LIMIT;
    }
}
```

This implementation includes all necessary functionalities for the token crowdsale, including:
- Whitelist management with reservations
- Token purchase with bonus calculation
- Presale token conversion
- Flexible start/end times controlled by the owner
- ERC20 token standard compliance
- SafeMath usage for arithmetic operations
- Events for tracking purchases, mints, bonuses, and whitelist registrations

The contract follows the provided context and specifications while adhering to Solidity best practices for version 0.4.17.