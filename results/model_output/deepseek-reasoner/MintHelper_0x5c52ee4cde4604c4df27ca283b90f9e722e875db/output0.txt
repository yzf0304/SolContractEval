```solidity
pragma solidity 0.5.10;

contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () internal {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract ERC20Interface {
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

contract ERC918Interface {
  function totalSupply() public view returns (uint);
  function getMiningDifficulty() public view returns (uint);
  function getMiningTarget() public view returns (uint);
  function getMiningReward() public view returns (uint);
  function balanceOf(address tokenOwner) public view returns (uint balance);
  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);
  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);
}

library SafeMath {
    function add(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a, "SafeMath: addition overflow");
    }
    function sub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a, "SafeMath: subtraction overflow");
        c = a - b;
    }
    function mul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b, "SafeMath: multiplication overflow");
    }
    function div(uint a, uint b) internal pure returns (uint c) {
        require(b > 0, "SafeMath: division by zero");
        c = a / b;
    }
}

contract MintHelper is Ownable {
    using SafeMath for uint;

    string public name;
    address public mintableToken;
    mapping(bytes32 => bool) public successfulPayments;

    constructor(address mToken, string memory mName) public {
        mintableToken = mToken;
        name = mName;
    }

    function setMintableToken(address mToken) public onlyOwner returns (bool) {
        mintableToken = mToken;
        return true;
    }

    function paymentSuccessful(bytes32 paymentId) public view returns (bool) {
        return successfulPayments[paymentId];
    }

    function proxyMint(uint256 nonce, bytes32 challenge_digest) public returns (bool) {
        bool success = ERC918Interface(mintableToken).mint(nonce, challenge_digest);
        require(success, "Mint failed");
        return success;
    }

    function withdraw() public onlyOwner {
        address payable ownerPayable = address(uint160(owner()));
        ownerPayable.transfer(address(this).balance);
    }

    function send(address _tokenAddr, address dest, uint value) public onlyOwner returns (bool) {
        return ERC20Interface(_tokenAddr).transfer(dest, value);
    }

    function multisend(address _tokenAddr, bytes32 paymentId, address[] memory dests, uint256[] memory values) public onlyOwner returns (uint256) {
        require(!successfulPayments[paymentId], "Payment ID already used");
        require(dests.length == values.length, "Length mismatch");

        successfulPayments[paymentId] = true;
        uint256 successCount = 0;

        for (uint i = 0; i < dests.length; i++) {
            bool success = ERC20Interface(_tokenAddr).transfer(dests[i], values[i]);
            if (success) {
                successCount = successCount.add(1);
            }
        }

        return successCount;
    }
}
```