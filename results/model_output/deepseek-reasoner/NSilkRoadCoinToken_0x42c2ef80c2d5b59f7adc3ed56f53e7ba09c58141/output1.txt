```solidity
contract standardToken is ERC20Token, limitedFactor {

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowances;

    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value) public FoundationAccountNeedFreezeOneYear(msg.sender) returns (bool success) {
        require(_value <= balances[msg.sender]);
        require(balances[_to] + _value >= balances[_to]);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowances[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
        return false;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowances[_from][msg.sender]);
        require(_value <= balances[_from]);
        require(balances[_to] + _value >= balances[_to]);
        balances[_from] -= _value;
        balances[_to] += _value;
        allowances[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {
        return allowances[_owner][_spender];
    }
}
```

```solidity
contract standardToken is ERC20Token, limitedFactor {

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowances;

    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value) public FoundationAccountNeedFreezeOneYear(msg.sender) returns (bool success) {
        require(_value <= balances[msg.sender]);
        require(balances[_to] + _value >= balances[_to]);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowances[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
        return false;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowances[_from][msg.sender]);
        require(_value <= balances[_from]);
        require(balances[_to] + _value >= balances[_to]);
        balances[_from] -= _value;
        balances[_to] += _value;
        allowances[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {
        return allowances[_owner][_spender];
    }
}
```

**Step-by-Step Explanation:**

1. **Inheritance Setup:** The `standardToken` contract inherits from both `ERC20Token` and `limitedFactor`, incorporating standard ERC20 functions and freeze functionality for foundation accounts.

2. **Balance Check:** `balanceOf` returns the token balance of a specified address by querying the `balances` mapping.

3. **Transfer Function:** 
   - Checks sender's balance and overflow protection for recipient.
   - Uses `FoundationAccountNeedFreezeOneYear` modifier to enforce 1-year freeze on foundation accounts.
   - Updates balances and emits `Transfer` event.

4. **Approval Mechanism:** 
   - `approve` sets allowance for a spender and emits an `Approval` event.
   - `approveAndCall` combines approval with a call to the recipient's `receiveApproval` method for atomic operations.

5. **Transfer From:** 
   - Validates allowance and balances before transferring between accounts.
   - Updates allowances to prevent double-spending.

6. **Allowance Management:** `allowance` function provides visibility into remaining spending limits between owner-spender pairs.

This implementation strictly follows ERC20 standards while integrating ERC223's `approveAndCall` pattern and foundation account restrictions from the provided context.