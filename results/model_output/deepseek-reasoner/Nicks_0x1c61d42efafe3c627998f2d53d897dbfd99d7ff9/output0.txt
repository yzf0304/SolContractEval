/** 
 * @title Nicks
 * @notice A contract that allows users to set and unset unique nicknames. Each nickname is linked to a single Ethereum address.
 * @dev The contract ensures that each nickname is unique and can only be owned by one address at a time.
 */
contract Nicks {

  mapping (address => string) private nickOfOwner;
  mapping (string => address) private ownerOfNick;

  event Set (string indexed _nick, address indexed _owner);
  event Unset (string indexed _nick, address indexed _owner);

  function Nicks () public {
    // empty
  }

  function nickOf (address _owner) public view returns (string _nick) {
    return nickOfOwner[_owner];
  }

  function ownerOf (string _nick) public view returns (address _owner) {
    return ownerOfNick[_nick];
  }

  function set (string _nick) public {
    string storage existingNick = nickOfOwner[msg.sender];
    if (bytes(existingNick).length > 0) {
      delete ownerOfNick[existingNick];
      delete nickOfOwner[msg.sender];
      emit Unset(existingNick, msg.sender);
    }

    require(bytes(_nick).length > 2, "Nick must be longer than 2 characters");
    require(ownerOfNick[_nick] == address(0), "Nickname already exists");

    nickOfOwner[msg.sender] = _nick;
    ownerOfNick[_nick] = msg.sender;
    emit Set(_nick, msg.sender);
  }

  function unset () public {
    string storage existingNick = nickOfOwner[msg.sender];
    require(bytes(existingNick).length > 0, "No nickname to unset");

    delete ownerOfNick[existingNick];
    delete nickOfOwner[msg.sender];
    emit Unset(existingNick, msg.sender);
  }

  function () external payable {}
}