pragma solidity ^0.4.20;

contract Nicks {

  mapping (address => string) private nickOfOwner;
  mapping (string => address) private ownerOfNick;

  event Set (string indexed _nick, address indexed _owner);
  event Unset (string indexed _nick, address indexed _owner);

  function Nicks () public {
    // empty
  }

  function nickOf (address _owner) public view returns (string _nick) {
    return nickOfOwner[_owner];
  }

  function ownerOf (string _nick) public view returns (address _owner) {
    return ownerOfNick[_nick];
  }

  function set (string _nick) public {
    require(bytes(_nick).length > 2);
    require(ownerOfNick[_nick] == address(0));

    string storage currentNick = nickOfOwner[msg.sender];
    if (bytes(currentNick).length > 0) {
        delete ownerOfNick[currentNick];
        delete nickOfOwner[msg.sender];
        emit Unset(currentNick, msg.sender);
    }

    nickOfOwner[msg.sender] = _nick;
    ownerOfNick[_nick] = msg.sender;
    emit Set(_nick, msg.sender);
  }

  function unset () public {
    string storage currentNick = nickOfOwner[msg.sender];
    require(bytes(currentNick).length > 0);

    delete ownerOfNick[currentNick];
    delete nickOfOwner[msg.sender];
    emit Unset(currentNick, msg.sender);
  }

  function () external payable {}
}