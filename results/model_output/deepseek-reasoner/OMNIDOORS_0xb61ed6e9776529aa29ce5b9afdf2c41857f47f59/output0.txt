Here is the complete and functional implementation of the OMNIDOORS contract:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract OMNIDOORS is Ownable, ERC721, NonblockingReceiver {
    address public _owner;
    string private baseURI;
    uint256 nextTokenId = 5900;
    uint256 MAX_NETWORK_MINT = 9300;
    uint256 gasForDestinationLzReceive = 350000;

    constructor(string memory baseURI_, address _layerZeroEndpoint)
        ERC721("Omni Doors", "odoors")
    {
        _owner = msg.sender;
        endpoint = ILayerZeroEndpoint(_layerZeroEndpoint);
        baseURI = baseURI_;
        for (uint256 i = 0; i < 330; i++) {
            _safeMint(_owner, ++nextTokenId);
        }
    }

    function mint(uint8 numTokens) external payable {
        require(numTokens == 1, "OMNIDOORS: Can only mint 1 per transaction");
        require(nextTokenId + numTokens <= MAX_NETWORK_MINT, "OMNIDOORS: Exceeds max supply");
        _safeMint(msg.sender, ++nextTokenId);
    }

    function traverseChains(uint16 _chainId, uint256 tokenId) public payable {
        require(ownerOf(tokenId) == msg.sender, "OMNIDOORS: Caller is not owner");
        require(trustedRemoteLookup[_chainId].length != 0, "OMNIDOORS: Chain not available");
        
        _burn(tokenId);
        
        bytes memory payload = abi.encode(msg.sender, tokenId);
        bytes memory adapterParams = abi.encodePacked(uint16(1), gasForDestinationLzReceive);
        
        (uint256 nativeFee,) = endpoint.estimateFees(
            _chainId,
            address(this),
            payload,
            false,
            adapterParams
        );
        
        require(msg.value >= nativeFee, "OMNIDOORS: Insufficient fee");
        
        _lzSend(
            _chainId,
            payload,
            payable(msg.sender),
            address(0),
            adapterParams
        );
    }

    function setBaseURI(string memory URI) external onlyOwner {
        baseURI = URI;
    }

    function donate() external payable {}

    function withdraw(uint256 amt) external onlyOwner {
        require(amt <= address(this).balance, "OMNIDOORS: Insufficient balance");
        payable(owner()).transfer(amt);
    }

    function setGasForDestinationLzReceive(uint256 newVal) external onlyOwner {
        gasForDestinationLzReceive = newVal;
    }

    function _LzReceive(
        uint16,
        bytes memory,
        uint64,
        bytes memory _payload
    ) internal override {
        (address toAddr, uint256 tokenId) = abi.decode(_payload, (address, uint256));
        _safeMint(toAddr, tokenId);
    }

    function _baseURI() internal view override returns (string memory) {
        return baseURI;
    }
}
```

This implementation:
1. Enforces single token minting per transaction with supply limits
2. Implements cross-chain NFT transfers via LayerZero
3. Uses proper access control with Ownable pattern
4. Includes proper fee estimation and gas management
5. Handles cross-chain message receiving and token minting
6. Maintains ERC721 compliance with safe minting/burning
7. Allows owner to configure base URI and gas parameters
8. Includes fund management functions for donations and withdrawals

The contract maintains all specified requirements while ensuring secure cross-chain functionality through LayerZero's non-blocking receiver pattern.