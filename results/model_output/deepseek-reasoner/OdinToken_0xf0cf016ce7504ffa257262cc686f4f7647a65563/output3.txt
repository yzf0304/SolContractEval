```solidity
pragma solidity ^0.4.21;

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    event Burn(uint tokens);
}

contract Owned {
    address public owner;
    address private newOwner;

    event OwnershipTransferred(address indexed _from, address indexed _to);

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }

    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}

contract OdinToken is ERC20Interface, Owned {
    using SafeMath for uint256;

    string public symbol;
    string public name;
    uint8 public decimals;
    uint private _totalSupply;
    bool private _whitelistAll;

    struct balanceData {  
        bool locked;
        uint balance;
        uint airDropQty;
    }

    mapping(address => balanceData) balances;
    mapping(address => mapping(address => uint)) allowed;

    function OdinToken() public {
        owner = msg.sender;
        symbol = "ODIN";
        name = "ODIN Token";
        decimals = 18;
        _whitelistAll = false;
        _totalSupply = 100000000000000000000000;
        balances[owner].balance = _totalSupply;
        emit Transfer(address(0), owner, _totalSupply);
    }

    function totalSupply() public constant returns (uint256) {
        return _totalSupply;
    }

    function whitelistAddress(address to) public onlyOwner returns (bool) {
        balances[to].airDropQty = 0;
        return true;
    }

    function whitelistAllAddresses() public onlyOwner returns (bool) {
        _whitelistAll = true;
        return true;
    }

    function balanceOf(address tokenOwner) public constant returns (uint) {
        return balances[tokenOwner].balance;
    }

    function transfer(address to, uint tokens) public returns (bool) {
        require(to != address(0), "Cannot transfer to zero address");
        require(to != msg.sender, "Cannot transfer to self");
        require(balances[msg.sender].balance >= tokens, "Insufficient balance");

        if (msg.sender == owner) {
            balances[msg.sender].balance = balances[msg.sender].balance.sub(tokens);
            balances[to].balance = balances[to].balance.add(tokens);
            balances[to].airDropQty = balances[to].airDropQty.add(tokens);
            emit Transfer(msg.sender, to, tokens);
            return true;
        } else {
            if (!_whitelistAll) {
                uint currentTime = now;
                uint allowedTransfer;
                if (currentTime < 1535760000) {
                    allowedTransfer = 0;
                } else if (currentTime < 1538352000) {
                    allowedTransfer = 10;
                } else if (currentTime < 1546214400) {
                    allowedTransfer = 25;
                } else if (currentTime < 1553990400) {
                    allowedTransfer = 50;
                } else if (currentTime < 1561939200) {
                    allowedTransfer = 75;
                } else {
                    allowedTransfer = 100;
                }

                uint airDropQty = balances[msg.sender].airDropQty;
                uint nonAirDrop = balances[msg.sender].balance.sub(airDropQty);
                uint available = (airDropQty.mul(allowedTransfer).div(100)).add(nonAirDrop);
                require(tokens <= available, "Transfer exceeds airdrop limit");
            }

            balances[msg.sender].balance = balances[msg.sender].balance.sub(tokens);
            balances[to].balance = balances[to].balance.add(tokens);
            emit Transfer(msg.sender, to, tokens);
            return true;
        }
    }

    function approve(address spender, uint tokens) public returns (bool) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    function transferFrom(address from, address to, uint tokens) public returns (bool) {
        require(to != address(0), "Cannot transfer to zero address");
        require(to != from, "Cannot transfer to self");
        require(balances[from].balance >= tokens, "Insufficient balance");
        require(allowed[from][msg.sender] >= tokens, "Allowance exceeded");

        if (from == owner) {
            balances[from].balance = balances[from].balance.sub(tokens);
            balances[to].balance = balances[to].balance.add(tokens);
            balances[to].airDropQty = balances[to].airDropQty.add(tokens);
        } else {
            if (!_whitelistAll) {
                uint currentTime = now;
                uint allowedTransfer;
                if (currentTime < 1535760000) {
                    allowedTransfer = 0;
                } else if (currentTime < 1538352000) {
                    allowedTransfer = 10;
                } else if (currentTime < 1546214400) {
                    allowedTransfer = 25;
                } else if (currentTime < 1553990400) {
                    allowedTransfer = 50;
                } else if (currentTime < 1561939200) {
                    allowedTransfer = 75;
                } else {
                    allowedTransfer = 100;
                }

                uint airDropQty = balances[from].airDropQty;
                uint nonAirDrop = balances[from].balance.sub(airDropQty);
                uint available = (airDropQty.mul(allowedTransfer).div(100)).add(nonAirDrop);
                require(tokens <= available, "Transfer exceeds airdrop limit");
            }

            balances[from].balance = balances[from].balance.sub(tokens);
            balances[to].balance = balances[to].balance.add(tokens);
        }

        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        emit Transfer(from, to, tokens);
        return true;
    }

    function allowance(address tokenOwner, address spender) public constant returns (uint) {
        return allowed[tokenOwner][spender];
    }

    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    function burn(uint256 tokens) public onlyOwner returns (bool) {
        require(balances[owner].balance >= tokens, "Insufficient balance");
        balances[owner].balance = balances[owner].balance.sub(tokens);
        _totalSupply = _totalSupply.sub(tokens);
        emit Burn(tokens);
        return true;
    }

    function () public payable {
        revert("Ether not accepted");
    }
}
```