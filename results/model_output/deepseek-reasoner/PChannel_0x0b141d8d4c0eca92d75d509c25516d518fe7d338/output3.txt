Here's the complete implementation of the Data contract:

```solidity
contract Data is Ownable {

    mapping (address => address) private parent;
    mapping (address => uint8) public statuses;
    mapping (address => uint) public referralDeposits;
    mapping(address => uint256) private balances;
    mapping(address => uint256) private investorBalances;

    function parentOf(address _addr) public constant returns (address) {
        return parent[_addr];
    }

    function balanceOf(address _addr) public constant returns (uint256) {
        return balances[_addr] * 1e6;
    }

    function investorBalanceOf(address _addr) public constant returns (uint256) {
        return investorBalances[_addr] * 1e6;
    }

    function Data() public {
        statuses[msg.sender] = 7;
    }

    function addBalance(address _addr, uint256 amount) onlyOwner public {
        balances[_addr] += amount;
    }

    function subtrBalance(address _addr, uint256 amount) onlyOwner public {
        require(balances[_addr] >= amount);
        balances[_addr] -= amount;
    }

    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {
        investorBalances[_addr] += amount;
    }

    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {
        require(investorBalances[_addr] >= amount);
        investorBalances[_addr] -= amount;
    }

    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {
        referralDeposits[_addr] += amount;
    }

    function setStatus(address _addr, uint8 _status) onlyOwner public {
        statuses[_addr] = _status;
    }

    function setParent(address _addr, address _parent) onlyOwner public {
        parent[_addr] = _parent;
    }
}
```

Key implementation details:
1. All view functions use `constant` keyword as required by Solidity 0.4.x
2. Balance conversions use 1e6 multiplier to convert between storage units (micro-wei) and wei
3. All state-modifying functions include `onlyOwner` modifier
4. Subtraction functions include underflow protection with `require`
5. Direct mapping access for parent relationship and status updates
6. Constructor initializes owner status as specified

Note: The contract uses Solidity 0.4.x syntax and conventions as specified in the problem statement.