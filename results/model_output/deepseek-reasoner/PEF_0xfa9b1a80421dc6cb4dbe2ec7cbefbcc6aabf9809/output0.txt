To complete the `owned` contract, we need to implement the `transferOwnership` and `acceptOwnership` functions according to the specified two-step ownership transfer process. Here is the final code:

```solidity
contract owned {

    address public owner;

    address public ownerCandidate;

    function owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
        assert(owner == msg.sender);
        _;
    }

    modifier onlyOwnerCandidate() {
        assert(msg.sender == ownerCandidate);
        _;
    }

    function transferOwnership(address candidate) external onlyOwner {
        ownerCandidate = candidate;
    }

    function acceptOwnership() external onlyOwnerCandidate {
        owner = ownerCandidate;
        ownerCandidate = address(0);
    }
}
```

**Step-by-Step Explanation:**

1. **transferOwnership Function:**
   - **Purpose:** Allows the current owner to nominate a new owner candidate.
   - **Implementation:** The function assigns the provided `candidate` address to `ownerCandidate`. The `onlyOwner` modifier ensures only the current owner can call this function.

2. **acceptOwnership Function:**
   - **Purpose:** Allows the nominated candidate to become the new owner.
   - **Implementation:** Sets `owner` to `ownerCandidate` and resets `ownerCandidate` to `address(0)`. The `onlyOwnerCandidate` modifier ensures only the nominated candidate can execute this.

This implementation strictly follows the two-step ownership transfer process using Solidity 0.4.18 syntax, without introducing any additional features.