```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.7.6;

contract PIKA is Context, Owned, ERC20 {
    using SafeMath for uint256;

    uint256 public _taxFee;
    uint256 public totalSupply;
    string public symbol;
    string public name;
    uint8 public decimals;
    uint256 private _taxFeepercent = 225;
    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    mapping (address => bool) private _isExcludedFromFee;
    uint256 public ContractDeployed;
    address oldPika = 0xE09fB60E8D6e7E1CEbBE821bD5c3FC67a40F86bF;
    uint256 public oldPika_amount;
    uint256 private minamountTakenOut = 1000000 * 10**9 * 10**9;  
    uint256 private MinimumSupply = 100000000 * 10**9 * 10**9;

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;

    event TransferFee(address indexed _from, address indexed _to, uint256 _value);

    function balanceOf(address _owner) public view override returns (uint256) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _amount) public override returns (bool) {
        _transfer(_msgSender(), _to, _amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), allowed[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(balances[sender] >= amount, "Insufficient balance");

        uint256 feeAmount = 0;
        if (!_isExcludedFromFee[sender] && !_isExcludedFromFee[recipient]) {
            feeAmount = amount.mul(_taxFeepercent).div(10000);
            uint256 amountAfterFee = amount.sub(feeAmount);
            balances[sender] = balances[sender].sub(amount);
            balances[recipient] = balances[recipient].add(amountAfterFee);
            balances[address(this)] = balances[address(this)].add(feeAmount);
            _taxFee = _taxFee.add(feeAmount);
            emit Transfer(sender, recipient, amountAfterFee);
            emit Transfer(sender, address(this), feeAmount);
        } else {
            balances[sender] = balances[sender].sub(amount);
            balances[recipient] = balances[recipient].add(amount);
            emit Transfer(sender, recipient, amount);
        }

        if (recipient == uniswapV2Pair && !_isExcludedFromFee[sender]) {
            uint256 contractBalance = _taxFee;
            if (contractBalance >= minamountTakenOut) {
                swapTokensForEth(contractBalance);
                _taxFee = 0;
            }
        }
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        allowed[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function allowance(address _owner, address _spender) public view override returns (uint256) {
        return allowed[_owner][_spender];
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        balances[account] = balances[account].sub(amount);
        totalSupply = totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function viewMinExtractAmt() public view returns (uint256) {
        return minamountTakenOut;
    }

    function setMinExtractAmt(uint256 _amount) public onlyOwner() {
        minamountTakenOut = _amount;
    }

    function viewFee() public view returns (uint256) {
        return _taxFeepercent;
    }

    function exchnagePika(uint256 tokens) external {
        require(block.timestamp <= ContractDeployed.add(4 days), "Swap period ended");
        ERC20(oldPika).transferFrom(_msgSender(), address(this), tokens);
        oldPika_amount = oldPika_amount.add(tokens);
        uint256 swapAmount = calSwapToken(tokens, 0);
        require(balances[address(this)] >= swapAmount, "Insufficient contract balance");
        _transfer(address(this), _msgSender(), swapAmount);
    }

    function extractOldPIKA() external onlyOwner() {
        uint256 balance = ERC20(oldPika).balanceOf(address(this));
        ERC20(oldPika).transfer(owner, balance);
        oldPika_amount = 0;
    }

    function extractfee() external onlyOwner() {
        uint256 fee = _taxFee;
        _taxFee = 0;
        _transfer(address(this), owner, fee);
    }

    function calSwapToken(uint256 _tokens, uint256) internal pure returns (uint256) {
        if (_tokens < 1e12 * 10**18) {
            return _tokens.mul(500).div(100);
        } else if (_tokens <= 10e12 * 10**18) {
            return _tokens.mul(250).div(100);
        } else {
            return _tokens.mul(100).div(100);
        }
    }

    function burn(uint256 value) public returns (bool) {
        _burn(_msgSender(), value);
        return true;
    }

    function viewMinSupply() public view returns (uint256) {
        return MinimumSupply;
    }

    function changeMinSupply(uint256 newMinSupply) public onlyOwner() {
        MinimumSupply = newMinSupply;
    }

    function addLiquidity(uint256 tokenAmount) public payable onlyOwner() {
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.addLiquidityETH{value: msg.value}(
            address(this),
            tokenAmount,
            0,
            0,
            owner,
            block.timestamp
        );
    }

    constructor() {
        symbol = "PIKA";
        name = "PIKA";
        decimals = 18;
        totalSupply = 50000000000000 * 10**9 * 10**9;
        owner = _msgSender();
        balances[owner] = totalSupply;
        _isExcludedFromFee[owner] = true;
        _isExcludedFromFee[address(this)] = true;
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;
        ContractDeployed = block.timestamp;
    }

    receive() payable external {
        require(msg.value > 0);
        owner.transfer(msg.value);
    }
}
```