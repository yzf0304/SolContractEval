Here's the complete implementation of the PortalToken contract:

```solidity
contract PortalToken is ERC20Token {
    address public initialOwner;
    uint256 public supply = 1000000000 * 10 ** 18;
    string public name = 'PortalToken';
    uint8 public decimals = 18;
    string public symbol = 'PTC';
    string public version = 'v0.1';
    bool public transfersEnabled = true;
    uint public creationBlock;
    uint public creationTime;

    mapping (address => uint256) balance;
    mapping (address => mapping (address => uint256)) m_allowance;
    mapping (address => uint) jail;
    mapping (address => uint256) jailAmount;

    function PortalToken() public {
        initialOwner = msg.sender;
        balance[msg.sender] = supply;
        creationBlock = block.number;
        creationTime = block.timestamp;
    }

    function balanceOf(address _account) constant public returns (uint256) {
        return balance[_account];
    }

    function jailAmountOf(address _account) constant public returns (uint256) {
        return jailAmount[_account];
    }

    function totalSupply() constant public returns (uint256) {
        return supply;
    }

    function transfer(address _to, uint256 _value) public returns (bool) {
        if (!transfersEnabled) return false;
        if (jail[msg.sender] > block.timestamp) return false;
        return doTransfer(msg.sender, _to, _value);
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        if (!transfersEnabled) return false;
        if (jail[_from] > block.timestamp || jail[_to] > block.timestamp) return false;
        if (m_allowance[_from][msg.sender] < _value) return false;
        
        bool success = doTransfer(_from, _to, _value);
        if (success) {
            m_allowance[_from][msg.sender] -= _value;
        }
        return success;
    }

    function doTransfer(address _from, address _to, uint _value) internal returns (bool) {
        if (balance[_from] < _value) return false;
        if (balance[_to] + _value < balance[_to]) return false;
        
        balance[_from] -= _value;
        balance[_to] += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool) {
        if (!transfersEnabled) return false;
        if (jail[msg.sender] > block.timestamp || jail[_spender] > block.timestamp) return false;
        
        m_allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256) {
        if (!transfersEnabled) return 0;
        return m_allowance[_owner][_spender];
    }

    function enableTransfers(bool _transfersEnabled) public returns (bool) {
        require(msg.sender == initialOwner);
        transfersEnabled = _transfersEnabled;
        return transfersEnabled;
    }

    function catchYou(address _target, uint _timestamp, uint256 _amount) public returns (uint) {
        require(msg.sender == initialOwner);
        require(transfersEnabled);
        
        jail[_target] = _timestamp;
        jailAmount[_target] = _amount;
        return _timestamp;
    }

    function() external payable {}
}
```

This implementation includes:
1. ERC20 standard compliance with balance tracking and transfer functionality
2. Jail system that restricts transfers from/to jailed addresses
3. Transfer enabling/disabling mechanism controlled by the owner
4. Proper overflow checks in token transfers
5. Allowance management with approval system
6. Additional jail amount tracking and owner-controlled account freezing

All functions include the required checks for transfers enabled status and jail restrictions. The contract maintains ERC20 compliance while adding the specified extended functionality.