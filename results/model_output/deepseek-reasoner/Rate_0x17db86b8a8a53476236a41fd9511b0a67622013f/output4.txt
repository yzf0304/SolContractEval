To complete the RBInformationStore contract according to the provided specifications, we implement the necessary functions to modify state variables with the appropriate permissions and add a fallback function to control Ether reception.

```solidity
contract RBInformationStore is Ownable {

    address public profitContainerAddress;
    address public companyWalletAddress;
    uint public etherRatioForOwner;
    address public multiSigAddress;
    address public accountAddressForSponsee;
    bool public isPayableEnabledForAll;

    modifier onlyMultiSig() {
        require(msg.sender == multiSigAddress);
        _;
    }

    function RBInformationStore(
        address _profitContainerAddress,
        address _companyWalletAddress,
        uint _etherRatioForOwner,
        address _multiSigAddress,
        address _accountAddressForSponsee
    ) {
        profitContainerAddress = _profitContainerAddress;
        companyWalletAddress = _companyWalletAddress;
        etherRatioForOwner = _etherRatioForOwner;
        multiSigAddress = _multiSigAddress;
        accountAddressForSponsee = _accountAddressForSponsee;
    }

    function changeProfitContainerAddress(address _address) onlyMultiSig {
        profitContainerAddress = _address;
    }

    function changeCompanyWalletAddress(address _address) onlyMultiSig {
        companyWalletAddress = _address;
    }

    function changeEtherRatioForOwner(uint _value) onlyMultiSig {
        etherRatioForOwner = _value;
    }

    function changeMultiSigAddress(address _address) onlyMultiSig {
        multiSigAddress = _address;
    }

    function changeOwner(address _address) onlyMultiSig {
        owner = _address;
    }

    function changeAccountAddressForSponsee(address _address) onlyMultiSig {
        accountAddressForSponsee = _address;
    }

    function changeIsPayableEnabledForAll() onlyMultiSig {
        isPayableEnabledForAll = !isPayableEnabledForAll;
    }

    function() payable {
        require(isPayableEnabledForAll);
    }
}
```

**Step-by-Step Explanation:**

1. **State Variable Modifications:**
   - Each function responsible for changing state variables (e.g., `changeProfitContainerAddress`, `changeCompanyWalletAddress`) assigns the input parameter to the corresponding state variable. These functions are restricted using the `onlyMultiSig` modifier, ensuring only the multi-signature wallet can execute them.

2. **Owner Change Functionality:**
   - The `changeOwner` function updates the `owner` variable inherited from `Ownable`, allowing the multi-sig to transfer ownership without relying on the original owner.

3. **Toggle Payable Status:**
   - `changeIsPayableEnabledForAll` toggles the `isPayableEnabledForAll` boolean, flipping its value each time it's called. This controls the contract's ability to receive Ether.

4. **Fallback Function:**
   - The fallback function `function() payable` includes a check against `isPayableEnabledForAll`. If disabled (false), any Ether sent to the contract reverts the transaction, enforcing payment control as specified.

This implementation adheres to the requirements, ensuring proper access control and functionality as described.