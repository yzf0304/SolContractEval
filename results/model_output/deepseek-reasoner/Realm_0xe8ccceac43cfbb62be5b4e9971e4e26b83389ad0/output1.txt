Here's the complete and functional `AccessControl` contract based on the provided context and requirements:

```solidity
contract AccessControl {

    address public creatorAddress;
    uint16 public totalSeraphims = 0;
    mapping (address => bool) public seraphims;
    bool public isMaintenanceMode = true;

    modifier onlyCREATOR() {
        require(msg.sender == creatorAddress);
        _;
    }

    modifier onlySERAPHIM() {
        require(seraphims[msg.sender] == true);
        _;
    }

    modifier isContractActive {
        require(!isMaintenanceMode);
        _;
    }

    function AccessControl() public {
        creatorAddress = msg.sender;
    }

    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {
        require(!seraphims[_newSeraphim]);
        seraphims[_newSeraphim] = true;
        totalSeraphims++;
    }

    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {
        require(seraphims[_oldSeraphim]);
        seraphims[_oldSeraphim] = false;
        totalSeraphims--;
    }

    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {
        isMaintenanceMode = _isMaintaining;
    }
}
```

This implementation:
1. Maintains proper access control with `onlyCREATOR` modifier
2. Includes complete Seraphim management with add/remove functionality
3. Properly tracks Seraphim count with `totalSeraphims`
4. Implements maintenance mode toggle
5. Follows Solidity 0.4.19 syntax requirements
6. Maintains all specified state variables and modifiers
7. Includes input validation for role management operations