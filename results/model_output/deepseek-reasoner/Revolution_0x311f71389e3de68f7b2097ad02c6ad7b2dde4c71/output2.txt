```solidity
pragma solidity ^0.4.24;

contract Revolution is Accessibility, PaymentSystem {
  using Percent for Percent.percent;
  using SafeMath for uint;
  using Zero for *;
  using ToAddress for *;

  InvestorsStorage private m_investors;
  mapping(address => bool) private m_referrals;
  bool private m_nextWave;

  address public adminAddr;
  address public payerAddr;
  uint public waveStartup;
  uint public investmentsNum;
  uint public constant minInvesment = 10 finney;
  uint public constant maxBalance = 333e5 ether;
  uint public constant pauseOnNextWave = 168 hours;

  Percent.percent private m_dividendsPercent = Percent.percent(333, 10000);
  Percent.percent private m_adminPercent = Percent.percent(1, 10);
  Percent.percent private m_payerPercent = Percent.percent(7, 100);
  Percent.percent private m_refPercent = Percent.percent(3, 100);

  event LogNewInvestor(address indexed addr, uint when, uint value);
  event LogNewInvesment(address indexed addr, uint when, uint value);
  event LogNewReferral(address indexed addr, uint when, uint value);
  event LogPayDividends(address indexed addr, uint when, uint value);
  event LogPayReferrerBonus(address indexed addr, uint when, uint value);
  event LogBalanceChanged(uint when, uint balance);
  event LogAdminAddrChanged(address indexed addr, uint when);
  event LogPayerAddrChanged(address indexed addr, uint when);
  event LogNextWave(uint when);

  modifier balanceChanged {
    _;
    emit LogBalanceChanged(now, address(this).balance);
  }

  modifier notOnPause() {
    require(waveStartup + pauseOnNextWave <= now, "pause on next wave not expired");
    _;
  }

  constructor() public {
    adminAddr = msg.sender;
    emit LogAdminAddrChanged(msg.sender, now);

    payerAddr = msg.sender;
    emit LogPayerAddrChanged(msg.sender, now);

    nextWave();
    waveStartup = waveStartup.sub(pauseOnNextWave);
  }

  function() public payable {
    if (msg.value == 0) {
      getMyDividends();
      return;
    }

    address a = msg.data.toAddr();
    address[3] memory refs;
    if (a.notZero()) {
      refs[0] = a;
      doInvest(refs); 
    } else {
      doInvest(refs);
    }
  }

  function investorsNumber() public view returns(uint) {
    return m_investors.size() - 1;
  }

  function balanceETH() public view returns(uint) {
    return address(this).balance;
  }

  function payerPercent() public view returns(uint numerator, uint denominator) {
    (numerator, denominator) = (m_payerPercent.num, m_payerPercent.den);
  }

  function dividendsPercent() public view returns(uint numerator, uint denominator) {
    (numerator, denominator) = (m_dividendsPercent.num, m_dividendsPercent.den);
  }

  function adminPercent() public view returns(uint numerator, uint denominator) {
    (numerator, denominator) = (m_adminPercent.num, m_adminPercent.den);
  }

  function referrerPercent() public view returns(uint numerator, uint denominator) {
    (numerator, denominator) = (m_refPercent.num, m_refPercent.den);
  }

  function investorInfo(address addr) public view returns(uint value, uint paymentTime, uint refBonus, bool isReferral) {
    (value, paymentTime, refBonus) = m_investors.investorBaseInfo(addr);
    isReferral = m_referrals[addr];
  }

  function latestPayout() public view returns(uint timestamp) {
    return m_paysys.latestTime;
  }

  function getMyDividends() public notOnPause atPaymode(Paymode.Pull) balanceChanged {
    require(m_investors.contains(msg.sender), "sender is not an investor");
    (uint value, uint paymentTime, uint refBonus) = m_investors.investorBaseInfo(msg.sender);
    
    uint daysPassed = (now.sub(paymentTime)).div(1 days);
    uint dividends = m_dividendsPercent.mul(value).mul(daysPassed);
    uint totalAmount = dividends.add(refBonus);
    
    require(totalAmount > 0, "nothing to pay");
    if (address(this).balance < totalAmount) {
      nextWave();
      return;
    }

    sendDividendsWithRefBonus(msg.sender, dividends, refBonus);

    if (daysPassed > 0) {
      m_investors.setPaymentTime(msg.sender, paymentTime.add(daysPassed.mul(1 days)));
    }
    m_investors.setRefBonus(msg.sender, 0);
  }

  function doInvest(address[3] refs) public payable notOnPause balanceChanged {
    require(msg.value >= minInvesment, "investment too small");
    require(address(this).balance.add(msg.value) <= maxBalance, "max balance exceeded");

    uint adminFee = m_adminPercent.mul(msg.value);
    uint payerFee = m_payerPercent.mul(msg.value);
    uint investment = msg.value.sub(adminFee).sub(payerFee);
    
    adminAddr.transfer(adminFee);
    payerAddr.transfer(payerFee);

    for (uint i = 0; i < refs.length; i++) {
      address ref = refs[i];
      if (notZeroNotSender(ref) && m_investors.contains(ref)) {
        uint bonus = m_refPercent.mul(msg.value).div(3);
        m_investors.addRefBonus(ref, bonus);
        emit LogNewReferral(ref, now, bonus);
        if (!m_referrals[msg.sender]) {
          m_referrals[msg.sender] = true;
        }
      }
    }

    if (m_investors.contains(msg.sender)) {
      m_investors.addValue(msg.sender, investment);
    } else {
      m_investors.insert(msg.sender, investment);
      emit LogNewInvestor(msg.sender, now, investment);
    }

    if (m_paysys.mode == Paymode.Pull) {
      m_investors.setPaymentTime(msg.sender, now);
    }

    investmentsNum++;
    emit LogNewInvesment(msg.sender, now, investment);
  }

  function payout() public notOnPause onlyAdmin(AccessRank.Payout) atPaymode(Paymode.Push) balanceChanged {
    if (address(this).balance == 0) {
      nextWave();
      return;
    }
    require(now >= m_paysys.latestTime + 12 hours, "payout interval too short");
    
    uint investorsCount = m_investors.size() - 1;
    uint gasLimit = gasleft();
    uint i = m_paysys.latestKeyIndex;
    
    while (i < investorsCount && gasLimit > 50000) {
      address addr = m_investors.keyFromIndex(i + 1);
      (uint value, uint paymentTime, uint refBonus) = m_investors.investorBaseInfo(addr);
      uint daysPassed = (now.sub(paymentTime)).div(1 days);
      uint dividends = m_dividendsPercent.mul(value).mul(daysPassed);
      uint total = dividends.add(refBonus);
      
      if (total > 0) {
        if (address(this).balance < total) {
          nextWave();
          return;
        }
        sendDividendsWithRefBonus(addr, dividends, refBonus);
        if (daysPassed > 0) {
          m_investors.setPaymentTime(addr, paymentTime.add(daysPassed.mul(1 days)));
        }
        m_investors.setRefBonus(addr, 0);
      }
      
      i++;
      gasLimit = gasleft();
    }

    m_paysys.latestKeyIndex = i;
    if (i >= investorsCount) {
      m_paysys.latestTime = now;
      m_paysys.latestKeyIndex = 0;
    }
  }

  function setAdminAddr(address addr) public onlyAdmin(AccessRank.Full) {
    adminAddr = addr;
    emit LogAdminAddrChanged(addr, now);
  }

  function setPayerAddr(address addr) public onlyAdmin(AccessRank.Full) {
    payerAddr = addr;
    emit LogPayerAddrChanged(addr, now);
  }

  function setPullPaymode() public onlyAdmin(AccessRank.Paymode) atPaymode(Paymode.Push) {
    changePaymode(Paymode.Pull);
  }

  function getMemInvestor(address addr) internal view returns(InvestorsStorage.investor) {
    (uint keyIndex, uint value, uint paymentTime, uint refBonus) = m_investors.investorFullInfo(addr);
    return InvestorsStorage.investor(keyIndex, value, paymentTime, refBonus);
  }

  function notZeroNotSender(address addr) internal view returns(bool) {
    return addr.notZero() && addr != msg.sender;
  }

  function sendDividends(address addr, uint value) private {
    addr.transfer(value);
    emit LogPayDividends(addr, now, value);
  }

  function sendDividendsWithRefBonus(address addr, uint value, uint refBonus) private {
    addr.transfer(value.add(refBonus));
    emit LogPayDividends(addr, now, value);
    if (refBonus > 0) {
      emit LogPayReferrerBonus(addr, now, refBonus);
    }
  }

  function nextWave() private {
    changePaymode(Paymode.Push);
    waveStartup = now;
    investmentsNum = 0;
    m_investors = new InvestorsStorage();
    m_nextWave = false;
    emit LogNextWave(now);
  }
}
```