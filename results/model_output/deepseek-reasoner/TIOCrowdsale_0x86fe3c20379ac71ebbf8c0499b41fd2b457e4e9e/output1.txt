To solve this problem, we need to create a complete and functional ERC20 token contract called `CrowdsaleToken` using the provided `TokenLib` library. This contract should include standard ERC20 functionalities along with additional features like minting, burning, and owner changes. The solution must strictly adhere to the provided context and use Solidity version 0.4.18.

### Approach
The `CrowdsaleToken` contract will utilize the `TokenLib` library to handle all token-related functionalities. The library provides structured storage and functions for token operations, which we will integrate into the contract. Each function in the contract will delegate its operations to the corresponding function in the `TokenLib` library, ensuring that the token behaves as a standard ERC20 token with additional features.

### Solution Code

```solidity
pragma solidity ^0.4.18;

contract CrowdsaleToken {
  using TokenLib for TokenLib.TokenStorage;

  TokenLib.TokenStorage public token;

  function CrowdsaleToken(address owner,
                          string memory name,
                          string memory symbol,
                          uint8 decimals,
                          uint256 initialSupply,
                          bool allowMinting) public {
    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);
  }

  function name() public view returns (string memory) {
    return token.name;
  }

  function symbol() public view returns (string memory) {
    return token.symbol;
  }

  function decimals() public view returns (uint8) {
    return token.decimals;
  }

  function totalSupply() public view returns (uint256) {
    return token.totalSupply;
  }

  function initialSupply() public view returns (uint256) {
    return token.initialSupply;
  }

  function balanceOf(address who) public view returns (uint256) {
    return token.balanceOf(who);
  }

  function allowance(address owner, address spender) public view returns (uint256) {
    return token.allowance(owner, spender);
  }

  function transfer(address to, uint256 value) public returns (bool ok) {
    return token.transfer(to, value);
  }

  function transferFrom(address from, address to, uint value) public returns (bool ok) {
    return token.transferFrom(from, to, value);
  }

  function approve(address spender, uint256 value) public returns (bool ok) {
    return token.approve(spender, value);
  }

  function approveChange(address spender, uint256 valueChange, bool increase) public returns (bool) {
    return token.approveChange(spender, valueChange, increase);
  }

  function changeOwner(address newOwner) public returns (bool ok) {
    return token.changeOwner(newOwner);
  }

  function burnToken(uint256 amount) public returns (bool ok) {
    return token.burnToken(amount);
  }
}
```

### Explanation
1. **Initialization**: The constructor initializes the token using the `init` function from `TokenLib`, setting up the initial parameters such as owner, name, symbol, decimals, initial supply, and minting allowance.

2. **View Functions**: Functions like `name`, `symbol`, `decimals`, `totalSupply`, `initialSupply`, `balanceOf`, and `allowance` directly return values from the `TokenStorage` struct in `TokenLib`, providing read-only access to token details.

3. **Transfer Functions**: `transfer` and `transferFrom` handle token transfers, delegating to the corresponding functions in `TokenLib` which manage balance updates and emit events.

4. **Approval Functions**: `approve` and `approveChange` manage token allowances, allowing spender addresses to transfer tokens on behalf of the owner, with checks for safe arithmetic operations.

5. **Owner Management**: `changeOwner` allows transferring ownership, restricted to the current owner.

6. **Burning Tokens**: `burnToken` reduces the total supply by burning a specified amount of tokens from the caller's balance.

This approach ensures that the `CrowdsaleToken` contract leverages the `TokenLib` library effectively, providing a secure and efficient implementation of an ERC20 token with extended functionalities suitable for a crowdsale context.