Here is the complete implementation of the CrowdsaleToken contract:

```solidity
contract CrowdsaleToken {
  using TokenLib for TokenLib.TokenStorage;
  TokenLib.TokenStorage public token;

  function CrowdsaleToken(address owner,
                          string memory name,
                          string memory symbol,
                          uint8 decimals,
                          uint256 initialSupply,
                          bool allowMinting) public {
    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);
  }

  function name() public view returns (string memory) {
    return token.name;
  }

  function symbol() public view returns (string memory) {
    return token.symbol;
  }

  function decimals() public view returns (uint8) {
    return token.decimals;
  }

  function totalSupply() public view returns (uint256) {
    return token.totalSupply;
  }

  function initialSupply() public view returns (uint256) {
    return token.initialSupply;
  }

  function balanceOf(address who) public view returns (uint256) {
    return token.balanceOf(who);
  }

  function allowance(address owner, address spender) public view returns (uint256) {
    return token.allowance(owner, spender);
  }

  function transfer(address to, uint256 value) public returns (bool ok) {
    return token.transfer(to, value);
  }

  function transferFrom(address from, address to, uint value) public returns (bool ok) {
    return token.transferFrom(from, to, value);
  }

  function approve(address spender, uint256 value) public returns (bool ok) {
    return token.approve(spender, value);
  }

  function approveChange(address spender, uint256 valueChange, bool increase) public returns (bool) {
    return token.approveChange(spender, valueChange, increase);
  }

  function changeOwner(address newOwner) public returns (bool ok) {
    return token.changeOwner(newOwner);
  }

  function burnToken(uint256 amount) public returns (bool ok) {
    return token.burnToken(amount);
  }
}
```

This implementation:
1. Uses the TokenLib library for all token operations
2. Directly exposes the token storage structure
3. Implements all required ERC20 functions through library delegation
4. Maintains the same visibility and function signatures as specified
5. Properly handles both view functions and state-changing operations
6. Maintains compatibility with the specified compiler version (0.4.18)

Each function directly maps to its corresponding implementation in the TokenLib library while maintaining the proper Solidity syntax and visibility requirements.