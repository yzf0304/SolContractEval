```solidity
//SPDX-License-Identifier: Unlicense
pragma solidity 0.8.2;

abstract contract IERC20 {
    function balanceOf(address _owner)
        external
        virtual
        returns (uint256 balance);

    function transfer(address _to, uint256 _value) external virtual;
}

contract UniqlyPresale4 {
    uint256 public immutable presaleLimit;
    uint256 public immutable minPerUser;
    uint256 public immutable maxPerUser;
    uint256 public immutable presaleEnd;
    uint256 constant failSafeTime = 2 weeks;
    address public owner;

    bool presaleEnded;
    bool presaleFailed;
    bool presaleStarted;
    mapping(address => uint256) private balances;
    address public newOwner;

    constructor(
        uint256 _presaleLimit, 
        uint256 _minPerUser, 
        uint256 _maxPerUser, 
        uint256 _presaleEnd, 
        address _owner
    ) {
        presaleLimit = _presaleLimit;
        minPerUser = _minPerUser;
        maxPerUser = _maxPerUser;
        presaleEnd = _presaleEnd;
        owner = _owner;
    }

    receive() external payable {
        require(presaleStarted, "Presale not started");
        require(!presaleEnded, "Presale ended");
        require(block.timestamp < presaleEnd, "Presale time's up");

        uint256 amount = msg.value + balances[msg.sender];
        require(amount >= minPerUser, "Below buy-in");
        require(amount <= maxPerUser, "Over buy-in");
        balances[msg.sender] = amount;

        if (collected() >= presaleLimit) {
            presaleEnded = true;
        }
    }

    function start() external {
        require(msg.sender == owner, "Only owner");
        presaleStarted = true;
    }

    function balanceOf(address user) external view returns (uint256) {
        return balances[user];
    }

    function balanceOf() external view returns (uint256) {
        return balances[msg.sender];
    }

    function collected() public view returns (uint256) {
        return address(this).balance;
    }

    function withdraw() external returns (bool) {
        if (!presaleEnded && block.timestamp >= presaleEnd + failSafeTime) {
            presaleFailed = true;
        }

        if (presaleEnded) {
            if (presaleFailed) {
                return withdrawUser();
            } else {
                return withdrawOwner();
            }
        } else {
            if (presaleFailed) {
                return withdrawUser();
            } else {
                return false;
            }
        }
    }

    function withdrawUser() private returns (bool) {
        uint256 amount = balances[msg.sender];
        if (amount == 0) return false;
        balances[msg.sender] = 0;
        bool sent = send(msg.sender, amount);
        if (!sent) {
            balances[msg.sender] = amount;
            return false;
        }
        return true;
    }

    function withdrawOwner() private returns (bool) {
        if (msg.sender != owner) return false;
        uint256 balance = address(this).balance;
        if (balance == 0) return false;
        bool sent = send(owner, balance);
        return sent;
    }

    function send(address user, uint256 amount) private returns (bool) {
        (bool success, ) = user.call{value: amount}("");
        return success;
    }

    function withdrawAnyERC20(IERC20 token) external {
        require(msg.sender == owner, "Only owner");
        uint256 balance = token.balanceOf(address(this));
        token.transfer(owner, balance);
    }

    function giveOwnership(address _newOwner) external {
        require(msg.sender == owner, "Only owner");
        newOwner = _newOwner;
    }

    function acceptOwnership() external {
        require(msg.sender == newOwner, "Only new owner");
        owner = newOwner;
        newOwner = address(0);
    }
}
```