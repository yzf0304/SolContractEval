```solidity
contract Pausable is Context, Ownable {
    
    event Pause();
    event Unpause();
    event PauserChanged(address indexed newAddress);

    address public pauser;
    bool public paused = false;

    modifier whenNotPaused() {
        require(!paused, "Network paused by administrator");
        _;
    }

    modifier onlyPauser() {
        require(msg.sender == pauser, "Caller is not the pause administrator");
        _;
    }

    function pause() external onlyPauser {
        require(!paused, "Already paused");
        paused = true;
        emit Pause();
    }

    function unpause() external onlyPauser {
        require(paused, "Not paused");
        paused = false;
        emit Unpause();
    }

    function updatePauser(address _newPauser) external onlyOwner {
        require(_newPauser != address(0), "Pauser cannot be zero address");
        pauser = _newPauser;
        emit PauserChanged(_newPauser);
    }
}
```