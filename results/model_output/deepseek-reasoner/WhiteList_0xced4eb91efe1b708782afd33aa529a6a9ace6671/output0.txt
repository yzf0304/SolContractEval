The WhiteList contract provided is fully compliant with the requirements and correctly implements the specified functionality using Solidity 0.4.18 syntax. It properly leverages the Ownable contract for access control and maintains accurate whitelist status tracking through the mapping and counter updates. All events are emitted appropriately according to the operations performed.

```solidity
contract WhiteList is Ownable {

    mapping(address => bool) public whiteList;
    uint public totalWhiteListed;

    event LogWhiteListed(address indexed user, uint whiteListedNum);
    event LogWhiteListedMultiple(uint whiteListedNum);
    event LogRemoveWhiteListed(address indexed user);

    function isWhiteListed(address _user) external view returns (bool) {
        return whiteList[_user]; 
    }

    function removeFromWhiteList(address _user) external onlyOwner returns (bool) {
        require(whiteList[_user] == true);
        whiteList[_user] = false;
        totalWhiteListed--;
        emit LogRemoveWhiteListed(_user);
        return true;
    }

    function addToWhiteList(address _user) external onlyOwner returns (bool) {
        if (whiteList[_user] != true) {
            whiteList[_user] = true;
            totalWhiteListed++;
            emit LogWhiteListed(_user, totalWhiteListed);            
        }
        return true;
    }

    function addToWhiteListMultiple(address[] calldata _users) external onlyOwner returns (bool) {
        for (uint i = 0; i < _users.length; ++i) {
            if (whiteList[_users[i]] != true) {
                whiteList[_users[i]] = true;
                totalWhiteListed++;                          
            }           
        }
        emit LogWhiteListedMultiple(totalWhiteListed); 
        return true;
    }
}
```