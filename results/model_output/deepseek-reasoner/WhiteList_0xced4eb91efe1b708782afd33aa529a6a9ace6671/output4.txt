The `WhiteList` contract is designed to manage a list of whitelisted addresses, allowing only the owner to add or remove entries. It inherits from `Ownable` to enforce access control. Here's the complete and functional implementation:

```solidity
contract WhiteList is Ownable {
    mapping(address => bool) public whiteList;
    uint public totalWhiteListed;

    event LogWhiteListed(address indexed user, uint whiteListedNum);
    event LogWhiteListedMultiple(uint whiteListedNum);
    event LogRemoveWhiteListed(address indexed user);

    function isWhiteListed(address _user) external view returns (bool) {
        return whiteList[_user];
    }

    function removeFromWhiteList(address _user) external onlyOwner returns (bool) {
        require(whiteList[_user]);
        whiteList[_user] = false;
        totalWhiteListed--;
        emit LogRemoveWhiteListed(_user);
        return true;
    }

    function addToWhiteList(address _user) external onlyOwner returns (bool) {
        if (!whiteList[_user]) {
            whiteList[_user] = true;
            totalWhiteListed++;
            emit LogWhiteListed(_user, totalWhiteListed);
        }
        return true;
    }

    function addToWhiteListMultiple(address[] calldata _users) external onlyOwner returns (bool) {
        for (uint i = 0; i < _users.length; i++) {
            if (!whiteList[_users[i]]) {
                whiteList[_users[i]] = true;
                totalWhiteListed++;
            }
        }
        emit LogWhiteListedMultiple(totalWhiteListed);
        return true;
    }
}
```

This implementation:
- Maintains whitelist status in a boolean mapping
- Tracks total whitelisted addresses with a counter
- Enforces owner-only access for modifications
- Properly emits events for all state changes
- Handles single/multiple address additions efficiently
- Uses Solidity 0.4.18 compatible syntax
- Includes comprehensive input validation