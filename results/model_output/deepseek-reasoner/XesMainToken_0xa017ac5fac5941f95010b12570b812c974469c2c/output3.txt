To complete the `StandardToken` contract, we ensure it fully implements the ERC20 interface using SafeMath for secure arithmetic operations. The contract includes mappings for balances and allowances, and each function adheres to the ERC20 standard while preventing overflows and underflows. Here's the final implementation:

```solidity
contract StandardToken is ERC20, SafeMath {
    mapping (address => uint) balances;
    mapping (address => mapping (address => uint)) allowed;

    function transfer(address _to, uint _value) public returns (bool) {
        balances[msg.sender] = safeSub(balances[msg.sender], _value);
        balances[_to] = safeAdd(balances[_to], _value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint _value) public returns (bool) {
        uint _allowance = allowed[_from][msg.sender];
        balances[_to] = safeAdd(balances[_to], _value);
        balances[_from] = safeSub(balances[_from], _value);
        allowed[_from][msg.sender] = safeSub(_allowance, _value);
        emit Transfer(_from, _to, _value);
        return true;
    }

    function balanceOf(address _owner) public view returns (uint) {
        return balances[_owner];
    }

    function approve(address _spender, uint _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint) {
        return allowed[_owner][_spender];
    }
}
```

**Explanation:**
- **transfer:** Uses SafeMath to securely deduct from the sender's balance and add to the recipient's, emitting a `Transfer` event.
- **transferFrom:** Checks allowance with SafeMath, updates balances, reduces the allowance, and emits a `Transfer` event.
- **balanceOf:** Returns the token balance of a specified address.
- **approve:** Sets an allowance for a spender and emits an `Approval` event.
- **allowance:** Returns the remaining tokens a spender can withdraw from an owner.

This implementation ensures compliance with ERC20 standards and secure arithmetic operations.