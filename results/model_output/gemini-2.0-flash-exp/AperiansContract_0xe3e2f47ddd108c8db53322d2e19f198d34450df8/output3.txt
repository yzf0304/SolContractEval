```solidity
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol";
import "@openzeppelin/contracts/utils/introspection/ERC165.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

/**
 * @title ERC721A
 * @notice This contract implements the ERC721 standard with additional features for efficient batch minting and enumeration.
 * @dev This implementation is optimized for gas efficiency and supports a fixed collection size.
 */
contract ERC721A is
    Context,
    ERC165,
    IERC721,
    IERC721Metadata,
    IERC721Enumerable
{
    using Address for address;
    using Strings for uint256;

    struct TokenOwnership {
        address addr;
        uint64 startTimestamp;
    }

    struct AddressData {
        uint128 balance;
        uint128 numberMinted;
    }

    uint256 private currentIndex = 0;

    uint256 internal immutable collectionSize;
    uint256 internal immutable maxBatchSize;
    string private _name;
    string private _symbol;
    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.
    mapping(uint256 => TokenOwnership) private _ownerships;
    mapping(address => AddressData) private _addressData;
    mapping(uint256 => address) private _tokenApprovals;
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @notice Initializes the contract with the given name, symbol, maximum batch size, and collection size.
     * @param name_ The name of the NFT collection.
     * @param symbol_ The symbol of the NFT collection.
     * @param maxBatchSize_ The maximum number of tokens that can be minted in a single transaction.
     * @param collectionSize_ The total number of tokens in the collection.
     * @dev The collection size must be greater than zero, and the max batch size must be greater than zero.
     */
    constructor(
        string memory name_,
        string memory symbol_,
        uint256 maxBatchSize_,
        uint256 collectionSize_
    ) {
        require(
            collectionSize_ > 0,
            "ERC721A: collection must have a nonzero supply"
        );
        require(maxBatchSize_ > 0, "ERC721A: max batch size must be nonzero");
        _name = name_;
        _symbol = symbol_;
        maxBatchSize = maxBatchSize_;
        collectionSize = collectionSize_;
    }

    /**
     * @notice Returns the total number of tokens minted so far.
     * @return The total supply of tokens.
     * @dev The total supply is equal to the current index.
     */
    function totalSupply() public view override returns (uint256) {
        return currentIndex;
    }

    /**
     * @notice Returns the token ID at a given index.
     * @param index A valid index within the total supply.
     * @return The token ID at the given index.
     * @dev The index must be less than the total supply.
     */
    function tokenByIndex(uint256 index)
        public
        view
        override
        returns (uint256)
    {
        require(index < currentIndex, "ERC721A: global index out of bounds");
        return index;
    }

    /**
     * @notice Returns the token ID owned by an owner at a given index.
     * @param owner The address of the owner.
     * @param index A valid index within the owner's balance.
     * @return The token ID at the given index.
     * @dev The index must be less than the owner's balance.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index)
        public
        view
        override
        returns (uint256)
    {
        require(owner != address(0), "ERC721A: owner is the zero address");
        require(
            index < _addressData[owner].balance,
            "ERC721A: owner index out of bounds"
        );
        uint256 result = 0;
        uint256 count = 0;
        for (uint256 i = 0; i < currentIndex; i++) {
            if (_ownerships[i].addr == owner) {
                if (count == index) {
                    result = i;
                    break;
                }
                count++;
            }
        }
        return result;
    }

    /**
     * @notice Checks if the contract implements a given interface.
     * @param interfaceId The interface identifier to check.
     * @return True if the interface is supported, false otherwise.
     * @dev Supports IERC721, IERC721Metadata, and IERC721Enumerable interfaces.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(ERC165, IERC165)
        returns (bool)
    {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            interfaceId == type(IERC721Enumerable).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @notice Returns the number of tokens owned by an address.
     * @param owner The address to query the balance of.
     * @return The balance of the given address.
     * @dev The owner cannot be the zero address.
     */
    function balanceOf(address owner) public view override returns (uint256) {
        require(
            owner != address(0),
            "ERC721A: address zero is not a valid owner"
        );
        return _addressData[owner].balance;
    }

    /**
     * @notice Returns the number of tokens minted by an address.
     * @param owner The address to query the number of minted tokens for.
     * @return The number of tokens minted by the given address.
     * @dev The owner cannot be the zero address.
     */
    function _numberMinted(address owner) internal view returns (uint256) {
        require(
            owner != address(0),
            "ERC721A: address zero is not a valid owner"
        );
        return _addressData[owner].numberMinted;
    }

    /**
     * @notice Returns the ownership information for a given token ID.
     * @param tokenId The token ID to query.
     * @return The ownership information for the given token ID.
     * @dev The token ID must exist.
     */
    function ownershipOf(uint256 tokenId)
        internal
        view
        returns (TokenOwnership memory)
    {
        require(_exists(tokenId), "ERC721A: nonexistent token");
        return _ownerships[tokenId];
    }

    /**
     * @notice Returns the owner of a given token ID.
     * @param tokenId The token ID to query.
     * @return The owner of the given token ID.
     * @dev The token ID must exist.
     */
    function ownerOf(uint256 tokenId) public view override returns (address) {
        return ownershipOf(tokenId).addr;
    }

    /**
     * @notice Returns the name of the NFT collection.
     * @return The name of the NFT collection.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @notice Returns the symbol of the NFT collection.
     * @return The symbol of the NFT collection.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @notice Returns the URI for a given token ID.
     * @param tokenId The token ID to query.
     * @return The URI for the given token ID.
     * @dev The token ID must exist.
     */
    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @notice Returns the base URI for the NFT collection.
     * @return The base URI for the NFT collection.
     * @dev This function can be overridden to provide a custom base URI.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @notice Approves another address to transfer the given token ID.
     * @param to The address to approve.
     * @param tokenId The token ID to approve.
     * @dev The caller must be the owner or approved for all.
     */
    function approve(address to, uint256 tokenId) public override {
        address owner = ownerOf(tokenId);
        require(
            to != owner,
            "ERC721A: approval to current owner"
        );

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721A: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId, owner);
    }

    /**
     * @notice Returns the approved address for a given token ID.
     * @param tokenId The token ID to query.
     * @return The approved address for the given token ID.
     * @dev The token ID must exist.
     */
    function getApproved(uint256 tokenId)
        public
        view
        override
        returns (address)
    {
        require(_exists(tokenId), "ERC721A: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @notice Sets or unsets the approval for all tokens from the caller to the operator.
     * @param operator The address to set the approval for.
     * @param approved True to set the approval, false to unset it.
     * @dev The operator cannot be the caller.
     */
    function setApprovalForAll(address operator, bool approved)
        public
        override
    {
        require(operator != _msgSender(), "ERC721A: approve to caller");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @notice Checks if an operator is approved for all tokens from an owner.
     * @param owner The address of the owner.
     * @param operator The address of the operator.
     * @return True if the operator is approved for all, false otherwise.
     */
    function isApprovedForAll(address owner, address operator)
        public
        view
        virtual
        override
        returns (bool)
    {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @notice Transfers a token from one address to another.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param tokenId The token ID to transfer.
     * @dev The caller must be the owner or approved for the token.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public override {
        _transfer(from, to, tokenId);
    }

    /**
     * @notice Safely transfers a token from one address to another.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param tokenId The token ID to transfer.
     * @dev The caller must be the owner or approved for the token.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @notice Safely transfers a token from one address to another with additional data.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param tokenId The token ID to transfer.
     * @param _data Additional data to send along with the transfer.
     * @dev The caller must be the owner or approved for the token.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public override {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721A: transfer to non ERC721Receiver implementer");
    }

    /**
     * @notice Checks if a token ID exists.
     * @param tokenId The token ID to check.
     * @return True if the token ID exists, false otherwise.
     */
    function _exists(uint256 tokenId) internal view returns (bool) {
        return tokenId < currentIndex && _ownerships[tokenId].addr != address(0);
    }

    /**
     * @notice Mints a specified quantity of tokens to a given address.
     * @param to The address to mint the tokens to.
     * @param quantity The number of tokens to mint.
     * @dev The recipient cannot be the zero address, and the quantity must be within the max batch size.
     */
    function _safeMint(address to, uint256 quantity) internal {
        _safeMint(to, quantity, "");
    }

    /**
     * @dev Safely mints multiple NFTs to a recipient with ERC721A compliance.
     * @param to Recipient address
     * @param quantity Number of tokens to mint
     * @param _data Optional data to pass to receiver
     * @dev Requirements:
     *   - Recipient cannot be zero address
     *   - Starting token ID must not exist
     *   - Quantity must not exceed max batch size
     * @dev Emits Transfer events for each minted token
     * @dev Performs safety checks via _checkOnERC721Received
     * @dev Updates:
     *   - Token ownership records
     *   - Recipient address data (balance & mint count)
     *   - Current token index
     * @dev Calls hooks:
     *   - _beforeTokenTransfers, _afterTokenTransfers
     */
    function _safeMint(
        address to,
        uint256 quantity,
        bytes memory _data
    ) internal {
        require(to != address(0), "ERC721A: mint to the zero address");
        require(quantity > 0, "ERC721A: quantity must be greater than 0");
        require(quantity <= maxBatchSize, "ERC721A: quantity exceeds maxBatchSize");
        require(currentIndex + quantity <= collectionSize, "ERC721A: minting would exceed collection size");

        uint256 startTokenId = currentIndex;

        _beforeTokenTransfers(address(0), to, startTokenId, quantity);

        AddressData storage receiverData = _addressData[to];
        receiverData.balance += uint128(quantity);
        receiverData.numberMinted += uint128(quantity);

        for (uint256 i = 0; i < quantity; i++) {
            _ownerships[startTokenId + i] = TokenOwnership(to, uint64(block.timestamp));
            emit Transfer(address(0), to, startTokenId + i);
            currentIndex++;
        }
        
        _afterTokenTransfers(address(0), to, startTokenId, quantity);

        require(_checkOnERC721Received(address(0), to, startTokenId, _data), "ERC721A: transfer to non ERC721Receiver implementer");

    }

    /**
     * @dev Transfers ownership of an NFT from one address to another.
     * @param from Current owner address
     * @param to New owner address
     * @param tokenId ID of the token to transfer
     * @dev Requirements:
     *   - Caller must be owner or approved operator
     *   - `from` must be current owner
     *   - `to` cannot be zero address
     * @dev Updates:
     *   - Ownership records for the token
     *   - Balances of both addresses
     *   - Maintains next token ID linkage for efficient lookups
     * @dev Emits Transfer event
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) private {
        TokenOwnership memory prevOwnership = ownershipOf(tokenId);

        require(
            prevOwnership.addr == from,
            "ERC721A: transfer from incorrect owner"
        );

        require(to != address(0), "ERC721A: transfer to the zero address");

        require(
            _msgSender() == from || isApprovedForAll(from, _msgSender()) || (getApproved(tokenId) == _msgSender()),
            "ERC721A: transfer caller is not owner nor approved"
        );

        _beforeTokenTransfers(from, to, tokenId, 1);

        // Clear approval for the token ID
        _approve(address(0), tokenId, from);

        AddressData storage fromData = _addressData[from];
        AddressData storage toData = _addressData[to];

        fromData.balance -= 1;
        toData.balance += 1;

        _ownerships[tokenId].addr = to;
        _ownerships[tokenId].startTimestamp = uint64(block.timestamp);

        emit Transfer(from, to, tokenId);

        _afterTokenTransfers(from, to, tokenId, 1);
    }

    /**
     * @notice Sets the approval for a given token ID.
     * @param to The address to approve.
     * @param tokenId The token ID to approve.
     * @param owner The owner of the token.
     * @dev Emits an Approval event.
     */
    function _approve(
        address to,
        uint256 tokenId,
        address owner
    ) private {
        _tokenApprovals[tokenId] = to;
        emit Approval(owner, to, tokenId);
    }

    uint256 public nextOwnerToExplicitlySet = 0;

    /**
     * @notice Explicitly sets the ownership for a range of token IDs.
     * @param quantity The number of token IDs to set.
     * @dev The quantity must be greater than zero and within the collection size.
     */
    function _setOwnersExplicit(uint256 quantity) internal {
        uint256 end = Math.min(nextOwnerToExplicitlySet + quantity, collectionSize);
        for (uint256 i = nextOwnerToExplicitlySet; i < end; ++i) {
            if (_ownerships[i].addr == address(0)) {
                _ownerships[i].addr = address(1);
            }
        }
        nextOwnerToExplicitlySet = end;
    }

    /**
     * @notice Checks if a receiver is an ERC721Receiver and calls onERC721Received.
     * @param from The address sending the token.
     * @param to The address receiving the token.
     * @param tokenId The token ID being transferred.
     * @param _data Additional data to send along with the transfer.
     * @return True if the receiver is an ERC721Receiver, false otherwise.
     * @dev Reverts if the receiver is a contract but does not implement the ERC721Receiver interface.
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721A: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @notice Hook called before a token transfer.
     * @param from The address sending the token.
     * @param to The address receiving the token.
     * @param startTokenId The starting token ID.
     * @param quantity The number of tokens being transferred.
     * @dev This hook can be overridden to perform additional checks or actions.
     */
    function _beforeTokenTransfers(
        address from,
        address to,
        uint256 startTokenId,
        uint256 quantity
    ) internal virtual {}

    /**
     * @notice Hook called after a token transfer.
     * @param from The address sending the token.
     * @param to The address receiving the token.
     * @param startTokenId The starting token ID.
     * @param quantity The number of tokens being transferred.
     * @dev This hook can be overridden to perform additional checks or actions.
     */
    function _afterTokenTransfers(
        address from,
        address to,
        uint256 startTokenId,
        uint256 quantity
    ) internal virtual {}
}
```