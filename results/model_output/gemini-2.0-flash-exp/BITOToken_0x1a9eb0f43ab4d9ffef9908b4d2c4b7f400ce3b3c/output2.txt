```solidity
pragma solidity ^0.4.21;

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

// source : https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md

contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }



/**
 * @title BITOToken
 * @dev This contract implements the ERC20 token standard with additional features such as freezing accounts, emergency freeze, and burning tokens.
 * @notice BITOToken is a custom ERC20 token with the symbol 'BITO' and name 'BITO Coin'. It includes functionalities for transferring, approving, and burning tokens, as well as owner-only functions to manage the contract.
 */
contract BITOToken is ERC20Interface {
  using SafeMath for uint256;

  // State variables
  string public symbol = 'BITO';
  string public name = 'BITO Coin';
  uint public decimals = 8;
  address public owner;
  uint public totalSupply = 210000000 * (10 **8);
  bool public emergencyFreeze;
  
  // mappings
  mapping (address => uint256) balances;
  mapping (address => mapping (address => uint256) ) allowed;
  mapping (address => bool) frozen;
  

  /**
   * @dev Initializes the contract and assigns the total supply to the contract owner.
   * @notice The constructor sets the contract owner and assigns the total supply of tokens to the owner.
   */
  function BITOToken () public {
    owner = msg.sender;
    balances[owner] = totalSupply;
  }

  // events
  event OwnershipTransferred(address indexed _from, address indexed _to);
  event Burn(address indexed from, uint256 amount);
  event Freezed(address targetAddress, bool frozen);
  event EmerygencyFreezed(bool emergencyFreezeStatus);
  


  // Modifiers
  /**
   * @dev Modifier to ensure that only the contract owner can call the function.
   * @notice Ensures that the function can only be called by the contract owner.
   */
  modifier onlyOwner {
    require(msg.sender == owner);
     _;
  }

  /**
   * @dev Modifier to ensure that the account is not frozen.
   * @notice Ensures that the function can only be called if the specified account is not frozen.
   */
  modifier unfreezed(address _account) { 
    require(!frozen[_account]);
    _;  
  }
  
  /**
   * @dev Modifier to ensure that the emergency freeze is not active.
   * @notice Ensures that the function can only be called if the emergency freeze is not active.
   */
  modifier noEmergencyFreeze() { 
    require(!emergencyFreeze);
    _; 
  }
  


  // functions

  // ------------------------------------------------------------------------
  // Transfer Token
  // ------------------------------------------------------------------------
  /**
   * @dev Transfers tokens from the sender's account to another account.
   * @notice Transfers a specified amount of tokens from the sender's account to the recipient's account.
   * @param _to The address of the recipient.
   * @param _value The amount of tokens to transfer.
   * @return A boolean indicating whether the transfer was successful.
   */
  function transfer(address _to, uint256 _value) unfreezed(_to) noEmergencyFreeze() public returns (bool success) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }

  // ------------------------------------------------------------------------
  // Approve others to spend on your behalf
  // ------------------------------------------------------------------------
  /**
   * @dev Approves a spender to withdraw a certain amount of tokens from the caller's account.
   * @notice Allows a specified address to withdraw a certain amount of tokens from the caller's account.
   * @param _spender The address of the spender.
   * @param _value The amount of tokens to approve.
   * @return A boolean indicating whether the approval was successful.
   */
  function approve(address _spender, uint256 _value) unfreezed(_spender) unfreezed(msg.sender) noEmergencyFreeze() public returns (bool success) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }

  // ------------------------------------------------------------------------
  // Approve and call : If approve returns true, it calls receiveApproval method of contract
  // ------------------------------------------------------------------------
  /**
   * @dev Approves a spender to withdraw a certain amount of tokens and calls the `receiveApproval` method on the spender's contract.
   * @notice Approves a specified address to withdraw a certain amount of tokens and calls the `receiveApproval` method on the spender's contract.
   * @param _spender The address of the spender.
   * @param _value The amount of tokens to approve.
   * @param _extraData Additional data to pass to the `receiveApproval` method.
   * @return A boolean indicating whether the approval and call were successful.
   */
  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
      tokenRecipient spender = tokenRecipient(_spender);
      if (approve(_spender, _value)) {
          spender.receiveApproval(msg.sender, _value, address(this), _extraData);
          return true;
      }
  }

  // ------------------------------------------------------------------------
  // Transferred approved amount from other's account
  // ------------------------------------------------------------------------
  /**
   * @dev Transfers tokens from one account to another, using the allowance mechanism.
   * @notice Transfers a specified amount of tokens from one account to another, using the allowance mechanism.
   * @param _from The address of the token holder.
   * @param _to The address of the recipient.
   * @param _value The amount of tokens to transfer.
   * @return A boolean indicating whether the transfer was successful.
   */
  function transferFrom(address _from, address _to, uint256 _value) unfreezed(_to) unfreezed(_from) noEmergencyFreeze() public returns (bool success) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }

  // ------------------------------------------------------------------------
  // Burn (Destroy tokens)
  // ------------------------------------------------------------------------
  /**
   * @dev Burns (destroys) a specified amount of tokens from the caller's account.
   * @notice Burns (destroys) a specified amount of tokens from the caller's account.
   * @param _value The amount of tokens to burn.
   * @return A boolean indicating whether the burn was successful.
   */
  function burn(uint256 _value) public returns (bool success) {
    require(_value <= balances[msg.sender]);
    balances[msg.sender] = balances[msg.sender].sub(_value);
    totalSupply = totalSupply.sub(_value);
    Burn(msg.sender, _value);
    return true;
  }

  // ------------------------------------------------------------------------
  //               ONLYOWNER METHODS                             
  // ------------------------------------------------------------------------


  // ------------------------------------------------------------------------
  // Transfer Ownership
  // ------------------------------------------------------------------------
  /**
   * @dev Transfers ownership of the contract to a new address.
   * @notice Transfers ownership of the contract to a new address.
   * @param _newOwner The address of the new owner.
   */
  function transferOwnership(address _newOwner) public onlyOwner {
      require(_newOwner != address(0));
      OwnershipTransferred(owner, _newOwner);
      owner = _newOwner;
  }

  // ------------------------------------------------------------------------
  // Freeze account - onlyOwner
  // ------------------------------------------------------------------------
  /**
   * @dev Freezes or unfreezes a specified account.
   * @notice Freezes or unfreezes a specified account.
   * @param _target The address of the account to freeze or unfreeze.
   * @param _freeze A boolean indicating whether to freeze or unfreeze the account.
   * @return A boolean indicating whether the operation was successful.
   */
  function freezeAccount (address _target, bool _freeze) public onlyOwner returns(bool res) {
    frozen[_target] = _freeze;
    Freezed(_target, _freeze);
    return true;
  }

  // ------------------------------------------------------------------------
  // Emerygency freeze - onlyOwner
  // ------------------------------------------------------------------------
  /**
   * @dev Activates or deactivates the emergency freeze for all accounts.
   * @notice Activates or deactivates the emergency freeze for all accounts.
   * @param _freeze A boolean indicating whether to activate or deactivate the emergency freeze.
   * @return A boolean indicating whether the operation was successful.
   */
  function emergencyFreezeAllAccounts (bool _freeze) public onlyOwner returns(bool res) {
    emergencyFreeze = _freeze;
    EmerygencyFreezed(_freeze);
    return true;
  }
  

  // ------------------------------------------------------------------------
  //               CONSTANT METHODS
  // ------------------------------------------------------------------------


  // ------------------------------------------------------------------------
  // Check Allowance : Constant
  // ------------------------------------------------------------------------
  /**
   * @dev Returns the remaining allowance of a spender for a token owner.
   * @notice Returns the remaining allowance of a spender for a token owner.
   * @param _tokenOwner The address of the token owner.
   * @param _spender The address of the spender.
   * @return The remaining allowance.
   */
  function allowance(address _tokenOwner, address _spender) public constant returns (uint256 remaining) {
    return allowed[_tokenOwner][_spender];
  }

  // ------------------------------------------------------------------------
  // Check Balance : Constant
  // ------------------------------------------------------------------------
  /**
   * @dev Returns the balance of a specified account.
   * @notice Returns the balance of a specified account.
   * @param _tokenOwner The address of the account.
   * @return The balance of the account.
   */
  function balanceOf(address _tokenOwner) public constant returns (uint256 balance) {
    return balances[_tokenOwner];
  }

  // ------------------------------------------------------------------------
  // Total supply : Constant
  // ------------------------------------------------------------------------
  /**
   * @dev Returns the total supply of tokens.
   * @notice Returns the total supply of tokens.
   * @return The total supply of tokens.
   */
  function totalSupply() public constant returns (uint256) {
    return totalSupply;
  }

  // ------------------------------------------------------------------------
  // Get Freeze Status : Constant
  // ------------------------------------------------------------------------
  /**
   * @dev Returns the freeze status of a specified account.
   * @notice Returns the freeze status of a specified account.
   * @param _targetAddress The address of the account.
   * @return A boolean indicating whether the account is frozen.
   */
  function isFreezed(address _targetAddress) public constant returns (bool) {
    return frozen[_targetAddress];
  }

  // ------------------------------------------------------------------------
  // Prevents contract from accepting ETH
  // ------------------------------------------------------------------------
  /**
   * @dev Reverts any ETH sent to the contract.
   * @notice Reverts any ETH sent to the contract.
   */
  function () public payable {
      revert();
  }

  // ------------------------------------------------------------------------
  // Owner can transfer out any accidentally sent ERC20 tokens
  // ------------------------------------------------------------------------
  /**
   * @dev Transfers any accidentally sent ERC20 tokens to the owner.
   * @notice Transfers any accidentally sent ERC20 tokens to the owner.
   * @param _tokenAddress The address of the ERC20 token.
   * @param _value The amount of tokens to transfer.
   * @return A boolean indicating whether the transfer was successful.
   */
  function transferAnyERC20Token(address _tokenAddress, uint256 _value) public onlyOwner returns (bool success) {
    ERC20Interface token = ERC20Interface(_tokenAddress);
    return token.transfer(owner, _value);
  }
}
```