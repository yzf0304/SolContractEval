你是一位 Solidity 智能合约开发专家。你已经检查并理解了提供的接口定义（`IERC165`, `IERC721`, `IERC721Receiver`, `IERC721Metadata`），库（`Address`, `Strings`），以及抽象合约 (`ERC165`)。你的任务是严格按照提供的上下文和描述，完成名为 `ERC721` 的智能合约。请注意以下关键要求：

*   **合约继承和接口实现**: 确保 `ERC721` 正确地继承了 `ERC165` 并实现了 `IERC721` 和 `IERC721Metadata` 接口。
*   **构造函数**: 已经提供的构造函数需要保留，用于初始化合约的名称和符号，并将第一个tokenId（0）的所有权赋予部署者。
*   **状态变量**: 提供的状态变量（例如 `_totalMintsAllowed`, `uriLink`, `_minting`, `_owner`, `_count`, `_name`, `_symbol`, `_owners`, `_uri`, `_balances`, `_tokenApprovals`, `_minted`, `_operatorApprovals`) 必须在你的实现中使用。
*   **函数实现**: 你需要实现所有在 `ERC721` 合约中声明但未实现的函数，包括公共、外部、私有和内部函数。这些函数的行为必须符合 ERC721 标准以及合约代码中的注释描述。
*   **严格遵守上下文**: 不要引入任何额外的合约、依赖项或与给定上下文无关的代码。
*   **编译器版本**: 确保你的代码与编译器版本 0.8.0 兼容。
*   **唯一输出**: 最终交付物必须是完整且可编译的 `ERC721` 合约代码，不包含任何额外的解释或示例。

现在，请提供完整的 `ERC721` 智能合约代码。

---

你需要实现以下函数：

*   `setMinting(bool boolean) external`
*   `transferOwnership(address to) external`
*   `supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool)`
*   `balanceOf(address owner) public view virtual override returns (uint256)`
*   `ownerOf(uint256 tokenId) public view virtual override returns (address)`
*   `name() public view virtual override returns (string memory)`
*   `symbol() public view virtual override returns (string memory)`
*   `totalSupply() external view override returns(uint256)`
*   `tokenURI(uint256 tokenId) external view override returns (string memory)`
*   `_baseURI() internal view virtual returns (string memory)`
*   `approve(address to, uint256 tokenId) external override`
*   `getApproved(uint256 tokenId) public view virtual override returns (address)`
*   `setApprovalForAll(address operator, bool approved) public virtual override`
*   `isApprovedForAll(address owner, address operator) public view virtual override returns (bool)`
*   `transferFrom(address from, address to, uint256 tokenId) external override`
*   `safeTransferFrom(address from, address to, uint256 tokenId) external override`
*   `safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external override`
*   `_safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual`
*   `_exists(uint256 tokenId) internal view returns (bool)`
*   `_isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool)`
*   `mint(address to) external payable returns(uint256 ID)`
*   `internalMint(address to) internal returns(uint256 ID)`
*   `concat(string memory _base, string memory _value) pure internal returns (string memory)`
*   `multiMint(address to, uint256 amount) external payable returns(uint256[] memory IDs)`
*   `changeMax(uint256 newMax) external`
*   `_transfer(address from, address to, uint256 tokenId) internal virtual`
*   `_approve(address to, uint256 tokenId) internal virtual`
*   `_checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool)`
*   `receive() external payable`