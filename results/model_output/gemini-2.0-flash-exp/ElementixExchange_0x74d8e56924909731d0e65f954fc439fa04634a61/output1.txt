```solidity
pragma solidity ^0.8.4;

// File: dependencies/openzeppelin/contracts/utils/Context.sol
/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: dependencies/openzeppelin/contracts/access/Ownable.sol
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface OwnableDelegateProxy {
    function owner() external view returns (address);
    function target() external view returns (address);
    function fallback() external payable;
}

/**
 * @title ProxyRegistry
 * @notice A registry for managing proxy contracts and their permissions.
 * @dev This contract allows the owner to grant and revoke access to specific contracts, and users to register their own proxy contracts.
 */
contract ProxyRegistry is Ownable {

    /* DelegateProxy implementation contract. Must be initialized. */
    address public delegateProxyImplementation;

    /* Authenticated proxies by user. */
    mapping(address => OwnableDelegateProxy) public proxies;

    /* Contracts pending access. */
    mapping(address => uint256) public pending;

    /* Contracts allowed to call those proxies. */
    mapping(address => bool) public contracts;

    /* Delay period for adding an authenticated contract.
       This mitigates a particular class of potential attack on the Elementix DAO (which owns this registry) - if at any point the value of assets held by proxy contracts exceeded the value of half the ELT supply (votes in the DAO),
       a malicious but rational attacker could buy half the Elementix and grant themselves access to all the proxy contracts. A delay period renders this attack nonthreatening - given one weeks, if that happened, users would have
       plenty of time to notice and transfer their assets.
    */
    uint256 public DELAY_PERIOD = 7 days;

    // event
    event RegisterProxy(address indexed sender, address proxyAddr);
    event AuthenticationOperation(address indexed addr, bool opt);

    constructor(address _delegateProxyImplementation) {
        delegateProxyImplementation = _delegateProxyImplementation;
    }

    /**
     * @notice Start the process to enable access for a specified contract. Subject to a delay period.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address to which to grant permissions
     */
    function startGrantAuthentication (address addr)
        public
        onlyOwner
    {
        require(addr != address(0), "ProxyRegistry: Address cannot be zero.");
        require(pending[addr] == 0, "ProxyRegistry: Address already pending or authenticated.");
        pending[addr] = block.timestamp + DELAY_PERIOD;
    }

    /**
     * @notice End the process to enable access for a specified contract after the delay period has passed.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address to which to grant permissions
     */
    function endGrantAuthentication (address addr)
        public
        onlyOwner
    {
        require(addr != address(0), "ProxyRegistry: Address cannot be zero.");
        require(pending[addr] != 0, "ProxyRegistry: Address not pending authentication.");
        require(block.timestamp >= pending[addr], "ProxyRegistry: Delay period has not passed.");
        contracts[addr] = true;
        emit AuthenticationOperation(addr, true);
        pending[addr] = 0;
    }

    /**
     * @notice Revoke access for a specified contract. Can be done instantly.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address of which to revoke permissions
     */
    function revokeAuthentication (address addr)
        public
        onlyOwner
    {
        require(addr != address(0), "ProxyRegistry: Address cannot be zero.");
        contracts[addr] = false;
        pending[addr] = 0; // In case it's pending.
        emit AuthenticationOperation(addr, false);
    }

    /**
     * @notice Register a proxy contract with this registry.
     * @dev Must be called by the user for whom the proxy is being created. Creates a new AuthenticatedProxy.
     * @return proxy New AuthenticatedProxy contract
     */
    function registerProxy()
        public
        returns (OwnableDelegateProxy proxy)
    {
        require(delegateProxyImplementation != address(0), "ProxyRegistry: Delegate proxy implementation not set");
        proxy = OwnableDelegateProxy(address(new OwnableDelegateProxyConstructor(delegateProxyImplementation, msg.sender)));
        proxies[msg.sender] = proxy;
        emit RegisterProxy(msg.sender, address(proxy));
    }

    // Helper contract for creating the proxy.
    // This avoids the "Contracts that create contracts must be marked payable" error.
    // It's also more gas efficient than using CREATE2.
    contract OwnableDelegateProxyConstructor {
        constructor(address _delegateProxyImplementation, address _owner) {
            OwnableDelegateProxy proxy = OwnableDelegateProxy(address(new OwnableDelegateProxyImpl(_delegateProxyImplementation, _owner)));
            // No need to store the proxy. The address is returned directly.
            // selfdestruct(payable(address(0))); // remove the constructor from state
        }
    }

    // Minimal proxy implementation
    contract OwnableDelegateProxyImpl {
        address public target;
        address public owner;

        constructor(address _target, address _owner) {
            target = _target;
            owner = _owner;
        }

        fallback() external payable {
            address _target = target;
            require(_target != address(0), "Proxy has no target");
            // delegatecall
            assembly {
                calldatacopy(0x0, 0x0, calldatasize())
                let result := delegatecall(gas(), _target, 0x0, calldatasize(), 0x0, 0x0)
                returndatacopy(0x0, 0x0, returndatasize())
                switch result
                case 0 { revert(0x0, returndatasize()) }
                default { return(0x0, returndatasize()) }
            }
        }
    }

}
```