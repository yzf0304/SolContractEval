```solidity
pragma solidity ^0.5.0;

// File: contracts-waifu/waif/utils/Context.sol
/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */

contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor () internal { }
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: contracts-waifu/waif/utils/Ownable.sol
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Returns true if the caller is the current owner.
     */
    function isOwner() public view returns (bool) {
        return _msgSender() == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: contracts-waifu/waif/utils/SafeMath.sol
/**
 * @title SafeMath
 * @dev Unsigned math operations with safety checks that revert on error
 */

library SafeMath {

    /**
     * @dev Multiplies two unsigned integers, reverts on overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath#mul: OVERFLOW");

        return c;
    }

    /**
     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, "SafeMath#div: DIVISION_BY_ZERO");
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath#sub: UNDERFLOW");
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Adds two unsigned integers, reverts on overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath#add: OVERFLOW");

        return c;
    }

    /**
     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),
     * reverts when dividing by zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath#mod: DIVISION_BY_ZERO");
        return a % b;
    }

}

// File: contracts-waifu/waif/utils/IERC20.sol
/**
 * @dev Interface of the ERC20 standard as defined in the EIP. Does not include
 * the optional functions; to access them see {ERC20Detailed}.
 */

interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: contracts-waifu/waif/HaremNonTradable.sol

contract HaremNonTradable is Ownable {
    using SafeMath for uint256;
    event Transfer(address indexed from, address indexed to, uint256 value);

    mapping (address => uint256) private _balances;

    uint256 private _totalSupply;
    uint256 private _totalClaimed;
    string public name = "HAREM - Non Tradable";
    string public symbol = "HAREM";
    uint8 public decimals = 18;

    /**
     * @dev Total number of tokens in existence.
     */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    // Returns the total claimed Harem
    // This is just purely used to display the total Harem claimed by users on the frontend
    function totalClaimed() public view returns (uint256) {
        return _totalClaimed;
    }

    // Add Harem claimed
    function addClaimed(uint256 _amount) public onlyOwner {
        _totalClaimed = _totalClaimed.add(_amount);
    }

    // Set Harem claimed to a custom value, for if we wanna reset the counter on new season release
    function setClaimed(uint256 _amount) public onlyOwner {
        require(_amount >= 0, "Cant be negative");
        _totalClaimed = _amount;
    }

    // As this token is non tradable, only minters are allowed to transfer tokens between accounts
    function transfer(address receiver, uint numTokens) public onlyOwner returns (bool) {
        require(numTokens <= _balances[msg.sender]);
        _balances[msg.sender] = _balances[msg.sender].sub(numTokens);
        _balances[receiver] = _balances[receiver].add(numTokens);
        emit Transfer(msg.sender, receiver, numTokens);
        return true;
    }

    // As this token is non tradable, only minters are allowed to transfer tokens between accounts
    function transferFrom(address owner, address buyer, uint numTokens) public onlyOwner returns (bool) {
        require(numTokens <= _balances[owner]);

        _balances[owner] = _balances[owner].sub(numTokens);
        _balances[buyer] = _balances[buyer].add(numTokens);
        emit Transfer(owner, buyer, numTokens);
        return true;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param owner The address to query the balance of.
     * @return A uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    function mint(address _to, uint256 _amount) public onlyOwner {
        _mint(_to, _amount);
    }

    function burn(address _account, uint256 value) public onlyOwner {
        require(_balances[_account] >= value, "Cannot burn more than address has");
        _burn(_account, value);
    }

    /**
     * @dev Internal function that mints an amount of the token and assigns it to
     * an account. This encapsulates the modification of balances such that the
     * proper events are emitted.
     * @param account The account that will receive the created tokens.
     * @param value The amount that will be created.
     */
    function _mint(address account, uint256 value) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply.add(value);
        _balances[account] = _balances[account].add(value);
        emit Transfer(address(0), account, value);
    }

    /**
     * @dev Internal function that burns an amount of the token of a given
     * account.
     * @param account The account whose tokens will be burnt.
     * @param value The amount that will be burnt.
     */
    function _burn(address account, uint256 value) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }
}



// You task is to complete the smart contract HaremFactory strictly according to the provided context and description. Note that the contract is deployed using compiler version 0.5.0, and do not introduce any additional contracts, dependencies, or unrelated code. Deliver only the complete and functional target contract without any extraneous implementations or examples.

/**
 * @title HaremFactory
 * @notice This contract allows users to stake tokens in different pools and earn Harems as rewards.
 * @dev The contract is Ownable, meaning only the owner can add new pools, set parameters, and update the treasury address.
 */
contract HaremFactory is Ownable {
    using SafeMath for uint256;

    // Info of each user.
    struct UserInfo {
        uint256 amount; // How many tokens the user has provided.
        uint256 rewardDebt; // Reward debt. See explanation below.
    }

    // Info of each pool.
    struct PoolInfo {
        IERC20 token; // Address of token contract.
        uint256 haremsPerDay; // The amount of Harems per day generated for each token staked.
        uint256 maxStake; // The maximum amount of tokens which can be staked in this pool.
        uint256 lastUpdateTime; // Last timestamp that Harems distribution occurs.
        uint256 accHaremPerShare; // Accumulated Harems per share, times 1e12.
    }

    // Treasury address.
    address public treasuryAddr;
    // Info of each pool.
    PoolInfo[] public poolInfo;
    // Info of each user that stakes LP tokens.
    mapping(uint256 => mapping(address => UserInfo)) public userInfo;
    // Record whether the pair has been added.
    mapping(address => uint256) public tokenPID;

    HaremNonTradable public Harem;

    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event EmergencyWithdraw(
        address indexed user,
        uint256 indexed pid,
        uint256 amount
    );

    constructor(HaremNonTradable _haremAddress, address _treasuryAddr) public {
        Harem = _haremAddress;
        treasuryAddr = _treasuryAddr;
    }

    /**
     * @notice Returns the number of pools available.
     * @dev This function is used to get the length of the poolInfo array.
     * @return The number of pools.
     */
    function poolLength() external view returns (uint256) {
        return poolInfo.length;
    }

    /**
     * @notice Adds a new token to the pool. Can only be called by the owner.
     * @dev Ensure that the same token is not added more than once to avoid reward issues.
     * @param _token The address of the token to be added.
     * @param _haremsPerDay The amount of Harems per day generated for each token staked.
     * @param _maxStake The maximum amount of tokens which can be staked in this pool.
     */
    function add(IERC20 _token, uint256 _haremsPerDay, uint256 _maxStake) public onlyOwner {
        require(tokenPID[_token] == 0, "HaremFactory: Token already added");
        require(_token != address(0), "HaremFactory: Token address cannot be zero");
        require(_haremsPerDay > 0, "HaremFactory: Harems per day must be greater than 0");
        require(_maxStake > 0, "HaremFactory: Max stake must be greater than 0");

        uint256 pid = poolInfo.length;
        tokenPID[_token] = pid + 1; // pid starts from 0, tokenPID starts from 1

        poolInfo.push(PoolInfo({
            token: _token,
            haremsPerDay: _haremsPerDay,
            maxStake: _maxStake,
            lastUpdateTime: block.timestamp,
            accHaremPerShare: 0
        }));
    }

    /**
     * @notice Sets the maximum stake for a given pool. Can only be called by the owner.
     * @dev Updates the maxStake value for the specified pool.
     * @param pid The ID of the pool.
     * @param amount The new maximum stake amount.
     */
    function setMaxStake(uint256 pid, uint256 amount) public onlyOwner {
        require(pid < poolInfo.length, "HaremFactory: Pool does not exist");
        require(amount > 0, "HaremFactory: Max stake must be greater than 0");
        poolInfo[pid].maxStake = amount;
    }

    /**
     * @notice Sets the amount of Harems generated per day for each token staked in a pool. Can only be called by the owner.
     * @dev Updates the haremsPerDay value for the specified pool.
     * @param pid The ID of the pool.
     * @param amount The new Harems per day amount.
     */
    function setHaremsPerDay(uint256 pid, uint256 amount) public onlyOwner {
        require(pid < poolInfo.length, "HaremFactory: Pool does not exist");
        require(amount > 0, "HaremFactory: Harems per day must be greater than 0");
        poolInfo[pid].haremsPerDay = amount;
    }

    /**
     * @notice Calculates the pending Harems for a specific user in a specific pool.
     * @dev This function is used to display the pending Harems on the frontend.
     * @param _pid The ID of the pool.
     * @param _user The address of the user.
     * @return The pending Harems for the user in the specified pool.
     */
    function pendingHarem(uint256 _pid, address _user) public view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 accHaremPerShare = pool.accHaremPerShare;
        uint256 tokenSupply = pool.token.balanceOf(address(this));

        if (block.timestamp > pool.lastUpdateTime && tokenSupply > 0) {
            uint256 haremReward = block.timestamp.sub(pool.lastUpdateTime).mul(pool.haremsPerDay);
            uint256 accHarem = haremReward.mul(1e12).div(tokenSupply);
            accHaremPerShare = accHaremPerShare.add(accHarem);
        }

        return user.amount.mul(accHaremPerShare).div(1e12).sub(user.rewardDebt);
    }

    /**
     * @notice Calculates the total pending Harems for a specific user across all pools.
     * @dev This function sums up the pending Harems from all pools for the specified user.
     * @param _user The address of the user.
     * @return The total pending Harems for the user.
     */
    function totalPendingHarem(address _user) public view returns (uint256) {
        uint256 totalPending;
        for (uint256 pid = 0; pid < poolInfo.length; pid++) {
            totalPending = totalPending.add(pendingHarem(pid, _user));
        }
        return totalPending;
    }

    /**
     * @notice Calculates the pending Harems for the entire pool.
     * @dev This function is used to display the pending Harems for the whole pool.
     * @param _pid The ID of the pool.
     * @return The pending Harems for the entire pool.
     */
    function pendingHaremOfPool(uint256 _pid) public view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];
        uint256 tokenSupply = pool.token.balanceOf(address(this));
        if (block.timestamp > pool.lastUpdateTime && tokenSupply > 0) {
            uint256 haremReward = block.timestamp.sub(pool.lastUpdateTime).mul(pool.haremsPerDay);
            return haremReward;
        } else {
            return 0;
        }
    }

    /**
     * @notice Harvests pending Harems from a list of pools.
     * @dev This function allows a user to harvest pending Harems from multiple pools.
     * @param _pids The IDs of the pools to harvest from.
     */
    function rugPull(uint256[] memory _pids) public {
        for (uint256 i = 0; i < _pids.length; i++) {
            uint256 pid = _pids[i];
            updatePool(pid);
            UserInfo storage user = userInfo[pid][msg.sender];
            uint256 pending = user.amount.mul(poolInfo[pid].accHaremPerShare).div(1e12).sub(user.rewardDebt);
            if (pending > 0) {
                safeHaremTransfer(msg.sender, pending);
            }
            user.rewardDebt = user.amount.mul(poolInfo[pid].accHaremPerShare).div(1e12);
        }
    }

    /**
     * @notice Updates reward variables for all pools.
     * @dev This function updates the reward variables for all pools. Be careful of gas spending!
     */
    function rugPullAll() public {
        for (uint256 pid = 0; pid < poolInfo.length; pid++) {
            updatePool(pid);
            UserInfo storage user = userInfo[pid][msg.sender];
            uint256 pending = user.amount.mul(poolInfo[pid].accHaremPerShare).div(1e12).sub(user.rewardDebt);
            if (pending > 0) {
                safeHaremTransfer(msg.sender, pending);
            }
            user.rewardDebt = user.amount.mul(poolInfo[pid].accHaremPerShare).div(1e12);
        }
    }

    /**
     * @notice Updates reward variables for a specific pool.
     * @dev This function ensures that the reward variables for the specified pool are up-to-date.
     * @param _pid The ID of the pool.
     */
    function updatePool(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.timestamp <= pool.lastUpdateTime) {
            return;
        }
        uint256 tokenSupply = pool.token.balanceOf(address(this));
        if (tokenSupply == 0) {
            pool.lastUpdateTime = block.timestamp;
            return;
        }
        uint256 haremReward = block.timestamp.sub(pool.lastUpdateTime).mul(pool.haremsPerDay);
        uint256 accHarem = haremReward.mul(1e12).div(tokenSupply);
        pool.accHaremPerShare = pool.accHaremPerShare.add(accHarem);
        pool.lastUpdateTime = block.timestamp;
    }

    /**
     * @notice Deposits LP tokens into a pool for Harem allocation.
     * @dev This function allows a user to deposit tokens into a pool and receive Harems as rewards.
     * @param _pid The ID of the pool.
     * @param _amount The amount of tokens to deposit.
     */
    function deposit(uint256 _pid, uint256 _amount) public {
        require(_pid < poolInfo.length, "HaremFactory: Pool does not exist");
        require(_amount > 0, "HaremFactory: Amount must be greater than 0");

        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];

        updatePool(_pid);

        uint256 pending = user.amount.mul(pool.accHaremPerShare).div(1e12).sub(user.rewardDebt);
        if (pending > 0) {
            safeHaremTransfer(msg.sender, pending);
        }

        if (user.amount.add(_amount) > pool.maxStake) {
            _amount = pool.maxStake.sub(user.amount);
        }

        user.amount = user.amount.add(_amount);
        user.rewardDebt = user.amount.mul(pool.accHaremPerShare).div(1e12);

        require(pool.token.transferFrom(msg.sender, address(this), _amount), "HaremFactory: Transfer failed");

        emit Deposit(msg.sender, _pid, _amount);
    }

    /**
     * @notice Withdraws tokens from a pool.
     * @dev This function allows a user to withdraw tokens from a pool and receive any pending Harems.
     * @param _pid The ID of the pool.
     * @param _amount The amount of tokens to withdraw.
     */
    function withdraw(uint256 _pid, uint256 _amount) public {
        require(_pid < poolInfo.length, "HaremFactory: Pool does not exist");
        require(_amount > 0, "HaremFactory: Amount must be greater than 0");

        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];

        require(user.amount >= _amount, "HaremFactory: Insufficient balance");

        updatePool(_pid);

        uint256 pending = user.amount.mul(pool.accHaremPerShare).div(1e12).sub(user.rewardDebt);
        if (pending > 0) {
            safeHaremTransfer(msg.sender, pending);
        }

        user.amount = user.amount.sub(_amount);
        user.rewardDebt = user.amount.mul(pool.accHaremPerShare).div(1e12);

        require(pool.token.transfer(msg.sender, _amount), "HaremFactory: Transfer failed");

        emit Withdraw(msg.sender, _pid, _amount);
    }

    /**
     * @notice Withdraws tokens from a pool without caring about rewards. EMERGENCY ONLY.
     * @dev This function allows a user to withdraw their tokens in case of an emergency.
     * @param _pid The ID of the pool.
     */
    function emergencyWithdraw(uint256 _pid) public {
        require(_pid < poolInfo.length, "HaremFactory: Pool does not exist");

        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];

        uint256 amount = user.amount;
        user.amount = 0;
        user.rewardDebt = 0;

        require(pool.token.transfer(msg.sender, amount), "HaremFactory: Transfer failed");
        emit EmergencyWithdraw(msg.sender, _pid, amount);
    }

    /**
     * @notice Safely transfers Harems to a user, handling potential rounding errors.
     * @dev This internal function ensures that the transfer of Harems is safe and handles any rounding errors.
     * @param _to The address to transfer Harems to.
     * @param _amount The amount of Harems to transfer.
     */
    
    
    function safeHaremTransfer(address _to, uint256 _amount) internal {
        if (_amount > 0) {
            Harem.mint(_to, _amount);
        }
    }

    /**
     * @notice Updates the treasury address. Can only be called by the current treasury address.
     * @dev This function allows the current treasury address to update the treasury address.
     * @param _treasuryAddr The new treasury address.
     */
    function treasury(address _treasuryAddr) public {
        require(msg.sender == treasuryAddr, "HaremFactory: Only treasury can update treasury address");
        treasuryAddr = _treasuryAddr;
    }
}
```