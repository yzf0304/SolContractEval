```solidity
pragma solidity ^0.4.19;

contract Ownable {

    /**
     * @dev set `owner` of the contract to the sender
     */
    address public owner = msg.sender;

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    /**
     * @dev Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        owner = newOwner;
    }

}

/**
 * @title Data
 * @notice A contract for managing a hierarchical structure of nodes, their statuses, and balances.
 * @dev This contract allows the owner to manage the status, parent, and balance of each node. It also provides functions to get the parent, balance, and investor balance of a node.
 */
contract Data is Ownable {

    // node => its parent
    mapping (address => address) private parent;

    // node => its status
    mapping (address => uint8) public statuses;

    // node => sum of all his child deposits in USD cents
    mapping (address => uint) public referralDeposits;

    // client => balance in wei*10^(-6) available for withdrawal
    mapping(address => uint256) private balances;

    // investor => balance in wei*10^(-6) available for withdrawal
    mapping(address => uint256) private investorBalances;

    /**
     * @notice Returns the parent of a given node.
     * @param _addr The address of the node.
     * @return The address of the parent node.
     */
    function parentOf(address _addr) public constant returns (address) {
        return parent[_addr];
    }

    /**
     * @notice Returns the balance of a given node in wei.
     * @param _addr The address of the node.
     * @return The balance of the node in wei.
     */
    function balanceOf(address _addr) public constant returns (uint256) {
        return balances[_addr];
    }

    /**
     * @notice Returns the investor balance of a given node in wei.
     * @param _addr The address of the node.
     * @return The investor balance of the node in wei.
     */
    function investorBalanceOf(address _addr) public constant returns (uint256) {
        return investorBalances[_addr];
    }

    /**
     * @dev The Data constructor to set up the first depositer with a specific status.
     */
    function Data() public {
        // DirectorOfRegion - 7
        statuses[msg.sender] = 7;
    }

    /**
     * @notice Adds a specified amount to the balance of a given node.
     * @dev Only the contract owner can call this function.
     * @param _addr The address of the node.
     * @param amount The amount to add to the balance.
     */
    function addBalance(address _addr, uint256 amount) onlyOwner public {
        balances[_addr] = balances[_addr] + amount;
    }

    /**
     * @notice Subtracts a specified amount from the balance of a given node.
     * @dev Only the contract owner can call this function. Requires the balance to be sufficient.
     * @param _addr The address of the node.
     * @param amount The amount to subtract from the balance.
     */
    function subtrBalance(address _addr, uint256 amount) onlyOwner public {
        require(balances[_addr] >= amount);
        balances[_addr] = balances[_addr] - amount;
    }

    /**
     * @notice Adds a specified amount to the investor balance of a given node.
     * @dev Only the contract owner can call this function.
     * @param _addr The address of the node.
     * @param amount The amount to add to the investor balance.
     */
    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {
        investorBalances[_addr] = investorBalances[_addr] + amount;
    }

    /**
     * @notice Subtracts a specified amount from the investor balance of a given node.
     * @dev Only the contract owner can call this function. Requires the investor balance to be sufficient.
     * @param _addr The address of the node.
     * @param amount The amount to subtract from the investor balance.
     */
    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {
        require(investorBalances[_addr] >= amount);
        investorBalances[_addr] = investorBalances[_addr] - amount;
    }

    /**
     * @notice Adds a specified amount to the referral deposit of a given node.
     * @dev Only the contract owner can call this function.
     * @param _addr The address of the node.
     * @param amount The amount to add to the referral deposit.
     */
    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {
        referralDeposits[_addr] = referralDeposits[_addr] + amount;
    }

    /**
     * @notice Sets the status of a given node.
     * @dev Only the contract owner can call this function.
     * @param _addr The address of the node.
     * @param _status The new status to set.
     */
    function setStatus(address _addr, uint8 _status) onlyOwner public {
        statuses[_addr] = _status;
    }

    /**
     * @notice Sets the parent of a given node.
     * @dev Only the contract owner can call this function.
     * @param _addr The address of the node.
     * @param _parent The address of the new parent node.
     */
    function setParent(address _addr, address _parent) onlyOwner public {
        parent[_addr] = _parent;
    }
}
```