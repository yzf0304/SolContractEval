```solidity
pragma solidity ^0.4.23;

/**
 * @notice This contract allows users to register an account with a public key and an SPHTX name.
 * @dev The contract ensures that each Ethereum address can only register one unique SPHTX name, and each SPHTX name is unique across the system.
 */
contract TokenReclaim {
    mapping (address => string) internal _ethToSphtx;
    mapping (string => string) internal _accountToPubKey;

    /**
     * @notice Emitted when an account is registered.
     * @param ethAccount The Ethereum address of the user.
     * @param sphtxAccount The SPHTX name of the user.
     * @param pubKey The public key associated with the user's SPHTX name.
     */
    event AccountRegister(address ethAccount, string sphtxAccount, string pubKey);

    /**
     * @notice Registers an SPHTX name and associates it with a public key for the caller.
     * @param name The SPHTX name to be registered. Must meet specific formatting requirements.
     * @param pubKey The public key to be associated with the SPHTX name. Must meet length requirements.
     * @dev
     * - The SPHTX name must:
     *   - Be between 3 and 16 characters long
     *   - Start with a lowercase letter (a-z) or digit (0-9)
     *   - Only contain lowercase letters (a-z), digits (0-9), hyphens (-), and periods (.)
     * - The public key must be between 50 and 64 characters long
     * - The function performs the following validations:
     *   1. Validates the name length and format
     *   2. Validates the public key length
     *   3. Ensures the caller's address is not already registered
     *   4. Ensures the name is not already in use by another account
     * - If all validations pass:
     *   - Stores the name-to-public key mapping
     *   - Stores the Ethereum address-to-SPHTX name mapping
     *   - Emits an AccountRegister event
     * @dev The function uses keccak256 hashes for comparison to prevent storage gas    optimization attacks
     * @notice This registration is a one-time operation per address - subsequent calls will fail if the address is already registered
     * @dev The name format restrictions help maintain a consistent naming convention across the system
     */
    function register(string memory name, string memory pubKey) public {
        require(bytes(name).length >= 3 && bytes(name).length <= 16, "Name length must be between 3 and 16 characters.");
        require(bytes(pubKey).length >= 50 && bytes(pubKey).length <= 64, "Public key length must be between 50 and 64 characters.");
        require(keccak256(_ethToSphtx[msg.sender]) == keccak256(""), "Address already registered.");
        require(keccak256(_accountToPubKey[name]) == keccak256(""), "Name already in use.");

        bytes memory nameBytes = bytes(name);
        require(nameBytes[0] >= 48 && nameBytes[0] <= 57 || nameBytes[0] >= 97 && nameBytes[0] <= 122, "Name must start with a lowercase letter or digit.");

        for (uint i = 0; i < nameBytes.length; i++) {
            require(nameBytes[i] >= 45 && nameBytes[i] <= 57 || nameBytes[i] >= 97 && nameBytes[i] <= 122, "Name can only contain lowercase letters, digits, hyphens, and periods.");
            require(nameBytes[i] != 64, "Name can only contain lowercase letters, digits, hyphens, and periods.");
        }

        _accountToPubKey[name] = pubKey;
        _ethToSphtx[msg.sender] = name;

        emit AccountRegister(msg.sender, name, pubKey);
    }

    /**
     * @notice Returns the SPHTX name associated with the given Ethereum address.
     * @param addr The Ethereum address to query.
     * @return The SPHTX name associated with the address.
     * @dev If the address has not registered an SPHTX name, it returns an empty string.
     */
    function account(address addr) public view returns (string memory) {
        return _ethToSphtx[addr];
    }

    /**
     * @notice Returns the public key associated with the SPHTX name of the given Ethereum address.
     * @param addr The Ethereum address to query.
     * @return The public key associated with the SPHTX name.
     * @dev If the address has not registered an SPHTX name, it returns an empty string.
     */
    function keys(address addr) public view returns (string memory) {
        return _accountToPubKey[_ethToSphtx[addr]];
    }

    /**
     * @notice Checks if a SPHTX name is available for registration.
     * @param name The SPHTX name to check availability for.
     * @return bool True if the name is available, false otherwise.
     * @dev
     * - Returns false if the name is already mapped to a public key in _accountToPubKey
     * - Validates name length (must be between 3 and 16 characters)
     * - Validates name format:
     *   - Must start with a lowercase letter (a-z) or digit (0-9)
     *   - Subsequent characters can be lowercase letters, digits, hyphens (-), or periods (.)
     * - Returns true only if all validation checks pass and the name is not in use
     * @notice This function performs static checks without modifying state
     */
    function nameAvailable(string memory name) public view returns (bool) {
        if (keccak256(_accountToPubKey[name]) != keccak256("")) {
            return false;
        }

        if (bytes(name).length < 3 || bytes(name).length > 16) {
            return false;
        }

        bytes memory nameBytes = bytes(name);
        if (!(nameBytes[0] >= 48 && nameBytes[0] <= 57 || nameBytes[0] >= 97 && nameBytes[0] <= 122)) {
            return false;
        }

        for (uint i = 0; i < nameBytes.length; i++) {
            if (!(nameBytes[i] >= 45 && nameBytes[i] <= 57 || nameBytes[i] >= 97 && nameBytes[i] <= 122)) {
                return false;
            }
            if (nameBytes[i] == 64){
                return false;
            }
        }

        return true;
    }
}
```