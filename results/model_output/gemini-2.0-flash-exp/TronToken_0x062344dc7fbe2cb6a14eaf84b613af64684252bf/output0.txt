```solidity
pragma solidity ^0.4.18;

/**
 * @title TronToken
 * @notice A simple ERC20-like token contract with additional features like pausing and burning.
 * @dev This contract allows for the creation of a token, transferring tokens, and managing the token's state.
 */
contract TronToken {

    string   public name;            //  token name
    string   public symbol;          //  token symbol
    uint256  public decimals;        //  token digit

    mapping (address => uint256) public balanceOf;

    uint256 public totalSupply = 0;
    bool public stopped = false;      //  stopflag: true is stopped, false is not stopped

    uint256 constant valueFounder = 500000000000000000;
    address owner = 0x0;

    /**
     * @notice Modifier to check if the caller is the owner of the contract.
     * @dev Reverts if the caller is not the owner.
     */
    modifier isOwner {
        require(owner == msg.sender);
        _;
    }

    /**
     * @notice Modifier to check if the contract is running (not paused).
     * @dev Reverts if the contract is stopped (paused).
     */
    modifier isRunning {
        require(!stopped);
        _;
    }

    /**
     * @notice Modifier to check if the provided address is valid (not zero).
     * @dev Reverts if the address is zero.
     */
    modifier validAddress {
        require(msg.sender != 0x0);
        _;
    }

    /**
     * @notice Constructor to initialize the token with initial supply, name, symbol, and decimal units.
     * @param _addressFounder The address of the founder who will receive the initial supply.
     * @param _initialSupply The initial supply of the token.
     * @param _tokenName The name of the token.
     * @param _decimalUnits The number of decimal units for the token.
     * @param _tokenSymbol The symbol of the token.
     * @dev Sets the initial supply, name, symbol, and decimal units. Also, assigns the total supply to the founder.
     */
    function TronToken(address _addressFounder, uint256 _initialSupply, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {
        owner = msg.sender;
        if (_addressFounder == 0x0)
            _addressFounder = msg.sender;
        if (_initialSupply == 0) 
            _initialSupply = valueFounder;
        totalSupply = _initialSupply;   // Set the totalSupply 
        name = _tokenName;              // Set the name for display 
        symbol = _tokenSymbol;          // Set the symbol for display 
        decimals = _decimalUnits;       // Amount of decimals for display purposes
        balanceOf[_addressFounder] = totalSupply;
        Transfer(0x0, _addressFounder, totalSupply);
    }

    /**
     * @notice Transfers a specified amount of tokens from the sender to the recipient.
     * @param _to The address of the recipient.
     * @param _value The amount of tokens to transfer.
     * @return success True if the transfer was successful.
     * @dev Requires the sender to have sufficient balance and the recipient's balance to not overflow.
     */
    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {
        require(_to != 0x0);
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]); // Prevent overflow

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Stops the contract, preventing any transfers.
     * @dev Only the owner can call this function.
     */
    function stop() public isOwner {
        stopped = true;
    }

    /**
     * @notice Starts the contract, allowing transfers again.
     * @dev Only the owner can call this function.
     */
    function start() public isOwner {
        stopped = false;
    }

    /**
     * @notice Changes the name of the token.
     * @param _name The new name of the token.
     * @dev Only the owner can call this function.
     */
    function setName(string _name) public isOwner {
        name = _name;
    }

    /**
     * @notice Changes the owner of the contract.
     * @param _owner The new owner's address.
     * @dev Only the owner can call this function.
     */
    function setOwner(address _owner) public isOwner {
        require(_owner != 0x0);
        owner = _owner;
    }

    /**
     * @notice Burns a specified amount of tokens from the sender's balance.
     * @param _value The amount of tokens to burn.
     * @dev Requires the sender to have sufficient balance.
     */
    function burn(uint256 _value) public {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        Transfer(msg.sender, 0x0, _value);
    }

    /**
     * @dev Event to notify when a transfer occurs.
     * @param _from The address of the sender.
     * @param _to The address of the recipient.
     * @param _value The amount of tokens transferred.
     */
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    /**
     * @notice Fallback function to handle receiving Ether.
     * @dev This function does nothing and should be overridden if needed.
     */
    function () public payable {}
}
```