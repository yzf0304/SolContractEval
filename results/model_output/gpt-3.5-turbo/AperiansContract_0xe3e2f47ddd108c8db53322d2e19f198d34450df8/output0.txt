To create a Solidity smart contract that implements the ERC721 standard, you can use the following template as a starting point:

```solidity
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC165.sol";
import "./IERC721.sol";
import "./IERC721Metadata.sol";
import "./IERC721Receiver.sol";
import "./IERC721Enumerable.sol";
import "./Address.sol";

contract MyERC721Contract is IERC721, IERC721Metadata, IERC721Enumerable {
    using Address for address;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _tokenOwners;

    // Mapping from owner address to token count
    mapping(address => uint256) private _tokenBalances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Base URI for token metadata
    string private _baseURI;

    // Total supply of tokens
    uint256 private _totalSupply;

    // Array of all token IDs
    uint256[] private _allTokens;

    // Constructor
    constructor(string memory name, string memory symbol, string memory baseURI) {
        _name = name;
        _symbol = symbol;
        _baseURI = baseURI;
    }

    // Implement functions from IERC721 interface

    // Implement functions from IERC721Metadata interface

    // Implement functions from IERC721Enumerable interface

    // Additional custom functions for minting, transferring, etc.
}
```

This template provides a basic structure for an ERC721-compliant smart contract. You can fill in the implementation details for the functions defined in the interfaces IERC721, IERC721Metadata, and IERC721Enumerable. Additionally, you can add custom functions for minting tokens, transferring ownership, and other functionalities specific to your use case.