I see you have provided the context and partial implementation for the `DNCEQUITY` smart contract. To complete the contract according to the provided context and description, you can add the following code snippet:

```solidity
contract DNCEQUITY is ERC223BasicToken {
    address admin;
    string public name = "DinarCoin";
    string public symbol = "DNC";
    uint public decimals = 18;
    mapping (address => bool) public mintable;

    event Minted(address indexed recipient, uint256 value);
    event Burned(address indexed user, uint256 value);

    function DNCEQUITY() {
        admin = msg.sender;
    }

    modifier onlyadmin { 
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }

    function changeAdmin(address _newAdminAddr) onlyadmin {
        admin = _newAdminAddr;
    }

    function createNewMintableUser(address newAddr) onlyadmin {
        require(balances[newAddr] == 0, "User already has a balance");
        mintable[newAddr] = true;
    }

    function deleteMintable(address addr) onlyadmin {
        mintable[addr] = false;
    }

    function adminTransfer(address from, address to, uint256 value) onlyadmin {
        require(mintable[from], "From address must be mintable");
        balances[from] = balances[from].sub(value);
        balances[to] = balances[to].add(value);
        Transfer(from, to, value);
    }

    function mintNewDNC(address user, uint256 quantity) onlyadmin {
        require(mintable[user], "User must be mintable");
        balances[user] = balances[user].add(quantity);
        totalSupply = totalSupply.add(quantity);
        Minted(user, quantity);
    }

    function burnDNC(address user, uint256 quantity) onlyadmin {
        require(mintable[user], "User must be mintable");
        require(balances[user] >= quantity, "Insufficient balance to burn");
        balances[user] = balances[user].sub(quantity);
        totalSupply = totalSupply.sub(quantity);
        Burned(user, quantity);
    }
}
```

This code snippet completes the `DNCEQUITY` contract by adding the required functions for changing the admin, managing mintable users, transferring tokens, minting new tokens, and burning tokens.