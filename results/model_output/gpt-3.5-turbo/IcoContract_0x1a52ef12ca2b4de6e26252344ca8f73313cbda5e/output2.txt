```solidity
pragma solidity ^0.4.18;

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract Ownable {
  address public owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  function Ownable() public {
    owner = msg.sender;
  }

  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}

contract IcoPhase {
  uint256 public constant phasePresale_From = 1517493600;
  uint256 public constant phasePresale_To = 1518703200;
  uint256 public constant phasePublicSale1_From = 1520690400;
  uint256 public constant phasePublicSale1_To = 1521122400;
  uint256 public constant phasePublicSale2_From = 1521122400;
  uint256 public constant phasePublicSale2_To = 1521554400;
  uint256 public constant phasePublicSale3_From = 1521554400;
  uint256 public constant phasePublicSale3_To = 1521986400;
}

contract Bonus is IcoPhase, Ownable {
  using SafeMath for uint256;

  uint256 constant decimals = 18;
  bool public isBonus;
  mapping(address => uint256) public bonusAccountBalances;
  mapping(uint256 => address) public bonusAccountIndex;
  uint256 public bonusAccountCount;

  function Bonus() public {
    isBonus = true;
  }

  function enableBonus() public onlyOwner returns (bool) {
    isBonus = true;
    return true;
  }

  function disableBonus() public onlyOwner returns (bool) {
    isBonus = false;
    return true;
  }

  function getBonusByTime() public constant returns(uint256) {
    uint256 currentTime = now;
    if (currentTime >= phasePresale_From && currentTime <= phasePresale_To) {
      return 10; // 10% bonus during presale phase
    } else if (currentTime >= phasePublicSale1_From && currentTime <= phasePublicSale1_To) {
      return 5; // 5% bonus during public sale phase 1
    } else if (currentTime >= phasePublicSale2_From && currentTime <= phasePublicSale2_To) {
      return 3; // 3% bonus during public sale phase 2
    } else if (currentTime >= phasePublicSale3_From && currentTime <= phasePublicSale3_To) {
      return 2; // 2% bonus during public sale phase 3
    } else {
      return 0; // no bonus
    }
  }

  function getBonusByETH(uint256 _value) public constant returns(uint256) {
    uint256 bonusPercentage = getBonusByTime();
    return _value.mul(bonusPercentage).div(100);
  }

  function balanceBonusOf(address _owner) public constant returns (uint256 balance) {
    return bonusAccountBalances[_owner];
  }

  function payBonusToAddress(address _address) public onlyOwner returns (bool success) {
    // Implementation to pay bonus to the specified address
    return true;
  }

  function () public payable {
    // Fallback function to receive Ether
  }
}
```