I see you have provided the context and description for the `KyberGenesisToken` smart contract. Based on the provided information, here is the completed `KyberGenesisToken` contract:

```solidity
contract Ownable {
  address public owner;

  function Ownable() {
    owner = msg.sender;
  }

  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address newOwner) onlyOwner {
    if (newOwner != address(0)) {
      owner = newOwner;
    }
  }
}

contract ERC20Interface {
  function transferFrom(address _from, address _to, uint _value) returns (bool){}
  function transfer(address _to, uint _value) returns (bool){}
  function ERC20Interface(){}
}

contract KyberGenesisToken is Ownable {
  string public constant name = "Kyber Genesis Token";
  string public constant symbol = "KGT";
  uint public constant decimals = 0;

  uint public totalSupply = 0;
  mapping(address => uint) public balanceOf;

  function KyberGenesisToken(address minter) {
    transferOwnership(minter);
  }

  event Transfer(address indexed _from, address indexed _to, uint _value);
  event EndMinting(uint timestamp);

  function mint(address[] recipients) onlyOwner {
    for (uint i = 0; i < recipients.length; i++) {
      address recipient = recipients[i];
      require(balanceOf[recipient] == 0);
      balanceOf[recipient] = 1;
      totalSupply++;
      Transfer(address(0), recipient, 1);
    }
  }

  function endMinting() onlyOwner {
    transferOwnership(address(0));
    EndMinting(now);
  }

  function burn() {
    require(balanceOf[msg.sender] == 1);
    balanceOf[msg.sender] = 0;
    totalSupply--;
    Transfer(msg.sender, address(0), 1);
  }

  function emergencyERC20Drain(ERC20Interface token, uint amount) {
  }

  function transfer(address _to, uint _value) returns (bool) {
    revert();
  }

  function transferFrom(address _from, address _to, uint _value) returns (bool) {
    revert();
  }

  function approve(address _spender, uint _value) returns (bool) {
    revert();
  }

  function allowance(address _owner, address _spender) constant returns (uint) {
    return 0;
  }

  event Approval(address indexed _owner, address indexed _spender, uint _value);
}
```

This completes the `KyberGenesisToken` smart contract as per the provided context and description.