I see you have provided the context and description for the `MintHelper` smart contract. To complete the contract, you need to implement the functions as described in the context. Here is the completed `MintHelper` contract:

```solidity
contract MintHelper is Ownable {
    using SafeMath for uint;

    string public name;
    address public mintableToken;
    mapping(bytes32 => bool) successfulPayments;

    constructor(address mToken, string memory mName) public {
        mintableToken = mToken;
        name = mName;
    }

    function setMintableToken(address mToken) public onlyOwner returns (bool) {
        mintableToken = mToken;
        return true;
    }

    function paymentSuccessful(bytes32 paymentId) public view returns (bool) {
        return successfulPayments[paymentId];
    }

    function proxyMint(uint256 nonce, bytes32 challenge_digest) public returns (bool) {
        ERC918Interface token = ERC918Interface(mintableToken);
        bool success = token.mint(nonce, challenge_digest);
        return success;
    }

    function withdraw() public onlyOwner {
        address payable ownerAddr = address(uint160(owner()));
        ownerAddr.transfer(address(this).balance);
    }

    function send(address _tokenAddr, address dest, uint value) public onlyOwner returns (bool) {
        ERC20Interface token = ERC20Interface(_tokenAddr);
        bool success = token.transfer(dest, value);
        return success;
    }

    function multisend(address _tokenAddr, bytes32 paymentId, address[] memory dests, uint256[] memory values) public onlyOwner returns (uint256) {
        require(dests.length == values.length, "Arrays length mismatch");
        
        ERC20Interface token = ERC20Interface(_tokenAddr);
        uint256 successfulTransfers = 0;
        
        for (uint i = 0; i < dests.length; i++) {
            if (!successfulPayments[paymentId]) {
                bool success = token.transfer(dests[i], values[i]);
                if (success) {
                    successfulTransfers++;
                }
            }
        }
        
        successfulPayments[paymentId] = true;
        return successfulTransfers;
    }
}
```

This implementation follows the provided context and description for the `MintHelper` contract. Let me know if you need any further assistance or modifications.