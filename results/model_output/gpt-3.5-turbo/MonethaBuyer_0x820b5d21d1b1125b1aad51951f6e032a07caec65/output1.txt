Here is the completed `MonethaBuyer` smart contract based on the provided context and description:

```solidity
contract MonethaBuyer {
  mapping (address => uint256) public balances;
  uint256 public buy_bounty;
  uint256 public withdraw_bounty;
  bool public bought_tokens;
  uint256 public contract_eth_value;
  bool public kill_switch;
  
  bytes32 password_hash = 0x8223cba4d8b54dc1e03c41c059667f6adb1a642a0a07bef5a9d11c18c4f14612;
  uint256 public earliest_buy_time = 1504188000;
  uint256 public eth_cap = 30000 ether;
  address public developer = 0x000Fb8369677b3065dE5821a86Bc9551d5e5EAb9;
  address public sale;
  ERC20 public token;

  function set_addresses(address _sale, address _token) {
    require(sale == address(0) && token == ERC20(0));
    sale = _sale;
    token = ERC20(_token);
  }

  function activate_kill_switch(string memory password) {
    require(keccak256(abi.encodePacked(password)) == password_hash);
    kill_switch = true;
    buy_bounty = 0;
    withdraw_bounty = 0;
    msg.sender.transfer(buy_bounty + withdraw_bounty);
  }

  function withdraw(address user) {
    require(balances[user] > 0);
    if (!bought_tokens || now < earliest_buy_time) {
      user.transfer(balances[user]);
      balances[user] = 0;
    } else {
      uint256 tokens_to_withdraw = balances[user] * contract_eth_value / address(this).balance;
      uint256 developer_fee = tokens_to_withdraw / 100;
      token.transfer(user, tokens_to_withdraw - developer_fee);
      token.transfer(developer, developer_fee);
      balances[user] = 0;
    }
    msg.sender.transfer(buy_bounty / 100);
  }

  function add_to_buy_bounty() payable {
    require(msg.sender == developer);
    buy_bounty += msg.value;
  }

  function add_to_withdraw_bounty() payable {
    require(msg.sender == developer);
    withdraw_bounty += msg.value;
  }

  function claim_bounty() {
    require(!bought_tokens && now >= earliest_buy_time && !kill_switch);
    bought_tokens = true;
    contract_eth_value = address(this).balance;
    sale.transfer(contract_eth_value);
    msg.sender.transfer(buy_bounty);
  }

  function () payable {
    require(!kill_switch);
    require(!bought_tokens);
    require(address(this).balance + msg.value <= eth_cap);
    balances[msg.sender] += msg.value;
  }
}
```