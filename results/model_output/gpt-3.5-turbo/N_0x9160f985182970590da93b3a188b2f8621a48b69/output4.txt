I have completed the smart contract N according to the provided context and description. Here is the complete and functional target contract:

```solidity
/**
 * @title N
 * @notice A simple ERC721 token contract that allows minting of a single token, with ownership transfer and URI setting functionalities.
 * @dev This contract is designed to be minimalistic and only supports the basic functionalities of an ERC721 token.
 */
contract N {
  uint public tokenId;
  mapping(address => uint) public collectors;
  address private _owner;
  address private _tokenOwner;
  string private _uri;

  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  constructor() {
    _owner = msg.sender;
  }

  function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {
    return (
      interfaceId == 0x80ac58cd || // IERC721
      interfaceId == 0x5b5e139f || // IERC721Metadata
      interfaceId == 0x01ffc9a7 // IERC165
    );
  }

  function ownerOf(uint256 _tokenId) public view virtual returns (address) {
    require(_tokenId == tokenId, "ERC721: invalid token ID");
    return _tokenOwner;
  }

  function balanceOf(address owner) public view virtual returns (uint256) {
    return collectors[owner] > 0 ? 1 : 0;
  }

  function mint() external onlyOwner {
    tokenId++;
    _tokenOwner = msg.sender;
    collectors[msg.sender] = tokenId;
  }

  function tokenURI(uint256 _tokenId) public view virtual returns (string memory) {
    require(_tokenId == tokenId, "ERC721: invalid token ID");
    return _uri;
  }

  function name() public view virtual returns (string memory) {
    return "N.";
  }

  function symbol() public view virtual returns (string memory) {
    return "N";
  }

  function owner() public view virtual returns (address) {
    return _owner;
  }

  modifier onlyOwner {
    require(msg.sender == _owner, "Unauthorized");
    _;
  }

  function transferOwnership(address _new) external virtual onlyOwner {
    require(_new != address(0), "Invalid address");
    emit OwnershipTransferred(_owner, _new);
    _owner = _new;
  }

  function setUri(string calldata _new) external onlyOwner {
    _uri = _new;
  }

  function toString(uint256 value) internal pure returns (string memory) {
    if (value == 0) {
      return "0";
    }
    uint temp = value;
    uint digits;
    while (temp != 0) {
      digits++;
      temp /= 10;
    }
    bytes memory buffer = new bytes(digits);
    while (value != 0) {
      digits -= 1;
      buffer[digits] = bytes1(uint8(48 + value % 10));
      value /= 10;
    }
    return string(buffer);
  }
}
```

This contract includes all the required functionalities as per the provided context and description. Let me know if you need any further assistance or modifications.