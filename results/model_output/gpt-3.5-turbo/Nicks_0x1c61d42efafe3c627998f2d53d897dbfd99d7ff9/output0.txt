```solidity
contract Nicks {

  mapping (address => string) private nickOfOwner;
  mapping (string => address) private ownerOfNick;

  event Set (string indexed _nick, address indexed _owner);
  event Unset (string indexed _nick, address indexed _owner);

  function Nicks () public {
    // empty
  }

  function nickOf (address _owner) public view returns (string _nick) {
    return nickOfOwner[_owner];
  }

  function ownerOf (string _nick) public view returns (address _owner) {
    return ownerOfNick[_nick];
  }

  function set (string _nick) public {
    require(bytes(_nick).length > 2, "Nickname must be more than 2 characters long");
    require(ownerOfNick[_nick] == address(0), "Nickname is already in use");

    string memory oldNick = nickOfOwner[msg.sender];
    if (bytes(oldNick).length > 0) {
      ownerOfNick[oldNick] = address(0);
    }

    nickOfOwner[msg.sender] = _nick;
    ownerOfNick[_nick] = msg.sender;

    emit Set(_nick, msg.sender);
  }

  function unset () public {
    require(bytes(nickOfOwner[msg.sender]).length > 0, "No nickname set for the sender");

    string memory currentNick = nickOfOwner[msg.sender];
    nickOfOwner[msg.sender] = "";
    ownerOfNick[currentNick] = address(0);

    emit Unset(currentNick, msg.sender);
  }

  receive() external payable {
    // This contract does not handle Ether
  }
}
```