```solidity
pragma solidity ^0.8.0;

interface ERC721TokenReceiver {
    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);
}

interface POWNFTv2 {
    function hashOf(uint _tokenId) external view returns(bytes32);
    function ownerOf(uint256 _tokenId) external view returns(address);
    function totalSupply() external view returns (uint256);
}

contract POWNFTv3 {

    uint public UNMIGRATED = 0;
    uint public V2_TOTAL = 0;
    bytes32 public PREV_CHAIN_LAST_HASH;
    POWNFTv2 CONTRACT_V2;

    constructor(address contract_v2) {
        supportedInterfaces[0x80ac58cd] = true; //ERC721
        supportedInterfaces[0x5b5e139f] = true; //ERC721Metadata
        supportedInterfaces[0x780e9d63] = true; //ERC721Enumerable
        supportedInterfaces[0x01ffc9a7] = true; //ERC165

        CONTRACT_V2 = POWNFTv2(contract_v2);
        V2_TOTAL = CONTRACT_V2.totalSupply();
        UNMIGRATED = V2_TOTAL;
        PREV_CHAIN_LAST_HASH = CONTRACT_V2.hashOf(UNMIGRATED);
    }

    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);

    mapping(address => uint256) internal BALANCES;
    mapping(uint256 => address) internal ALLOWANCE;
    mapping(address => mapping(address => bool)) internal AUTHORISED;

    bytes32[] TOKENS;
    mapping(uint256 => address) OWNERS;

    string private __name = "POW NFT";
    string private __symbol = "POW";
    bytes private __uriBase = bytes("https://www.pownftmetadata.com/t/");

    mapping(address => uint[]) internal OWNER_INDEX_TO_ID;
    mapping(uint256 => uint) internal OWNER_ID_TO_INDEX;
    mapping(uint256 => uint) internal ID_TO_INDEX;
    mapping(uint => uint) internal INDEX_TO_ID;

    mapping(uint256 => uint256) WITHDRAWALS;

    uint BASE_COST = 0.000045 ether;
    uint BASE_DIFFICULTY = uint(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / uint(300);
    uint DIFFICULTY_RAMP = 3;

    event Migrate(uint indexed _tokenId);
    event Mined(uint indexed _tokenId, bytes32 hash);
    event Withdraw(uint indexed _tokenId, uint value);

    function generationOf(uint _tokenId) private pure returns(uint generation) {}

    function hashOf(uint _tokenId) public view returns(bytes32) {}

    function migrate(uint _tokenId) public {}

    function setApprovalForAll(address _operator, bool _approved) external {}

    function transferFrom(address _from, address _to, uint256 _tokenId) public {}

    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) public {}

    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {}

    function tokenURI(uint256 _tokenId) public view returns (string memory) {}

    function name() external view returns (string memory) {}

    function symbol() external view returns (string memory) {}

    function totalSupply() external view returns (uint256) {}

    function tokenByIndex(uint256 _index) external view returns(uint256) {}

    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {}

    mapping (bytes4 => bool) internal supportedInterfaces;

    function supportsInterface(bytes4 interfaceID) external view returns (bool) {}
}
```