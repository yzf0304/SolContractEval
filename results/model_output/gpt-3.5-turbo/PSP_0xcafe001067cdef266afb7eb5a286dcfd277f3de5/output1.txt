To create a Solidity smart contract that utilizes the SafeMath library for secure arithmetic operations, you can follow the example below:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./SafeMath.sol";

contract MyContract {
    using SafeMath for uint256;

    uint256 public myNumber;

    constructor() {
        myNumber = 10;
    }

    function addNumber(uint256 value) public {
        myNumber = myNumber.add(value);
    }

    function subtractNumber(uint256 value) public {
        myNumber = myNumber.sub(value);
    }

    function multiplyNumber(uint256 value) public {
        myNumber = myNumber.mul(value);
    }

    function divideNumber(uint256 value) public {
        myNumber = myNumber.div(value);
    }
}
```

In this contract:
- The SafeMath library is imported and used for secure arithmetic operations.
- The `addNumber`, `subtractNumber`, `multiplyNumber`, and `divideNumber` functions demonstrate the usage of SafeMath's `add`, `sub`, `mul`, and `div` functions respectively to perform arithmetic operations on the `myNumber` state variable.

You can deploy this contract on the Ethereum blockchain to ensure secure arithmetic operations using the SafeMath library.