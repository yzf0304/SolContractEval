To generate a Solidity smart contract based on the provided context, you can use the following template:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract YourNFTContract is ERC721, Ownable {
    string private baseURI;
    string private contractURI;
    uint256 private price;
    bool private paused;

    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}

    function setPrice(uint256 _price) external onlyOwner {
        price = _price;
    }

    function toggleMint() external onlyOwner {
        paused = !paused;
    }

    function setBaseURI(string memory baseURI_) external onlyOwner {
        baseURI = baseURI_;
    }

    function setContractURI(string memory _contractURI) external onlyOwner {
        contractURI = _contractURI;
    }

    function tokenURI(uint256 _tokenId) public view override returns (string memory) {
        return string(abi.encodePacked(baseURI, Strings.toString(_tokenId)));
    }
}
```

This template includes the necessary functions and variables based on the provided context. You can further customize and expand upon this template as needed for your specific NFT contract requirements.