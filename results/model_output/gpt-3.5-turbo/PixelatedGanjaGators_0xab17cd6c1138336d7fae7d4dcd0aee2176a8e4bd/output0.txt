To interact with ERC721 tokens in a Solidity smart contract, you can utilize the functions provided in the OpenZeppelin Address library. Here is an example of how you can use some of these functions in your contract:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";

contract MyERC721Contract {
    using Address for address;

    function transferToken(address tokenContract, address to, uint256 tokenId) public {
        // Check if the recipient is a contract
        require(to.isContract(), "Recipient is not a contract");

        // Transfer the token
        // Assuming the token contract implements the ERC721 interface
        // You can call the transfer function here
        // tokenContract.transferFrom(msg.sender, to, tokenId);

        // Example of using the internal _transfer function from the Address library
        // This is just for demonstration purposes and not part of the ERC721 standard
        address(this)._transfer(msg.sender, to, tokenId);
    }
}
```

In this example, the `transferToken` function in your Solidity smart contract uses the `isContract` function from the Address library to check if the recipient address is a contract. It then simulates a token transfer using the `_transfer` function from the Address library. Remember to adapt this code to fit your specific ERC721 token contract and requirements.