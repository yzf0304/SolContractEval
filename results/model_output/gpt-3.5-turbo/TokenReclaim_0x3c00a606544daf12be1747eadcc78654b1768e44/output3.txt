```solidity
contract TokenReclaim {
    mapping (address => string) internal _ethToSphtx;
    mapping (string => string) internal _accountToPubKey;

    event AccountRegister(address ethAccount, string sphtxAccount, string pubKey);

    function register(string memory name, string memory pubKey) public {
        require(bytes(name).length >= 3 && bytes(name).length <= 16, "Name length must be between 3 and 16 characters");
        require(bytes(pubKey).length >= 50 && bytes(pubKey).length <= 64, "Public key length must be between 50 and 64 characters");
        require(validateNameFormat(name), "Invalid name format");
        require(_ethToSphtx[msg.sender] == "", "Address is already registered");
        require(_accountToPubKey[name] == "", "Name is already in use");

        _accountToPubKey[name] = pubKey;
        _ethToSphtx[msg.sender] = name;
        emit AccountRegister(msg.sender, name, pubKey);
    }

    function account(address addr) public view returns (string memory) {
        return _ethToSphtx[addr];
    }

    function keys(address addr) public view returns (string memory) {
        string memory name = _ethToSphtx[addr];
        return _accountToPubKey[name];
    }

    function nameAvailable(string memory name) public view returns (bool) {
        if (bytes(_accountToPubKey[name]).length > 0) {
            return false;
        }
        if (bytes(name).length < 3 || bytes(name).length > 16) {
            return false;
        }
        return validateNameFormat(name);
    }

    function validateNameFormat(string memory name) internal pure returns (bool) {
        bytes memory b = bytes(name);
        if (b.length < 1) {
            return false;
        }
        if (!(b[0] >= 97 && b[0] <= 122) && !(b[0] >= 48 && b[0] <= 57)) {
            return false;
        }
        for (uint i = 1; i < b.length; i++) {
            if (!((b[i] >= 97 && b[i] <= 122) || (b[i] >= 48 && b[i] <= 57) || b[i] == 45 || b[i] == 46)) {
                return false;
            }
        }
        return true;
    }
}
```