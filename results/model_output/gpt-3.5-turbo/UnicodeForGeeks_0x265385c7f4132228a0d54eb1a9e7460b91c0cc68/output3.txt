To create a Solidity smart contract that utilizes the provided OpenZeppelin libraries, you can start by importing the necessary contracts and libraries. Here is an example of how you can structure your contract:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/Address.sol";

contract MyNFT is ERC721, Context {
    using Strings for uint256;
    using Address for address;

    constructor() ERC721("MyNFT", "MNFT") {}

    function mintNFT(address to, uint256 tokenId) external {
        _safeMint(to, tokenId);
    }

    function burnNFT(uint256 tokenId) external {
        _burn(tokenId);
    }

    function transferNFT(address from, address to, uint256 tokenId) external {
        _transfer(from, to, tokenId);
    }
}
```

In this example, the contract `MyNFT` inherits from `ERC721` and uses the `Context` contract provided by OpenZeppelin. It also imports and uses the `Strings` and `Address` libraries for string operations and address-related functions, respectively.

You can further customize this contract to include additional functionality based on your specific requirements for your non-fungible token (NFT) project.