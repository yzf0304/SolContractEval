```solidity
pragma solidity ^0.4.25;

contract BasicToken is ERC20Basic {
    using SafeMath for uint256;

    mapping(address => uint256) balances;
    uint256 totalSupply_;

    /**
     * @notice Returns the total token supply.
     * @dev This function returns the total number of tokens in existence.
     * @return The total supply of tokens.
     */
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    /**
     * @notice Transfers a specified amount of tokens from the message sender to a specified recipient.
     * @dev This function transfers tokens from the message sender to a specified recipient. It ensures
     * that the recipient is not the zero address, the recipient is not the sender, and the sender has
     * sufficient balance. It also calls `_preValidateTransfer` for additional validation before
     * updating the balances and emitting the `Transfer` event.
     * @param _to The address of the recipient.
     * @param _value The amount of tokens to transfer.
     * @return A boolean value indicating whether the transfer was successful.
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        _preValidateTransfer(msg.sender, _to, _value);

        require(_to != address(0));
        require(_to != msg.sender);
        require(balances[msg.sender] >= _value);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);

        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Returns the token balance of a specified address.
     * @dev This function returns the token balance of a specified address.
     * @param _owner The address to query the balance of.
     * @return An uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    /**
     * @dev Internal function to perform pre-validation before a transfer.
     * @param _from The address of the token sender.
     * @param _to The address of the token recipient.
     * @param _value The amount of tokens to transfer.
     */
    function _preValidateTransfer(address _from, address _to, uint256 _value) internal {
        // Add any additional validation logic here if needed
    }
}
```

### Explanation:

- **Imports and Usage of SafeMath**: The contract imports and utilizes the `SafeMath` library for safe arithmetic operations to prevent overflow and underflow issues.

- **State Variables**: It uses a mapping `balances` to track the balance of each address and a `totalSupply_` variable to store the total supply of tokens.

- **Functions**:
  - `totalSupply()`: Returns the total supply of tokens.
  - `transfer(address _to, uint256 _value)`: Handles the transfer of tokens from the sender to the recipient. It checks for sufficient balance and valid recipient address.
  - `balanceOf(address _owner)`: Returns the balance of a given address.
  - `_preValidateTransfer(address _from, address _to, uint256 _value)`: A placeholder for additional transfer validation logic.

- **Events**: Emits a `Transfer` event as defined in `ERC20Basic` when a token transfer occurs.