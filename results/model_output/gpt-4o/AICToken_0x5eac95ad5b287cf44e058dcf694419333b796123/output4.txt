Below is the complete implementation of the `BasicToken` contract according to the provided context and description. The contract strictly follows the instructions, utilizing the provided `ERC20Basic` interface and `SafeMath` library.

```solidity
pragma solidity ^0.4.25;

/**
 * @title BasicToken
 * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.
 * Note they can later distribute these tokens as they wish using `transfer` and other
 * `ERC20` functions.
 */
contract BasicToken is ERC20Basic {
    using SafeMath for uint256;

    mapping(address => uint256) balances;

    uint256 totalSupply_;

    constructor(uint256 _initialSupply) public {
        totalSupply_ = _initialSupply;
        balances[msg.sender] = _initialSupply;
        emit Transfer(address(0), msg.sender, _initialSupply);
    }

    /**
     * @notice Returns the total token supply.
     * @dev This function returns the total number of tokens in existence.
     * @return The total supply of tokens.
     */
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    /**
     * @notice Returns the address of the message sender.
     * @dev This function is a utility function that returns the address of the message sender.
     * @return The address of the message sender.
     */
    function msgSender() public view returns (address) {
        return msg.sender;
    }

    /**
     * @notice Transfers a specified amount of tokens from the message sender to a specified recipient.
     * @dev This function transfers tokens from the message sender to a specified recipient. It ensures
     * that the recipient is not the zero address, the recipient is not the sender, and the sender has
     * sufficient balance. It also calls `_preValidateTransfer` for additional validation before
     * updating the balances and emitting the `Transfer` event.
     * @param _to The address of the recipient.
     * @param _value The amount of tokens to transfer.
     * @return A boolean value indicating whether the transfer was successful.
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        address _from = msgSender();
        _preValidateTransfer(_from, _to, _value);

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Returns the token balance of a specified address.
     * @dev This function returns the token balance of a specified address.
     * @param _owner The address to query the balance of.
     * @return An uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    /**
     * @dev Internal function to perform pre-validation before a transfer.
     * @param _from The address of the token sender.
     * @param _to The address of the token recipient.
     * @param _value The amount of tokens to transfer.
     */
    function _preValidateTransfer(address _from, address _to, uint256 _value) internal {
        require(_to != address(0), "Transfer to the zero address is not allowed.");
        require(_to != _from, "Transfer to self is not allowed.");
        require(balances[_from] >= _value, "Insufficient balance.");
    }
}
```

### Key Points:
- **Constructor**: Initializes the total supply and assigns all tokens to the contract creator's address.
- **SafeMath**: Used for arithmetic operations to prevent overflow issues.
- **ERC20Basic**: Implements the interface defined in the context, including methods for `totalSupply`, `transfer`, and `balanceOf`.
- **Validation**: `_preValidateTransfer` ensures the transfer conditions are met before executing the token transfer.