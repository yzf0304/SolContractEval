```solidity
pragma solidity 0.7.6;

contract AggregationRouter is Permitable, Ownable {
    using SafeMath for uint256;

    address public immutable WETH;
    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);

    uint256 private constant _PARTIAL_FILL = 0x01;
    uint256 private constant _REQUIRES_EXTRA_ETH = 0x02;
    uint256 private constant _SHOULD_CLAIM = 0x04;
    uint256 private constant _BURN_FROM_MSG_SENDER = 0x08;
    uint256 private constant _BURN_FROM_TX_ORIGIN = 0x10;

    struct SwapDescription {
        IERC20 srcToken;
        IERC20 dstToken;
        address srcReceiver;
        address dstReceiver;
        uint256 amount;
        uint256 minReturnAmount;
        uint256 flags;
        bytes permit;
    }

    event Swapped(
        address sender,
        IERC20 srcToken,
        IERC20 dstToken,
        address dstReceiver,
        uint256 spentAmount,
        uint256 returnAmount
    );

    event Exchange(address pair, uint256 amountOut, address output);

    modifier ensure(uint256 deadline) {
        require(deadline >= block.timestamp, "Router: EXPIRED");
        _;
    }

    constructor(address _WETH) public {
        WETH = _WETH;
    }

    receive() external payable {
        require(msg.sender == WETH, "Router: Invalid ETH sender");
    }

    function swap(
        IAggregationExecutor caller,
        SwapDescription calldata desc,
        bytes calldata data
    ) external payable returns (uint256 returnAmount) {
        require(desc.minReturnAmount > 0, "Router: Invalid minReturnAmount");
        require(data.length > 0, "Router: Invalid data");

        uint256 initialBalance = getBalance(desc.dstToken, desc.dstReceiver);
        
        if (!isETH(desc.srcToken)) {
            uint256 prevAllowance = desc.srcToken.allowance(address(this), address(caller));
            if (desc.permit.length > 0) {
                _permit(desc.srcToken, desc.amount, desc.permit);
            }
            TransferHelper.safeTransferFrom(address(desc.srcToken), msg.sender, address(caller), desc.amount);
            if (prevAllowance > 0) {
                TransferHelper.safeApprove(address(desc.srcToken), address(caller), 0);
            }
        }

        uint256 flags = desc.flags;

        if (isETH(desc.srcToken)) {
            require(msg.value == desc.amount, "Router: Incorrect ETH amount");
            TransferHelper.safeTransferETH(address(caller), desc.amount);
        }

        if (flags & _REQUIRES_EXTRA_ETH != 0) {
            require(msg.value > desc.amount, "Router: Insufficient extra ETH");
        }

        caller.callBytes{value: msg.value - desc.amount}(data);

        returnAmount = getBalance(desc.dstToken, desc.dstReceiver).sub(initialBalance);
        require(returnAmount >= desc.minReturnAmount || flags & _PARTIAL_FILL != 0, "Router: Insufficient returnAmount");

        emit Swapped(msg.sender, desc.srcToken, desc.dstToken, desc.dstReceiver, desc.amount, returnAmount);
    }

    function getBalance(IERC20 token, address account) internal view returns (uint256) {
        return isETH(token) ? account.balance : token.balanceOf(account);
    }

    function isETH(IERC20 token) internal pure returns (bool) {
        return address(token) == ETH_ADDRESS;
    }

    function rescueFunds(address token, uint256 amount) external onlyOwner {
        if (token == ETH_ADDRESS) {
            TransferHelper.safeTransferETH(owner(), amount);
        } else {
            TransferHelper.safeTransfer(token, owner(), amount);
        }
    }
}
```

This implementation of the `AggregationRouter` contract includes functionality for swapping tokens with various flags and handling both ETH and ERC20 tokens. It also provides a way for the contract owner to rescue funds.