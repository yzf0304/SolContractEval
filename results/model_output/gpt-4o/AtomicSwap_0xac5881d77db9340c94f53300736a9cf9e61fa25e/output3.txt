Below is the complete and functional implementation of the `AtomicSwap` smart contract according to the provided context and requirements:

```solidity
pragma solidity 0.5.16;

import "openzeppelin-contracts/contracts/math/SafeMath.sol";
import "openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol";
import "openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol";

/**
 * @title AtomicSwap
 * @author 
 * @notice This contract facilitates atomic swaps between two parties using a hashed secret.
 * @dev Implements non-reentrancy guard and uses SafeMath and SafeERC20 for secure arithmetic and token operations.
 */
contract AtomicSwap is ReentrancyGuard {
    using SafeMath for uint;
    using SafeERC20 for IERC20;

    enum State { Empty, Initiated, Redeemed, Refunded }

    struct Swap {
        bytes32 hashedSecret;
        bytes32 secret;
        address contractAddr;
        address participant;
        address payable initiator;
        uint refundTimestamp;
        uint countdown;
        uint value;
        uint payoff;
        bool active;
        State state;
    }
    
    event Initiated(
        bytes32 indexed _hashedSecret,
        address indexed _contract,
        address indexed _participant,
        address _initiator,
        uint _refundTimestamp,
        uint _countdown,
        uint _value,
        uint _payoff,
        bool _active
    );
    event Added(
        bytes32 indexed _hashedSecret,
        address _sender,
        uint _value  
    );
    event Activated(
        bytes32 indexed _hashedSecret
    );
    event Redeemed(
        bytes32 indexed _hashedSecret,
        bytes32 _secret
    );
    event Refunded(
        bytes32 indexed _hashedSecret
    );

    mapping(bytes32 => Swap) public swaps;

    modifier onlyByInitiator(bytes32 _hashedSecret) {
        require(msg.sender == swaps[_hashedSecret].initiator, "sender is not the initiator");
        _;
    }

    modifier isInitiatable(bytes32 _hashedSecret, address _participant, uint _refundTimestamp, uint _countdown) {
        require(_participant != address(0), "invalid participant address");
        require(swaps[_hashedSecret].state == State.Empty, "swap for this hash is initiated");
        require(block.timestamp <= _refundTimestamp, "invalid refundTimestamp");
        require(_countdown < _refundTimestamp, "invalid countdown");
        _;
    }
    
    modifier isInitiated(bytes32 _hashedSecret) {
        require(swaps[_hashedSecret].state == State.Initiated, "swap for this hash is empty or spent");
        _;
    }

    modifier isAddable(bytes32 _hashedSecret) {
        require(block.timestamp <= swaps[_hashedSecret].refundTimestamp, "refundTimestamp has come");
        _;
    }
        
    modifier isActivated(bytes32 _hashedSecret) {
        require(swaps[_hashedSecret].active, "swap is not active");
        _;
    }    
    
    modifier isNotActivated(bytes32 _hashedSecret) {
        require(!swaps[_hashedSecret].active, "swap is active");
        _;
    }

    modifier isRedeemable(bytes32 _hashedSecret, bytes32 _secret) {
        require(block.timestamp <= swaps[_hashedSecret].refundTimestamp, "refundTimestamp has come");
        require(sha256(abi.encodePacked(sha256(abi.encodePacked(_secret)))) == _hashedSecret, "secret is not correct");
        _;
    }

    modifier isRefundable(bytes32 _hashedSecret) {
        require(block.timestamp > swaps[_hashedSecret].refundTimestamp, "refundTimestamp has not come");
        _;
    }

    function initiate(bytes32 _hashedSecret, address _contract, address _participant, uint _refundTimestamp, uint _countdown, uint _value, uint _payoff, bool _active)
        public nonReentrant isInitiatable(_hashedSecret, _participant, _refundTimestamp, _countdown)
    {
        swaps[_hashedSecret] = Swap({
            hashedSecret: _hashedSecret,
            secret: bytes32(0),
            contractAddr: _contract,
            participant: _participant,
            initiator: msg.sender,
            refundTimestamp: _refundTimestamp,
            countdown: _countdown,
            value: _value,
            payoff: _payoff,
            active: _active,
            state: State.Initiated
        });
        
        emit Initiated(_hashedSecret, _contract, _participant, msg.sender, _refundTimestamp, _countdown, _value, _payoff, _active);
    }

    function add(bytes32 _hashedSecret, uint _value)
        public nonReentrant isInitiated(_hashedSecret) isAddable(_hashedSecret)    
    {
        swaps[_hashedSecret].value = swaps[_hashedSecret].value.add(_value);

        emit Added(_hashedSecret, msg.sender, _value);
    }

    function activate(bytes32 _hashedSecret)
        public nonReentrant isInitiated(_hashedSecret) isNotActivated(_hashedSecret) onlyByInitiator(_hashedSecret)
    {
        swaps[_hashedSecret].active = true;

        emit Activated(_hashedSecret);
    }

    function redeem(bytes32 _hashedSecret, bytes32 _secret) 
        public nonReentrant isInitiated(_hashedSecret) isActivated(_hashedSecret) isRedeemable(_hashedSecret, _secret) 
    {
        Swap memory swap = swaps[_hashedSecret];
        swap.secret = _secret;
        swap.state = State.Redeemed;

        if (block.timestamp > swap.refundTimestamp - swap.countdown) {
            IERC20(swap.contractAddr).safeTransfer(swap.participant, swap.value);
            IERC20(swap.contractAddr).safeTransfer(msg.sender, swap.payoff);
        } else {
            uint totalValue = swap.value.add(swap.payoff);
            IERC20(swap.contractAddr).safeTransfer(swap.participant, totalValue);
        }

        emit Redeemed(_hashedSecret, _secret);
        delete swaps[_hashedSecret];
    }

    function refund(bytes32 _hashedSecret)
        public nonReentrant isInitiated(_hashedSecret) isRefundable(_hashedSecret) 
    {
        Swap memory swap = swaps[_hashedSecret];
        swap.state = State.Refunded;

        IERC20(swap.contractAddr).safeTransfer(swap.initiator, swap.value.add(swap.payoff));

        emit Refunded(_hashedSecret);
        delete swaps[_hashedSecret];
    }
}
```

This implementation ensures all required functionality is included, adheres to the given context, and leverages the necessary OpenZeppelin libraries and best practices.