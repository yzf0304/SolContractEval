Below is the completed implementation of the `BALC` smart contract based on the description and context provided:

```solidity
pragma solidity ^0.5.1;

contract BALC is Ownable {
	using SafeMath for uint256;

	string private name_;
	string private symbol_;
	uint256 private decimals_;
	uint256 private totalSupply_;
	bool private paused_;

	mapping(address => uint256) internal balances;
	mapping(address => mapping(address => uint256)) internal allowed;

	event Transfer(address indexed from, address indexed to, uint256 value);
	event Approval(address indexed owner, address indexed spender, uint256 value);
	event Pause();
	event Unpause();

	constructor(string memory _name, string memory _symbol, uint256 _decimals, uint256 _totalSupply, address _owner) public {
		name_ = _name;
		symbol_ = _symbol;
		decimals_ = _decimals;
		totalSupply_ = _totalSupply.mul(10 ** decimals_);
		paused_ = false;
		owner_ = _owner;
		balances[owner_] = totalSupply_;
	}

	function name() public view returns (string memory) {
		return name_;
	}

	function symbol() public view returns (string memory) {
		return symbol_;
	}

	function decimals() public view returns (uint256) {
		return decimals_;
	}

	function totalSupply() public view returns (uint256) {
		return totalSupply_;
	}

	function isPaused() public view returns (bool) {
		return paused_;
	}

	modifier whenNotPaused() {
		require(!paused_, "Contract is paused");
		_;
	}

	modifier whenPaused() {
		require(paused_, "Contract is not paused");
		_;
	}

	function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
		require(_to != address(0), "Invalid recipient");
		require(balances[msg.sender] >= _value, "Insufficient balance");

		balances[msg.sender] = balances[msg.sender].sub(_value);
		balances[_to] = balances[_to].add(_value);
		emit Transfer(msg.sender, _to, _value);

		return true;
	}

	function balanceOf(address _account) public view returns (uint256) {
		return balances[_account];
	}

	function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
		require(_spender != address(0), "Invalid spender");

		allowed[msg.sender][_spender] = _value;
		emit Approval(msg.sender, _spender, _value);

		return true;
	}

	function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
		require(_from != address(0), "Invalid sender");
		require(_to != address(0), "Invalid recipient");
		require(balances[_from] >= _value, "Insufficient balance");
		require(allowed[_from][msg.sender] >= _value, "Transfer amount exceeds allowance");

		balances[_from] = balances[_from].sub(_value);
		balances[_to] = balances[_to].add(_value);
		allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
		emit Transfer(_from, _to, _value);

		return true;
	}

	function allowance(address _owner, address _spender) public view returns (uint256) {
		return allowed[_owner][_spender];
	}

	function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool success) {
		require(_spender != address(0), "Invalid spender");

		allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
		emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);

		return true;
	}

	function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool success) {
		require(_spender != address(0), "Invalid spender");

		uint256 currentAllowance = allowed[msg.sender][_spender];
		if (_subtractedValue >= currentAllowance) {
			allowed[msg.sender][_spender] = 0;
		} else {
			allowed[msg.sender][_spender] = currentAllowance.sub(_subtractedValue);
		}
		emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);

		return true;
	}

	function pause() onlyOwner whenNotPaused public returns (bool) {
		paused_ = true;
		emit Pause();

		return true;
	}

	function unpause() onlyOwner whenPaused public returns (bool) {
		paused_ = false;
		emit Unpause();

		return true;
	}
}
```

### Explanation of Implementation
1. **Token Initialization**:
   - The constructor initializes the token parameters (name, symbol, decimals, and total supply) and assigns the total supply to the contract's owner.

2. **ERC20-Like Functions**:
   - `transfer`: Allows token transfers between addresses.
   - `balanceOf`: Retrieves the balance of a specific address.
   - `approve`: Sets an allowance for a spender.
   - `transferFrom`: Facilitates transfers based on an approved allowance.
   - `allowance`: Returns the amount a spender is allowed to withdraw.
   - `increaseApproval` and `decreaseApproval`: Adjust the spender's allowance.

3. **Pausable Functionality**:
   - The `pause` and `unpause` functions allow the owner to enable or disable contract operations that require `whenNotPaused`.

4. **Modifiers**:
   - `whenNotPaused`: Ensures that a function is only executed when the contract is not paused.
   - `whenPaused`: Ensures that a function is only executed when the contract is paused.

5. **Events**:
   - Emits `Transfer`, `Approval`, `Pause`, and `Unpause` events for transparency and easy tracking of contract actions.

This contract adheres strictly to the requirements and avoids introducing any new contracts.