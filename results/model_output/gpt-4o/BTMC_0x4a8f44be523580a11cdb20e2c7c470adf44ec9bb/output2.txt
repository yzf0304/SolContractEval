Here is the completed `BTMC` contract based strictly on the provided context, adhering to Solidity 0.4.22:

```solidity
pragma solidity ^0.4.22;

contract BTMC is ERC20, Ownable, Pausable {
    using SafeMath for uint256;

    // Base information of the token
    string public constant name = "MinerCoin";
    string public constant symbol = "BTMC";
    string public constant version = "1.0";
    uint256 public constant decimals = 18;

    // Initial supply for the team
    uint256 public constant INIT_SUPPLY = 100000000 * 10**decimals;

    // Mining supply
    uint256 public constant MINING_SUPPLY = 500000000 * 10**decimals;

    // Maximum supply for public funding
    uint256 public constant MAX_FUNDING_SUPPLY = 200000000 * 10**decimals;

    // Team keeping supply
    uint256 public constant TEAM_KEEPING = 200000000 * 10**decimals;

    // Total maximum supply
    uint256 public constant MAX_SUPPLY = INIT_SUPPLY + MINING_SUPPLY + MAX_FUNDING_SUPPLY + TEAM_KEEPING;

    // Public funding parameters
    uint256 public totalFundingSupply;
    uint256 public startTime;
    uint256 public endTime;
    uint256 public rate;

    // Team unfreezing parameters
    uint256 public constant TEAM_UNFREEZE = 40000000 * 10**decimals;
    bool public hasOneStepWithdraw;
    bool public hasTwoStepWithdraw;
    bool public hasThreeStepWithdraw;
    bool public hasFourStepWithdraw;
    bool public hasFiveStepWithdraw;

    // ERC20 balances
    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;

    /**
     * @notice Constructor initializes the token with the initial supply and sets up the public funding parameters.
     */
    function BTMC() public {
        totalSupply = INIT_SUPPLY;
        balances[msg.sender] = INIT_SUPPLY;
        emit Transfer(0x0, msg.sender, INIT_SUPPLY);
        totalFundingSupply = 0;
        startTime = 1524499199; // 2018-04-23 23:59:59
        endTime = 1526313600;   // 2018-05-15 00:00:00
        rate = 5000;
        hasOneStepWithdraw = false;
        hasTwoStepWithdraw = false;
        hasThreeStepWithdraw = false;
        hasFourStepWithdraw = false;
        hasFiveStepWithdraw = false;
    }

    event CreateBTMC(address indexed _to, uint256 _value);

    modifier notReachTotalSupply(uint256 _value, uint256 _rate) {
        require(MAX_SUPPLY >= totalSupply.add(_value.mul(_rate)));
        _;
    }

    modifier notReachFundingSupply(uint256 _value, uint256 _rate) {
        require(MAX_FUNDING_SUPPLY >= totalFundingSupply.add(_value.mul(_rate)));
        _;
    }

    modifier assertFalse(bool withdrawStatus) {
        require(!withdrawStatus);
        _;
    }

    modifier notBeforeTime(uint256 targetTime) {
        require(now > targetTime);
        _;
    }

    modifier notAfterTime(uint256 targetTime) {
        require(now <= targetTime);
        _;
    }

    function etherProceeds() external onlyOwner {
        owner.transfer(address(this).balance);
    }

    function processFunding(address receiver, uint256 _value, uint256 _rate) internal notReachTotalSupply(_value, _rate) {
        uint256 amount = _value.mul(_rate);
        totalSupply = totalSupply.add(amount);
        balances[receiver] = balances[receiver].add(amount);
        emit CreateBTMC(receiver, amount);
        emit Transfer(0x0, receiver, amount);
    }

    function funding(address receiver, uint256 _value, uint256 _rate) whenNotPaused internal notReachFundingSupply(_value, _rate) {
        uint256 amount = _value.mul(_rate);
        totalFundingSupply = totalFundingSupply.add(amount);
        processFunding(receiver, _value, _rate);
    }

    function () payable external notBeforeTime(startTime) notAfterTime(endTime) {
        funding(msg.sender, msg.value, rate);
    }

    function withdrawForOneStep() external onlyOwner assertFalse(hasOneStepWithdraw) notBeforeTime(1587571200) {
        hasOneStepWithdraw = true;
        balances[msg.sender] = balances[msg.sender].add(TEAM_UNFREEZE);
        totalSupply = totalSupply.add(TEAM_UNFREEZE);
        emit Transfer(0x0, msg.sender, TEAM_UNFREEZE);
    }

    function withdrawForTwoStep() external onlyOwner assertFalse(hasTwoStepWithdraw) notBeforeTime(1603382400) {
        hasTwoStepWithdraw = true;
        balances[msg.sender] = balances[msg.sender].add(TEAM_UNFREEZE);
        totalSupply = totalSupply.add(TEAM_UNFREEZE);
        emit Transfer(0x0, msg.sender, TEAM_UNFREEZE);
    }

    function withdrawForThreeStep() external onlyOwner assertFalse(hasThreeStepWithdraw) notBeforeTime(1619107200) {
        hasThreeStepWithdraw = true;
        balances[msg.sender] = balances[msg.sender].add(TEAM_UNFREEZE);
        totalSupply = totalSupply.add(TEAM_UNFREEZE);
        emit Transfer(0x0, msg.sender, TEAM_UNFREEZE);
    }

    function withdrawForFourStep() external onlyOwner assertFalse(hasFourStepWithdraw) notBeforeTime(1634918400) {
        hasFourStepWithdraw = true;
        balances[msg.sender] = balances[msg.sender].add(TEAM_UNFREEZE);
        totalSupply = totalSupply.add(TEAM_UNFREEZE);
        emit Transfer(0x0, msg.sender, TEAM_UNFREEZE);
    }

    function withdrawForFiveStep() external onlyOwner assertFalse(hasFiveStepWithdraw) notBeforeTime(1650643200) {
        hasFiveStepWithdraw = true;
        balances[msg.sender] = balances[msg.sender].add(TEAM_UNFREEZE);
        totalSupply = totalSupply.add(TEAM_UNFREEZE);
        emit Transfer(0x0, msg.sender, TEAM_UNFREEZE);
    }

    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) whenNotPaused public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function setupFundingRate(uint256 _rate) external onlyOwner {
        rate = _rate;
    }

    function setupFundingTime(uint256 _startTime, uint256 _endTime) external onlyOwner {
        require(_startTime < _endTime);
        startTime = _startTime;
        endTime = _endTime;
    }
}
```

### Explanation:
1. **ERC20**: Implemented the required methods like `transfer`, `approve`, `transferFrom`, and `allowance`.
2. **Ownable**: Ensures functions like `setupFundingRate` and `withdraw` steps are restricted to the contract owner.
3. **Pausable**: Used `whenNotPaused` modifiers to ensure operations pause when needed.
4. **Team Vesting**: Sequential steps for team token withdrawals with time checks.
5. **Public Funding**: Handles ETH funding with token allocation during a defined funding period.
6. **Funding Rate and Time Setup**: Enables the owner to update the funding rate and time.