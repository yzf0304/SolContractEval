```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract BankruptFTXYachtClub is ERC721A, Ownable {
    using Strings for uint256;

    string private uriPrefix = "";
    string private uriSuffix = ".json";
    string public hiddenURL = "ipfs://hidden.json";

    uint256 public cost = 0.0025 ether;

    uint16 public maxSupply = 6969;
    uint8 public maxMintAmountPerTx = 21;
    uint8 public maxFreeMintAmountPerWallet = 1;

    bool public paused = true;
    bool public reveal = false;

    mapping(address => uint8) public NFTPerPublicAddress;

    constructor() ERC721A("Bankrupt FTX Yacht Club", "BFTX") {}

    function mint(uint8 _mintAmount) external payable {
        require(!paused, "Minting is paused");
        require(_mintAmount > 0 && _mintAmount <= maxMintAmountPerTx, "Invalid mint amount");
        require(totalSupply() + _mintAmount <= maxSupply, "Exceeds max supply");

        uint8 freeMintsLeft = maxFreeMintAmountPerWallet - NFTPerPublicAddress[msg.sender];
        uint256 price = freeMintsLeft >= _mintAmount ? 0 : (_mintAmount - freeMintsLeft) * cost;

        require(msg.value >= price, "Insufficient ETH sent");

        NFTPerPublicAddress[msg.sender] += _mintAmount;
        _safeMint(msg.sender, _mintAmount);
    }

    function Reserve(uint16 _mintAmount, address _receiver) external onlyOwner {
        require(totalSupply() + _mintAmount <= maxSupply, "Exceeds max supply");
        _safeMint(_receiver, _mintAmount);
    }

    function Airdrop(uint8 _amountPerAddress, address[] calldata addresses) external onlyOwner {
        require(totalSupply() + addresses.length * _amountPerAddress <= maxSupply, "Exceeds max supply");
        for (uint256 i = 0; i < addresses.length; i++) {
            _safeMint(addresses[i], _amountPerAddress);
        }
    }

    function setMaxSupply(uint16 _maxSupply) external onlyOwner {
        require(_maxSupply >= totalSupply(), "New supply must be >= current supply");
        maxSupply = _maxSupply;
    }

    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
        require(_exists(_tokenId), "ERC721Metadata: URI query for nonexistent token");
        if (!reveal) {
            return hiddenURL;
        }
        return string(abi.encodePacked(_baseURI(), _tokenId.toString(), uriSuffix));
    }

    function setFreeMaxLimitPerAddress(uint8 _limit) external onlyOwner {
        maxFreeMintAmountPerWallet = _limit;
    }

    function setUriPrefix(string memory _uriPrefix) external onlyOwner {
        uriPrefix = _uriPrefix;
    }

    function setHiddenUri(string memory _uriPrefix) external onlyOwner {
        hiddenURL = _uriPrefix;
    }

    function setPaused() external onlyOwner {
        paused = !paused;
    }

    function setCost(uint256 _cost) external onlyOwner {
        cost = _cost;
    }

    function setRevealed() external onlyOwner {
        reveal = !reveal;
    }

    function setMaxMintAmountPerTx(uint8 _maxtx) external onlyOwner {
        maxMintAmountPerTx = _maxtx;
    }

    function withdraw() external onlyOwner {
        (bool success, ) = payable(owner()).call{value: address(this).balance}("");
        require(success, "Withdrawal failed");
    }

    function _baseURI() internal view override returns (string memory) {
        return uriPrefix;
    }

    receive() external payable {}
}
``` 

### Explanation:
1. **Mint Functionality**:
   - Ensures the contract is not paused.
   - Validates mint amount and checks if it exceeds the `maxSupply`.
   - Adjusts payment based on free mints available per wallet.

2. **Owner Reserved/Airdrop Functions**:
   - Handles batch minting for reserved mints and airdrops, ensuring total supply does not exceed the maximum.

3. **Metadata and URI Control**:
   - Returns a hidden URI if the NFTs are not revealed yet.
   - Allows the owner to set the URI prefix and suffix, hidden URI, and toggle the revealed state.

4. **Supply and Cost Control**:
   - Functions for the owner to adjust maximum supply, mint cost, and per-transaction limits.

5. **Pause and Withdraw**:
   - Allows the owner to pause or resume minting.
   - Facilitates safe withdrawal of contract balance by the owner.

6. **Receive Fallback**:
   - Allows the contract to receive Ether directly. 

The contract adheres strictly to the provided context and description, ensuring functionality for minting, reserving, airdropping, pausing, and revealing the NFT collection.