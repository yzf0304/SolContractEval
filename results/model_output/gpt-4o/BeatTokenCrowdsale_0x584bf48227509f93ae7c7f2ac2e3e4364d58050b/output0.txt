Below is the completed Solidity smart contract `BeatTokenCrowdsale` based on the provided context and requirements:

```solidity
pragma solidity ^0.4.18;

contract BeatTokenCrowdsale is Ownable {
    using SafeMath for uint256;

    enum Stages {
        Deployed,
        PreIco,
        IcoPhase1,
        IcoPhase2,
        IcoPhase3,
        IcoEnded,
        Finalized
    }

    Stages public stage;
    BeatToken public token;

    uint256 public contractStartTime;
    uint256 public preIcoEndTime;
    uint256 public icoPhase1EndTime;
    uint256 public icoPhase2EndTime;
    uint256 public icoPhase3EndTime;
    uint256 public contractEndTime;

    address public ethTeamWallet;
    address public beatTeamWallet;

    uint256 public ethWeiRaised;

    mapping(address => uint256) public balanceOf;

    uint256 public ethPriceInEuroCent;

    event BeatTokenPurchased(address indexed purchaser, address indexed beneficiary, uint256 ethWeiAmount, uint256 beatWeiAmount);
    event BeatTokenEthPriceChanged(uint256 newPrice);
    event BeatTokenPreIcoStarted();
    event BeatTokenIcoPhase1Started();
    event BeatTokenIcoPhase2Started();
    event BeatTokenIcoPhase3Started();
    event BeatTokenIcoFinalized();

    function BeatTokenCrowdsale(address _ethTeamWallet, address _beatTeamWallet) public {
        require(_ethTeamWallet != address(0));
        require(_beatTeamWallet != address(0));

        token = new BeatToken(HARD_CAP);
        stage = Stages.Deployed;
        ethTeamWallet = _ethTeamWallet;
        beatTeamWallet = _beatTeamWallet;
        ethPriceInEuroCent = 0;

        contractStartTime = 0;
        preIcoEndTime = 0;
        icoPhase1EndTime = 0;
        icoPhase2EndTime = 0;
        icoPhase3EndTime = 0;
        contractEndTime = 0;
    }

    function setEtherPriceInEuroCent(uint256 _ethPriceInEuroCent) onlyOwner public {
        require(_ethPriceInEuroCent > 0);
        ethPriceInEuroCent = _ethPriceInEuroCent;
        BeatTokenEthPriceChanged(_ethPriceInEuroCent);
    }

    function start() onlyOwner public {
        require(stage == Stages.Deployed);
        contractStartTime = now;
        preIcoEndTime = contractStartTime + PRE_ICO_PERIOD;
        stage = Stages.PreIco;
        BeatTokenPreIcoStarted();
    }

    function finalize() onlyOwner public {
        require(stage == Stages.IcoEnded);
        require(now > contractEndTime);

        uint256 unsoldTokens = HARD_CAP.sub(token.totalSupply());
        token.mint(beatTeamWallet, unsoldTokens);
        stage = Stages.Finalized;
        BeatTokenIcoFinalized();
    }

    function() payable public {
        buyTokens(msg.sender);
    }

    function buyTokens(address beneficiary) payable public {
        require(beneficiary != address(0));
        require(msg.value > 0);
        require(isWithinValidIcoPhase());

        uint256 ethWeiAmount = msg.value;
        uint256 beatWeiAmount = calculateBeatWeiAmount(ethWeiAmount);

        require(isWithinTokenAllocLimit(beatWeiAmount));

        ethWeiRaised = ethWeiRaised.add(ethWeiAmount);

        token.mint(beneficiary, beatWeiAmount);
        balanceOf[beneficiary] = balanceOf[beneficiary].add(beatWeiAmount);

        ethTeamWallet.transfer(ethWeiAmount);

        BeatTokenPurchased(msg.sender, beneficiary, ethWeiAmount, beatWeiAmount);

        determineCurrentStage(beatWeiAmount);
    }

    function isWithinValidIcoPhase() internal view returns (bool) {
        return stage == Stages.PreIco || stage == Stages.IcoPhase1 || stage == Stages.IcoPhase2 || stage == Stages.IcoPhase3;
    }

    function calculateBeatWeiAmount(uint256 ethWeiAmount) internal view returns (uint256) {
        uint256 euroCentAmount = ethWeiAmount.mul(ethPriceInEuroCent).div(10 ** 18);
        uint256 beatWeiAmount = euroCentAmount.mul(10 ** 18);

        if (stage == Stages.PreIco) {
            beatWeiAmount = beatWeiAmount.add(beatWeiAmount.mul(PRE_ICO_BONUS_PERCENTAGE).div(100));
        } else if (stage == Stages.IcoPhase1) {
            beatWeiAmount = beatWeiAmount.add(beatWeiAmount.mul(ICO_PHASE1_BONUS_PERCENTAGE).div(100));
        } else if (stage == Stages.IcoPhase2) {
            beatWeiAmount = beatWeiAmount.add(beatWeiAmount.mul(ICO_PHASE2_BONUS_PERCENTAGE).div(100));
        } else if (stage == Stages.IcoPhase3) {
            beatWeiAmount = beatWeiAmount.add(beatWeiAmount.mul(ICO_PHASE3_BONUS_PERCENTAGE).div(100));
        }

        return beatWeiAmount;
    }

    function isWithinTokenAllocLimit(uint256 beatWeiAmount) internal view returns (bool) {
        uint256 newTotalSupply = token.totalSupply().add(beatWeiAmount);

        if (stage == Stages.PreIco) {
            return newTotalSupply <= PRE_ICO_LIMIT;
        } else if (stage == Stages.IcoPhase1) {
            return newTotalSupply <= ICO_PHASE1_LIMIT;
        } else if (stage == Stages.IcoPhase2) {
            return newTotalSupply <= ICO_PHASE2_LIMIT;
        } else if (stage == Stages.IcoPhase3) {
            return newTotalSupply <= ICO_PHASE3_LIMIT;
        }

        return false;
    }

    function determineCurrentStage(uint256 beatWeiAmount) internal {
        uint256 newTotalSupply = token.totalSupply().add(beatWeiAmount);

        if (stage == Stages.PreIco && (newTotalSupply > PRE_ICO_LIMIT || now > preIcoEndTime)) {
            stage = Stages.IcoPhase1;
            icoPhase1EndTime = now + ICO_PHASE1_PERIOD;
            BeatTokenIcoPhase1Started();
        } else if (stage == Stages.IcoPhase1 && (newTotalSupply > ICO_PHASE1_LIMIT || now > icoPhase1EndTime)) {
            stage = Stages.IcoPhase2;
            icoPhase2EndTime = now + ICO_PHASE2_PERIOD;
            BeatTokenIcoPhase2Started();
        } else if (stage == Stages.IcoPhase2 && (newTotalSupply > ICO_PHASE2_LIMIT || now > icoPhase2EndTime)) {
            stage = Stages.IcoPhase3;
            icoPhase3EndTime = now + ICO_PHASE3_PERIOD;
            BeatTokenIcoPhase3Started();
        } else if (stage == Stages.IcoPhase3 && (newTotalSupply >= ICO_PHASE3_LIMIT || now > icoPhase3EndTime)) {
            stage = Stages.IcoEnded;
            contractEndTime = now;
        }
    }
}
```

### Key Notes:
1. **Backward Compatibility:** The contract uses Solidity version `0.4.18` and strictly adheres to its syntax and features.
2. **Events:** Proper events are emitted to log key contract actions.
3. **Validations:** Critical validations are applied to ensure the ICO phases, ETH price settings, token allocations, and transitions between phases work correctly.
4. **Bonus Calculations:** Bonus percentages for each stage are included in the `calculateBeatWeiAmount` function.
5. **Stage Transitions:** The `determineCurrentStage` function updates the stage based on the token supply and time.

This implementation strictly fulfills the requirements outlined in your description!