Here is the completed implementation of the `Admin` contract based on the provided context and given requirements:

```solidity
pragma solidity 0.5.17;

contract Admin is Variable, Modifiers, Event {
    using SafeMath for uint256;

    /**
     * @notice Allows the owner to burn a specified amount of tokens from their balance.
     * @dev The function checks if the sender has enough balance before burning the tokens and updates the total supply accordingly.
     * @param _value The amount of tokens to be burned.
     * @return success A boolean indicating whether the operation was successful.
     */
    function tokenBurn(uint256 _value) public isOwner returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Admin: Insufficient balance to burn");
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        totalSupply = totalSupply.sub(_value);
        emit TokenBurn(msg.sender, _value); // Emit the burn event
        emit Transfer(msg.sender, address(0), _value); // Emit a transfer event to address(0) to indicate burning
        return true;
    }

    /**
     * @notice Allows the owner to add an address to the list of allowed addresses.
     * @dev The function sets the `_address` as allowed, which can be used in other functions to check permissions.
     * @param _address The address to be added to the allowed list.
     */
    function addAllowedAddress(address _address) public isOwner {
        require(!allowedAddress[_address], "Admin: Address is already in the allowed list");
        allowedAddress[_address] = true;
    }

    /**
     * @notice Allows the owner to remove an address from the list of allowed addresses.
     * @dev The function ensures that the owner's address cannot be removed from the allowed list.
     * @param _address The address to be removed from the allowed list.
     */
    function deleteAllowedAddress(address _address) public isOwner {
        require(_address != owner, "Admin: Cannot remove owner from the allowed list");
        require(allowedAddress[_address], "Admin: Address is not in the allowed list");
        allowedAddress[_address] = false;
    }

    /**
     * @notice Allows the owner to add an address to the list of blocked addresses.
     * @dev The function ensures that the owner's address cannot be added to the blocked list.
     * @param _address The address to be added to the blocked list.
     */
    function addBlockedAddress(address _address) public isOwner {
        require(_address != owner, "Admin: Cannot block the owner's address");
        require(!blockedAddress[_address], "Admin: Address is already in the blocked list");
        blockedAddress[_address] = true;
    }

    /**
     * @notice Allows the owner to remove an address from the list of blocked addresses.
     * @dev The function removes the `_address` from the blocked list, allowing it to perform certain actions again.
     * @param _address The address to be removed from the blocked list.
     */
    function deleteBlockedAddress(address _address) public isOwner {
        require(blockedAddress[_address], "Admin: Address is not in the blocked list");
        blockedAddress[_address] = false;
    }

    /**
     * @notice Allows the owner to set or unset the transfer lock.
     * @dev The function toggles the `transferLock` state, which can be used to enable or disable token transfers.
     * @param _transferLock The new state of the transfer lock (true to enable, false to disable).
     * @return success A boolean indicating whether the operation was successful.
     */
    function setTransferLock(bool _transferLock) public isOwner returns (bool success) {
        transferLock = _transferLock;
        return true;
    }
}
```

### Explanation of Each Function:

1. **`tokenBurn(uint256 _value)`**:
   - Verifies that the owner has enough tokens to burn.
   - Deducts `_value` from the owner's balance and reduces the `totalSupply`.
   - Emits a `TokenBurn` event and a `Transfer` event (to `address(0)` for burning).

2. **`addAllowedAddress(address _address)`**:
   - Ensures that the address is not already in the allowed list.
   - Adds the `_address` to the `allowedAddress` list.

3. **`deleteAllowedAddress(address _address)`**:
   - Ensures that the owner cannot be removed from the allowed list.
   - Removes the `_address` from the `allowedAddress` list.

4. **`addBlockedAddress(address _address)`**:
   - Ensures that the owner cannot be added to the blocked list.
   - Adds the `_address` to the `blockedAddress` list.

5. **`deleteBlockedAddress(address _address)`**:
   - Removes the `_address` from the `blockedAddress` list.

6. **`setTransferLock(bool _transferLock)`**:
   - Changes the state of the `transferLock` to the provided `_transferLock` value.
   - Returns `true` for successful execution.

This implementation follows the provided guidelines, adheres to Solidity 0.5.17 syntax, and ensures the correct use of SafeMath, modifiers, and event emission.