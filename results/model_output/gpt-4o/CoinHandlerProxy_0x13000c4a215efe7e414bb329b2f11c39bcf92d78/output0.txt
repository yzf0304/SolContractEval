Here is the completed `proxy` contract code based on your context and description. It follows Solidity `v0.6.12` conventions and does not introduce any new contracts:

```solidity
pragma solidity 0.6.12;

interface marketManagerInterface {}
interface interestModelInterface {}
interface marketHandlerDataStorageInterface {}
interface marketSIHandlerDataStorageInterface {}

contract proxy {
    address payable owner;

    uint256 handlerID;

    string tokenName = "ether";

    uint256 constant unifiedPoint = 10 ** 18;

    marketManagerInterface marketManager;

    interestModelInterface interestModelInstance;

    marketHandlerDataStorageInterface handlerDataStorage;

    marketSIHandlerDataStorageInterface SIHandlerDataStorage;

    address public handler;

    address public SI;

    string DEPOSIT = "deposit(uint256,bool)";
    string REDEEM = "withdraw(uint256,bool)";
    string BORROW = "borrow(uint256,bool)";
    string REPAY = "repay(uint256,bool)";

    modifier onlyOwner {
        require(msg.sender == owner, "Ownable: caller is not the owner");
        _;
    }

    modifier onlyMarketManager {
        address msgSender = msg.sender;
        require((msgSender == address(marketManager)) || (msgSender == owner), "onlyMarketManager function");
        _;
    }

    constructor () public {
        owner = msg.sender;
    }

    function ownershipTransfer(address _owner) onlyOwner external returns (bool) {
        require(_owner != address(0), "Invalid address");
        owner = payable(_owner);
        return true;
    }

    function initialize(
        uint256 _handlerID,
        address handlerAddr,
        address marketManagerAddr,
        address interestModelAddr,
        address marketDataStorageAddr,
        address siHandlerAddr,
        address SIHandlerDataStorageAddr
    ) onlyOwner public returns (bool) {
        handlerID = _handlerID;
        handler = handlerAddr;
        marketManager = marketManagerInterface(marketManagerAddr);
        interestModelInstance = interestModelInterface(interestModelAddr);
        handlerDataStorage = marketHandlerDataStorageInterface(marketDataStorageAddr);
        SIHandlerDataStorage = marketSIHandlerDataStorageInterface(SIHandlerDataStorageAddr);
        SI = siHandlerAddr;
        return true;
    }

    function setHandlerID(uint256 _handlerID) onlyOwner public returns (bool) {
        handlerID = _handlerID;
        return true;
    }

    function setHandlerAddr(address handlerAddr) onlyOwner public returns (bool) {
        handler = handlerAddr;
        return true;
    }

    function setSiHandlerAddr(address siHandlerAddr) onlyOwner public returns (bool) {
        SI = siHandlerAddr;
        return true;
    }

    function getHandlerID() public view returns (uint256) {
        return handlerID;
    }

    function getHandlerAddr() public view returns (address) {
        return handler;
    }

    function getSiHandlerAddr() public view returns (address) {
        return SI;
    }

    function migration(address payable target) onlyOwner public returns (bool) {
        require(target != address(0), "Invalid address");
        target.transfer(address(this).balance);
        return true;
    }

    fallback () external payable {
        require(msg.value > 0, "Cannot send zero Ether");
    }

    function deposit(uint256 unifiedTokenAmount, bool flag) public payable returns (bool) {
        require(handler != address(0), "Handler not set");
        (bool success,) = handler.delegatecall(abi.encodeWithSignature(DEPOSIT, unifiedTokenAmount, flag));
        require(success, "Deposit failed");
        return true;
    }

    function withdraw(uint256 unifiedTokenAmount, bool flag) public returns (bool) {
        require(handler != address(0), "Handler not set");
        (bool success,) = handler.delegatecall(abi.encodeWithSignature(REDEEM, unifiedTokenAmount, flag));
        require(success, "Withdraw failed");
        return true;
    }

    function borrow(uint256 unifiedTokenAmount, bool flag) public returns (bool) {
        require(handler != address(0), "Handler not set");
        (bool success,) = handler.delegatecall(abi.encodeWithSignature(BORROW, unifiedTokenAmount, flag));
        require(success, "Borrow failed");
        return true;
    }

    function repay(uint256 unifiedTokenAmount, bool flag) public payable returns (bool) {
        require(handler != address(0), "Handler not set");
        (bool success,) = handler.delegatecall(abi.encodeWithSignature(REPAY, unifiedTokenAmount, flag));
        require(success, "Repay failed");
        return true;
    }

    function handlerProxy(bytes memory data) onlyMarketManager external returns (bool, bytes memory) {
        require(handler != address(0), "Handler not set");
        (bool success, bytes memory returnData) = handler.delegatecall(data);
        return (success, returnData);
    }

    function handlerViewProxy(bytes memory data) external returns (bool, bytes memory) {
        require(handler != address(0), "Handler not set");
        (bool success, bytes memory returnData) = handler.staticcall(data);
        return (success, returnData);
    }

    function siProxy(bytes memory data) onlyMarketManager external returns (bool, bytes memory) {
        require(SI != address(0), "SI Handler not set");
        (bool success, bytes memory returnData) = SI.delegatecall(data);
        return (success, returnData);
    }

    function siViewProxy(bytes memory data) external returns (bool, bytes memory) {
        require(SI != address(0), "SI Handler not set");
        (bool success, bytes memory returnData) = SI.staticcall(data);
        return (success, returnData);
    }
}
```

### Explanation:
1. **Function Implementations:** Implemented the described contract functions (e.g., `ownershipTransfer`, `initialize`, set/get handler methods, and balance migration).
2. **Access Control:** Restricted specific methods using the `onlyOwner` and `onlyMarketManager` modifiers.
3. **Proxy Calls:** Used `delegatecall` for write operations and `staticcall` for view operations as per the contract description. Delegatecall ensures calls are made within the context of the proxy contract.
4. **Fallback Function:** Ensures non-zero Ether can be received.

Let me know if further refinements are required!