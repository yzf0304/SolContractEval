Here's the complete implementation of the `ERC721` contract based on the provided context and requirements:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title ERC721 NFT Contract
 * @notice This contract implements the ERC721 standard for non-fungible tokens (NFTs) and includes additional functionalities such as minting, ownership transfer, and token URI management.
 * @dev The contract is designed to be a basic implementation of an NFT collection, with specific features like limited minting, custom URI generation, and owner-controlled minting status.
 */
contract ERC721 is ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    uint256 private _totalMintsAllowed = 4;
    string private _uriLink = "https://spicypumpkins.com/api/json";
    bool private _minting = true;
    address payable private _owner;
    uint256 private _count;
    string private _name;
    string private _symbol;

    mapping(uint256 => address) private _owners;
    mapping(uint256 => string) private _uri;
    mapping(address => uint256) private _balances;
    mapping(uint256 => address) private _tokenApprovals;
    mapping(address => uint256) private _minted;
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @notice Initializes the contract with the provided name and symbol.
     * @param name_ The name of the NFT collection.
     * @param symbol_ The symbol of the NFT collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
        _owners[0] = msg.sender;
        _balances[msg.sender] = 1;
        _owner = payable(msg.sender);
    }

    function setMinting(bool boolean) external {
        require(msg.sender == _owner, "Only owner can change minting status.");
        _minting = boolean;
    }

    function transferOwnership(address to) external {
        require(msg.sender == _owner, "Only owner can transfer ownership.");
        require(to != address(0), "Invalid address.");
        _owner = payable(to);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(ERC165, IERC165)
        returns (bool)
    {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "Balance query for the zero address.");
        return _balances[owner];
    }

    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "Token does not exist.");
        return owner;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function totalSupply() external view override returns (uint256) {
        return 4444;
    }

    function tokenURI(uint256 tokenId) external view override returns (string memory) {
        require(_exists(tokenId), "Token does not exist.");
        return concat(_uriLink, tokenId.toString());
    }

    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    function approve(address to, uint256 tokenId) external override {
        address owner = ownerOf(tokenId);
        require(to != owner, "Approval to current owner.");
        require(
            msg.sender == owner || isApprovedForAll(owner, msg.sender),
            "Caller is not owner nor approved."
        );
        _approve(to, tokenId);
    }

    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "Token does not exist.");
        return _tokenApprovals[tokenId];
    }

    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != msg.sender, "Approval to caller.");
        _operatorApprovals[msg.sender][operator] = approved;
        emit ApprovalForAll(msg.sender, operator, approved);
    }

    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    function transferFrom(address from, address to, uint256 tokenId) external override {
        require(_isApprovedOrOwner(msg.sender, tokenId), "Caller is not owner nor approved.");
        _transfer(from, to, tokenId);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId) external override {
        safeTransferFrom(from, to, tokenId, "");
    }

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) external override {
        require(_isApprovedOrOwner(msg.sender, tokenId), "Caller is not owner nor approved.");
        _safeTransfer(from, to, tokenId, _data);
    }

    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "Transfer to non ERC721Receiver.");
    }

    function _exists(uint256 tokenId) internal view returns (bool) {
        return _owners[tokenId] != address(0);
    }

    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
        require(_exists(tokenId), "Token does not exist.");
        address owner = ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    function mint(address to) external payable returns (uint256 ID) {
        require(to != address(0), "Invalid address.");
        require(_minting, "Minting is disabled.");
        require(_minted[msg.sender] < _totalMintsAllowed, "Mint limit exceeded.");
        require(msg.value >= 0.01 ether, "Insufficient ETH sent.");

        _owner.transfer(msg.value);

        return internalMint(to);
    }

    function internalMint(address to) internal returns (uint256 ID) {
        uint256 tokenId = ++_count;
        _balances[to] += 1;
        _owners[tokenId] = to;
        _minted[msg.sender] += 1;
        emit Transfer(address(0), to, tokenId);
        return tokenId;
    }

    function concat(string memory _base, string memory _value) pure internal returns (string memory) {
        return string(abi.encodePacked(_base, "/", _value));
    }

    function multiMint(address to, uint256 amount) external payable returns (uint256[] memory IDs) {
        require(_minting, "Minting is disabled.");
        require(amount > 0, "Invalid mint amount.");
        require(msg.value >= amount * 0.01 ether, "Insufficient ETH sent.");

        _owner.transfer(msg.value);

        uint256[] memory mintedTokenIds = new uint256[](amount);
        for (uint256 i = 0; i < amount; i++) {
            mintedTokenIds[i] = internalMint(to);
        }
        return mintedTokenIds;
    }

    function changeMax(uint256 newMax) external {
        require(msg.sender == _owner, "Only owner can change max mint amount.");
        _totalMintsAllowed = newMax;
    }

    function _transfer(address from, address to, uint256 tokenId) internal virtual {
        require(ownerOf(tokenId) == from, "Transfer from incorrect owner.");
        require(to != address(0), "Transfer to the zero address.");

        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ownerOf(tokenId), to, tokenId);
    }

    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch {
                revert("Transfer to non ERC721Receiver.");
            }
        } else {
            return true;
        }
    }

    receive() external payable {}
}
``` 

This implementation strictly follows the provided context and description, implementing ERC721 functionalities along with additional custom features.