Below is the completed `ESSENTIA_ERC20` contract implementation based strictly on the provided context and description:

```solidity
pragma solidity ^0.4.24;

contract ESSENTIA_ERC20 is Ownable {
    using SafeMath for uint256;

    // Mapping of balances and allowances
    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) internal allowed;

    // ESSENTIA token attributes
    string public constant standard = "ESSENTIA erc20 and Genesis";
    uint256 public constant decimals = 18; // Hardcoded constant
    string public name = "ESSENTIA";
    string public symbol = "ESS";
    uint256 public totalSupply;

    // Events
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @notice Constructor to initialize the token supply and assign it to the contract creator.
     * @param _initialSupply The total supply of the token upon deployment.
     */
    constructor(uint256 _initialSupply) public {
        totalSupply = _initialSupply * (10**decimals);
        balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    /**
     * @notice Returns the balance of the specified address.
     * @param _owner The address to query the balance of.
     * @return The balance of the specified address.
     */
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    /**
     * @notice Transfers `_value` amount of tokens from the caller's account to `_to`.
     * @param _to The recipient address.
     * @param _value The amount of tokens to transfer.
     * @return A boolean indicating whether the operation was successful.
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0), "Cannot transfer to zero address.");
        require(balances[msg.sender] >= _value, "Insufficient balance.");

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);

        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Transfers `_value` amount of tokens from `_from` to `_to` using the allowance mechanism.
     * @param _from The address to transfer tokens from.
     * @param _to The recipient address.
     * @param _value The amount of tokens to transfer.
     * @return A boolean indicating whether the operation was successful.
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0), "Cannot transfer to zero address.");
        require(balances[_from] >= _value, "Insufficient balance.");
        require(allowed[_from][msg.sender] >= _value, "Insufficient allowance.");

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);

        emit Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Approves `_spender` to spend `_value` amount of tokens on behalf of the caller.
     * @param _spender The address that will spend the tokens.
     * @param _value The amount of tokens to approve.
     * @return A boolean indicating whether the operation was successful.
     */
    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Returns the remaining number of tokens that `_spender` is allowed to spend on behalf of `_owner`.
     * @param _owner The address of the token owner.
     * @param _spender The address of the spender.
     * @return The remaining allowance.
     */
    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }

    /**
     * @notice Increases the allowance granted to `_spender` by adding `_addedValue`.
     * @param _spender The address that will spend the tokens.
     * @param _addedValue The amount to increase the allowance by.
     * @return A boolean indicating whether the operation was successful.
     */
    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {
        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    /**
     * @notice Decreases the allowance granted to `_spender` by subtracting `_subtractedValue`.
     * @param _spender The address that will spend the tokens.
     * @param _subtractedValue The amount to decrease the allowance by.
     * @return A boolean indicating whether the operation was successful.
     * @dev If the new allowance is less than zero, it is reset to zero.
     */
    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {
        uint256 oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    /**
     * @notice Approves `_spender` to spend `_value` amount of tokens and then calls a function on `_spender` with additional data.
     * @param _spender The address that will spend the tokens.
     * @param _value The amount to approve.
     * @param _extraData Additional data to pass to the `receiveApproval` function.
     * @return A boolean indicating whether the operation was successful.
     */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
        return false;
    }
}
```

This contract adheres to your requirements and strictly follows the standard ERC20 implementation.