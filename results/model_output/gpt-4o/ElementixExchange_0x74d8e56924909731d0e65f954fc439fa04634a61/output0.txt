Below is the completed `ProxyRegistry` smart contract based on the provided context and description:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

contract ProxyRegistry is Ownable {
    /* DelegateProxy implementation contract. Must be initialized. */
    address public delegateProxyImplementation;

    /* Authenticated proxies by user. */
    mapping(address => OwnableDelegateProxy) public proxies;

    /* Contracts pending access. */
    mapping(address => uint256) public pending;

    /* Contracts allowed to call those proxies. */
    mapping(address => bool) public contracts;

    /* Delay period for adding an authenticated contract. */
    uint256 public DELAY_PERIOD = 7 days;

    // Events
    event RegisterProxy(address indexed sender, address proxyAddr);
    event AuthenticationOperation(address indexed addr, bool opt);

    /**
     * @notice Start the process to enable access for a specified contract. Subject to a delay period.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address to which to grant permissions
     */
    function startGrantAuthentication(address addr)
        public
        onlyOwner
    {
        require(addr != address(0), "Invalid address");
        require(!contracts[addr], "Address is already authenticated");
        pending[addr] = block.timestamp + DELAY_PERIOD;
    }

    /**
     * @notice End the process to enable access for a specified contract after the delay period has passed.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address to which to grant permissions
     */
    function endGrantAuthentication(address addr)
        public
        onlyOwner
    {
        require(addr != address(0), "Invalid address");
        require(pending[addr] != 0, "Address not pending authentication");
        require(block.timestamp >= pending[addr], "Delay period has not passed");

        pending[addr] = 0;    // Clear the pending status
        contracts[addr] = true;

        emit AuthenticationOperation(addr, true);
    }

    /**
     * @notice Revoke access for a specified contract. Can be done instantly.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address of which to revoke permissions
     */
    function revokeAuthentication(address addr)
        public
        onlyOwner
    {
        require(addr != address(0), "Invalid address");
        require(contracts[addr], "Address is not authenticated");

        contracts[addr] = false;

        emit AuthenticationOperation(addr, false);
    }

    /**
     * @notice Register a proxy contract with this registry.
     * @dev Must be called by the user for whom the proxy is being created. Creates a new AuthenticatedProxy.
     * @return proxy New AuthenticatedProxy contract
     */
    function registerProxy()
        public
        returns (OwnableDelegateProxy proxy)
    {
        require(address(proxies[msg.sender]) == address(0), "Proxy already exists");

        proxy = new OwnableDelegateProxy(msg.sender, delegateProxyImplementation, abi.encodeWithSelector(0));
        proxies[msg.sender] = proxy;

        emit RegisterProxy(msg.sender, address(proxy));
    }
}

contract OwnableDelegateProxy {
    address public owner;
    address public implementation;

    constructor(address _owner, address _implementation, bytes memory _data) {
        owner = _owner;
        implementation = _implementation;

        if (_data.length > 0) {
            (bool success, ) = _implementation.delegatecall(_data);
            require(success, "Delegatecall failed");
        }
    }
}
```

### Explanation of Implementation:

1. **Authentication Process:**  
   - `startGrantAuthentication`: Begins the process to grant permissions for a contract. It sets the pending timestamp (`block.timestamp + DELAY_PERIOD`) and ensures the address isn't already authenticated.
   - `endGrantAuthentication`: Ends the authentication process after the delay period has passed by marking the contract as authenticated and clearing its pending status.
   - `revokeAuthentication`: Instantly revokes permissions for an authenticated contract.

2. **Proxy Registration:**  
   - `registerProxy`: Allows a user to register their own proxy contract using the `delegateProxyImplementation`. It ensures no duplicate proxies are created for the same user and uses the constructor of `OwnableDelegateProxy` for initialization.

3. **Security Features:**  
   - Ensures proper authentication, delay periods, and avoids misuse by requiring valid addresses and only allowing the contract owner to grant/revoke permissions.

4. **Events:**  
   - `RegisterProxy` and `AuthenticationOperation`: Emit logs for important actions within the contract.

Make sure to carefully test all methods before deployment.