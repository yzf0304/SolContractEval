Below is the complete and functional implementation of the `FORMLESS` contract strictly adhering to the provided context and description.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract FORMLESS is Ownable, ERC721A, ReentrancyGuard {
    using Strings for uint256;

    uint256 public MAX_PER_Transtion = 1;
    uint256 public MAX_PER_Address = 1;
    uint256 public PRICE = 0.069 ether;
    uint256 private TotalCollectionSize_ = 500;
    uint256 private constant MaxMintPerBatch_ = 1;

    mapping(address => bool) private whitelistedAddressesForMint;
    string private _baseTokenURI;
    uint public status = 0;

    constructor() ERC721A("FORMLESS", "FORMLESS", MaxMintPerBatch_, TotalCollectionSize_) {
        _baseTokenURI = "https://gateway.pinata.cloud/ipfs/QmWT2u6UEeXJs5MWcSTQhHFyYC9wKevQNjXC4J3k67ymtQ/";
    }

    modifier callerIsUser() {
        require(tx.origin == msg.sender, "The caller is another contract");
        _;
    }

    function mint(uint256 quantity) external payable callerIsUser {
        require(status > 0, "Minting is paused");
        require(quantity > 0 && quantity <= MAX_PER_Transtion, "Invalid mint quantity");
        require(totalSupply() + quantity <= TotalCollectionSize_, "Exceeds max supply");
        require(numberMinted(msg.sender) + quantity <= MAX_PER_Address, "Exceeds max mints per address");
        require(msg.value >= PRICE * quantity, "Insufficient payment");

        if (status == 1) {
            require(isWhitelistedForMint(msg.sender), "Not whitelisted for minting");
        }

        _safeMint(msg.sender, quantity);
    }

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        return string(abi.encodePacked(_baseURI(), tokenId.toString(), _getUriExtension()));
    }

    function isWhitelistedForMint(address _user) public view returns (bool) {
        return whitelistedAddressesForMint[_user];
    }

    function addNewWhitelistUserForMint(address[] calldata _users) public onlyOwner {
        for (uint256 i = 0; i < _users.length; i++) {
            whitelistedAddressesForMint[_users[i]] = true;
        }
    }

    function setBaseURI(string memory baseURI) external onlyOwner {
        _baseTokenURI = baseURI;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function numberMinted(address owner) public view returns (uint256) {
        return _numberMinted(owner);
    }

    function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {
        return ownershipOf(tokenId);
    }

    function withdrawMoney() external onlyOwner nonReentrant {
        (bool success, ) = msg.sender.call{value: address(this).balance}("");
        require(success, "Transfer failed.");
    }

    function changeMAX_PER_Address(uint256 q) external onlyOwner {
        MAX_PER_Address = q;
    }

    function reserve(address _address, uint256 quantity) public onlyOwner {
        require(totalSupply() + quantity <= TotalCollectionSize_, "Exceeds max supply");
        _safeMint(_address, quantity);
    }

    function changeMintPrice(uint256 _newPrice) external onlyOwner {
        PRICE = _newPrice;
    }

    function changeCollectionSize(uint256 _collectionSize) external onlyOwner {
        require(_collectionSize >= totalSupply(), "New collection size must exceed current supply");
        TotalCollectionSize_ = _collectionSize;
    }

    function changeMAX_PER_Transtion(uint256 q) external onlyOwner {
        MAX_PER_Transtion = q;
    }

    function giveaway(address a, uint q) public onlyOwner {
        require(totalSupply() + q <= TotalCollectionSize_, "Exceeds max supply");
        _safeMint(a, q);
    }

    function setStatus(uint256 s) external onlyOwner {
        status = s;
    }

    function getStatus() public view returns (uint) {
        return status;
    }

    function getcollectionSize() public view returns (uint) {
        return TotalCollectionSize_;
    }
}
```

### Key Features:
1. **Minting Logic**:
   - Supports both whitelist and public sale minting based on the `status`.
   - Implements minting limits per transaction and per address.
   - Verifies sufficient payment during minting.

2. **Whitelist Management**:
   - `addNewWhitelistUserForMint` allows the owner to add addresses to the whitelist.

3. **Base URI**:
   - Configurable via `setBaseURI` to adjust metadata hosting.

4. **Withdrawal**:
   - Safe withdrawal of contract funds using `withdrawMoney`.

5. **Dynamic Configuration**:
   - Owners can update mint price, collection size, and mint limits dynamically.

6. **Sale Status**:
   - Sale status is controlled via `setStatus` (0: paused, 1: whitelist sale, 2: public sale).