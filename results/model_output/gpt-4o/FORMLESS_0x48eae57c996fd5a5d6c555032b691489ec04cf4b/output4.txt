Below is the completed smart contract `FORMLESS` strictly adhering to the provided context and description.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title FORMLESS NFT Contract
 * @author [Your Name]
 * @notice This contract allows for the creation, minting, and management of a collection of NFTs.
 * @dev The contract uses ERC721A for efficient batch minting, ReentrancyGuard to prevent reentrancy attacks, and Ownable for access control.
 */
contract FORMLESS is Ownable, ERC721A, ReentrancyGuard {
    using Strings for uint256;

    uint256 public MAX_PER_Transtion = 1;
    uint256 public MAX_PER_Address = 1;
    uint256 public PRICE = 0.069 ether;
    uint256 private TotalCollectionSize_ = 500;
    uint256 private constant MaxMintPerBatch_ = 1;

    mapping(address => bool) private whitelistedAddressesForMint;

    string private _baseTokenURI;

    uint public status = 0; // 0 - paused, 1 - whitelist sale, 2 - public sale

    constructor() ERC721A("FORMLESS", "FORMLESS", MaxMintPerBatch_, TotalCollectionSize_) {
        _baseTokenURI = "https://gateway.pinata.cloud/ipfs/QmWT2u6UEeXJs5MWcSTQhHFyYC9wKevQNjXC4J3k67ymtQ/";
    }

    modifier callerIsUser() {
        require(tx.origin == msg.sender, "The caller is another contract");
        _;
    }

    function mint(uint256 quantity) external payable callerIsUser {
        require(status != 0, "Sale is paused");
        require(quantity > 0 && quantity <= MAX_PER_Transtion, "Invalid mint amount");
        require(totalSupply() + quantity <= TotalCollectionSize_, "Exceeds collection size");

        if (status == 1) {
            require(isWhitelistedForMint(msg.sender), "Not whitelisted for minting");
        }

        require(numberMinted(msg.sender) + quantity <= MAX_PER_Address, "Exceeds max allowed per address");
        require(msg.value >= PRICE * quantity, "Insufficient ETH sent");

        _safeMint(msg.sender, quantity);
    }

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "Token does not exist");
        return bytes(_baseTokenURI).length > 0
            ? string(abi.encodePacked(_baseTokenURI, tokenId.toString(), ".json"))
            : "";
    }

    function isWhitelistedForMint(address _user) public view returns (bool) {
        return whitelistedAddressesForMint[_user];
    }

    function addNewWhitelistUserForMint(address[] calldata _users) public onlyOwner {
        for (uint256 i = 0; i < _users.length; i++) {
            whitelistedAddressesForMint[_users[i]] = true;
        }
    }

    function setBaseURI(string memory baseURI) external onlyOwner {
        _baseTokenURI = baseURI;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function numberMinted(address owner) public view returns (uint256) {
        return _numberMinted(owner);
    }

    function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {
        return ownershipOf(tokenId);
    }

    function withdrawMoney() external onlyOwner nonReentrant {
        uint256 balance = address(this).balance;
        require(balance > 0, "No funds to withdraw");
        Address.sendValue(payable(owner()), balance);
    }

    function changeMAX_PER_Address(uint256 q) external onlyOwner {
        MAX_PER_Address = q;
    }

    function reserve(address _address, uint256 quantity) public onlyOwner {
        require(totalSupply() + quantity <= TotalCollectionSize_, "Exceeds collection size");
        _safeMint(_address, quantity);
    }

    function changeMintPrice(uint256 _newPrice) external onlyOwner {
        PRICE = _newPrice;
    }

    function changeCollectionSize(uint256 _collectionSize) external onlyOwner {
        require(_collectionSize > 0 && _collectionSize >= totalSupply(), "Invalid collection size");
        TotalCollectionSize_ = _collectionSize;
    }

    function changeMAX_PER_Transtion(uint256 q) external onlyOwner {
        MAX_PER_Transtion = q;
    }

    function giveaway(address a, uint256 q) public onlyOwner {
        require(totalSupply() + q <= TotalCollectionSize_, "Exceeds collection size");
        _safeMint(a, q);
    }

    function setStatus(uint256 s) external onlyOwner {
        require(s >= 0 && s <= 2, "Invalid status");
        status = s;
    }

    function getStatus() public view returns (uint) {
        return status;
    }

    function getcollectionSize() public view returns (uint) {
        return TotalCollectionSize_;
    }
}
```

### Key Details:
1. **ERC721A Integration**: Efficiently supports batch minting.
2. **ReentrancyGuard**: Prevents reentrancy attacks, particularly for withdrawal operations.
3. **Ownable**: Ensures only the owner can manage sensitive features (e.g., price updates, whitelist management).
4. **Sale Status**: Allows toggling between paused, whitelist sale, and public sale modes.
5. **Whitelist**: Restricts minting to specified addresses during whitelist sale.
6. **Dynamic Base URI**: Supports metadata hosted dynamically via base URI updates.
7. **Mint Restrictions**: Enforces `MAX_PER_Transtion` and `MAX_PER_Address` limits for controlled minting.