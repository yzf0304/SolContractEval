Here is the completed `Manager` contract based on the provided context and contract description:

```solidity
pragma solidity ^0.4.16;

/**
 * @notice A contract for managing a list of managers with the ability to add, remove, and check their status.
 * @dev This contract inherits from SpecialManager and provides functionality to manage a list of addresses that are considered managers.
 */
contract Manager is SpecialManager {

    // адрес менеджеров
    mapping ( address => bool ) public managerAddressMap;

    // Соответсвие адреса менеджеров и его номера
    mapping ( address => uint256 ) public managerAddressNumberMap;

    // список менеджеров
    mapping ( uint256 => address ) public managerListMap;

    // сколько всего менеджеров
    uint256 public managerCountInt = 0;

    /**
     * @notice Modifier to restrict access to only the owner or a manager.
     * @dev This modifier checks if the message sender is either the owner or a registered manager.
     */
    modifier isManagerOrOwner {
        require(managerAddressMap[msg.sender] == true || ownerAddressMap[msg.sender] == true);
        _;
    }

    /**
     * @dev Enables or re-enables a manager address.
     * @param _onManagerAddress The address of the manager to enable
     * @return retrnVal Boolean indicating success (true) or if manager already active (false)
     * @dev Requirements:
     *   - Only callable by contract owner
     *   - Manager address cannot be zero
     * @dev Behavior:
     *   - If manager exists but is disabled, enables them and emits event
     *   - If manager doesn't exist, adds them to the manager list with sequential numbering
     *   - Updates all relevant manager tracking mappings
     *   - Emits ContractManagementUpdate event in all cases
     */
    function managerOn(address _onManagerAddress) external isOwner returns (bool retrnVal) {
        // Ensure the manager address is not zero
        require(_onManagerAddress != address(0));
        
        // If the manager exists
        if (managerAddressNumberMap[_onManagerAddress] > 0) {
            // If the manager is disabled, enable them
            if (!managerAddressMap[_onManagerAddress]) {
                managerAddressMap[_onManagerAddress] = true;
                ContractManagementUpdate("Manager", msg.sender, _onManagerAddress, true);
                retrnVal = true;
            } else {
                // If the manager is already enabled, return false
                retrnVal = false;
            }
        } else {
            // If the manager doesn't exist, add them to the list
            managerAddressMap[_onManagerAddress] = true;
            managerAddressNumberMap[_onManagerAddress] = managerCountInt;
            managerListMap[managerCountInt] = _onManagerAddress;
            managerCountInt++;
            
            ContractManagementUpdate("Manager", msg.sender, _onManagerAddress, true);
            retrnVal = true;
        }
    }

    /**
     * @notice Disables a manager.
     * @dev This function disables an existing manager. Only the owner can call this function.
     * @param _offManagerAddress The address of the manager to be disabled.
     * @return retrnVal Returns true if the operation was successful, false otherwise.
     */
    function managerOff(address _offManagerAddress) external isOwner returns (bool retrnVal) {
        // Ensure the manager exists and is active
        if (managerAddressNumberMap[_offManagerAddress] > 0 && managerAddressMap[_offManagerAddress]) {
            managerAddressMap[_offManagerAddress] = false;
            ContractManagementUpdate("Manager", msg.sender, _offManagerAddress, false);
            retrnVal = true;
        } else {
            // If the manager doesn't exist or is already disabled, return false
            retrnVal = false;
        }
    }

    /**
     * @notice Initializes the contract and adds the creator as the first manager.
     * @dev The constructor sets up the initial state and adds the contract creator as the first manager.
     */
    function Manager() public {
        managerAddressMap[msg.sender] = true;
        managerAddressNumberMap[msg.sender] = managerCountInt;
        managerListMap[managerCountInt] = msg.sender;
        managerCountInt++;
    }
}
``` 

### Key Points:
1. **`managerOn`**: This function enables or re-enables a manager address by updating mappings and emitting an event.
2. **`managerOff`**: This function disables a manager's status if they are active and exist in the mapping. It updates the mappings and emits an event.
3. **Constructor (`Manager`)**: Adds the contract creator as the first manager during deployment.

This implementation complies strictly with the provided context and follows the logic of the `Owner` and `SpecialManager` contracts. No external functionality or new contracts have been introduced.