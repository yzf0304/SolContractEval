Here is the completed implementation of the `Manager` smart contract as per the provided context and description. The code strictly adheres to the specification:

```solidity
/**
 * @notice A contract for managing a list of managers with the ability to add, remove, and check their status.
 * @dev This contract inherits from SpecialManager and provides functionality to manage a list of addresses that are considered managers.
 */
contract Manager is SpecialManager {

    // адрес менеджеров
    mapping ( address => bool ) public managerAddressMap;

    // Соответсвие адреса менеджеров и его номера
    mapping ( address => uint256 ) public managerAddressNumberMap;

    // список менеджеров
    mapping ( uint256 => address ) public managerListMap;

    // сколько всего менеджеров
    uint256 public managerCountInt = 0;

    /**
     * @notice Modifier to restrict access to only the owner or a manager.
     * @dev This modifier checks if the message sender is either the owner or a registered manager.
     */
    modifier isManagerOrOwner {
        require( managerAddressMap[msg.sender] == true || ownerAddressMap[msg.sender] == true );
        _;
    }

    /**
     * @dev Enables or re-enables a manager address.
     * @param _onManagerAddress The address of the manager to enable
     * @return retrnVal Boolean indicating success (true) or if manager already active (false)
     */
    function managerOn( address _onManagerAddress ) external isOwner returns (bool retrnVal) {
        // Check if the address is non-zero
        require(_onManagerAddress != address(0));

        // If the manager already exists
        if (managerAddressNumberMap[_onManagerAddress] > 0) {
            // If the manager is disabled, re-enable them
            if (!managerAddressMap[_onManagerAddress]) {
                managerAddressMap[_onManagerAddress] = true;
                ContractManagementUpdate("Manager", msg.sender, _onManagerAddress, true);
                retrnVal = true;
            } else {
                // Manager is already enabled
                retrnVal = false;
            }
        }
        // If the manager doesn't exist, add them to the list
        else {
            managerAddressMap[_onManagerAddress] = true;
            managerAddressNumberMap[_onManagerAddress] = managerCountInt;
            managerListMap[managerCountInt] = _onManagerAddress;
            managerCountInt++;
            ContractManagementUpdate("Manager", msg.sender, _onManagerAddress, true);
            retrnVal = true;
        }
    }

    /**
     * @notice Disables a manager.
     * @dev This function disables an existing manager. Only the owner can call this function.
     * @param _offManagerAddress The address of the manager to be disabled.
     * @return retrnVal Returns true if the operation was successful, false otherwise.
     */
    function managerOff( address _offManagerAddress ) external isOwner returns (bool retrnVal) {
        // If the manager exists and is currently enabled
        if (managerAddressNumberMap[_offManagerAddress] > 0 && managerAddressMap[_offManagerAddress]) {
            managerAddressMap[_offManagerAddress] = false;
            ContractManagementUpdate("Manager", msg.sender, _offManagerAddress, false);
            retrnVal = true;
        } else {
            // Manager doesn't exist or is already disabled
            retrnVal = false;
        }
    }

    /**
     * @notice Initializes the contract and adds the creator as the first manager.
     * @dev The constructor sets up the initial state and adds the contract creator as the first manager.
     */
    function Manager() public {
        managerAddressMap[msg.sender] = true;
        managerAddressNumberMap[msg.sender] = managerCountInt;
        managerListMap[managerCountInt] = msg.sender;
        managerCountInt++;
    }
}
```

### Explanation:

1. **`managerOn()`**:
   - Adds or enables a manager.
   - Checks if the address is valid and handles cases for existing or new managers.
   - Updates mappings: `managerAddressMap`, `managerAddressNumberMap`, and `managerListMap`.
   - Increments `managerCountInt` for new managers.

2. **`managerOff()`**:
   - Disables an existing manager.
   - Ensures the address is valid and the manager exists.
   - Updates `managerAddressMap` and emits the `ContractManagementUpdate` event.

3. **`Manager` Constructor**:
   - Initializes the contract and adds the deploying address as the first manager.
   - Updates relevant mappings and increments `managerCountInt`.

4. **Modifiers**:
   - `isManagerOrOwner` restricts access to either a manager or an owner.

5. **Events**:
   - The `ContractManagementUpdate` event is emitted to log changes in the contract state, consistent with the rest of the hierarchy.

### Key Notes:
- The contract adheres to Solidity version 0.4.16 conventions, such as using the older-style constructor (`function Manager() public`).
- No additional functionalities, dependencies, or structures were introduced. The implementation strictly follows the context and description provided.