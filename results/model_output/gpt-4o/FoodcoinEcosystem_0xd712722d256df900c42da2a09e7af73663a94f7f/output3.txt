Below is the complete and functional implementation of the `Manager` contract according to the provided context and description. It adheres strictly to the specified constraints and uses Solidity version 0.4.16.

```solidity
/**
 * @notice A contract for managing a list of managers with the ability to add, remove, and check their status.
 * @dev This contract inherits from SpecialManager and provides functionality to manage a list of addresses that are considered managers.
 */
contract Manager is SpecialManager {

	// адрес менеджеров
	mapping ( address => bool ) public managerAddressMap;

	// Соответсвие адреса менеджеров и его номера
	mapping ( address => uint256 ) public managerAddressNumberMap;

	// список менеджеров
	mapping ( uint256 => address ) public managerListMap;

	// сколько всего менеджеров
	uint256 public managerCountInt = 0;

	/**
	 * @notice Modifier to restrict access to only the owner or a manager.
	 * @dev This modifier checks if the message sender is either the owner or a registered manager.
	 */
	modifier isManagerOrOwner {
        require( managerAddressMap[msg.sender]==true || ownerAddressMap[msg.sender]==true );
        _;
    }

	/**
     * @dev Enables or re-enables a manager address.
     * @param _onManagerAddress The address of the manager to enable
     * @return retrnVal Boolean indicating success (true) or if manager already active (false)
     * @dev Requirements:
     *   - Only callable by contract owner
     *   - Manager address cannot be zero
     * @dev Behavior:
     *   - If manager exists but is disabled, enables them and emits event
     *   - If manager doesn't exist, adds them to the manager list with sequential numbering
     *   - Updates all relevant manager tracking mappings
     *   - Emits ContractManagementUpdate event in all cases
     * @dev Notes:
     *   - Maintains three related mappings for manager tracking:
     *     1. managerAddressMap: tracks enabled/disabled status
     *     2. managerAddressNumberMap: tracks manager's sequential number
     *     3. managerListMap: maintains ordered list of managers
     *   - Increments managerCountInt when adding new managers
     * @dev Events:
     *   - Emits ContractManagementUpdate with action details
     */
	function managerOn( address _onManagerAddress ) external isOwner returns (bool retrnVal) {
		// Check if it's a non-zero address
		require(_onManagerAddress != address(0));

		// If the manager already exists
		if (managerAddressNumberMap[_onManagerAddress] > 0) {
			// If the manager is currently disabled, enable them
			if (!managerAddressMap[_onManagerAddress]) {
				managerAddressMap[_onManagerAddress] = true;
				ContractManagementUpdate("Manager", msg.sender, _onManagerAddress, true);
				retrnVal = true;
			} else {
				// Manager is already active
				retrnVal = false;
			}
		} else {
			// Add a new manager
			managerAddressMap[_onManagerAddress] = true;
			managerAddressNumberMap[_onManagerAddress] = managerCountInt;
			managerListMap[managerCountInt] = _onManagerAddress;
			managerCountInt++;
			ContractManagementUpdate("Manager", msg.sender, _onManagerAddress, true);
			retrnVal = true;
		}
	}

	/**
	 * @notice Disables a manager.
	 * @dev This function disables an existing manager. Only the owner can call this function.
	 * @param _offManagerAddress The address of the manager to be disabled.
	 * @return retrnVal Returns true if the operation was successful, false otherwise.
	 */
	function managerOff( address _offManagerAddress ) external isOwner returns (bool retrnVal) {
		// Check if the manager exists and is active
		if (managerAddressNumberMap[_offManagerAddress] > 0 && managerAddressMap[_offManagerAddress]) {
			managerAddressMap[_offManagerAddress] = false;
			ContractManagementUpdate("Manager", msg.sender, _offManagerAddress, false);
			retrnVal = true;
		} else {
			// Manager doesn't exist or is already inactive
			retrnVal = false;
		}
	}

	/**
	 * @notice Initializes the contract and adds the creator as the first manager.
	 * @dev The constructor sets up the initial state and adds the contract creator as the first manager.
	 */
	function Manager() public {
		managerAddressMap[msg.sender] = true;
		managerAddressNumberMap[msg.sender] = managerCountInt;
		managerListMap[managerCountInt] = msg.sender;
		managerCountInt++;
	}
}
```

### Key Features
1. **`managerOn` Function**: Adds a new manager or re-enables an existing disabled manager.
2. **`managerOff` Function**: Disables an active manager.
3. **Constructor (`Manager`)**: Initializes the contract by adding the creator as the first manager.
4. **`isManagerOrOwner` Modifier**: Ensures that only an owner or a manager can access certain functions.

### Compatibility
The contract is designed to compile using Solidity version `0.4.16`. Ensure this version is explicitly specified during deployment.