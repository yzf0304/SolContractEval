Here is the completed `StandardToken` contract adhering to the context you provided, which implements the core ERC20 functionalities:

```solidity
pragma solidity ^0.4.16;

import "./SafeMath.sol"; // Assuming SafeMath library is imported correctly

contract StandardToken is ERC20 {

    using SafeMath for uint256;

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;

    uint256 public totalSupply;

    /**
     * @notice Transfers tokens to a specified address.
     * @param _to The address to transfer to.
     * @param _value The amount of tokens to be transferred.
     * @return True if the transfer was successful.
     */
    function transfer(address _to, uint256 _value) returns (bool) {
        require(_to != address(0));
        require(balances[msg.sender] >= _value);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Transfers tokens from one address to another.
     * @param _from The address to send tokens from.
     * @param _to The address to send tokens to.
     * @param _value The amount of tokens to be sent.
     * @return True if the transfer was successful.
     */
    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {
        require(_to != address(0));
        require(balances[_from] >= _value);
        require(allowed[_from][msg.sender] >= _value);

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Returns the balance of the specified address.
     * @param _owner The address to query the balance of.
     * @return The balance of the specified address.
     */
    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }

    /**
     * @notice Approves the specified address to spend a certain amount of tokens on behalf of the message sender.
     * @param _spender The address which will spend the funds.
     * @param _value The amount of tokens to be spent.
     * @return True if the approval was successful.
     */
    function approve(address _spender, uint256 _value) returns (bool) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Returns the remaining number of tokens that `_spender` is allowed to spend on behalf of `_owner`.
     * @param _owner The address of the token owner.
     * @param _spender The address of the spender.
     * @return The remaining allowance for the spender.
     */
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}
```

**Key Components:**
- The `transfer` function allows a user to send tokens to another address.
- The `transferFrom` function allows spending on behalf of someone else, useful for smart contract interactions.
- The `balanceOf` function provides the balance of a specific address.
- The `approve` function sets the allowance, allowing another address to spend tokens on behalf of the token holder.
- The `allowance` function checks the remaining allowed tokens that a spender can transfer from the owner's account.

Note: Ensure that the `SafeMath` library is available and correctly imported as this code depends on it to prevent integer overflow/underflow issues.