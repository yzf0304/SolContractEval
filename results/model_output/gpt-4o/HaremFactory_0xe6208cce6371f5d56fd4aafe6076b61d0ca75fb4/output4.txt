Below is the implementation of the `HaremFactory` contract, strictly adhering to the provided context and description:

```solidity
pragma solidity 0.5.0;

import "./SafeMath.sol";
import "./Ownable.sol";
import "./IERC20.sol";
import "./HaremNonTradable.sol";

/**
 * @title HaremFactory
 * @notice This contract allows users to stake tokens in different pools and earn Harems as rewards.
 * @dev The contract is Ownable, meaning only the owner can add new pools, set parameters, and update the treasury address.
 */
contract HaremFactory is Ownable {
    using SafeMath for uint256;

    // Info of each user.
    struct UserInfo {
        uint256 amount; // How many tokens the user has provided.
        uint256 rewardDebt; // Reward debt. See explanation below.
    }

    // Info of each pool.
    struct PoolInfo {
        IERC20 token; // Address of token contract.
        uint256 haremsPerDay; // The amount of Harems per day generated for each token staked.
        uint256 maxStake; // The maximum amount of tokens which can be staked in this pool.
        uint256 lastUpdateTime; // Last timestamp that Harems distribution occurs.
        uint256 accHaremPerShare; // Accumulated Harems per share, times 1e12.
    }

    // Treasury address.
    address public treasuryAddr;
    // Info of each pool.
    PoolInfo[] public poolInfo;
    // Info of each user that stakes LP tokens.
    mapping(uint256 => mapping(address => UserInfo)) public userInfo;
    // Record whether the pair has been added.
    mapping(address => uint256) public tokenPID;

    HaremNonTradable public Harem;

    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);

    constructor(HaremNonTradable _haremAddress, address _treasuryAddr) public {
        Harem = _haremAddress;
        treasuryAddr = _treasuryAddr;
    }

    function poolLength() external view returns (uint256) {
        return poolInfo.length;
    }

    function add(IERC20 _token, uint256 _haremsPerDay, uint256 _maxStake) public onlyOwner {
        require(tokenPID[address(_token)] == 0, "Token already added");
        poolInfo.push(PoolInfo({
            token: _token,
            haremsPerDay: _haremsPerDay,
            maxStake: _maxStake,
            lastUpdateTime: block.timestamp,
            accHaremPerShare: 0
        }));
        tokenPID[address(_token)] = poolInfo.length;
    }

    function setMaxStake(uint256 pid, uint256 amount) public onlyOwner {
        PoolInfo storage pool = poolInfo[pid];
        pool.maxStake = amount;
    }

    function setHaremsPerDay(uint256 pid, uint256 amount) public onlyOwner {
        PoolInfo storage pool = poolInfo[pid];
        pool.haremsPerDay = amount;
    }

    function pendingHarem(uint256 _pid, address _user) public view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 accHaremPerShare = pool.accHaremPerShare;
        if (block.timestamp > pool.lastUpdateTime && pool.token.balanceOf(address(this)) > 0) {
            uint256 timeElapsed = block.timestamp.sub(pool.lastUpdateTime);
            uint256 haremReward = timeElapsed.mul(pool.haremsPerDay).div(1 days);
            accHaremPerShare = accHaremPerShare.add(haremReward.mul(1e12).div(pool.token.balanceOf(address(this))));
        }
        return user.amount.mul(accHaremPerShare).div(1e12).sub(user.rewardDebt);
    }

    function totalPendingHarem(address _user) public view returns (uint256) {
        uint256 total = 0;
        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {
            total = total.add(pendingHarem(pid, _user));
        }
        return total;
    }

    function pendingHaremOfPool(uint256 _pid) public view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.timestamp > pool.lastUpdateTime && pool.token.balanceOf(address(this)) > 0) {
            uint256 timeElapsed = block.timestamp.sub(pool.lastUpdateTime);
            return timeElapsed.mul(pool.haremsPerDay).div(1 days);
        }
        return 0;
    }

    function rugPull(uint256[] memory _pids) public {
        for (uint256 i = 0; i < _pids.length; ++i) {
            updatePool(_pids[i]);
            uint256 pending = pendingHarem(_pids[i], msg.sender);
            if (pending > 0) {
                safeHaremTransfer(msg.sender, pending);
                userInfo[_pids[i]][msg.sender].rewardDebt = userInfo[_pids[i]][msg.sender].amount.mul(poolInfo[_pids[i]].accHaremPerShare).div(1e12);
            }
        }
    }

    function rugPullAll() public {
        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {
            rugPull(new uint256[](1));
        }
    }

    function updatePool(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.timestamp <= pool.lastUpdateTime) {
            return;
        }
        if (pool.token.balanceOf(address(this)) > 0) {
            uint256 timeElapsed = block.timestamp.sub(pool.lastUpdateTime);
            uint256 haremReward = timeElapsed.mul(pool.haremsPerDay).div(1 days);
            pool.accHaremPerShare = pool.accHaremPerShare.add(haremReward.mul(1e12).div(pool.token.balanceOf(address(this))));
        }
        pool.lastUpdateTime = block.timestamp;
    }

    function deposit(uint256 _pid, uint256 _amount) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        updatePool(_pid);
        if (user.amount > 0) {
            uint256 pending = user.amount.mul(pool.accHaremPerShare).div(1e12).sub(user.rewardDebt);
            if (pending > 0) {
                safeHaremTransfer(msg.sender, pending);
            }
        }
        if (_amount > 0) {
            require(user.amount.add(_amount) <= pool.maxStake, "Exceeds max stake");
            pool.token.transferFrom(msg.sender, address(this), _amount);
            user.amount = user.amount.add(_amount);
        }
        user.rewardDebt = user.amount.mul(pool.accHaremPerShare).div(1e12);
        emit Deposit(msg.sender, _pid, _amount);
    }

    function withdraw(uint256 _pid, uint256 _amount) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        require(user.amount >= _amount, "Withdraw amount exceeds staked amount");
        updatePool(_pid);
        uint256 pending = user.amount.mul(pool.accHaremPerShare).div(1e12).sub(user.rewardDebt);
        if (pending > 0) {
            safeHaremTransfer(msg.sender, pending);
        }
        if (_amount > 0) {
            user.amount = user.amount.sub(_amount);
            pool.token.transfer(msg.sender, _amount);
        }
        user.rewardDebt = user.amount.mul(pool.accHaremPerShare).div(1e12);
        emit Withdraw(msg.sender, _pid, _amount);
    }

    function emergencyWithdraw(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        uint256 amount = user.amount;
        user.amount = 0;
        user.rewardDebt = 0;
        pool.token.transfer(msg.sender, amount);
        emit EmergencyWithdraw(msg.sender, _pid, amount);
    }

    function safeHaremTransfer(address _to, uint256 _amount) internal {
        uint256 haremBal = Harem.balanceOf(treasuryAddr);
        if (_amount > haremBal) {
            Harem.transfer(_to, haremBal);
        } else {
            Harem.transfer(_to, _amount);
        }
    }

    function treasury(address _treasuryAddr) public {
        require(msg.sender == treasuryAddr, "Not authorized");
        treasuryAddr = _treasuryAddr;
    }
}
```

### Key Considerations
- Compiler version `0.5.0` was adhered to strictly.
- No external libraries were introduced besides context-provided code.
- Adhered to strict descriptions for each function and avoided extraneous implementations.