Below is the completed implementation of the `ICSTCrowSale` smart contract according to the given context and description:

```solidity
pragma solidity ^0.4.21;

contract ERC20 {
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
}

contract Ownable {
    address public owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    function Ownable() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract ICSTCrowSale is Ownable {
    using SafeMath for uint256;

    uint256 public totalFundingSupply;
    ERC20 public token;
    uint256 public startTime;
    uint256 public endTime;
    uint256 public airdropSupply;
    uint256 public rate;

    event Wasted(address indexed to, uint256 value, uint256 date);

    function ICSTCrowSale() public {
        rate = 0;
        startTime = 0;
        endTime = 0;
        airdropSupply = 0;
        totalFundingSupply = 0;
        token = ERC20(0xe6bc60a00b81c7f3cbc8f4ef3b0a6805b6851753);
    }

    function () payable external {
        require(now >= startTime, "Crowdsale has not started yet");
        require(now <= endTime, "Crowdsale has ended");
        uint256 amount = msg.value.mul(rate);
        require(token.transferFrom(owner, msg.sender, amount), "Token transfer failed");
        totalFundingSupply = totalFundingSupply.add(amount);
    }

    function withdrawCoinToOwner(uint256 _value) external onlyOwner {
        require(token.transfer(owner, _value), "Token withdrawal failed");
    }

    function airdrop(address[] _holders, uint256 paySize) external onlyOwner {
        uint256 requiredTokens = _holders.length.mul(paySize);
        require(airdropSupply >= requiredTokens, "Not enough tokens for airdrop");
        for (uint256 i = 0; i < _holders.length; i++) {
            require(token.transferFrom(owner, _holders[i], paySize), "Token transfer failed");
            emit Wasted(_holders[i], paySize, now);
        }
        airdropSupply = airdropSupply.sub(requiredTokens);
    }

    function processFunding(address receiver, uint256 _value, uint256 _rate) internal {
        uint256 tokenAmount = _value.mul(_rate);
        require(token.transferFrom(owner, receiver, tokenAmount), "Token transfer failed");
        totalFundingSupply = totalFundingSupply.add(tokenAmount);
    }

    function etherProceeds() external onlyOwner {
        owner.transfer(address(this).balance);
    }

    function init(uint256 _startTime, uint256 _endTime, uint256 _rate) external onlyOwner {
        require(_startTime < _endTime, "Start time must be before end time");
        require(_rate > 0, "Rate must be greater than zero");
        startTime = _startTime;
        endTime = _endTime;
        rate = _rate;
    }

    function changeToken(address _tokenAddress) external onlyOwner {
        require(_tokenAddress != address(0), "Invalid token address");
        token = ERC20(_tokenAddress);
    }
}
```

### Explanation of Implementation
1. **Fallback Function:**
   - The fallback function handles incoming Ether and checks if the crowdsale is active. It calculates the token amount based on the provided `_rate` and performs transfers accordingly.

2. **Withdraw Coin to Owner Function:**
   - Allows the owner to withdraw tokens from the contract.

3. **Airdrop Function:**
   - Distributes a fixed amount of tokens (`paySize`) to each address in the `_holders` array. Ensures enough tokens are available.

4. **Process Funding Function:**
   - Handles the logic of funding internally, ensuring tokens are transferred based on the `_rate`.

5. **Ether Proceeds Function:**
   - Withdraws all Ether collected during the crowdsale and transfers it to the owner.

6. **Init Function:**
   - Initializes the crowdsale with `startTime`, `endTime`, and `rate`. It enforces basic validation to ensure a proper setup.

7. **Change Token Function:**
   - Allows the owner to update the token address if needed.

### Notes:
- Functionality for the token transfer depends on the token contract (`ERC20`), with the assumption that it is ERC-20 compliant.
- Error handling is provided through `require` statements for each key operation.
- The code strictly adheres to Solidity `0.4.21` standards.