Here is the complete and functional `Kubera` smart contract based on the provided context and description, strictly adhering to the requirements and using Solidity version `0.4.11`:

```solidity
pragma solidity ^0.4.11;

contract SafeMath {
    function safeMul(uint a, uint b) internal returns (uint) {
        uint c = a * b;
        Assert(a == 0 || c / a == b);
        return c;
    }

    function safeSub(uint a, uint b) internal returns (uint) {
        Assert(b <= a);
        return a - b;
    }

    function safeAdd(uint a, uint b) internal returns (uint) {
        uint c = a + b;
        Assert(c >= a && c >= b);
        return c;
    }

    function Assert(bool assertion) internal {
        if (!assertion) {
            revert();
        }
    }
}

contract Kubera is SafeMath {
    string public standard = 'ERC20';
    string public name = 'Kubera token';
    string public symbol = 'KBR';
    uint8 public decimals = 0;
    uint256 public totalSupply;
    address public owner;
    uint public tokensSoldToInvestors = 0;
    uint public maxGoalInICO = 2100000000;
    uint256 public startTime = 1510325999;
    bool burned = false;
    bool hasICOStarted = false;
    address tokensHolder = 0x94B4776F8331DF237E087Ed548A3c8b4932D131B;

    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event TransferToReferral(address indexed referralAddress, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burned(uint amount);

    function Kubera() {
        owner = 0x084bf76c9ba9106d6114305fae9810fbbdb157d9;
        balanceOf[owner] = 2205000000;
        totalSupply = 2205000000;
    }

    function transfer(address _to, uint256 _value) returns (bool success) {
        require(now > startTime || msg.sender == owner);
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);
        balanceOf[_to] = safeAdd(balanceOf[_to], _value);
        Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        require(allowance[_from][msg.sender] >= _value);
        require(balanceOf[_from] >= _value);
        require(_value > 0);
        
        if (now <= startTime) {
            require(msg.sender == owner);
        } else if (tokensSoldToInvestors < maxGoalInICO) {
            tokensSoldToInvestors = safeAdd(tokensSoldToInvestors, _value);
            if (tokensSoldToInvestors > maxGoalInICO) {
                uint excess = safeSub(tokensSoldToInvestors, maxGoalInICO);
                _value = safeSub(_value, excess);
                tokensSoldToInvestors = maxGoalInICO;
            }
        }

        balanceOf[_from] = safeSub(balanceOf[_from], _value);
        balanceOf[_to] = safeAdd(balanceOf[_to], _value);
        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);
        Transfer(_from, _to, _value);
        return true;
    }

    function burn() {
        require(!burned);
        require(now > startTime);
        burned = true;
        uint remainingTokens = safeSub(balanceOf[owner], tokensSoldToInvestors);
        balanceOf[owner] = 0;
        balanceOf[tokensHolder] = safeAdd(balanceOf[tokensHolder], 105000000);
        Burned(remainingTokens);
    }
}
```

### Key Features Implemented:
1. **ERC20 Compliance**:
   - The contract implements `transfer`, `approve`, and `transferFrom` for token transfers and approval mechanisms.

2. **ICO Restrictions**:
   - Transfers are restricted before the start of the ICO.
   - During the ICO, tokens are tracked against the maximum goal (`maxGoalInICO`) and adjusted accordingly.

3. **Burn Mechanism**:
   - `burn()` allows burning unsold tokens after the ICO ends and transfers a fixed amount of tokens to a predefined wallet (`tokensHolder`).

4. **Events**:
   - Standard events (`Transfer`, `Approval`, `Burned`) to notify changes on the blockchain.

5. **SafeMath**:
   - Ensures safe mathematical operations to avoid overflows and underflows.

The contract strictly adheres to the context and description without introducing any additional dependencies or functionalities.