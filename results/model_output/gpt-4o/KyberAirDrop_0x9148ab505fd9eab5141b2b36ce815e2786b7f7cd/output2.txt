Below is the complete and functional `KyberGenesisToken` contract based strictly on the provided context and description:

```solidity
pragma solidity ^0.4.15;

contract Ownable {
    address public owner;

    /**
     * @dev The Ownable constructor sets the original `owner` of the contract to the sender
     * account.
     */
    function Ownable() {
        owner = msg.sender;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    /**
     * @dev Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}

contract ERC20Interface {
    function transferFrom(address _from, address _to, uint _value) returns (bool){}
    function transfer(address _to, uint _value) returns (bool){}
    function ERC20Interface(){}
}

/**
 * @title KyberGenesisToken
 * @notice This contract is a simple token contract with minting and burning capabilities. It is designed to be owned by a minter who can mint new tokens and end the minting process.
 * @dev Inherits from Ownable, allowing for ownership management. The token has a fixed supply mechanism where each address can only hold one token.
 */
contract KyberGenesisToken is Ownable {
    string public constant name = "Kyber Genesis Token";
    string public constant symbol = "KGT";
    uint public constant decimals = 0;

    uint public totalSupply = 0;
    mapping(address => uint) public balanceOf;

    /**
     * @notice Initializes the contract and sets the minter as the owner.
     * @param minter The address of the minter who will own the contract.
     */
    function KyberGenesisToken(address minter) {
        transferOwnership(minter);
    }

    /**
     * @notice Event emitted when tokens are transferred.
     * @param _from The address from which the tokens are sent.
     * @param _to The address to which the tokens are sent.
     * @param _value The amount of tokens transferred.
     */
    event Transfer(address indexed _from, address indexed _to, uint _value);

    /**
     * @notice Event emitted when the minting process is ended.
     * @param timestamp The block timestamp when the minting was ended.
     */
    event EndMinting(uint timestamp);

    /**
     * @notice Mints new tokens for the specified recipients.
     * @dev Only the owner (minter) can call this function. Each recipient can only receive one token.
     * @param recipients Array of addresses to receive the new tokens.
     */
    function mint(address[] recipients) onlyOwner {
        for (uint i = 0; i < recipients.length; i++) {
            address recipient = recipients[i];
            require(balanceOf[recipient] == 0); // Each address can only hold one token
            balanceOf[recipient] = 1;
            totalSupply += 1;
            Transfer(address(0), recipient, 1);
        }
    }

    /**
     * @notice Ends the minting process and transfers ownership to a dead address.
     * @dev Only the owner (minter) can call this function. After calling this function, no more tokens can be minted.
     */
    function endMinting() onlyOwner {
        transferOwnership(address(0)); // Transfers ownership to a dead address
        EndMinting(now); // Emits the EndMinting event
    }

    /**
     * @notice Burns the token held by the sender.
     * @dev The sender must hold exactly one token to burn it.
     */
    function burn() {
        require(balanceOf[msg.sender] == 1); // Must hold one token
        balanceOf[msg.sender] = 0;
        totalSupply -= 1;
        Transfer(msg.sender, address(0), 1); // Emits the Transfer event to indicate burning
    }

    /**
     * @notice Drains ERC20 tokens from the contract to a predefined multisig address.
     * @dev This function can be called by anyone to drain any accidentally sent ERC20 tokens.
     * @param token The ERC20 token contract to drain.
     * @param amount The amount of tokens to drain.
     */
    function emergencyERC20Drain(ERC20Interface token, uint amount) {
        address multisig = owner; // Use the owner's address as the multisig
        require(token.transfer(multisig, amount));
    }

    // ERC20 stubs
    function transfer(address _to, uint _value) returns (bool) {
        revert(); // Not implemented
    }

    function transferFrom(address _from, address _to, uint _value) returns (bool) {
        revert(); // Not implemented
    }

    function approve(address _spender, uint _value) returns (bool) {
        revert(); // Not implemented
    }

    function allowance(address _owner, address _spender) constant returns (uint) {
        return 0; // Not implemented
    }

    event Approval(address indexed _owner, address indexed _spender, uint _value);
}
``` 

### Key Points:
1. The `mint` function ensures that each address can only hold one token (`balanceOf[recipient] == 0`).
2. The `endMinting` function transfers ownership to the `address(0)` and emits the `EndMinting` event.
3. The `burn` function allows token holders to burn their token by reducing the total supply and updating the balance.
4. `emergencyERC20Drain` allows the contract to recover accidentally sent ERC20 tokens to the owner's (multisig) address.