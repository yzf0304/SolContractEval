```solidity
/**
 * @title LockProxy
 * @notice A contract for locking and unlocking assets between different blockchain networks.
 * @dev This contract facilitates the cross-chain transfer of assets. It locks assets on one chain and unlocks them on another.
 * The contract is owned and managed, with specific roles to control certain operations.
 */
contract LockProxy is Ownable {
    using SafeMath for uint;
    using SafeERC20 for IERC20;

    struct TxArgs {
        bytes toAssetHash;
        bytes toAddress;
        uint256 amount;
    }

    address public managerProxyContract;
    mapping(uint64 => bytes) public proxyHashMap;
    mapping(address => mapping(uint64 => bytes)) public assetHashMap;
    mapping(address => bool) safeTransfer;

    event SetManagerProxyEvent(address manager);
    event BindProxyEvent(uint64 toChainId, bytes targetProxyHash);
    event BindAssetEvent(address fromAssetHash, uint64 toChainId, bytes targetProxyHash, uint initialAmount);
    event UnlockEvent(address toAssetHash, address toAddress, uint256 amount);
    event LockEvent(address fromAssetHash, address fromAddress, uint64 toChainId, bytes toAssetHash, bytes toAddress, uint256 amount);

    modifier onlyManagerContract() {
        IEthCrossChainManagerProxy ieccmp = IEthCrossChainManagerProxy(managerProxyContract);
        require(_msgSender() == ieccmp.getEthCrossChainManager(), "msgSender is not EthCrossChainManagerContract");
        _;
    }

    function setManagerProxy(address ethCCMProxyAddr) onlyOwner public {
        require(ethCCMProxyAddr != address(0), "Invalid manager proxy address");
        managerProxyContract = ethCCMProxyAddr;
        emit SetManagerProxyEvent(managerProxyContract);
    }

    function bindProxyHash(uint64 toChainId, bytes memory targetProxyHash) onlyOwner public returns (bool) {
        require(toChainId > 0 && targetProxyHash.length > 0, "Invalid parameters");
        proxyHashMap[toChainId] = targetProxyHash;
        emit BindProxyEvent(toChainId, targetProxyHash);
        return true;
    }

    function bindAssetHash(address fromAssetHash, uint64 toChainId, bytes memory toAssetHash) onlyOwner public returns (bool) {
        require(fromAssetHash != address(0) && toChainId > 0 && toAssetHash.length > 0, "Invalid parameters");
        assetHashMap[fromAssetHash][toChainId] = toAssetHash;
        emit BindAssetEvent(fromAssetHash, toChainId, toAssetHash, getBalanceFor(fromAssetHash));
        return true;
    }

    function lock(address fromAssetHash, uint64 toChainId, bytes memory toAddress, uint256 amount) public payable returns (bool) {
        require(amount > 0, "Amount must be greater than 0");
        require(toChainId > 0 && toAddress.length > 0, "Invalid parameters");

        bytes memory toAssetHash = assetHashMap[fromAssetHash][toChainId];
        require(toAssetHash.length > 0, "Asset not bound to target chain");

        require(_transferToContract(fromAssetHash, amount), "Transfer to contract failed");

        TxArgs memory txArgs = TxArgs({ toAssetHash: toAssetHash, toAddress: toAddress, amount: amount });
        bytes memory txData = _serializeTxArgs(txArgs);

        IEthCrossChainManager ieccm = IEthCrossChainManager(IEthCrossChainManagerProxy(managerProxyContract).getEthCrossChainManager());
        require(proxyHashMap[toChainId].length > 0, "Proxy not bound for target chain");
        require(ieccm.crossChain(toChainId, proxyHashMap[toChainId], "unlock", txData), "Cross-chain call failed");

        emit LockEvent(fromAssetHash, _msgSender(), toChainId, toAssetHash, toAddress, amount);
        return true;
    }

    function unlock(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool) {
        TxArgs memory txArgs = _deserializeTxArgs(argsBs);
        require(txArgs.amount > 0, "Invalid unlock amount");

        address toAssetHash = Utils.bytesToAddress(txArgs.toAssetHash);
        address toAddress = Utils.bytesToAddress(txArgs.toAddress);
        require(toAddress != address(0), "Invalid target address");

        require(_transferFromContract(toAssetHash, toAddress, txArgs.amount), "Transfer from contract failed");

        emit UnlockEvent(toAssetHash, toAddress, txArgs.amount);
        return true;
    }

    function getBalanceFor(address fromAssetHash) public view returns (uint256) {
        if (fromAssetHash == address(0)) {
            return address(this).balance;
        } else {
            return IERC20(fromAssetHash).balanceOf(address(this));
        }
    }

    function _transferToContract(address fromAssetHash, uint256 amount) internal returns (bool) {
        if (fromAssetHash == address(0)) {
            require(msg.value == amount, "Ether value mismatch");
            return true;
        } else {
            require(_transferERC20ToContract(fromAssetHash, _msgSender(), address(this), amount), "ERC20 transfer to contract failed");
            return true;
        }
    }

    function _transferFromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool) {
        if (toAssetHash == address(0)) {
            (bool success, ) = toAddress.call{value: amount}("");
            require(success, "Ether transfer failed");
            return true;
        } else {
            require(_transferERC20FromContract(toAssetHash, toAddress, amount), "ERC20 transfer from contract failed");
            return true;
        }
    }

    function _transferERC20ToContract(address fromAssetHash, address fromAddress, address toAddress, uint256 amount) internal returns (bool) {
        IERC20(fromAssetHash).safeTransferFrom(fromAddress, toAddress, amount);
        return true;
    }

    function _transferERC20FromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool) {
        IERC20(toAssetHash).safeTransfer(toAddress, amount);
        return true;
    }

    function _serializeTxArgs(TxArgs memory args) internal pure returns (bytes memory) {
        return abi.encodePacked(
            ZeroCopySink.WriteVarBytes(args.toAssetHash),
            ZeroCopySink.WriteVarBytes(args.toAddress),
            ZeroCopySink.WriteUint255(args.amount)
        );
    }

    function _deserializeTxArgs(bytes memory valueBs) internal pure returns (TxArgs memory) {
        TxArgs memory args;
        uint256 offset = 0;

        (args.toAssetHash, offset) = ZeroCopySource.NextVarBytes(valueBs, offset);
        (args.toAddress, offset) = ZeroCopySource.NextVarBytes(valueBs, offset);
        (args.amount, offset) = ZeroCopySource.NextUint255(valueBs, offset);

        return args;
    }
}
```