Below is the completed implementation for the `MatBase` contract strictly according to the provided context and description. The code adheres to Solidity version `0.4.17` and does not include any unrelated code:

```solidity
pragma solidity ^0.4.17;

contract MatBase is Ownable, MatToken, MatBonus {

    using SafeMath for uint256;

    uint256 public constant _START_DATE = 1508284800;
    uint256 public constant _END_DATE = 1513641600;
    uint256 public constant CROWDSALE_PRICE = 100;
    address public constant ICO_ADDRESS = 0x6075a5A0620861cfeF593a51A01aF0fF179168C7;
    address public constant PARTNERS_WALLET = 0x39467d5B39F1d24BC8479212CEd151ad469B0D7E;
    address public constant TEAM_WALLET = 0xe1d32147b08b2a7808026D4A94707E321ccc7150;

    uint256 public startTime;
    uint256 public endTime;

    address public wallet;
    address public p_wallet;
    address public t_wallet;

    uint256 public totalCollected;
    uint256 public rate;

    bool public isWhitelistOn;
    uint256 public whiteListLimit;

    enum WLS {notlisted, listed, fulfilled}

    struct FundReservation {
        WLS status;
        uint256 reserved;
    }

    mapping (address => FundReservation) public whitelist;

    address public constant PRESALE_CONTRACT = 0x503FE694CE047eCB51952b79eCAB2A907Afe8ACd;

    event Mint(address indexed purchaser, uint256 amount);
    event Bonus(address indexed purchaser, uint256 amount);
    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amountTokens, string referral);
    event White(address indexed to, uint256 reservation);

    function MatBase() public {
        startTime = _START_DATE;
        endTime = _END_DATE;
        wallet = ICO_ADDRESS;
        rate = CROWDSALE_PRICE;
        p_wallet = PARTNERS_WALLET;
        t_wallet = TEAM_WALLET;
        balances[p_wallet] = MAT_PARTNERS_SUPPLY_LIMIT;
        balances[t_wallet] = MAT_TEAM_SUPPLY_LIMIT;
        totalSupply = MAT_PARTNERS_SUPPLY_LIMIT.add(MAT_TEAM_SUPPLY_LIMIT);
        whiteListLimit = MAT_TOTAL_SUPPLY_LIMIT;
    }

    function setStartTime(uint256 _startTime) onlyOwner public {
        require(_startTime > now);
        startTime = _startTime;
    }

    function setEndTime(uint256 _endTime) onlyOwner public {
        require(_endTime > startTime);
        endTime = _endTime;
    }

    function hasEnded() public constant returns (bool) {
        return now > endTime;
    }

    function mint(address _to, uint256 _tokens) internal returns (bool) {
        require(totalSupply.add(_tokens) <= MAT_TOTAL_SUPPLY_LIMIT);
        balances[_to] = balances[_to].add(_tokens);
        totalSupply = totalSupply.add(_tokens);
        Mint(_to, _tokens);
        return true;
    }

    function forwardFunds() internal {
        wallet.transfer(msg.value);
    }

    function validPurchase() internal constant returns (bool) {
        bool withinPeriod = now >= startTime && now <= endTime;
        bool nonZeroPurchase = msg.value != 0;
        return withinPeriod && nonZeroPurchase;
    }

    function () payable public {
        buyTokens(msg.sender);
    }

    function buyTokens(address beneficiary) public payable {
        require(beneficiary != address(0));
        require(validPurchase());

        uint256 weiAmount = msg.value;
        uint256 tokens = weiAmount.mul(rate).mul(MAT_UNIT);
        uint256 bonusTokens = calcBonus(tokens);

        mint(beneficiary, tokens);
        if (bonusTokens > 0) {
            mint(beneficiary, bonusTokens);
            Bonus(beneficiary, bonusTokens);
        }

        totalCollected = totalCollected.add(weiAmount);
        forwardFunds();

        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, "");
    }

    function buyTokensReferral(address beneficiary, string referral) public payable {
        require(beneficiary != address(0));
        require(validPurchase());

        uint256 weiAmount = msg.value;
        uint256 tokens = weiAmount.mul(rate).mul(MAT_UNIT);
        uint256 bonusTokens = calcBonus(tokens);

        mint(beneficiary, tokens);
        if (bonusTokens > 0) {
            mint(beneficiary, bonusTokens);
            Bonus(beneficiary, bonusTokens);
        }

        totalCollected = totalCollected.add(weiAmount);
        forwardFunds();

        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, referral);
    }

    function stopWhitelistReservetion() onlyOwner public {
        isWhitelistOn = false;
    }

    function setWhiteListStatus(bool _isWhitelistOn) onlyOwner public {
        isWhitelistOn = _isWhitelistOn;
    }

    function buyTokenWL(uint256 tokens) internal returns (bool) {
        require(isWhitelistOn);
        require(whitelist[msg.sender].status == WLS.listed);
        require(tokens <= whitelist[msg.sender].reserved);

        whitelist[msg.sender].status = WLS.fulfilled;
        whitelist[msg.sender].reserved = 0;

        return mint(msg.sender, tokens);
    }

    function regWL(address wlmember, uint256 reservation) onlyOwner public returns (bool) {
        require(whitelist[wlmember].status == WLS.notlisted);
        require(reservation > 0);
        require(whiteListLimit >= reservation);

        whitelist[wlmember] = FundReservation(WLS.listed, reservation);
        whiteListLimit = whiteListLimit.sub(reservation);

        White(wlmember, reservation);
        return true;
    }

    function convert(address _to, uint256 _pretokens, uint256 _tokens) onlyOwner public returns (bool) {
        require(_pretokens > 0 && _tokens > 0);
        require(totalSupply.add(_tokens) <= MAT_TOTAL_SUPPLY_LIMIT);

        balances[_to] = balances[_to].add(_tokens);
        totalSupply = totalSupply.add(_tokens);

        Mint(_to, _tokens);
        return true;
    }
}
```

This contract encapsulates all the required functionality, strictly adhering to the provided description and context. It is ready to be deployed using Solidity version `0.4.17`.