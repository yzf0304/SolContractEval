Here is the fully implemented version of the `MintHelper` contract based on the given description and instructions:

```solidity
pragma solidity ^0.5.10;

import "./SafeMath.sol";

contract MintHelper is Ownable {
    using SafeMath for uint;

    string public name;
    address public mintableToken;
    mapping(bytes32 => bool) successfulPayments;

    constructor(address mToken, string memory mName)
        public
    {
        mintableToken = mToken;
        name = mName;
    }

    /**
     * @notice Allows the owner to set the mintable token address.
     * @dev Only the owner can call this function. Updates the `mintableToken` state variable.
     * @param mToken The address of the mintable token.
     * @return A boolean indicating the success of the operation.
     */
    function setMintableToken(address mToken)
        public
        onlyOwner
        returns (bool)
    {
        require(mToken != address(0), "MintHelper: mintable token address cannot be the zero address");
        
        mintableToken = mToken;
        return true;
    }

    /**
     * @notice Checks if a payment with a given ID was successful.
     * @dev Uses the `successfulPayments` mapping to check the status of the payment.
     * @param paymentId The unique identifier for the payment.
     * @return A boolean indicating whether the payment was successful.
     */
    function paymentSuccessful(bytes32 paymentId) public view returns (bool) {
        return successfulPayments[paymentId];
    }

    /**
     * @notice Proxies the minting of a token using the provided nonce and challenge digest.
     * @dev Calls the `mint` function on the `mintableToken` contract. Requires that the minting is successful.
     * @param nonce The nonce used in the minting process.
     * @param challenge_digest The challenge digest used in the minting process.
     * @return A boolean indicating the success of the minting operation.
     */
    function proxyMint(uint256 nonce, bytes32 challenge_digest)
        public
        returns (bool)
    {
        require(mintableToken != address(0), "MintHelper: mintable token address is not set");

        ERC918Interface token = ERC918Interface(mintableToken);
        require(token.mint(nonce, challenge_digest), "MintHelper: minting failed");
        return true;
    }

    /**
     * @notice Allows the owner to withdraw any ETH held by the contract.
     * @dev Only the owner can call this function. Transfers the entire balance of the contract to the owner.
     */
    function withdraw()
        public
        onlyOwner
    {
        msg.sender.transfer(address(this).balance);
    }

    /**
     * @notice Sends a specified amount of tokens to a destination address.
     * @dev Only the owner can call this function. Uses the ERC20 `transfer` function to send tokens.
     * @param _tokenAddr The address of the ERC20 token to send.
     * @param dest The destination address to receive the tokens.
     * @param value The amount of tokens to send.
     * @return A boolean indicating the success of the transfer.
     */
    function send(address _tokenAddr, address dest, uint value)
        public
        onlyOwner
        returns (bool)
    {
        require(_tokenAddr != address(0), "MintHelper: token address cannot be the zero address");
        require(dest != address(0), "MintHelper: destination address cannot be the zero address");

        ERC20Interface token = ERC20Interface(_tokenAddr);
        require(token.transfer(dest, value), "MintHelper: transfer failed");
        return true;
    }

    /**
     * @notice Sends tokens to multiple destination addresses in a single transaction.
     * @dev Only the owner can call this function. Ensures that the payment ID is unique and not already marked as successful. Uses the ERC20 `transfer` function to send tokens to each destination.
     * @param _tokenAddr The address of the ERC20 token to send.
     * @param paymentId The unique identifier for the payment.
     * @param dests An array of destination addresses.
     * @param values An array of token amounts corresponding to each destination address.
     * @return The number of successful transfers.
     */
    function multisend(address _tokenAddr, bytes32 paymentId, address[] memory dests, uint256[] memory values)
        public
        onlyOwner
        returns (uint256)
    {
        require(!successfulPayments[paymentId], "MintHelper: payment already marked as successful");
        require(dests.length == values.length, "MintHelper: destination and values arrays must have the same length");
        require(_tokenAddr != address(0), "MintHelper: token address cannot be the zero address");

        ERC20Interface token = ERC20Interface(_tokenAddr);
        uint256 totalSuccessful = 0;

        for (uint256 i = 0; i < dests.length; i++) {
            require(dests[i] != address(0), "MintHelper: destination address cannot be the zero address");
            require(token.transfer(dests[i], values[i]), "MintHelper: transfer to destination failed");
            totalSuccessful = totalSuccessful.add(1);
        }

        successfulPayments[paymentId] = true;
        return totalSuccessful;
    }
}
```

### Explanation of Implementation:

1. **`setMintableToken`:** Allows the owner to set a new mintable token address after ensuring it's not the zero address.

2. **`paymentSuccessful`:** Returns whether a particular `paymentId` has been marked as successful.

3. **`proxyMint`:** Calls the `mint` function of the `mintableToken`. It validates that `mintableToken` is set and confirms that the minting succeeds.

4. **`withdraw`:** Allows the owner to withdraw all ETH in the contract by transferring the balance to the caller.

5. **`send`:** Transfers a specific amount of ERC20 tokens to a single destination address.

6. **`multisend`:** Handles batch token transfers by iterating over the `dests` and `values` arrays. It ensures that each destination address receives the right number of tokens and that the `paymentId` hasnâ€™t been previously processed.

7. **Error Handling:** Each function is carefully validated to prevent common issues like zero addresses, mismatched array lengths, and failed operations. 

8. **SafeMath:** Ensures safe arithmetic operations for handling token balances.

### Security Notes:
- The contract includes owner-only functions to prevent unauthorized access.
- Use of mappings prevents duplicate `paymentId` processing in `multisend`.

Make sure to provide the `SafeMath` library and set the appropriate imports for deployment.