Below is the completed implementation of the `MintHelper` contract strictly adhering to the provided context and description. All functions have been implemented according to the requirements:

```solidity
pragma solidity ^0.5.10;

import "./SafeMath.sol"; // Ensure SafeMath is correctly imported

/**
 * @notice This contract serves as a helper for minting tokens and managing token transfers. It allows the owner to set a mintable token, proxy minting of tokens, and manage token and ETH withdrawals. The contract also supports batch sending of tokens to multiple addresses.
 * @dev Inherits from OpenZeppelin's Ownable contract for access control. Uses SafeMath for arithmetic operations to prevent overflows/underflows. Implements a mapping to track successful payments by payment ID.
 */
contract MintHelper is Ownable {
    using SafeMath for uint;

    string public name;
    address public mintableToken;
    mapping(bytes32 => bool) successfulPayments;

    constructor(address mToken, string memory mName)
    public
    {
        mintableToken = mToken;
        name = mName;
    }

    /**
     * @notice Allows the owner to set the mintable token address.
     * @dev Only the owner can call this function. Updates the `mintableToken` state variable.
     * @param mToken The address of the mintable token.
     * @return A boolean indicating the success of the operation.
     */
    function setMintableToken(address mToken)
    public onlyOwner
    returns (bool)
    {
        require(mToken != address(0), "MintHelper: mintable token address is the zero address");
        mintableToken = mToken;
        return true;
    }

    /**
     * @notice Checks if a payment with a given ID was successful.
     * @dev Uses the `successfulPayments` mapping to check the status of the payment.
     * @param paymentId The unique identifier for the payment.
     * @return A boolean indicating whether the payment was successful.
     */
    function paymentSuccessful(bytes32 paymentId) public view returns (bool) {
        return successfulPayments[paymentId];
    }

    /**
     * @notice Proxies the minting of a token using the provided nonce and challenge digest.
     * @dev Calls the `mint` function on the `mintableToken` contract. Requires that the minting is successful.
     * @param nonce The nonce used in the minting process.
     * @param challenge_digest The challenge digest used in the minting process.
     * @return A boolean indicating the success of the minting operation.
     */
    function proxyMint(uint256 nonce, bytes32 challenge_digest)
    public
    returns (bool)
    {
        ERC918Interface mintable = ERC918Interface(mintableToken);
        require(mintable.mint(nonce, challenge_digest), "MintHelper: minting failed");
        return true;
    }

    /**
     * @notice Allows the owner to withdraw any ETH held by the contract.
     * @dev Only the owner can call this function. Transfers the entire balance of the contract to the owner.
     */
    function withdraw()
    public onlyOwner
    {
        uint256 balance = address(this).balance;
        require(balance > 0, "MintHelper: contract has no ETH balance");
        msg.sender.transfer(balance);
    }

    /**
     * @notice Sends a specified amount of tokens to a destination address.
     * @dev Only the owner can call this function. Uses the ERC20 `transfer` function to send tokens.
     * @param _tokenAddr The address of the ERC20 token to send.
     * @param dest The destination address to receive the tokens.
     * @param value The amount of tokens to send.
     * @return A boolean indicating the success of the transfer.
     */
    function send(address _tokenAddr, address dest, uint value)
    public onlyOwner
    returns (bool)
    {
        ERC20Interface token = ERC20Interface(_tokenAddr);
        require(token.transfer(dest, value), "MintHelper: token transfer failed");
        return true;
    }

    /**
     * @notice Sends tokens to multiple destination addresses in a single transaction.
     * @dev Only the owner can call this function. Ensures that the payment ID is unique and not already marked as successful. Uses the ERC20 `transfer` function to send tokens to each destination.
     * @param _tokenAddr The address of the ERC20 token to send.
     * @param paymentId The unique identifier for the payment.
     * @param dests An array of destination addresses.
     * @param values An array of token amounts corresponding to each destination address.
     * @return The number of successful transfers.
     */
    function multisend(address _tokenAddr, bytes32 paymentId, address[] memory dests, uint256[] memory values)
    public onlyOwner
    returns (uint256)
    {
        require(!successfulPayments[paymentId], "MintHelper: payment already processed");
        require(dests.length == values.length, "MintHelper: destinations and values length mismatch");

        ERC20Interface token = ERC20Interface(_tokenAddr);
        uint256 successfulTransfers = 0;

        for (uint256 i = 0; i < dests.length; i++) {
            require(token.transfer(dests[i], values[i]), "MintHelper: token transfer failed for one address");
            successfulTransfers = successfulTransfers.add(1);
        }

        successfulPayments[paymentId] = true;
        return successfulTransfers;
    }
}
```

### Key Implementation Details:
1. **Minting Proxy**: Uses the `mint` function from the `ERC918Interface` for minting operations.
2. **Token Transfers**: Implements both single token transfers and batch transfers (`send` and `multisend`).
3. **Payment Tracking**: Ensures unique payment IDs for batch transfers via the `successfulPayments` mapping.
4. **ETH Withdrawals**: The `withdraw` function enables the owner to recover ETH held in the contract.

The code adheres to Solidity `0.5.10` syntax and does not include extraneous dependencies or functionality. Ensure that `SafeMath.sol` is imported in the same directory or correctly included.