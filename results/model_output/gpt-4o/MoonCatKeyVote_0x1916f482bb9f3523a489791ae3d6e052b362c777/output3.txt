```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

/**
 * @title MoonCatKeyVote
 * @notice This contract allows for a community vote to decide whether the MoonCatRescue developers should destroy their private key, preventing the release of future Genesis MoonCats.
 * @dev The contract uses a Merkle tree to verify voter eligibility. The vote is open for 48 hours once started and can be cancelled by the owner before it starts.
 */
contract MoonCatKeyVote {
    event VoteSubmitted(address indexed voter, bool vote);

    uint public voteStartTime = 0;
    bool public voteCancelled = false;
    mapping(address => bool) public hasVoted;
    uint32 public yesVotes = 0;
    uint32 public noVotes = 0;

    bytes32 public immutable merkleRoot;
    address public immutable owner;

    /**
     * @dev Modifier to restrict function access to the contract owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner, "Owner Only");
        _;
    }

    /**
     * @dev Modifier to ensure the vote is pending and not yet started or cancelled.
     */
    modifier voteContractIsPending() {
        require(!voteCancelled, "Vote Contract Cancelled");
        require(voteStartTime == 0, "Vote Already Started");
        _;
    }

    /**
     * @dev Modifier to ensure the vote is active and within the 48-hour voting period.
     */
    modifier voteContractIsActive() {
        require(!voteCancelled, "Vote Contract Cancelled");
        require(voteStartTime > 0, "Vote Not Started");
        require(block.timestamp < (voteStartTime + 48 hours), "Vote Ended");
        _;
    }

    /**
     * @dev Modifier to ensure the vote is complete and the 48-hour voting period has ended.
     */
    modifier voteContractIsComplete() {
        require(!voteCancelled, "Vote Contract Cancelled");
        require(voteStartTime > 0, "Vote Not Started");
        require(block.timestamp > (voteStartTime + 48 hours), "Vote Not Ended");
        _;
    }

    /**
     * @notice Initializes the contract with the provided Merkle root and sets the owner.
     * @param merkleRoot_ The Merkle root used to verify voter eligibility.
     */
    constructor(bytes32 merkleRoot_) {
        merkleRoot = merkleRoot_;
        owner = msg.sender;
    }

    /**
     * @notice Starts the vote, setting the start time to the current block timestamp.
     * @dev Can only be called by the contract owner and when the vote is pending.
     */
    function startVote() public onlyOwner voteContractIsPending {
        voteStartTime = block.timestamp;
    }

    /**
     * @notice Cancels the vote, setting the `voteCancelled` flag to true.
     * @dev Can only be called by the contract owner and when the vote is pending.
     */
    function cancelVote() public onlyOwner voteContractIsPending {
        voteCancelled = true;
    }

    /**
     * @notice Returns the result of the vote, indicating whether the "Yes" votes outnumber the "No" votes.
     * @dev Can only be called after the vote has ended.
     * @return bool True if "Yes" votes are greater than "No" votes, otherwise false.
     */
    function getResult() public view voteContractIsComplete returns (bool) {
        return yesVotes > noVotes;
    }

    /**
     * @notice Submits a vote to the contract after verifying voter eligibility through Merkle proof.
     * @dev Verifies eligibility and updates the vote count. Emits an event for logging.
     * @param eligibilityProof The Merkle proof array used to verify voter eligibility.
     * @param vote The vote being submitted (true for yes, false for no).
     */
    function submitVote(bytes32[] calldata eligibilityProof, bool vote) public voteContractIsActive {
        require(!hasVoted[msg.sender], "Already Voted");

        // Verify voter eligibility using Merkle proof
        bytes32 computedHash = keccak256(abi.encodePacked(msg.sender));
        for (uint256 i = 0; i < eligibilityProof.length; i++) {
            if (computedHash < eligibilityProof[i]) {
                computedHash = keccak256(abi.encodePacked(computedHash, eligibilityProof[i]));
            } else {
                computedHash = keccak256(abi.encodePacked(eligibilityProof[i], computedHash));
            }
        }
        require(computedHash == merkleRoot, "Invalid Merkle Proof");

        // Record vote
        hasVoted[msg.sender] = true;
        if (vote) {
            yesVotes++;
        } else {
            noVotes++;
        }

        // Emit event
        emit VoteSubmitted(msg.sender, vote);
    }
}
```