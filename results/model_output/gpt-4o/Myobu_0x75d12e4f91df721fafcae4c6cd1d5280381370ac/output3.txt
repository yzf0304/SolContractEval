Here's the completed implementation of the Myobu smart contract based on the provided context and description:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

contract Myobu is Context, IERC20, Ownable {
    using SafeMath for uint256;

    string private constant _name = unicode"Myōbu";
    string private constant _symbol = "MYOBU";
    uint8 private constant _decimals = 9;
    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _tTotal = 1000000000000 * 10**9; // 1 trillion tokens
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;

    uint256 private _taxFee = 7;
    uint256 private _teamFee = 5;

    address payable private _teamAddress;
    address payable private _marketingFunds;

    mapping(address => uint256) private _rOwned;
    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private bots;

    mapping(address => uint256) private buyCooldown;
    mapping(address => uint256) private sellCooldown;
    mapping(address => uint256) private firstSell;
    mapping(address => uint256) private sellNumber;

    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;

    bool private tradingOpen = false;
    bool private liquidityAdded = false;
    bool private inSwap = false;
    bool private swapEnabled = false;
    bool private cooldownEnabled = false;

    uint256 private _maxTxAmount = _tTotal;

    event MaxTxAmountUpdated(uint256 _maxTxAmount);

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor(address payable teamAddress, address payable marketingFunds) {
        _teamAddress = teamAddress;
        _marketingFunds = marketingFunds;
        _rOwned[_msgSender()] = _rTotal;

        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_teamAddress] = true;
        _isExcludedFromFee[_marketingFunds] = true;

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    // ERC20 Standard Functions
    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    // Internal Functions
    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {
        require(rAmount <= _rTotal, "Amount exceeds total reflections");
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(!bots[from] && !bots[to], "Bot address blocked");

        if (from != owner() && to != owner() && !_isExcludedFromFee[to] && !_isExcludedFromFee[from]) {
            require(tradingOpen, "Trading is not yet open");

            if (cooldownEnabled) {
                if (from == uniswapV2Pair) {
                    require(buyCooldown[to] < block.timestamp, "Cooldown not expired");
                    buyCooldown[to] = block.timestamp + 30 seconds;
                } else if (to == uniswapV2Pair) {
                    require(sellCooldown[from] < block.timestamp, "Cooldown not expired");
                    sellCooldown[from] = block.timestamp + (sellNumber[from] == 0 ? 1 hours :
                        (sellNumber[from] == 1 ? 2 hours : (sellNumber[from] == 2 ? 6 hours : 24 hours)));
                    sellNumber[from]++;
                }
            }
        }

        uint256 contractTokenBalance = balanceOf(address(this));
        bool shouldSwap = contractTokenBalance >= _maxTxAmount;

        if (shouldSwap && !inSwap && from != uniswapV2Pair && swapEnabled) {
            swapTokensForEth(contractTokenBalance);
            sendETHToFee(address(this).balance);
        }

        _tokenTransfer(from, to, amount, !_isExcludedFromFee[from] && !_isExcludedFromFee[to]);
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function sendETHToFee(uint256 amount) private {
        _teamAddress.transfer(amount.div(2));
        _marketingFunds.transfer(amount.div(2));
    }

    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
        if (!takeFee) {
            removeAllFee();
        }

        uint256 currentRate = _getRate();
        uint256 rAmount = amount.mul(currentRate);
        uint256 rFee = _taxFee.mul(currentRate);
        uint256 rTeam = _teamFee.mul(currentRate);

        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rAmount.sub(rFee).sub(rTeam));

        _takeTeam(_teamFee);
        _reflectFee(rFee);

        emit Transfer(sender, recipient, amount.sub(_taxFee).sub(_teamFee));

        if (!takeFee) {
            restoreAllFee();
        }
    }

    function _reflectFee(uint256 rFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(rFee.div(_getRate()));
    }

    function _takeTeam(uint256 tTeam) private {
        uint256 currentRate = _getRate();
        uint256 rTeam = tTeam.mul(currentRate);

        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
    }

    function removeAllFee() private {
        if (_taxFee == 0 && _teamFee == 0) return;

        _taxFee = 0;
        _teamFee = 0;
    }

    function restoreAllFee() private {
        _taxFee = 7;
        _teamFee = 5;
    }

    function _getRate() private view returns (uint256) {
        return _rTotal.div(_tTotal);
    }

    // Public Functions
    function setCooldownEnabled(bool enabled) external onlyOwner {
        cooldownEnabled = enabled;
    }

    function openTrading() external onlyOwner {
        tradingOpen = true;
    }

    function addLiquidity() external onlyOwner {
        require(!liquidityAdded, "Liquidity already added");

        IUniswapV2Router02 router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Router = router;

        _approve(address(this), address(router), _tTotal);

        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());

        router.addLiquidityETH{value: address(this).balance}(
            address(this),
            balanceOf(address(this)),
            0,
            0,
            owner(),
            block.timestamp
        );

        swapEnabled = true;
        cooldownEnabled = true;
        liquidityAdded = true;

        IERC20(uniswapV2Pair).approve(address(router), type(uint256).max);
    }

    function manualSwap() external {
        uint256 contractTokenBalance = balanceOf(address(this));
        swapTokensForEth(contractTokenBalance);
    }

    function manualSend() external {
        sendETHToFee(address(this).balance);
    }

    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {
        _maxTxAmount = _tTotal.mul(maxTxPercent).div(100);
    }

    receive() external payable {}
}
```

This contract implements all the features outlined in the description, adhering strictly to the specified requirements and functionality.