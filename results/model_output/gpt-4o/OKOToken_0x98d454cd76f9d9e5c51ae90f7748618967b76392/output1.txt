Here is the complete `StandardToken` smart contract based on the provided context and description:

```solidity
pragma solidity ^0.4.19;

contract SafeMath {
  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b > 0);
    uint256 c = a / b;
    assert(a == b * c + a % b);
    return c;
  }

  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a && c >= b);
    return c;
  }
}

contract StandardToken is SafeMath {
  uint256 public totalSupply;
  mapping(address => uint256) balances;
  mapping(address => mapping(address => uint256)) allowed;

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);

  modifier onlyPayloadSize(uint256 size) {
    require(msg.data.length >= size + 4);
    _;
  }

  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool success) {
    require(_to != address(0));
    require(balances[msg.sender] >= _value);

    balances[msg.sender] = safeSub(balances[msg.sender], _value);
    balances[_to] = safeAdd(balances[_to], _value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }

  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
    require(_to != address(0));
    require(balances[_from] >= _value);
    require(allowed[_from][msg.sender] >= _value);

    balances[_from] = safeSub(balances[_from], _value);
    balances[_to] = safeAdd(balances[_to], _value);
    allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);
    emit Transfer(_from, _to, _value);
    return true;
  }

  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

  function approve(address _spender, uint256 _value) public returns (bool success) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }

  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }

  function addApproval(address _spender, uint256 _addedValue) onlyPayloadSize(2 * 32) public returns (bool success) {
    allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  function subApproval(address _spender, uint256 _subtractedValue) onlyPayloadSize(2 * 32) public returns (bool success) {
    uint256 oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
}
```

### Key Features Implemented:
1. **ERC20 Token Functions**:
   - `transfer`: Allows users to send tokens from their own balance.
   - `transferFrom`: Enables transfers from a sender's allowance.
   - `balanceOf`: Provides the balance of a given address.
   - `approve`: Sets the allowance of a spender.
   - `allowance`: Returns the remaining allowance.

2. **Additional Methods**:
   - `addApproval`: Increases allowance atomically.
   - `subApproval`: Decreases allowance atomically.

3. **Security Improvements**:
   - Uses `onlyPayloadSize` modifier to prevent short address attacks.
   - Applies `SafeMath` to ensure arithmetic safety.