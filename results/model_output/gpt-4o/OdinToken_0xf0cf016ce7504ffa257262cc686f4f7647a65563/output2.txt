Below is the complete and functional implementation of the `OdinToken` smart contract based strictly on the provided context and description. The contract is compatible with Solidity version `0.4.21` and implements all required functionality without introducing extraneous code or dependencies:

```solidity
pragma solidity ^0.4.21;

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    event Burn(uint tokens);
}

contract Owned {
    address public owner;
    address private newOwner;

    event OwnershipTransferred(address indexed _from, address indexed _to);

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address _newOwner) onlyOwner public {
        owner = _newOwner;
        emit OwnershipTransferred(msg.sender, _newOwner);
    }
}

contract OdinToken is ERC20Interface, Owned {
    using SafeMath for uint256;

    string public symbol;
    string public name;
    uint8 public decimals;
    uint private _totalSupply;
    bool private _whitelistAll;

    struct balanceData {
        bool locked;
        uint balance;
        uint airDropQty;
    }

    mapping(address => balanceData) balances;
    mapping(address => mapping(address => uint)) allowed;

    function OdinToken() public {
        owner = msg.sender;
        symbol = "ODIN";
        name = "ODIN Token";
        decimals = 18;
        _whitelistAll = false;
        _totalSupply = 100000000000000000000000;
        balances[owner].balance = _totalSupply;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function totalSupply() constant public returns (uint256) {
        return _totalSupply;
    }

    function whitelistAddress(address to) onlyOwner public returns (bool) {
        balances[to].airDropQty = 0;
        return true;
    }

    function whitelistAllAddresses() onlyOwner public returns (bool) {
        _whitelistAll = true;
        return true;
    }

    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner].balance;
    }

    function transfer(address to, uint tokens) public returns (bool success) {
        require(to != address(0));
        require(to != msg.sender);
        require(balances[msg.sender].balance >= tokens);

        if (!_whitelistAll && balances[msg.sender].airDropQty > 0) {
            uint restrictedAmount = getRestrictedAmount(balances[msg.sender].airDropQty);
            require(tokens <= balances[msg.sender].balance.sub(restrictedAmount));
        }

        balances[msg.sender].balance = balances[msg.sender].balance.sub(tokens);
        balances[to].balance = balances[to].balance.add(tokens);

        emit Transfer(msg.sender, to, tokens);
        return true;
    }

    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        require(to != address(0));
        require(balances[from].balance >= tokens);
        require(allowed[from][msg.sender] >= tokens);

        balances[from].balance = balances[from].balance.sub(tokens);
        balances[to].balance = balances[to].balance.add(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);

        emit Transfer(from, to, tokens);
        return true;
    }

    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }

    function burn(uint256 tokens) onlyOwner public returns (bool) {
        require(tokens <= balances[owner].balance);
        _totalSupply = _totalSupply.sub(tokens);
        balances[owner].balance = balances[owner].balance.sub(tokens);

        emit Burn(tokens);
        return true;
    }

    function getRestrictedAmount(uint airDropQty) internal view returns (uint) {
        if (_whitelistAll) {
            return 0;
        }

        if (now < 1535760000) { // Before Sep 1, 2018
            return airDropQty;
        } else if (now <= 1538352000) { // Sep 1 - Sep 30, 2018
            return airDropQty.mul(90).div(100);
        } else if (now <= 1546300800) { // Oct 1 - Dec 31, 2018
            return airDropQty.mul(75).div(100);
        } else if (now <= 1554076800) { // Jan 1 - Mar 31, 2019
            return airDropQty.mul(50).div(100);
        } else if (now <= 1561939200) { // Apr 1 - Jun 30, 2019
            return airDropQty.mul(25).div(100);
        } else {
            return 0; // After Jun 30, 2019
        }
    }

    function () public {
        revert();
    }
}
```

This implementation satisfies all described requirements, including airdrop transfer restrictions, whitelisting, and basic ERC20 functionalities. It uses `SafeMath` for arithmetic operations to avoid overflow and underflow issues. Additionally, it adheres strictly to the provided description.