The `owned` smart contract provides ownership control functionality with nomination and acceptance mechanics. Below is the complete implementation based on the provided context and description:

```solidity
pragma solidity ^0.4.18;

/**
 * @notice This contract provides basic ownership control functionality. It allows for the transfer of ownership through a two-step process: nomination and acceptance.
 * @dev The contract includes a modifier `onlyOwner` to restrict certain functions to the current owner, and `onlyOwnerCandidate` to restrict certain functions to the nominated owner candidate.
 */
contract owned {

    address public owner;

    address public ownerCandidate;

    /**
     * @notice Initializes the contract setting the deployer as the initial owner.
     * @dev The constructor sets the `owner` to the address that deploys the contract.
     */
    function owned() public {
        owner = msg.sender;
    }

    /**
     * @dev Modifier to check that the caller is the current owner of the contract.
     * @dev Reverts if the caller is not the owner.
     */
    modifier onlyOwner {
        assert(owner == msg.sender);
        _;
    }

    /**
     * @dev Modifier to check that the caller is the current owner candidate.
     * @dev Reverts if the caller is not the owner candidate.
     */
    modifier onlyOwnerCandidate {
        assert(msg.sender == ownerCandidate);
        _;
    }

    /**
     * @notice Allows the current owner to nominate a new owner candidate.
     * @dev Only the current owner can call this function.
     * @param candidate The address of the new owner candidate.
     */
    function transferOwnership(address candidate) external onlyOwner {
        require(candidate != address(0)); // Ensure the candidate address is valid.
        ownerCandidate = candidate;      // Set the new owner candidate.
    }

    /**
     * @notice Allows the nominated owner candidate to accept the ownership.
     * @dev Only the nominated owner candidate can call this function.
     * @dev After the ownership is accepted, the `owner` is set to the `ownerCandidate`, and `ownerCandidate` is reset to 0x0.
     */
    function acceptOwnership() external onlyOwnerCandidate {
        owner = ownerCandidate;         // Transfer ownership to the candidate.
        ownerCandidate = address(0);    // Reset the owner candidate to zero address.
    }
}
```

### Explanation:
1. **Constructor (`owned`)**:
   - Sets the deployer of the contract (`msg.sender`) as the initial owner.

2. **Modifiers**:
   - `onlyOwner`: Ensures that only the current owner can execute certain functions.
   - `onlyOwnerCandidate`: Ensures that only the nominated owner candidate can execute certain functions.

3. **`transferOwnership(address candidate)`**:
   - Allows the current owner to nominate an address (`candidate`) as the new owner candidate.
   - The `candidate` address must be valid (`candidate != address(0)`).

4. **`acceptOwnership()`**:
   - Allows the owner candidate to accept ownership, making the ownership official.
   - Resets the `ownerCandidate` to `address(0)` to avoid ambiguity.

This implementation adheres strictly to the provided description and uses Solidity version `0.4.18` syntax and features.