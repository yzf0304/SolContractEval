Here is the completed `owned` smart contract, strictly adhering to the provided context and description. It implements the ownership transfer functionality with nomination and acceptance steps.

```solidity
pragma solidity ^0.4.18;

/**
 * @notice This contract provides basic ownership control functionality. It allows for the transfer of ownership through a two-step process: nomination and acceptance.
 * @dev The contract includes a modifier `onlyOwner` to restrict certain functions to the current owner, and `onlyOwnerCandidate` to restrict certain functions to the nominated owner candidate.
 */
contract owned {

    address public owner;

    address public ownerCandidate;

    /**
     * @notice Initializes the contract setting the deployer as the initial owner.
     * @dev The constructor sets the `owner` to the address that deploys the contract.
     */
    function owned() public {
        owner = msg.sender;
    }

    /**
     * @dev Modifier to check that the caller is the current owner of the contract.
     * @dev Reverts if the caller is not the owner.
     */
    modifier onlyOwner {
        assert(owner == msg.sender);
        _;
    }

    /**
     * @dev Modifier to check that the caller is the current owner candidate.
     * @dev Reverts if the caller is not the owner candidate.
     */
    modifier onlyOwnerCandidate {
        assert(msg.sender == ownerCandidate);
        _;
    }

    /**
     * @notice Allows the current owner to nominate a new owner candidate.
     * @dev Only the current owner can call this function.
     * @param candidate The address of the new owner candidate.
     */
    function transferOwnership(address candidate) external onlyOwner {
        ownerCandidate = candidate;
    }

    /**
     * @notice Allows the nominated owner candidate to accept the ownership.
     * @dev Only the nominated owner candidate can call this function.
     * @dev After the ownership is accepted, the `owner` is set to the `ownerCandidate`, and `ownerCandidate` is reset to 0x0.
     */
    function acceptOwnership() external onlyOwnerCandidate {
        owner = ownerCandidate;
        ownerCandidate = address(0);
    }
}
```

### Explanation of the implementation:

1. **`owner` and `ownerCandidate` Variables:**
   - `owner`: Stores the current owner of the contract.
   - `ownerCandidate`: Stores the address of the nominated owner candidate.

2. **Constructor (`owned`):**
   - Sets the deployer (`msg.sender`) as the initial `owner`.

3. **Modifiers:**
   - `onlyOwner`: Ensures that only the current owner can call certain functions.
   - `onlyOwnerCandidate`: Ensures that only the nominated owner candidate can call certain functions.

4. **Ownership Transfer Functions:**
   - `transferOwnership`: Allows the current owner to nominate a new owner candidate.
   - `acceptOwnership`: Allows the nominated owner candidate to accept ownership. Upon acceptance, ownership is transferred, and `ownerCandidate` is reset to `0x0` (null address).

This contract strictly adheres to the provided requirements without introducing additional functionality or dependencies.