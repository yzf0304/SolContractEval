```solidity
contract owned {

    address public owner;
    address public ownerCandidate;

    /**
     * @notice Initializes the contract setting the deployer as the initial owner.
     * @dev The constructor sets the `owner` to the address that deploys the contract.
     */
    function owned() public {
        owner = msg.sender;
    }

    /**
     * @dev Modifier to check that the caller is the current owner of the contract.
     * @dev Reverts if the caller is not the owner.
     */
    modifier onlyOwner {
        assert(owner == msg.sender);
        _;
    }

    /**
     * @dev Modifier to check that the caller is the current owner candidate.
     * @dev Reverts if the caller is not the owner candidate.
     */
    modifier onlyOwnerCandidate() {
        assert(msg.sender == ownerCandidate);
        _;
    }

    /**
     * @notice Allows the current owner to nominate a new owner candidate.
     * @dev Only the current owner can call this function.
     * @param candidate The address of the new owner candidate.
     */
    function transferOwnership(address candidate) external onlyOwner {
        ownerCandidate = candidate;
    }

    /**
     * @notice Allows the nominated owner candidate to accept the ownership.
     * @dev Only the nominated owner candidate can call this function.
     * @dev After the ownership is accepted, the `owner` is set to the `ownerCandidate`, and `ownerCandidate` is reset to 0x0.
     */
    function acceptOwnership() external onlyOwnerCandidate {
        owner = ownerCandidate;
        ownerCandidate = address(0);
    }
}
```