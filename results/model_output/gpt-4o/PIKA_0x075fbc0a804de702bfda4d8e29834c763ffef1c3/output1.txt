Below is the complete implementation of the `PIKA` contract based on the provided description and context:

```solidity
// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.7.6;

import "./SafeMath.sol";

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // Silence state mutability warning
        return msg.data;
    }
}

contract Owned is Context {
    modifier onlyOwner() virtual {
        require(_msgSender() == owner, "Only owner can call this function");
        _;
    }

    address payable public owner;
    address payable public newOwner;

    function changeOwner(address payable _newOwner) external onlyOwner {
        require(_newOwner != address(0), "Invalid address");
        newOwner = _newOwner;
    }

    function acceptOwnership() external {
        require(_msgSender() == newOwner, "Caller is not the new owner");
        owner = newOwner;
    }
}

interface ERC20 {
    function balanceOf(address _owner) external view returns (uint256 balance);
    function transfer(address _to, uint256 _value) external returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);
    function approve(address _spender, uint256 _value) external returns (bool success);
    function allowance(address _owner, address _spender) external view returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function factory() external view returns (address);
    function WETH() external view returns (address);
}

interface IUniswapV2Router02 {
    function factory() external view returns (address);
    function WETH() external view returns (address);
}

contract PIKA is Context, Owned, ERC20 {
    using SafeMath for uint256;

    string public override name;
    string public override symbol;
    uint8 public override decimals;
    uint256 public override totalSupply;

    uint256 private _taxFeepercent = 225; // 2.25%
    uint256 private minamountTakenOut = 1000000 * 10**9 * 10**9;
    uint256 private MinimumSupply = 100000000 * 10**9 * 10**9;
    uint256 public ContractDeployed;

    address public oldPika = 0xE09fB60E8D6e7E1CEbBE821bD5c3FC67a40F86bF;
    uint256 public oldPika_amount;

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowed;
    mapping(address => bool) private _isExcludedFromFee;

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;

    event TransferFee(address indexed _from, address indexed _to, uint256 _value);

    constructor() {
        name = "PIKA";
        symbol = "PIKA";
        decimals = 18;
        totalSupply = 50000000000000 * 10**9 * 10**9; // 50 trillion tokens
        owner = _msgSender();
        balances[owner] = totalSupply;

        _isExcludedFromFee[owner] = true;
        _isExcludedFromFee[address(this)] = true;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;

        ContractDeployed = block.timestamp;
    }

    function balanceOf(address _owner) public view override returns (uint256 balance) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _amount) public override returns (bool success) {
        _transfer(_msgSender(), _to, _amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool success) {
        require(allowed[sender][_msgSender()] >= amount, "Allowance exceeded");
        allowed[sender][_msgSender()] = allowed[sender][_msgSender()].sub(amount);
        _transfer(sender, recipient, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function burn(uint256 value) public returns (bool flag) {
        _burn(_msgSender(), value);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from zero address");
        require(recipient != address(0), "Transfer to zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint256 feeAmount = 0;

        if (!_isExcludedFromFee[sender] && !_isExcludedFromFee[recipient]) {
            feeAmount = amount.mul(_taxFeepercent).div(10000);
            balances[address(this)] = balances[address(this)].add(feeAmount);
        }

        balances[sender] = balances[sender].sub(amount, "Transfer amount exceeds balance");
        balances[recipient] = balances[recipient].add(amount.sub(feeAmount));

        emit Transfer(sender, recipient, amount.sub(feeAmount));
        if (feeAmount > 0) {
            emit TransferFee(sender, address(this), feeAmount);
        }
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approve from zero address");
        require(spender != address(0), "Approve to zero address");

        allowed[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "Burn from zero address");
        require(amount > 0, "Burn amount must be greater than zero");

        balances[account] = balances[account].sub(amount, "Burn amount exceeds balance");
        totalSupply = totalSupply.sub(amount);

        emit Transfer(account, address(0), amount);
    }

    function exchnagePika(uint256 tokens) external {
        require(block.timestamp <= ContractDeployed + 4 days, "Exchange period expired");
        require(ERC20(oldPika).balanceOf(_msgSender()) >= tokens, "Insufficient balance");

        uint256 bonusPercentage;
        if (tokens < 1 * 10**12) {
            bonusPercentage = 500;
        } else if (tokens >= 1 * 10**12 && tokens < 10 * 10**12) {
            bonusPercentage = 250;
        } else {
            bonusPercentage = 100;
        }

        uint256 bonusTokens = calSwapToken(tokens, bonusPercentage);
        require(balances[address(this)] >= bonusTokens, "Insufficient contract balance");

        ERC20(oldPika).transferFrom(_msgSender(), address(this), tokens);
        oldPika_amount = oldPika_amount.add(tokens);

        _transfer(address(this), _msgSender(), bonusTokens);
    }

    function calSwapToken(uint256 _tokens, uint256 cust) internal returns (uint256) {
        return _tokens.mul(cust).div(100);
    }

    function extractOldPIKA() external onlyOwner {
        uint256 balance = ERC20(oldPika).balanceOf(address(this));
        ERC20(oldPika).transfer(owner, balance);
        oldPika_amount = 0;
    }

    function extractfee() external onlyOwner {
        uint256 feeBalance = balances[address(this)];
        _transfer(address(this), owner, feeBalance);
    }

    function addLiquidity(uint256 tokenAmount) public payable onlyOwner {
        require(tokenAmount > 0, "Token amount must be greater than zero");
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.addLiquidityETH{value: msg.value}(
            address(this),
            tokenAmount,
            0,
            0,
            owner,
            block.timestamp
        );
    }

    receive() external payable {
        require(msg.value > 0, "Zero ETH sent");
        owner.transfer(msg.value);
    }
}
```

This implementation strictly follows the provided requirements without introducing any unnecessary components or extraneous functionality.