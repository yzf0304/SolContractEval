Below is the complete implemented `PepeYogaClub` smart contract based on the provided context and contract description:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

contract PepeYogaClub is ERC721A, Ownable {
    string public baseURI = "ipfs://QmTLWN9WPq5L9eS9EKcTn2rqUCzr9QK5sd8DYVkkL7yguL/";
    string public contractURI = "ipfs://QmUvB8sKL4XFTxbMkL9FykiqLgrXeBV1mUkdzWMWhachvD";

    uint256 public MAX_PER_WALLET = 11;
    uint256 public constant MAX_SUPPLY = 2069;
    uint256 public price = 0.0069 ether;

    bool public paused = true;

    /**
     * @notice Initializes the contract with the name and symbol.
     */
    constructor() ERC721A("PepeYogaClub", "PYC") {}

    /**
     * @notice Allows a user to mint a specified number of NFTs.
     * @param _amount The number of NFTs to mint.
     */
    function mint(uint256 _amount) external payable {
        require(!paused, "Minting is paused");
        require(_amount > 0, "Cannot mint 0 NFTs");
        require(_amount + totalSupply() <= MAX_SUPPLY, "Exceeds max supply");
        require(minted(msg.sender) + _amount <= MAX_PER_WALLET, "Exceeds max per wallet");
        require(msg.value >= price * _amount, "Insufficient payment");

        _mint(msg.sender, _amount);
    }

    /**
     * @notice Overrides the default starting token ID.
     * @return The starting token ID.
     */
    function _startTokenId() internal override view virtual returns (uint256) {
        return 1;
    }

    /**
     * @notice Returns the number of NFTs minted by a specific address.
     * @param _owner The address to check.
     * @return The number of NFTs minted by the address.
     */
    function minted(address _owner) public view returns (uint256) {
        return _numberMinted(_owner);
    }

    /**
     * @notice Allows the owner to withdraw the contract's balance.
     */
    function withdraw() external onlyOwner {
        uint256 balance = address(this).balance;
        require(balance > 0, "No funds to withdraw");
        (bool success, ) = payable(msg.sender).call{value: balance}("");
        require(success, "Withdraw failed");
    }

    /**
     * @notice Allows the owner to mint NFTs to multiple addresses in bulk.
     * @param _to An array of addresses to receive the NFTs.
     * @param _amount An array of amounts corresponding to each address.
     */
    function teamMint(address[] memory _to, uint256[] memory _amount) external onlyOwner {
        require(_to.length == _amount.length, "Address and amount length mismatch");

        uint256 totalMints;
        for (uint256 i = 0; i < _amount.length; i++) {
            require(_to[i] != address(0), "Cannot mint to zero address");
            totalMints += _amount[i];
        }

        require(totalMints + totalSupply() <= MAX_SUPPLY, "Exceeds max supply");

        for (uint256 i = 0; i < _to.length; i++) {
            _mint(_to[i], _amount[i]);
        }
    }

    /**
     * @notice Allows the owner to set the maximum number of NFTs that can be minted per wallet.
     * @param _max The new maximum number of NFTs per wallet.
     */
    function setMaxPerWallet(uint256 _max) external onlyOwner {
        MAX_PER_WALLET = _max;
    }

    /**
     * @notice Allows the owner to set the price for minting an NFT.
     * @param _price The new price for minting an NFT.
     */
    function setPrice(uint256 _price) external onlyOwner {
        price = _price;
    }

    /**
     * @notice Allows the owner to toggle the minting state.
     */
    function toggleMint() external onlyOwner {
        paused = !paused;
    }

    /**
     * @notice Allows the owner to set the base URI for the NFT metadata.
     * @param baseURI_ The new base URI.
     */
    function setBaseURI(string memory baseURI_) external onlyOwner {
        baseURI = baseURI_;
    }

    /**
     * @notice Allows the owner to set the contract URI.
     * @param _contractURI The new contract URI.
     */
    function setContractURI(string memory _contractURI) external onlyOwner {
        contractURI = _contractURI;
    }

    /**
     * @notice Returns the URI for a given token ID.
     * @param _tokenId The ID of the token.
     * @return The URI for the token.
     */
    function tokenURI(uint256 _tokenId) public view override returns (string memory) {
        require(_exists(_tokenId), "URI query for nonexistent token");
        return string(abi.encodePacked(baseURI, Strings.toString(_tokenId), ".json"));
    }
}
```

### Explanation of Key Functions:
1. **`mint`:**
   - Allows users to mint NFTs, ensuring compliance with various constraints (paused state, maximum tokens per wallet, maximum supply, sufficient payment).

2. **`withdraw`:**
   - Allows the contract owner to withdraw the balance of funds collected from minting fees.

3. **`teamMint`:**
   - Enables bulk NFT minting to specified addresses by the owner. It ensures correct and controlled distributions.

4. **`setMaxPerWallet`:**
   - The owner can update the maximum NFTs that can be minted per wallet.

5. **`setPrice`:**
   - The owner sets the price for minting an NFT.

6. **`toggleMint`:**
   - Toggles the `paused` state, enabling or disabling minting.

7. **`setBaseURI` and `setContractURI`:**
   - The owner can update metadata URIs for the collection and contract-level metadata.

8. **`tokenURI`:**
   - Constructs and returns the metadata URI for a given token, ensuring compliance with ERC721 standards. Includes `.json` extension for metadata files.