Below is the completed `PepeYogaClub` smart contract strictly adhering to the given description and context:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

contract PepeYogaClub is ERC721A, Ownable {
    string public baseURI = "ipfs://QmTLWN9WPq5L9eS9EKcTn2rqUCzr9QK5sd8DYVkkL7yguL/";
    string public contractURI = "ipfs://QmUvB8sKL4XFTxbMkL9FykiqLgrXeBV1mUkdzWMWhachvD";

    uint256 public MAX_PER_WALLET = 11;
    uint256 public constant MAX_SUPPLY = 2069;
    uint256 public price = 0.0069 ether;

    bool public paused = true;

    /**
     * @notice Initializes the contract with the name and symbol.
     * @dev Sets the initial values for the contract's name and symbol.
     */
    constructor() ERC721A("PepeYogaClub", "PYC") {}

    /**
     * @notice Allows a user to mint a specified number of NFTs.
     * @dev Ensures that the minting process adheres to the set constraints and conditions.
     * @param _amount The number of NFTs to mint.
     */
    function mint(uint256 _amount) external payable {
        require(!paused, "Minting is currently paused");
        require(_amount > 0, "Must mint at least one token");
        require(minted(msg.sender) + _amount <= MAX_PER_WALLET, "Exceeds max per wallet");
        require(totalSupply() + _amount <= MAX_SUPPLY, "Exceeds max supply");
        require(msg.value >= _amount * price, "Insufficient payment");

        _safeMint(msg.sender, _amount);
    }

    /**
     * @notice Overrides the default starting token ID.
     * @dev Returns the starting token ID for the collection.
     * @return The starting token ID.
     */
    function _startTokenId() internal override view virtual returns (uint256) {
        return 1;
    }

    /**
     * @notice Returns the number of NFTs minted by a specific address.
     * @dev Uses the internal `_numberMinted` function to get the count.
     * @param _owner The address to check.
     * @return The number of NFTs minted by the address.
     */
    function minted(address _owner) public view returns (uint256) {
        return _numberMinted(_owner);
    }

    /**
     * @notice Allows the owner to withdraw the contract's balance.
     * @dev Transfers the contract's balance to the owner.
     */
    function withdraw() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }

    /**
     * @notice Allows the owner to mint NFTs to multiple addresses in bulk.
     * @dev Mints NFTs to the specified addresses with the specified amounts.
     * @param _to An array of addresses to receive the NFTs.
     * @param _amount An array of amounts corresponding to each address.
     */
    function teamMint(address[] memory _to, uint256[] memory _amount) external onlyOwner {
        require(_to.length == _amount.length, "Mismatched input arrays");

        for (uint256 i = 0; i < _to.length; i++) {
            require(totalSupply() + _amount[i] <= MAX_SUPPLY, "Exceeds max supply");
            _safeMint(_to[i], _amount[i]);
        }
    }

    /**
     * @notice Allows the owner to set the maximum number of NFTs that can be minted per wallet.
     * @dev Updates the `MAX_PER_WALLET` variable.
     * @param _max The new maximum number of NFTs per wallet.
     */
    function setMaxPerWallet(uint256 _max) external onlyOwner {
        MAX_PER_WALLET = _max;
    }

    /**
     * @notice Allows the owner to set the price for minting an NFT.
     * @dev Updates the `price` variable.
     * @param _price The new price for minting an NFT.
     */
    function setPrice(uint256 _price) external onlyOwner {
        price = _price;
    }

    /**
     * @notice Allows the owner to toggle the minting state.
     * @dev Toggles the `paused` variable.
     */
    function toggleMint() external onlyOwner {
        paused = !paused;
    }

    /**
     * @notice Allows the owner to set the base URI for the NFT metadata.
     * @dev Updates the `baseURI` variable.
     * @param baseURI_ The new base URI.
     */
    function setBaseURI(string memory baseURI_) external onlyOwner {
        baseURI = baseURI_;
    }

    /**
     * @notice Allows the owner to set the contract URI.
     * @dev Updates the `contractURI` variable.
     * @param _contractURI The new contract URI.
     */
    function setContractURI(string memory _contractURI) external onlyOwner {
        contractURI = _contractURI;
    }

    /**
     * @notice Returns the URI for a given token ID.
     * @dev Constructs the token URI using the base URI and the token ID.
     * @param _tokenId The ID of the token.
     * @return The URI for the token.
     */
    function tokenURI(uint256 _tokenId) public view override returns (string memory) {
        require(_exists(_tokenId), "Token does not exist");
        return string(abi.encodePacked(baseURI, Strings.toString(_tokenId), ".json"));
    }
}
``` 

### Explanation:
1. **Inheriting from ERC721A and Ownable**:
   - This contract uses the `ERC721A` implementation for efficient minting and includes OpenZeppelin's `Ownable` for owner-only functionality.

2. **Constructor**:
   - Sets the collection's name as `PepeYogaClub` and its symbol as `PYC`.

3. **Minting Logic**:
   - The `mint` function allows users to mint tokens if minting is not paused, they don't exceed the max-per-wallet limit, the total supply limit isn't reached, and sufficient Ether is paid.

4. **Ownership**:
   - Owner-only functions (e.g., toggling mint, setting limits, withdrawing funds) are implemented using the `onlyOwner` modifier.

5. **Base URI and Token URI**:
   - The `baseURI` is used to construct metadata URLs for each token. The `tokenURI` function generates the full metadata URL for a given token.

6. **Team Minting**:
   - The `teamMint` function allows the owner to mint tokens in bulk to multiple addresses.

7. **Contract Withdrawals**:
   - The `withdraw` function allows the contract owner to retrieve the contract's balance. 

This implementation aligns with the requirements and the provided context.