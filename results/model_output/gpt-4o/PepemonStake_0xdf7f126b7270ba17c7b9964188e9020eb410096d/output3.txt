Below is the complete and functional implementation of the `PepemonStake` contract. 

```solidity
// SPDX-License-Identifier: MIT

pragma solidity ^0.6.6;

contract PepemonStake is Ownable {
    using SafeMath for uint256;

    IPepemonFactory public pepemonFactory;

    /**
     * @notice Structure to hold the details of a staking event.
     * @dev Contains information about the cards required, reward, and staking duration.
     */
    struct StakingEvent {
        uint256[] cardIdList;
        uint256 cardAmountAny; // If this is > 0, cardAmountList will be ignored, and user will be able to stake multiple cards of any card accepted
        uint256[] cardAmountList; // Will be ignored if cardAmountAny > 0
        uint256 cardRewardId;
        uint256 blockStakeLength; // Amounts of blocks of staking required to complete the event
        uint256 blockEventClose; // Block at which this event will not accept any new stake
        uint256[] toBurnIdList; // Id list of cards to burn on completion of event
        uint256[] toBurnAmountList; // Amount list of cards to burn on completion of event
    }

    /**
     * @notice Structure to hold the user's staking information.
     * @dev Tracks whether the user has completed the event and the block at which the staking ends.
     */
    struct UserInfo {
        bool isCompleted;
        uint256 blockEnd; // Block at which user will have completed the event (If this is not 0, user is currently staking)
    }

    StakingEvent[] public stakingEvents;
    mapping (address => mapping(uint256 => UserInfo)) public userInfo;
    mapping (address => mapping(uint256 => mapping(uint256 => uint256))) public cardsStaked; // address => eventId => cardId => amountStaked

    ////
    // Events
    ////

    event StakingEventCreated(uint256 eventId);
    event StakingEventEntered(address indexed user, uint256 eventId);
    event StakingEventCompleted(address indexed user, uint256 eventId);
    event StakingEventCancelled(address indexed user, uint256 eventId);

    constructor(IPepemonFactory _pepemonFactoryAddress) public {
        pepemonFactory = _pepemonFactoryAddress;
    }

    ////
    // View
    ////

    function getStakingEventsLength() external view returns (uint256) {
        return stakingEvents.length;
    }

    function getAllEvents() public view returns (StakingEvent[] memory) {
        return stakingEvents;
    }

    function getActiveEvents() external view returns (uint256[] memory) {
        uint256[] memory activeEvents = new uint256[](stakingEvents.length);
        uint256 count = 0;

        for (uint256 i = 0; i < stakingEvents.length; i++) {
            if (block.number <= stakingEvents[i].blockEventClose) {
                activeEvents[count] = i;
                count++;
            }
        }

        uint256[] memory result = new uint256[](count);
        for (uint256 j = 0; j < count; j++) {
            result[j] = activeEvents[j];
        }

        return result;
    }

    function getClosedEvents() external view returns (uint256[] memory) {
        uint256[] memory closedEvents = new uint256[](stakingEvents.length);
        uint256 count = 0;

        for (uint256 i = 0; i < stakingEvents.length; i++) {
            if (block.number > stakingEvents[i].blockEventClose) {
                closedEvents[count] = i;
                count++;
            }
        }

        uint256[] memory result = new uint256[](count);
        for (uint256 j = 0; j < count; j++) {
            result[j] = closedEvents[j];
        }

        return result;
    }

    function getCardIdListOfEvent(uint256 _eventId) external view returns (uint256[] memory) {
        return stakingEvents[_eventId].cardIdList;
    }

    function getCardAmountListOfEvent(uint256 _eventId) external view returns (uint256[] memory) {
        return stakingEvents[_eventId].cardAmountList;
    }

    function getUserProgress(address _user, uint256 _eventId) external view returns (uint256) {
        UserInfo memory user = userInfo[_user][_eventId];
        if (user.blockEnd == 0 || user.isCompleted) return 0;
        uint256 blocksStaked = block.number.sub(user.blockEnd.sub(stakingEvents[_eventId].blockStakeLength));
        uint256 progress = blocksStaked.mul(1e5).div(stakingEvents[_eventId].blockStakeLength);
        return progress > 1e5 ? 1e5 : progress;
    }

    ////
    // Staking Functions
    ////

    function createStakingEvent(
        uint256[] memory _cardIdList, 
        uint256 _cardAmountAny, 
        uint256[] memory _cardAmountList, 
        uint256 _cardRewardId,
        uint256 _blockStakeLength, 
        uint256 _blockEventClose, 
        uint256[] memory _toBurnIdList, 
        uint256[] memory _toBurnAmountList
    ) public onlyOwner {
        require(_blockEventClose > block.number, "Event close block must be in the future");
        require(_cardAmountAny > 0 || _cardAmountList.length > 0, "Invalid card amount configuration");
        require(_toBurnIdList.length == _toBurnAmountList.length, "Mismatch in burn lists");

        stakingEvents.push(StakingEvent({
            cardIdList: _cardIdList,
            cardAmountAny: _cardAmountAny,
            cardAmountList: _cardAmountList,
            cardRewardId: _cardRewardId,
            blockStakeLength: _blockStakeLength,
            blockEventClose: _blockEventClose,
            toBurnIdList: _toBurnIdList,
            toBurnAmountList: _toBurnAmountList
        }));

        emit StakingEventCreated(stakingEvents.length - 1);
    }

    function closeStakingEvent(uint256 _eventId) public onlyOwner {
        stakingEvents[_eventId].blockEventClose = block.number;
    }

    function stakeAny(uint256 _eventId, uint256[] memory _cardIdList, uint256[] memory _cardAmountList) public {
        StakingEvent memory stakingEvent = stakingEvents[_eventId];
        require(block.number <= stakingEvent.blockEventClose, "Event is closed");
        require(stakingEvent.cardAmountAny > 0, "Event does not accept cardAmountAny");
        require(_cardIdList.length == _cardAmountList.length, "Invalid input lengths");

        uint256 totalAmount = 0;
        for (uint256 i = 0; i < _cardIdList.length; i++) {
            require(_isInArray(_cardIdList[i], stakingEvent.cardIdList), "Card ID not accepted");
            pepemonFactory.safeTransferFrom(msg.sender, address(this), _cardIdList[i], _cardAmountList[i], "");
            cardsStaked[msg.sender][_eventId][_cardIdList[i]] = cardsStaked[msg.sender][_eventId][_cardIdList[i]].add(_cardAmountList[i]);
            totalAmount = totalAmount.add(_cardAmountList[i]);
        }

        require(totalAmount >= stakingEvent.cardAmountAny, "Not enough cards staked");
        userInfo[msg.sender][_eventId].blockEnd = block.number.add(stakingEvent.blockStakeLength);

        emit StakingEventEntered(msg.sender, _eventId);
    }

    function stake(uint256 _eventId) public {
        StakingEvent memory stakingEvent = stakingEvents[_eventId];
        require(block.number <= stakingEvent.blockEventClose, "Event is closed");
        require(stakingEvent.cardAmountAny == 0, "Event does not accept specific staking");

        uint256 totalCards = stakingEvent.cardIdList.length;
        for (uint256 i = 0; i < totalCards; i++) {
            uint256 amount = stakingEvent.cardAmountList[i];
            pepemonFactory.safeTransferFrom(msg.sender, address(this), stakingEvent.cardIdList[i], amount, "");
            cardsStaked[msg.sender][_eventId][stakingEvent.cardIdList[i]] = cardsStaked[msg.sender][_eventId][stakingEvent.cardIdList[i]].add(amount);
        }

        userInfo[msg.sender][_eventId].blockEnd = block.number.add(stakingEvent.blockStakeLength);

        emit StakingEventEntered(msg.sender, _eventId);
    }

    function claim(uint256 _eventId) public {
        UserInfo storage user = userInfo[msg.sender][_eventId];
        StakingEvent memory stakingEvent = stakingEvents[_eventId];

        require(user.blockEnd != 0, "Not staked");
        require(block.number >= user.blockEnd, "Staking period not yet finished");
        require(!user.isCompleted, "Already claimed");

        user.isCompleted = true;

        _withdrawCardsStaked(_eventId, true);
        pepemonFactory.mint(msg.sender, stakingEvent.cardRewardId, 1, "");

        emit StakingEventCompleted(msg.sender, _eventId);
    }

    function cancel(uint256 _eventId) public {
        UserInfo storage user = userInfo[msg.sender][_eventId];
        require(user.blockEnd != 0, "Not staked");
        require(!user.isCompleted, "Already completed");

        user.blockEnd = 0;
        _withdrawCardsStaked(_eventId, false);

        emit StakingEventCancelled(msg.sender, _eventId);
    }

    function _withdrawCardsStaked(uint256 _eventId, bool _burn) internal {
        StakingEvent memory stakingEvent = stakingEvents[_eventId];
        for (uint256 i = 0; i < stakingEvent.cardIdList.length; i++) {
            uint256 cardId = stakingEvent.cardIdList[i];
            uint256 amount = cardsStaked[msg.sender][_eventId][cardId];

            if (amount > 0) {
                if (_burn) {
                    pepemonFactory.burn(address(this), cardId, amount);
                } else {
                    pepemonFactory.safeTransferFrom(address(this), msg.sender, cardId, amount, "");
                }
                cardsStaked[msg.sender][_eventId][cardId] = 0;
            }
        }
    }

    function _isInArray(uint256 _value, uint256[] memory _array) internal pure returns (bool) {
        for (uint256 i = 0; i < _array.length; i++) {
            if (_array[i] == _value) {
                return true;
            }
        }
        return false;
    }

    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external returns (bytes4) {
        return 0xf23a6e61;
    }

    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external returns (bytes4) {
        return 0xbc197c81;
    }

    function supportsInterface(bytes4 interfaceID) external view returns (bool) {
        return interfaceID == 0x01ffc9a7 || interfaceID == 0x4e2312e0;
    }
}
```

### Key Points:
1. The `PepemonStake` contract strictly adheres to the provided context and requirements without introducing any extraneous functionality or contracts.
2. It implements both specific card staking and multi-card staking.
3. Users can cancel their staking or claim rewards after completion.
4. Cards can be burned upon completion or returned during cancellation.
