Here's the full implementation of the `PortalToken` contract based on the provided context and description:

```solidity
pragma solidity ^0.4.22;

/**
 * @title PortalToken
 * @notice This contract implements a basic ERC20 token with additional features such as jail functionality and transfer enabling.
 * @dev The contract extends the ERC20Token interface and includes mappings for balances, allowances, and jail information.
 */
contract PortalToken is ERC20Token {
    address public initialOwner;
    uint256 public supply = 1000000000 * 10**18; // 1 billion tokens with 18 decimals
    string public name = "PortalToken";
    uint8 public decimals = 18;
    string public symbol = "PTC";
    string public version = "v0.1";
    bool public transfersEnabled = true;
    uint public creationBlock;
    uint public creationTime;

    mapping(address => uint256) balance;
    mapping(address => mapping(address => uint256)) m_allowance;
    mapping(address => uint) jail;
    mapping(address => uint256) jailAmount;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    /**
     * @notice Initializes the contract and sets the initial owner's balance to the total supply.
     */
    function PortalToken() public {
        initialOwner = msg.sender;
        balance[msg.sender] = supply;
        creationBlock = block.number;
        creationTime = block.timestamp;
    }

    function balanceOf(address _account) constant public returns (uint256) {
        return balance[_account];
    }

    function jailAmountOf(address _account) constant public returns (uint256) {
        return jailAmount[_account];
    }

    function totalSupply() constant public returns (uint256) {
        return supply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(transfersEnabled, "Transfers are disabled");
        require(jail[msg.sender] <= block.timestamp, "Sender is jailed");
        require(balance[msg.sender] >= _value, "Insufficient balance");

        doTransfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(transfersEnabled, "Transfers are disabled");
        require(jail[_from] <= block.timestamp, "Source account is jailed");
        require(jail[_to] <= block.timestamp, "Recipient account is jailed");
        require(balance[_from] >= _value, "Insufficient balance");
        require(m_allowance[_from][msg.sender] >= _value, "Allowance exceeded");

        doTransfer(_from, _to, _value);
        m_allowance[_from][msg.sender] -= _value;
        return true;
    }

    function doTransfer(address _from, address _to, uint256 _value) internal returns (bool success) {
        require(_to != address(0), "Invalid recipient address");
        require(balance[_from] >= _value, "Insufficient balance");

        balance[_from] -= _value;
        balance[_to] += _value;

        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(transfersEnabled, "Transfers are disabled");
        require(jail[msg.sender] <= block.timestamp, "Owner is jailed");
        require(jail[_spender] <= block.timestamp, "Spender is jailed");

        m_allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return m_allowance[_owner][_spender];
    }

    function enableTransfers(bool _transfersEnabled) public returns (bool) {
        require(msg.sender == initialOwner, "Only initial owner can toggle transfers");
        transfersEnabled = _transfersEnabled;
        return transfersEnabled;
    }

    function catchYou(address _target, uint _timestamp, uint256 _amount) public returns (uint) {
        require(msg.sender == initialOwner, "Only initial owner can jail accounts");
        require(transfersEnabled, "Transfers are disabled");
        require(_timestamp > block.timestamp, "Jail timestamp must be in the future");
        require(balance[_target] >= _amount, "Jail amount exceeds account balance");

        jail[_target] = _timestamp;
        jailAmount[_target] = _amount;
        return jail[_target];
    }

    function() external payable {
        // Fallback function to receive Ether.
    }
}
```

### Explanation of the Code:

1. **`PortalToken` Constructor**:
   - Sets the `initialOwner` to the account deploying the contract.
   - Initializes the `balance` of `msg.sender` (the deployer) to the full `supply`.
   - Records the creation block and time.

2. **ERC20 Functions**:
   - `balanceOf` returns the token balance of an account.
   - `totalSupply` gives the total supply of tokens.
   - `transfer` and `transferFrom` are implemented as per ERC20 behavior, with added jail and transfer enablement checks.
   - `approve` allows a spender to withdraw a specified token amount.
   - `allowance` returns the remaining tokens a spender can withdraw on behalf of the owner.

3. **Additional Features**:
   - **Jail Mechanism**: The `catchYou()` function allows the `initialOwner` to jail an account until a specific timestamp, freezing a certain amount of tokens.
   - **jailAmountOf**: Reports the amount of tokens that have been jailed for an account.
   - **Transfers Toggle**: The `enableTransfers()` function allows the owner to enable or disable all token transfers.

4. **Fallback Function**:
   - Allows the contract to receive Ether passively, though it doesn't handle it.

This implementation strictly adheres to the provided requirements while complying with ERC20 functionality.