Below is the complete implementation of the `PortalToken` smart contract as described in your requirements, adhering strictly to the provided context and descriptions:

```solidity
pragma solidity ^0.4.22;

/**
 * @title PortalToken
 * @notice This contract implements a basic ERC20 token with additional features such as jail functionality and transfer enabling.
 * @dev The contract extends the ERC20Token interface and includes mappings for balances, allowances, and jail information.
 */
contract PortalToken is ERC20Token {
    address public initialOwner;
    uint256 public supply = 1000000000 * 10 ** 18; // 1 billion tokens
    string public name = "PortalToken";
    uint8 public decimals = 18;
    string public symbol = "PTC";
    string public version = "v0.1";
    bool public transfersEnabled = true;
    uint public creationBlock;
    uint public creationTime;

    mapping(address => uint256) balance;
    mapping(address => mapping(address => uint256)) m_allowance;
    mapping(address => uint) jail; // Timestamp until the account is jailed
    mapping(address => uint256) jailAmount; // Amount of tokens jailed

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function PortalToken() public {
        initialOwner = msg.sender;
        balance[msg.sender] = supply;
        creationBlock = block.number;
        creationTime = block.timestamp;
    }

    function balanceOf(address _account) constant public returns (uint256) {
        return balance[_account];
    }

    function jailAmountOf(address _account) constant public returns (uint256) {
        return jailAmount[_account];
    }

    function totalSupply() constant public returns (uint256) {
        return supply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(transfersEnabled, "Transfers are disabled");
        require(jail[msg.sender] < block.timestamp, "Sender is jailed");
        require(balance[msg.sender] >= _value, "Insufficient balance");
        return doTransfer(msg.sender, _to, _value);
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(transfersEnabled, "Transfers are disabled");
        require(jail[_from] < block.timestamp, "Sender is jailed");
        require(jail[_to] < block.timestamp, "Recipient is jailed");
        require(balance[_from] >= _value, "Insufficient balance");
        require(m_allowance[_from][msg.sender] >= _value, "Allowance exceeded");

        if (doTransfer(_from, _to, _value)) {
            m_allowance[_from][msg.sender] -= _value;
            return true;
        }
        return false;
    }

    function doTransfer(address _from, address _to, uint256 _value) internal returns (bool success) {
        require(_to != address(0), "Invalid recipient");
        balance[_from] -= _value;
        balance[_to] += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(transfersEnabled, "Transfers are disabled");
        require(jail[msg.sender] < block.timestamp, "Owner is jailed");
        require(jail[_spender] < block.timestamp, "Spender is jailed");

        m_allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256) {
        require(transfersEnabled, "Transfers are disabled");
        return m_allowance[_owner][_spender];
    }

    function enableTransfers(bool _transfersEnabled) public returns (bool) {
        require(msg.sender == initialOwner, "Only the initial owner can enable/disable transfers");
        transfersEnabled = _transfersEnabled;
        return transfersEnabled;
    }

    function catchYou(address _target, uint _timestamp, uint256 _amount) public returns (uint) {
        require(msg.sender == initialOwner, "Only the initial owner can jail accounts");
        require(transfersEnabled, "Transfers are disabled");

        jail[_target] = _timestamp;
        jailAmount[_target] = _amount;
        return jail[_target];
    }

    function() external payable {
        // Fallback function to receive Ether
    }
}
```

### Key Features Implemented:
1. **ERC20 Compliance**: Includes methods like `transfer`, `approve`, `transferFrom`, and `allowance`.
2. **Jail Functionality**: Implements account jailing (`catchYou`) that restricts transfers from jailed accounts until the specified timestamp.
3. **Transfer Enabling**: The `enableTransfers` function allows toggling of transfer functionality.
4. **Fallback Function**: Allows receiving Ether, even though it has no defined use in the contract.
5. **Events**: Emits `Transfer` and `Approval` events for tracking token activity.

### Assumptions:
- Code is strictly developed for **Solidity 0.4.22**.
- The contract is designed with the provided constraints, and additional dependencies or functionalities are avoided.

Let me know if you need further clarifications!