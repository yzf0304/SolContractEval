Below is the complete implementation of the `PortalToken` contract strictly adhering to the provided context and description. The contract is compatible with Solidity version 0.4.22:

```solidity
pragma solidity ^0.4.22;

/**
 * @title PortalToken
 * @notice This contract implements a basic ERC20 token with additional features such as jail functionality and transfer enabling.
 * @dev The contract extends the ERC20Token interface and includes mappings for balances, allowances, and jail information.
 */
contract ERC20Token {
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function totalSupply() constant public returns (uint256 supply);
    function balanceOf(address _owner) constant public returns (uint256 balance);
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    function approve(address _spender, uint256 _value) public returns (bool success);
    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);
}

contract PortalToken is ERC20Token {
    address public initialOwner;
    uint256 public supply = 1000000000 * 10 ** 18;  // 1 billion tokens
    string public name = "PortalToken";
    uint8 public decimals = 18;
    string public symbol = "PTC";
    string public version = "v0.1";
    bool public transfersEnabled = true;
    uint public creationBlock;
    uint public creationTime;

    mapping (address => uint256) balance;
    mapping (address => mapping (address => uint256)) m_allowance;
    mapping (address => uint) jail;
    mapping (address => uint256) jailAmount;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function PortalToken() public {
        initialOwner = msg.sender;
        balance[msg.sender] = supply;
        creationBlock = block.number;
        creationTime = block.timestamp;
    }

    function balanceOf(address _account) constant public returns (uint256) {
        return balance[_account];
    }

    function jailAmountOf(address _account) constant public returns (uint256) {
        return jailAmount[_account];
    }

    function totalSupply() constant public returns (uint256) {
        return supply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(transfersEnabled, "Transfers are disabled.");
        require(jail[msg.sender] < now, "Sender is jailed.");
        require(balance[msg.sender] >= _value, "Insufficient balance.");

        return doTransfer(msg.sender, _to, _value);
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(transfersEnabled, "Transfers are disabled.");
        require(jail[_from] < now, "Source address is jailed.");
        require(jail[_to] < now, "Destination address is jailed.");
        require(balance[_from] >= _value, "Insufficient balance.");
        require(m_allowance[_from][msg.sender] >= _value, "Insufficient allowance.");

        if (doTransfer(_from, _to, _value)) {
            m_allowance[_from][msg.sender] -= _value;
            return true;
        }

        return false;
    }

    function doTransfer(address _from, address _to, uint256 _value) internal returns (bool success) {
        require(_to != address(0), "Invalid recipient address.");

        balance[_from] -= _value;
        balance[_to] += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(transfersEnabled, "Transfers are disabled.");
        require(jail[msg.sender] < now, "Sender is jailed.");
        require(jail[_spender] < now, "Spender is jailed.");

        m_allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {
        return m_allowance[_owner][_spender];
    }

    function enableTransfers(bool _transfersEnabled) public returns (bool) {
        require(msg.sender == initialOwner, "Caller is not the owner.");
        transfersEnabled = _transfersEnabled;
        return transfersEnabled;
    }

    function catchYou(address _target, uint _timestamp, uint256 _amount) public returns (uint) {
        require(msg.sender == initialOwner, "Caller is not the owner.");
        require(transfersEnabled, "Transfers are disabled.");
        require(balance[_target] >= _amount, "Insufficient balance to jail.");

        jail[_target] = _timestamp;
        jailAmount[_target] = _amount;
        return jail[_target];
    }

    function() external payable {
        // Fallback function to receive Ether
    }
}
```

### Key Features:
1. **ERC20 Compliance**: Implements standard ERC20 methods (`balanceOf`, `transfer`, `transferFrom`, `approve`, `allowance`).
2. **Transfer Control**: Transfers can be enabled/disabled by the initial owner.
3. **Jail Functionality**: Allows the owner to restrict accounts by timestamp and jail specific amounts.
4. **Fallback Function**: Allows the contract to accept Ether with an empty fallback function.
5. **Strict Validation**: Ensures jailed accounts, disabled transfers, or invalid balances/allowances prevent operations.