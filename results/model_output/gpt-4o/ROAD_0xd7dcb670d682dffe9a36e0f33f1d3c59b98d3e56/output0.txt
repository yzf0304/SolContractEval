Below is the complete implementation of the `ROAD` contract based on the provided context and description. The functions have been carefully implemented to adhere to the requirements and utilize the `SafeMath` library for ensuring safe arithmetic operations:

```solidity
pragma solidity 0.5.17;

contract ROAD is ERC20Interface, SafeMath {
    string public name;
    string public symbol;
    uint8 public decimals;

    uint256 public _totalSupply;

    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;

    constructor() public {
        name = "ROAD";
        symbol = "ROAD";
        decimals = 18;
        _totalSupply = 2 * 10 ** 27;

        balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function totalSupply() public view returns (uint) {
        return _totalSupply - balances[address(0)];
    }

    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }

    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }

    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }

    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(from, to, tokens);
        return true;
    }
}
```

### Explanation of the Code:

1. **Constructor**:
    - Initializes the token with the specified name (`ROAD`), symbol (`ROAD`), and decimals (18).
    - Sets the total supply to `2 * 10^27` tokens.
    - Assigns the total supply to the contract creator's address (i.e., `msg.sender`).
    - Emits a `Transfer` event indicating that tokens have been initially distributed to the creator.

2. **`totalSupply()`**:
    - Returns the total supply of tokens, excluding those held by the zero address (`address(0)`), to prevent double-spending risks or mistakes.

3. **`balanceOf()`**:
    - Fetches the balance of the `tokenOwner` from the `balances` mapping.

4. **`allowance()`**:
    - Retrieves the allowance assigned by `tokenOwner` to the `spender` from the `allowed` mapping.

5. **`approve()`**:
    - Sets the allowance for a `spender` to withdraw tokens from the caller's account up to the amount `tokens`.
    - Emits an `Approval` event to log the action.

6. **`transfer()`**:
    - Transfers the specified amount of tokens from the caller's account to the recipient (`to`).
    - Utilizes `SafeMath` to prevent overflows and underflows while manipulating balances.
    - Emits a `Transfer` event to log the transfer.

7. **`transferFrom()`**:
    - Transfers tokens from the `from` address to the `to` address using the allowance mechanism.
    - Decreases the allowance of `from` for the caller (`msg.sender`) by the amount of tokens transferred.
    - Adjusts balances using `SafeMath` to ensure safe arithmetic operations.
    - Emits a `Transfer` event to log the transfer.

### Notes:
- The contract adheres strictly to the ERC20 standard and efficiently integrates `SafeMath` for arithmetic safety.
- It is compatible with compiler version `0.5.17` for seamless deployment.
- No new contracts are introduced beyond the provided context (`ERC20Interface` and `SafeMath`).

This implementation fulfills the functional requirements and maintains security and simplicity as described in the task.