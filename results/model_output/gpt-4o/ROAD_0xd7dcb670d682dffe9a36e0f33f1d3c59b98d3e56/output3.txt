Here's the complete implementation of the ROAD token contract based on the provided context and description:

```solidity
pragma solidity ^0.5.17;

/**
 * @title ROAD Token Contract
 * @notice This contract implements the ERC20 token standard and includes additional safety checks using SafeMath.
 * @dev The contract is designed to be a simple, secure, and compliant token for the ROAD project.
 */
contract ROAD is ERC20Interface, SafeMath {
    string public name;
    string public symbol;
    uint8 public decimals;
    
    uint256 public _totalSupply;
    
    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;
    
    /**
     * @notice Constructor function initializes the contract with an initial supply of tokens to the creator.
     * @dev Sets the token name, symbol, decimals, and total supply. Also, it assigns the total supply to the contract creator.
     */
    constructor() public {
        name = "ROAD";
        symbol = "ROAD";
        decimals = 18;
        _totalSupply = 2 * 10 ** 27;
        
        balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }
    
    /**
     * @notice Returns the total token supply available, excluding any tokens sent to the zero address.
     * @dev This function calculates the total supply by subtracting the balance of the zero address from the total supply.
     * @return Total supply of tokens.
     */
    function totalSupply() public view returns (uint) {
        return _totalSupply - balances[address(0)];
    }
    
    /**
     * @notice Returns the account balance of another account with address `tokenOwner`.
     * @dev This function simply returns the balance stored in the `balances` mapping.
     * @param tokenOwner The address of the account to check the balance of.
     * @return The balance of the specified account.
     */
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }
    
    /**
     * @notice Returns the amount of tokens that an owner allowed to a spender.
     * @dev This function retrieves the allowance value from the `allowed` mapping.
     * @param tokenOwner The address which owns the funds.
     * @param spender The address which will spend the funds.
     * @return The remaining amount of tokens allowed to be spent by the spender.
     */
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }
    
    /**
     * @notice Allows `spender` to withdraw from your account multiple times, up to the `tokens` amount.
     * @dev If this function is called again, it overwrites the current allowance with `tokens`.
     * @param spender The address which will spend the funds.
     * @param tokens The amount of tokens to be approved.
     * @return A boolean value indicating whether the operation succeeded.
     */
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }
    
    /**
     * @notice Transfers `tokens` amount of tokens from the message sender's account to `to`.
     * @dev Uses SafeMath functions to prevent underflow and overflow.
     * @param to The recipient address.
     * @param tokens The amount of tokens to transfer.
     * @return A boolean value indicating whether the operation succeeded.
     */
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }
    
    /**
     * @notice Transfers `tokens` amount of tokens from `from` to `to`, using the allowance mechanism.
     * @dev Decreases the allowance of `from` to the caller by `tokens` and transfers the tokens to `to`.
     * @param from The address which you want to send tokens from.
     * @param to The address which you want to transfer to.
     * @param tokens The amount of tokens to be transferred.
     * @return A boolean value indicating whether the operation succeeded.
     */
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(from, to, tokens);
        return true;
    }
}
```

This implementation includes all the necessary functions for a basic ERC20 token contract, using the `SafeMath` library to ensure safe arithmetic operations, consistent with the provided context and description.