Below is the completed contract `RBInformationStore` strictly adhering to the provided context and description:

```solidity
pragma solidity ^0.4.18;

contract Ownable {
    address public owner;

    function Ownable() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        if (msg.sender != owner) {
            revert();
        }
        _;
    }
}

contract RBInformationStore is Ownable {
    address public profitContainerAddress;
    address public companyWalletAddress;
    uint public etherRatioForOwner;
    address public multiSigAddress;
    address public accountAddressForSponsee;
    bool public isPayableEnabledForAll;

    modifier onlyMultiSig() {
        require(multiSigAddress == msg.sender);
        _;
    }

    function RBInformationStore(
        address _profitContainerAddress,
        address _companyWalletAddress,
        uint _etherRatioForOwner,
        address _multiSigAddress,
        address _accountAddressForSponsee
    ) public {
        profitContainerAddress = _profitContainerAddress;
        companyWalletAddress = _companyWalletAddress;
        etherRatioForOwner = _etherRatioForOwner;
        multiSigAddress = _multiSigAddress;
        accountAddressForSponsee = _accountAddressForSponsee;
        isPayableEnabledForAll = false;  // Initially set to false
    }

    function changeProfitContainerAddress(address _address) public onlyMultiSig {
        profitContainerAddress = _address;
    }

    function changeCompanyWalletAddress(address _address) public onlyMultiSig {
        companyWalletAddress = _address;
    }

    function changeEtherRatioForOwner(uint _value) public onlyMultiSig {
        etherRatioForOwner = _value;
    }

    function changeMultiSigAddress(address _address) public onlyMultiSig {
        multiSigAddress = _address;
    }

    function changeOwner(address _address) public onlyMultiSig {
        owner = _address;
    }

    function changeAccountAddressForSponsee(address _address) public onlyMultiSig {
        accountAddressForSponsee = _address;
    }

    function changeIsPayableEnabledForAll() public onlyMultiSig {
        isPayableEnabledForAll = !isPayableEnabledForAll;  // Toggle the current state
    }

    function () public payable {
        require(isPayableEnabledForAll);  // Restrict receiving Ether unless enabled
    }
}
```

### Key Details

1. **Inheritance from `Ownable`**: The contract inherits from the `Ownable` contract, ensuring ownership is correctly handled.

2. **Multi-Signature Control**: All functions that involve changing state variables (except the fallback function) are restricted to the multi-signature wallet using the `onlyMultiSig` modifier.

3. **Initial Values**:
   - `isPayableEnabledForAll` is initially set to `false`, making the contract non-payable until explicitly toggled using `changeIsPayableEnabledForAll`.

4. **Fallback Function**: Added a fallback function to handle Ether transfers and enforce the `isPayableEnabledForAll` condition, providing the contract with controlled payability.

5. **Strict Compliance**: The contract complies strictly with Solidity version `0.4.18` and avoids introducing new contracts or unnecessary changes, adhering to the provided context and requirements.

Let me know if thereâ€™s anything else!