Here is the complete implementation of the `RBInformationStore` contract with all required functionality. The methods will appropriately update the state and ensure compliance with the descriptions and context provided.

```solidity
pragma solidity 0.4.18;

contract Ownable {
    address public owner;

    function Ownable() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
}

contract RBInformationStore is Ownable {
    address public profitContainerAddress;
    address public companyWalletAddress;
    uint public etherRatioForOwner;
    address public multiSigAddress;
    address public accountAddressForSponsee;
    bool public isPayableEnabledForAll;

    modifier onlyMultiSig() {
        require(multiSigAddress == msg.sender);
        _;
    }

    function RBInformationStore(
        address _profitContainerAddress,
        address _companyWalletAddress,
        uint _etherRatioForOwner,
        address _multiSigAddress,
        address _accountAddressForSponsee
    ) public {
        profitContainerAddress = _profitContainerAddress;
        companyWalletAddress = _companyWalletAddress;
        etherRatioForOwner = _etherRatioForOwner;
        multiSigAddress = _multiSigAddress;
        accountAddressForSponsee = _accountAddressForSponsee;
        isPayableEnabledForAll = false; // Default is disabled
    }

    function changeProfitContainerAddress(address _address) public onlyMultiSig {
        profitContainerAddress = _address;
    }

    function changeCompanyWalletAddress(address _address) public onlyMultiSig {
        companyWalletAddress = _address;
    }

    function changeEtherRatioForOwner(uint _value) public onlyMultiSig {
        etherRatioForOwner = _value;
    }

    function changeMultiSigAddress(address _address) public onlyMultiSig {
        multiSigAddress = _address;
    }

    function changeOwner(address _address) public onlyMultiSig {
        owner = _address;
    }

    function changeAccountAddressForSponsee(address _address) public onlyMultiSig {
        accountAddressForSponsee = _address;
    }

    function changeIsPayableEnabledForAll() public onlyMultiSig {
        isPayableEnabledForAll = !isPayableEnabledForAll;
    }

    function() public payable {
        require(isPayableEnabledForAll); // Only allow Ether transfers if enabled
    }
}
```

### Key Features:
1. **Ownership Control (`Ownable`)**:
   - The owner is initialized as the deployer of the contract.
   - Ownership can be transferred to a new address by the multi-signature wallet.

2. **Multi-Signature Restrictions (`onlyMultiSig`)**:
   - Certain functions are restricted to being executed only by the multi-signature wallet.

3. **Functionality**:
   - Each `change...` function allows modification of the corresponding state variable and ensures that only the multi-signature wallet can perform changes.

4. **Payable Toggle**:
   - The `isPayableEnabledForAll` state variable allows or disallows the contract from receiving Ether.
   - The `changeIsPayableEnabledForAll` function toggles its status.

5. **Fallback Function**:
   - The fallback function enables receiving Ether, but only if `isPayableEnabledForAll` is set to `true`.

6. **Compatibility with Compiler Version**:
   - The contract uses `pragma solidity 0.4.18` and strictly adheres to Solidity 0.4.x syntax and behavior.

This implementation meets all requirements outlined in the provided description and context.