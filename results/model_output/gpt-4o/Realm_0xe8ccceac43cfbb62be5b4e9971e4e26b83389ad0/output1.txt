Below is the complete and functional implementation of the `AccessControl` contract according to the provided context and description:

```solidity
pragma solidity ^0.4.19;

/**
 * @title AccessControl
 * @notice A contract that manages access control and maintenance mode for a system.
 * @dev This contract allows the creator to add or remove addresses with SERAPHIM role and toggle maintenance mode.
 */
contract AccessControl {

    address public creatorAddress;
    uint16 public totalSeraphims = 0;
    mapping (address => bool) public seraphims;
    bool public isMaintenanceMode = true;

    /**
     * @notice Modifier to restrict function calls to the contract creator.
     * @dev Ensures that only the creator can call the function.
     */
    modifier onlyCREATOR() {
        require(msg.sender == creatorAddress);
        _;
    }

    /**
     * @notice Modifier to restrict function calls to addresses with the SERAPHIM role.
     * @dev Ensures that only addresses with the SERAPHIM role can call the function.
     */
    modifier onlySERAPHIM() {
        require(seraphims[msg.sender] == true);
        _;
    }

    /**
     * @notice Modifier to restrict function calls when the contract is in maintenance mode.
     * @dev Ensures that the contract is not in maintenance mode before allowing the function call.
     */
    modifier isContractActive {
        require(!isMaintenanceMode);
        _;
    }

    /**
     * @notice Initializes the contract and sets the creator address.
     * @dev The constructor sets the `creatorAddress` to the address of the contract deployer.
     */
    function AccessControl() public {
        creatorAddress = msg.sender;
    }

    /**
     * @notice Adds a new address with the SERAPHIM role.
     * @dev Only the creator can call this function. The address must not already have the SERAPHIM role.
     * @param _newSeraphim The address to be added as a SERAPHIM.
     */
    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {
        require(!seraphims[_newSeraphim]); // Ensure the address is not already a SERAPHIM
        seraphims[_newSeraphim] = true;
        totalSeraphims++;
    }

    /**
     * @notice Removes an address from the SERAPHIM role.
     * @dev Only the creator can call this function. The address must currently have the SERAPHIM role.
     * @param _oldSeraphim The address to be removed from the SERAPHIM role.
     */
    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {
        require(seraphims[_oldSeraphim]); // Ensure the address is a SERAPHIM
        seraphims[_oldSeraphim] = false;
        totalSeraphims--;
    }

    /**
     * @notice Toggles the maintenance mode of the contract.
     * @dev Only the creator can call this function. Sets the `isMaintenanceMode` state variable.
     * @param _isMaintaining The new state of the maintenance mode (true for active, false for inactive).
     */
    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {
        isMaintenanceMode = _isMaintaining;
    }
}
```

### Explanation:
1. **Constructor**: Initializes the `creatorAddress` to the address of the deployer (`msg.sender`).
2. **Access Control Modifiers**:
   - `onlyCREATOR`: Restricts access to functions to the `creatorAddress`.
   - `onlySERAPHIM`: Restricts access to functions to addresses with the `SERAPHIM` role.
   - `isContractActive`: Ensures the contract is not in maintenance mode before executing the function.
3. **Functions**:
   - `addSERAPHIM`: Adds a new address to the `SERAPHIM` role, ensuring it doesn't already have the role. Increments the `totalSeraphims` counter.
   - `removeSERAPHIM`: Removes an address from the `SERAPHIM` role, ensuring it currently has the role. Decrements the `totalSeraphims` counter.
   - `updateMaintenanceMode`: Toggles the contract's maintenance mode state.

This implementation strictly adheres to the provided context and description while maintaining compatibility with Solidity `0.4.19`.