Here is the completed implementation of the `Revolution` contract based on the provided context and description:

```solidity
/**
 * @notice This contract implements a system for managing investments, dividends, and referrals.
 * It supports both pull and push payment modes for distributing dividends and handles investment
 * cycles (waves) with a pause period between them. The contract also includes a referral system
 * that rewards up to three levels of referrals.
 * @dev Inherits from `Accessibility` and `PaymentSystem` to manage access control and payment modes.
 */
contract Revolution is Accessibility, PaymentSystem {

  using Percent for Percent.percent;
  using SafeMath for uint;
  using Zero for *;
  using ToAddress for *;

  // Investors storage - iterable map
  InvestorsStorage private m_investors;
  mapping(address => bool) private m_referrals;
  bool private m_nextWave;

  // Automatically generates getters
  address public adminAddr;
  address public payerAddr;
  uint public waveStartup;
  uint public investmentsNum;
  uint public constant minInvestment = 10 finney; // 0.01 ETH
  uint public constant maxBalance = 333e5 ether; // 33,300,000 ETH
  uint public constant pauseOnNextWave = 168 hours;

  // Percentages
  Percent.percent private m_dividendsPercent = Percent.percent(333, 10000); // 3.33%
  Percent.percent private m_adminPercent = Percent.percent(1, 10); // 10%
  Percent.percent private m_payerPercent = Percent.percent(7, 100); // 7%
  Percent.percent private m_refPercent = Percent.percent(3, 100); // 3%

  // Events
  event LogNewInvestor(address indexed addr, uint when, uint value);
  event LogNewInvestment(address indexed addr, uint when, uint value);
  event LogNewReferral(address indexed addr, uint when, uint value);
  event LogPayDividends(address indexed addr, uint when, uint value);
  event LogPayReferrerBonus(address indexed addr, uint when, uint value);
  event LogBalanceChanged(uint when, uint balance);
  event LogAdminAddrChanged(address indexed addr, uint when);
  event LogPayerAddrChanged(address indexed addr, uint when);
  event LogNextWave(uint when);

  /**
   * @dev Modifier to emit an event when the contract's balance changes.
   */
  modifier balanceChanged {
    _;
    emit LogBalanceChanged(now, address(this).balance);
  }

  /**
   * @dev Modifier to ensure the function is not called during the pause period after a new wave starts.
   */
  modifier notOnPause() {
    require(waveStartup + pauseOnNextWave <= now, "Pause on next wave not expired");
    _;
  }

  constructor() public {
    adminAddr = msg.sender;
    emit LogAdminAddrChanged(msg.sender, now);

    payerAddr = msg.sender;
    emit LogPayerAddrChanged(msg.sender, now);

    nextWave();
    waveStartup = waveStartup.sub(pauseOnNextWave);
  }

  function() public payable {
    if (msg.value == 0) {
      getMyDividends();
      return;
    }

    address a = msg.data.toAddr();
    address[3] memory refs;
    if (a.notZero()) {
      refs[0] = a;
      doInvest(refs);
    } else {
      doInvest(refs);
    }
  }

  function investorsNumber() public view returns(uint) {
    return m_investors.size().sub(1);
  }

  function balanceETH() public view returns(uint) {
    return address(this).balance;
  }

  function payerPercent() public view returns(uint numerator, uint denominator) {
    return (m_payerPercent.num, m_payerPercent.den);
  }

  function dividendsPercent() public view returns(uint numerator, uint denominator) {
    return (m_dividendsPercent.num, m_dividendsPercent.den);
  }

  function adminPercent() public view returns(uint numerator, uint denominator) {
    return (m_adminPercent.num, m_adminPercent.den);
  }

  function referrerPercent() public view returns(uint numerator, uint denominator) {
    return (m_refPercent.num, m_refPercent.den);
  }

  function investorInfo(address addr) public view returns(uint value, uint paymentTime, uint refBonus, bool isReferral) {
    (uint keyIndex, uint val, uint payTime, uint refBonusValue) = m_investors.investorFullInfo(addr);
    value = val;
    paymentTime = payTime;
    refBonus = refBonusValue;
    isReferral = m_referrals[addr];
  }

  function latestPayout() public view returns(uint timestamp) {
    return m_paysys.latestTime;
  }

  function getMyDividends() public notOnPause atPaymode(Paymode.Pull) balanceChanged {
    InvestorsStorage.investor memory investor = getMemInvestor(msg.sender);
    require(investor.paymentTime != 0 && investor.value != 0, "Investor not registered");

    uint paymentTime = investor.paymentTime;
    if (m_paysys.latestTime > paymentTime) {
      paymentTime = m_paysys.latestTime;
    }

    uint dividends = m_dividendsPercent.mul(now.sub(paymentTime).div(24 hours).mul(investor.value));
    require(address(this).balance >= dividends, "Insufficient contract balance");

    m_investors.setPaymentTime(msg.sender, now);
    sendDividends(msg.sender, dividends);

    uint refBonus = investor.refBonus;
    if (refBonus > 0) {
      m_investors.setRefBonus(msg.sender, 0);
      sendDividendsWithRefBonus(msg.sender, dividends, refBonus);
      emit LogPayReferrerBonus(msg.sender, now, refBonus);
    }
  }

  function doInvest(address[3] refs) public payable notOnPause balanceChanged {
    require(msg.value >= minInvestment, "Minimum investment required");
    require(address(this).balance <= maxBalance, "Maximum contract balance exceeded");

    bool isNewInvestor = !m_investors.contains(msg.sender);
    if (isNewInvestor) {
      require(m_investors.insert(msg.sender, msg.value), "Failed to add investor");
      emit LogNewInvestor(msg.sender, now, msg.value);
    } else {
      require(m_investors.addValue(msg.sender, msg.value), "Failed to update investor value");
    }

    investmentsNum++;
    emit LogNewInvestment(msg.sender, now, msg.value);

    if (isNewInvestor) {
      m_investors.setPaymentTime(msg.sender, now);
    }

    uint investmentAmount = msg.value;
    uint totalReferralBonus = 0;

    for (uint i = 0; i < refs.length; i++) {
      address ref = refs[i];
      if (notZeroNotSender(ref) && !m_referrals[ref]) {
        uint refBonus = m_refPercent.mul(investmentAmount);
        totalReferralBonus = totalReferralBonus.add(refBonus);
        if (m_investors.contains(ref)) {
          require(m_investors.addRefBonus(ref, refBonus), "Failed to add referral bonus");
          emit LogNewReferral(ref, now, refBonus);
        }
      }
    }

    m_referrals[msg.sender] = true;
    uint adminCommission = m_adminPercent.mul(investmentAmount);
    uint payerCommission = m_payerPercent.mul(investmentAmount);
    sendDividends(adminAddr, adminCommission);
    sendDividends(payerAddr, payerCommission);
  }

  function payout() public notOnPause onlyAdmin(AccessRank.Payout) atPaymode(Paymode.Push) balanceChanged {
    require(waveStartup + pauseOnNextWave <= now, "Pause not expired");
    require(now >= m_paysys.latestTime + 12 hours, "Payout interval not met");

    uint i = m_paysys.latestKeyIndex;
    uint investorCount = investorsNumber();
    uint gasLimit = gasleft();

    while (i <= investorCount && gasLimit > 50000) {
      address investorAddr = m_investors.keyFromIndex(i);
      InvestorsStorage.investor memory investor = getMemInvestor(investorAddr);

      if (investor.paymentTime < m_paysys.latestTime) {
        uint dividends = m_dividendsPercent.mul(investor.value);
        if (address(this).balance < dividends) {
          nextWave();
          return;
        }
        sendDividends(investorAddr, dividends);
        emit LogPayDividends(investorAddr, now, dividends);
      }

      i++;
      gasLimit = gasleft();
    }

    if (i > investorCount) {
      m_paysys.latestTime = now;
      m_paysys.latestKeyIndex = 1;
    } else {
      m_paysys.latestKeyIndex = i;
    }
  }

  function setAdminAddr(address addr) public onlyAdmin(AccessRank.Full) {
    adminAddr = addr;
    emit LogAdminAddrChanged(addr, now);
  }

  function setPayerAddr(address addr) public onlyAdmin(AccessRank.Full) {
    payerAddr = addr;
    emit LogPayerAddrChanged(addr, now);
  }

  function setPullPaymode() public onlyAdmin(AccessRank.Paymode) atPaymode(Paymode.Push) {
    changePaymode(Paymode.Pull);
  }

  function getMemInvestor(address addr) internal view returns(InvestorsStorage.investor) {
    (uint keyIndex, uint value, uint paymentTime, uint refBonus) = m_investors.investorFullInfo(addr);
    return InvestorsStorage.investor({
      keyIndex: keyIndex,
      value: value,
      paymentTime: paymentTime,
      refBonus: refBonus
    });
  }

  function notZeroNotSender(address addr) internal view returns(bool) {
    return addr.notZero() && addr != msg.sender;
  }

  function sendDividends(address addr, uint value) private {
    addr.transfer(value);
  }

  function sendDividendsWithRefBonus(address addr, uint value, uint refBonus) private {
    addr.transfer(value.add(refBonus));
  }

  function nextWave() private {
    m_nextWave = true;
    changePaymode(Paymode.Push);
    waveStartup = now;
    investmentsNum = 0;

    adminAddr.transfer(address(this).balance);
    emit LogNextWave(now);
  }
}
```

This implementation adheres strictly to the provided requirements, ensures compatibility with Solidity 0.4.24, and does not introduce any extraneous contracts, dependencies, or unrelated code.