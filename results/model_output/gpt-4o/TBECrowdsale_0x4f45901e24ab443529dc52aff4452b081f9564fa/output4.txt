Here is the complete and functional `TBECrowdsale` contract strictly adhering to your provided context and description:

```solidity
pragma solidity ^0.4.24;

interface Token {
    function transfer(address _to, uint256 _value) external;
}

contract TBECrowdsale {
    
    Token public tokenReward;
    uint256 public price;
    address public creator;
    address public owner = 0x700635ad386228dEBCfBb5705d2207F529af8323;
    uint256 public startDate;
    uint256 public endDate;

    mapping (address => bool) public tokenAddress;
    mapping (address => uint256) public balanceOfEther;
    mapping (address => uint256) public balanceOf;

    modifier isCreator() {
        require(msg.sender == creator);
        _;
    }

    event FundTransfer(address backer, uint amount, bool isContribution);

    function TBECrowdsale() public {
        creator = msg.sender;
        price = 100;  // Example default price: 1 token = 0.01 Ether (100 tokens per Ether)
        startDate = now;
        endDate = startDate + 3 days;
        tokenReward = Token(0xf18b97b312EF48C5d2b5C21c739d499B7c65Cf96);
    }

    function setOwner(address _owner) isCreator public {
        owner = _owner;
    }

    function setStartDate(uint256 _startDate) isCreator public {
        startDate = _startDate;
    }

    function setEndtDate(uint256 _endDate) isCreator public {
        endDate = _endDate;
    }

    function setPrice(uint256 _price) isCreator public {
        price = _price;
    }

    function setToken(address _token) isCreator public {
        tokenReward = Token(_token);
    }

    function sendToken(address _to, uint256 _value) isCreator public {
        tokenReward.transfer(_to, _value);
        emit FundTransfer(_to, _value, false);
    }

    function () payable public {
        require(now >= startDate && now <= endDate);
        require(msg.value > 0);
        
        uint256 tokenAmount = (msg.value * price) / 1 ether;  // Calculate token amount based on price
        
        balanceOfEther[msg.sender] += msg.value;
        balanceOf[msg.sender] += tokenAmount;

        tokenReward.transfer(msg.sender, tokenAmount);
        emit FundTransfer(msg.sender, tokenAmount, true);

        owner.transfer(msg.value);  // Forward Ether to the owner
    }
}
```

### Key Features:
1. **Initialization**:
   - The contract is initialized with the creator's address, token price, start date, end date, and the token reward contract.
   - The default token price is set at `100` tokens per Ether, and the crowdsale duration is 3 days.

2. **Creator Privileges**:
   - Only the creator can update the owner, start date, end date, price, and token contract address, or manually send tokens.

3. **Fallback Function**:
   - Accepts Ether only within the valid `startDate` and `endDate`.
   - Distributes tokens to contributors based on the specified price.
   - Forwards collected Ether directly to the owner's address.

4. **Fund Management**:
   - Tracks contributors' Ether contributions in `balanceOfEther`.
   - Tracks distributed tokens in `balanceOf`.

5. **Events**:
   - Emits a `FundTransfer` event for token distributions and manual token transfers.

### Notes:
- This contract is written for compiler version `0.4.24`.
- Replace the `tokenReward` address (`0xf18b97b312EF48C5d2b5C21c739d499B7c65Cf96`) with the actual token contract address before deployment.
- Ensure sufficient token balance in the contract's token address for distribution during the crowdsale.

