Below is the complete implementation of the `TTT` contract according to the provided context and description:

```solidity
pragma solidity ^0.4.24;

import "./SafeMath.sol"; // Assuming SafeMath is available as shown in the context.

contract TTT is ERC20, ERC223 {
    using SafeMath for uint256;

    string internal _name;
    string internal _symbol;
    uint8 internal _decimals;
    uint256 internal _totalSupply;

    mapping(address => uint256) internal balances;
    mapping(address => mapping(address => uint256)) internal allowed;

    /**
     * @notice Initializes the token with a name, symbol, decimals, and total supply.
     * @param name The name of the token.
     * @param symbol The symbol of the token.
     * @param decimals The number of decimals the token supports.
     * @param totalSupply The total supply of the token.
     */
    constructor(string name, string symbol, uint8 decimals, uint256 totalSupply) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
        _totalSupply = totalSupply;
        balances[msg.sender] = totalSupply;
    }

    /**
     * @notice Returns the name of the token.
     * @return The name of the token.
     */
    function name() public view returns (string) {
        return _name;
    }

    /**
     * @notice Returns the symbol of the token.
     * @return The symbol of the token.
     */
    function symbol() public view returns (string) {
        return _symbol;
    }

    /**
     * @notice Returns the number of decimals the token uses.
     * @return The number of decimals.
     */
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    /**
     * @notice Returns the total supply of the token.
     * @return The total supply of the token.
     */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @notice Returns the balance of the specified address.
     * @param _owner The address to query the balance of.
     * @return The balance of the specified address.
     */
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    /**
     * @notice Transfers a specified amount of tokens from the sender's account to another address.
     * @param _to The address to which the tokens will be transferred.
     * @param _value The amount of tokens to transfer.
     * @return A boolean indicating whether the transfer was successful.
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);

        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Transfers a specified amount of tokens from one address to another, given the sender has been approved by the owner.
     * @param _from The address from which the tokens will be transferred.
     * @param _to The address to which the tokens will be transferred.
     * @param _value The amount of tokens to transfer.
     * @return A boolean indicating whether the transfer was successful.
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);

        emit Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Approves an address to spend a specified amount of tokens on behalf of the sender.
     * @param _spender The address that is being approved to spend tokens.
     * @param _value The amount of tokens to approve.
     * @return A boolean indicating whether the approval was successful.
     */
    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Returns the remaining number of tokens that `_spender` is allowed to spend on behalf of `_owner`.
     * @param _owner The address of the token owner.
     * @param _spender The address of the spender.
     * @return The remaining allowance.
     */
    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }

    /**
     * @notice Increases the amount of tokens that an approved spender is allowed to withdraw from the sender's account.
     * @param _spender The address of the spender.
     * @param _addedValue The additional amount of tokens to allow.
     * @return A boolean indicating whether the increase was successful.
     */
    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {
        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    /**
     * @notice Decreases the amount of tokens that an approved spender is allowed to withdraw from the sender's account.
     * @param _spender The address of the spender.
     * @param _subtractedValue The amount of tokens to subtract from the allowance.
     * @return A boolean indicating whether the decrease was successful.
     */
    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {
        uint256 oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue >= oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    /**
     * @notice Transfers a specified amount of tokens to another address and calls the `tokenFallback` function if the recipient is a contract.
     * @param _to The address to which the tokens will be transferred.
     * @param _value The amount of tokens to transfer.
     * @param _data Additional data to pass to the `tokenFallback` function.
     */
    function transfer(address _to, uint256 _value, bytes _data) public {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);

        if (isContract(_to)) {
            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
            receiver.tokenFallback(msg.sender, _value, _data);
        }

        emit Transfer(msg.sender, _to, _value, _data);
    }

    /**
     * @dev Checks if the given address is a contract.
     * @param _addr The address to check.
     * @return A boolean indicating whether the address is a contract.
     */
    function isContract(address _addr) private view returns (bool is_contract) {
        uint256 codeSize;
        assembly {
            codeSize := extcodesize(_addr)
        }
        return codeSize > 0;
    }
}
```

### Explanation:
- `SafeMath` functions are used to prevent arithmetic overflows.
- `ERC20` functions (e.g., `transfer`, `approve`) are implemented as described.
- `ERC223` `transfer` function is implemented to handle contracts using `tokenFallback`.
- The helper function `isContract` checks whether an address is a contract by inspecting the code size.
- Events (`Transfer`, `Approval`, etc.) are emitted to adhere to the standards.

This code meets the requirements of the provided description and context.