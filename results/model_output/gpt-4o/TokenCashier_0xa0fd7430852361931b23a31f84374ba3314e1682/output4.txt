Here's the complete implementation of the `TokenCashier` smart contract based on the provided context and specifications:

```solidity
pragma solidity 0.5.12;

import "./Ownable.sol";
import "./Pausable.sol";

contract TokenCashier is Pausable {
    event Receipt(address indexed token, uint256 indexed id, address sender, address recipient, uint256 amount, uint256 fee);

    ITokenList[] public tokenLists;
    address[] public tokenSafes;
    mapping(address => uint256) public counts;
    uint256 public depositFee;
    IWrappedCoin public wrappedCoin;

    constructor(IWrappedCoin _wrappedCoin, ITokenList[] memory _tokenLists, address[] memory _tokenSafes) public {
        require(_tokenLists.length == _tokenSafes.length, "# of token lists is not equal to # of safes");
        wrappedCoin = _wrappedCoin;
        tokenLists = _tokenLists;
        tokenSafes = _tokenSafes;
    }

    function() external {
        revert();
    }

    function count(address _token) public view returns (uint256) {
        return counts[_token];
    }

    function setDepositFee(uint256 _fee) public onlyOwner {
        depositFee = _fee;
    }

    function depositTo(address _token, address _to, uint256 _amount) public whenNotPaused payable {
        require(_to != address(0), "Invalid destination address");

        uint256 fee = (_amount * depositFee) / 10000;
        require(msg.value == fee, "Insufficient fee coverage");

        uint256 amountAfterFee = _amount - fee;
        
        bool isAllowed = false;
        uint256 minAmt = 0;
        uint256 maxAmt = 0;
        address tokenSafe = address(0);
        
        for (uint256 i = 0; i < tokenLists.length; i++) {
            if (tokenLists[i].isAllowed(_token)) {
                isAllowed = true;
                minAmt = tokenLists[i].minAmount(_token);
                maxAmt = tokenLists[i].maxAmount(_token);
                tokenSafe = tokenSafes[i];
                break;
            }
        }

        require(isAllowed, "Token not allowed");
        require(amountAfterFee >= minAmt, "Amount below minimum allowed");
        require(amountAfterFee <= maxAmt, "Amount above maximum allowed");

        if (_token == address(0)) {
            require(msg.value >= _amount, "Insufficient ETH sent");
            wrappedCoin.deposit.value(amountAfterFee)();
            _token = address(wrappedCoin);
        } else {
            require(safeTransferFrom(_token, msg.sender, address(this), _amount), "Token transfer failed");
        }
        
        counts[_token]++;
        emit Receipt(_token, counts[_token], msg.sender, _to, amountAfterFee, fee);

        if (tokenSafe != address(0)) {
            require(safeTransfer(_token, tokenSafe, amountAfterFee), "Safe transfer failed");
        } else {
            (bool success, ) = _token.call(abi.encodeWithSelector(0x42966c68, amountAfterFee));
            require(success, "Burn failed");
        }
    }

    function deposit(address _token, uint256 _amount) public payable {
        depositTo(_token, msg.sender, _amount);
    }

    function withdraw() external onlyOwner {
        msg.sender.transfer(address(this).balance);
    }

    function withdrawToken(address _token) public onlyOwner {
        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0x70a08231, address(this)));
        require(success, "Balance query failed");

        uint256 balance = abi.decode(data, (uint256));
        require(balance > 0, "No tokens to withdraw");
        require(safeTransfer(_token, msg.sender, balance), "Token transfer failed");
    }

    function safeTransferFrom(address _token, address _from, address _to, uint256 _amount) internal returns (bool) {
        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _amount));
        return success && (data.length == 0 || abi.decode(data, (bool)));
    }

    function safeTransfer(address _token, address _to, uint256 _amount) internal returns (bool) {
        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0xa9059cbb, _to, _amount));
        return success && (data.length == 0 || abi.decode(data, (bool)));
    }
}
```

This code strictly follows the described functionalities and limitations, ensuring proper control and secure token handling.