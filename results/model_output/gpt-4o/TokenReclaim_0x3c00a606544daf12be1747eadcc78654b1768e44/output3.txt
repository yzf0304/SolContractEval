```solidity
pragma solidity ^0.4.23;

contract TokenReclaim {
    mapping (address => string) internal _ethToSphtx;
    mapping (string => string) internal _accountToPubKey;

    event AccountRegister(address ethAccount, string sphtxAccount, string pubKey);

    function register(string memory name, string memory pubKey) public {
        require(bytes(name).length >= 3 && bytes(name).length <= 16, "SPHTX name length must be between 3 and 16 characters.");
        require(bytes(pubKey).length >= 50 && bytes(pubKey).length <= 64, "Public key length must be between 50 and 64 characters.");
        require(bytes(_ethToSphtx[msg.sender]).length == 0, "Address already registered.");
        require(bytes(_accountToPubKey[name]).length == 0, "SPHTX name already in use.");

        bytes memory nameBytes = bytes(name);
        require((nameBytes[0] >= 'a' && nameBytes[0] <= 'z') || (nameBytes[0] >= '0' && nameBytes[0] <= '9'), "SPHTX name must start with a lowercase letter or digit.");

        for (uint i = 1; i < nameBytes.length; i++) {
            require(
                (nameBytes[i] >= 'a' && nameBytes[i] <= 'z') || 
                (nameBytes[i] >= '0' && nameBytes[i] <= '9') || 
                nameBytes[i] == '-' || 
                nameBytes[i] == '.',
                "SPHTX name contains invalid character."
            );
        }

        _ethToSphtx[msg.sender] = name;
        _accountToPubKey[name] = pubKey;
        emit AccountRegister(msg.sender, name, pubKey);
    }

    function account(address addr) public view returns (string memory) {
        return _ethToSphtx[addr];
    }

    function keys(address addr) public view returns (string memory) {
        string memory name = _ethToSphtx[addr];
        return _accountToPubKey[name];
    }

    function nameAvailable(string memory name) public view returns (bool) {
        if (bytes(_accountToPubKey[name]).length != 0) {
            return false;
        }

        bytes memory nameBytes = bytes(name);
        if (nameBytes.length < 3 || nameBytes.length > 16) {
            return false;
        }
        
        if (!((nameBytes[0] >= 'a' && nameBytes[0] <= 'z') || (nameBytes[0] >= '0' && nameBytes[0] <= '9'))) {
            return false;
        }

        for (uint i = 1; i < nameBytes.length; i++) {
            if (!((nameBytes[i] >= 'a' && nameBytes[i] <= 'z') || 
                  (nameBytes[i] >= '0' && nameBytes[i] <= '9') || 
                  nameBytes[i] == '-' || 
                  nameBytes[i] == '.')) {
                return false;
            }
        }

        return true;
    }
}
```