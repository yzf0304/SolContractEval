Here is the complete implementation of the `TokenReclaim` contract based on the provided context and description:

```solidity
pragma solidity 0.4.23;

contract TokenReclaim {
    mapping(address => string) internal _ethToSphtx;
    mapping(string => string) internal _accountToPubKey;

    /**
     * @notice Emitted when an account is registered.
     * @param ethAccount The Ethereum address of the user.
     * @param sphtxAccount The SPHTX name of the user.
     * @param pubKey The public key associated with the user's SPHTX name.
     */
    event AccountRegister(address ethAccount, string sphtxAccount, string pubKey);

    /**
     * @notice Registers an SPHTX name and associates it with a public key for the caller.
     * @param name The SPHTX name to be registered. Must meet specific formatting requirements.
     * @param pubKey The public key to be associated with the SPHTX name. Must meet length requirements.
     */
    function register(string memory name, string memory pubKey) public {
        require(bytes(name).length >= 3 && bytes(name).length <= 16, "Invalid name length");
        require(bytes(pubKey).length >= 50 && bytes(pubKey).length <= 64, "Invalid public key length");
        require(bytes(_ethToSphtx[msg.sender]).length == 0, "Address already registered");
        require(bytes(_accountToPubKey[name]).length == 0, "SPHTX name already in use");
        require(isValidName(name), "Invalid name format");

        _ethToSphtx[msg.sender] = name;
        _accountToPubKey[name] = pubKey;

        emit AccountRegister(msg.sender, name, pubKey);
    }

    /**
     * @notice Returns the SPHTX name associated with the given Ethereum address.
     * @param addr The Ethereum address to query.
     * @return The SPHTX name associated with the address.
     */
    function account(address addr) public view returns (string memory) {
        return _ethToSphtx[addr];
    }

    /**
     * @notice Returns the public key associated with the SPHTX name of the given Ethereum address.
     * @param addr The Ethereum address to query.
     * @return The public key associated with the SPHTX name.
     */
    function keys(address addr) public view returns (string memory) {
        string memory sphtxAccount = _ethToSphtx[addr];
        return _accountToPubKey[sphtxAccount];
    }

    /**
     * @notice Checks if a SPHTX name is available for registration.
     * @param name The SPHTX name to check availability for.
     * @return bool True if the name is available, false otherwise.
     */
    function nameAvailable(string memory name) public view returns (bool) {
        if (bytes(name).length < 3 || bytes(name).length > 16) {
            return false;
        }
        if (!isValidName(name)) {
            return false;
        }
        if (bytes(_accountToPubKey[name]).length != 0) {
            return false;
        }
        return true;
    }

    /**
     * @dev Validates the format of a given SPHTX name.
     * @param name The SPHTX name to validate.
     * @return bool True if the name is valid, false otherwise.
     */
    function isValidName(string memory name) internal pure returns (bool) {
        bytes memory nameBytes = bytes(name);
        if (
            !(nameBytes[0] >= 'a' && nameBytes[0] <= 'z') &&
            !(nameBytes[0] >= '0' && nameBytes[0] <= '9')
        ) {
            return false;
        }

        for (uint256 i = 0; i < nameBytes.length; i++) {
            byte char = nameBytes[i];
            if (
                !(char >= 'a' && char <= 'z') &&
                !(char >= '0' && char <= '9') &&
                char != '-' &&
                char != '.'
            ) {
                return false;
            }
        }
        return true;
    }
}
```

### Explanation:
1. **Registration Validation (`register`)**:
   - Ensures the SPHTX name meets the length and format requirements.
   - Ensures the public key meets the length requirements.
   - Checks that the Ethereum address is not already registered and that the name is not already in use.
   - Uses the helper function `isValidName` to validate the SPHTX name format.

2. **SPHTX Name Retrieval (`account`)**:
   - Returns the SPHTX name mapped to the given Ethereum address.

3. **Public Key Retrieval (`keys`)**:
   - Retrieves the public key corresponding to the SPHTX name associated with the Ethereum address.

4. **Name Availability Check (`nameAvailable`)**:
   - Checks if the name is valid (length and format) and confirms that it is not mapped to a public key.

5. **Name Format Validation (`isValidName`)**:
   - Ensures the name starts with a valid character (lowercase letter or digit).
   - Validates that all characters are within the allowed set (lowercase letters, digits, hyphens, periods).

This contract strictly adheres to the description and uses compiler version `0.4.23`.