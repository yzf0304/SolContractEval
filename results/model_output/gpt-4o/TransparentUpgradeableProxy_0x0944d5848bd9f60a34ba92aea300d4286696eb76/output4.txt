Below is the complete implementation of the `TransparentUpgradeableProxy` smart contract, adhering strictly to the provided context and requirements. This contract extends `UpgradeableProxy` and includes the ability to upgrade the implementation and manage the admin functionality:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;

contract TransparentUpgradeableProxy is UpgradeableProxy {
    /**
     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and
     * optionally initialized with `_data`.
     */
    constructor(address _logic, address _admin, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {
        assert(_ADMIN_SLOT == bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1));
        _setAdmin(_admin);
    }

    /**
     * @dev Emitted when the admin account has changed.
     */
    event AdminChanged(address previousAdmin, address newAdmin);

    /**
     * @dev Storage slot with the admin of the contract.
     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1.
     */
    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;

    /**
     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.
     */
    modifier ifAdmin() {
        if (msg.sender == _admin()) {
            _;
        } else {
            _fallback();
        }
    }

    /**
     * @notice Returns the current admin.
     */
    function admin() external ifAdmin returns (address) {
        return _admin();
    }

    /**
     * @notice Returns the current implementation.
     */
    function implementation() external ifAdmin returns (address) {
        return _implementation();
    }

    /**
     * @notice Changes the admin of the proxy.
     * @dev Emits an {AdminChanged} event.
     */
    function changeAdmin(address newAdmin) external ifAdmin {
        require(newAdmin != address(0), "TransparentUpgradeableProxy: new admin is the zero address");
        emit AdminChanged(_admin(), newAdmin);
        _setAdmin(newAdmin);
    }

    /**
     * @notice Upgrades the implementation of the proxy.
     */
    function upgradeTo(address newImplementation) external ifAdmin {
        _upgradeTo(newImplementation);
    }

    /**
     * @notice Upgrades the implementation of the proxy and calls a function from the new implementation.
     */
    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {
        _upgradeTo(newImplementation);
        (bool success, ) = newImplementation.delegatecall(data);
        require(success, "TransparentUpgradeableProxy: delegatecall failed");
    }

    /**
     * @dev Returns the current admin.
     */
    function _admin() internal view returns (address adm) {
        bytes32 slot = _ADMIN_SLOT;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            adm := sload(slot)
        }
    }

    /**
     * @dev Stores a new address in the EIP1967 admin slot.
     */
    function _setAdmin(address newAdmin) private {
        bytes32 slot = _ADMIN_SLOT;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            sstore(slot, newAdmin)
        }
    }

    /**
     * @dev Ensures the admin cannot access the fallback function.
     */
    function _beforeFallback() internal override {
        require(msg.sender != _admin(), "TransparentUpgradeableProxy: admin cannot fallback to implementation");
    }

    /**
     * @dev Fallback function that delegates calls to the current implementation.
     */
    receive() external payable override {
        _fallback();
    }
}
```

### Key Features:
1. **Admin Control**: Only the admin can manage upgrades and make calls to specific functions such as `changeAdmin`, `upgradeTo`, and `upgradeToAndCall`.
2. **Upgradeable Implementation**: The implementation of the proxy can be upgraded securely using EIP-1967 slots.
3. **Delegation Mechanism**: Calls are delegated to the implementation using the `_delegate` function from `UpgradeableProxy`.
4. **Fallback Protection**: Admin cannot access the fallback function, which ensures separation of concerns.

### Notes:
- The contract strictly follows EIP-1967 standards for storage slots related to proxy implementation and admin.
- The `receive()` and `fallback()` functions delegate calls to the current implementation, as defined in the parent `UpgradeableProxy` contract.
