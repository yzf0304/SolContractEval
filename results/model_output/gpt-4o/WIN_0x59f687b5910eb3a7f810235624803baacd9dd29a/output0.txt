Below is the completed WIN smart contract based on the provided context and description:

```solidity
pragma solidity ^0.4.24;

/**
 * @title WIN Token Contract
 * @notice Implements a basic ERC20 token with additional functionality for burning tokens.
 * @dev The contract uses SafeMath to prevent overflows and underflows.
 */
contract WIN {

    using SafeMath for uint256;

    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    address public owner;

    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    event Burn(address indexed _from, uint256 _value);

    /**
     * @notice Initializes the token with an initial supply, name, decimal units, and symbol.
     * @param _initialSupply The initial supply of tokens.
     * @param _tokenName The name of the token.
     * @param _decimalUnits The number of decimal units for the token.
     * @param _tokenSymbol The symbol of the token.
     */
    constructor(uint256 _initialSupply, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {
        name = _tokenName;                                   
        symbol = _tokenSymbol;
        decimals = _decimalUnits;
        totalSupply = _initialSupply;
        balanceOf[msg.sender] = _initialSupply;
        owner = msg.sender;
    }

    /**
     * @notice Transfers a specified amount of tokens from the sender to a recipient.
     * @param _to The recipient address.
     * @param _value The amount of tokens to transfer.
     * @return A boolean indicating if the transfer was successful.
     */
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0)); // Prevent transfer to 0x0 address
        require(_value > 0);       // Prevent transfer of 0 tokens
        require(balanceOf[msg.sender] >= _value);

        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        balanceOf[_to] = balanceOf[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Transfers a specified amount of tokens on behalf of another address.
     * @param _from The address to transfer tokens from.
     * @param _to The recipient address.
     * @param _value The amount of tokens to transfer.
     * @return A boolean indicating if the transfer was successful.
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0)); // Prevent transfer to 0x0 address
        require(_value > 0);       // Prevent transfer of 0 tokens
        require(balanceOf[_from] >= _value);
        require(allowance[_from][msg.sender] >= _value);

        balanceOf[_from] = balanceOf[_from].sub(_value);
        balanceOf[_to] = balanceOf[_to].add(_value);
        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Approves a spender to spend a specified amount of tokens on behalf of the sender.
     * @param _spender The address that will spend the tokens.
     * @param _value The amount of tokens to approve.
     * @return A boolean indicating if the approval was successful.
     */
    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(_value > 0);

        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Burns a specified amount of tokens from the sender's balance.
     * @param _value The amount of tokens to burn.
     * @return A boolean indicating if the burn was successful.
     */
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        require(_value > 0);

        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        totalSupply = totalSupply.sub(_value);
        emit Burn(msg.sender, _value);
        return true;
    }
}
```

### Key Features and Details:
1. **SafeMath Integration**: All arithmetic operations use SafeMath for overflow and underflow protection.
2. **Transfer Function**: Ensures valid recipient address, positive value, and sufficient balance for the sender.
3. **TransferFrom Function**: Checks allowance before transferring on behalf of an address. Deducts allowance accordingly.
4. **Approval Function**: Allows setting of whether another address can spend tokens, with positive value enforcement.
5. **Burn Function**: Reduces the sender's balance and decreases the total supply for token burning.

This contract is written in compliance with Solidity version 0.4.24 and adheres strictly to the provided context.