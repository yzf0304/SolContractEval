Based on the provided context and the specified contract description, here's the completed `Pausable` contract implementation:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title Pausable
 * @dev This contract allows the owner to pause and unpause all functions that use the `whenNotPaused` modifier.
 * @notice The pauser, initially set by the contract owner, can change the paused state of the contract. 
 * Only the owner can change the pauser role.
 */
contract Pausable is Context, Ownable {
    event Pause();
    event Unpause();
    event PauserChanged(address indexed newAddress);

    address public pauser;
    bool public paused = false;

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     * @notice Functions with this modifier will revert if the contract is paused.
     */
    modifier whenNotPaused() {
        require(!paused, "Network paused by administrator");
        _;
    }

    /**
     * @dev Modifier to restrict access to the pauser.
     * @notice Only the account with the pauser role can call functions with this modifier.
     */
    modifier onlyPauser() {
        require(msg.sender == pauser, "Caller is not the pause administrator");
        _;
    }

    /**
     * @dev Constructor sets the initial pauser to the deployer (owner of the contract).
     */
    constructor() {
        pauser = _msgSender();
        emit PauserChanged(pauser);
    }

    /**
     * @dev Allows the pauser to pause the contract, preventing any further actions until it is unpaused.
     * @notice Emits a {Pause} event.
     */
    function pause() external onlyPauser {
        paused = true;
        emit Pause();
    }

    /**
     * @dev Allows the pauser to unpause the contract, allowing normal operations to resume.
     * @notice Emits an {Unpause} event.
     */
    function unpause() external onlyPauser {
        paused = false;
        emit Unpause();
    }

    /**
     * @dev Allows the owner to update the pauser role.
     * @notice Reverts if the new pauser is the zero address. Emits a {PauserChanged} event.
     */
    function updatePauser(address _newPauser) external onlyOwner {
        require(_newPauser != address(0), "Pausable: New pauser is the zero address");
        pauser = _newPauser;
        emit PauserChanged(_newPauser);
    }
}
```

### Explanation of Completed Functions:

1. **Constructor**
   - The `pauser` is initialized to the contract deployer (owner). This aligns with the owner setting the initial pauser role.

2. **`pause`**
   - Sets the contract state to `paused = true`.
   - Emits the `Pause` event to notify observers of the state change.

3. **`unpause`**
   - Sets the contract state to `paused = false`.
   - Emits the `Unpause` event to notify observers of the state change.

4. **`updatePauser`**
   - Allows the owner to change the `pauser` address.
   - Validates that the new pauser address is not the zero address.
   - Emits the `PauserChanged` event to document the role change.

All contract requirements are satisfied strictly according to the provided context and instructions.