Here's the completed `Pausable` contract based on the provided context and description:

```solidity
pragma solidity ^0.8.0;

contract Pausable is Context, Ownable {
    
    event Pause();
    event Unpause();
    event PauserChanged(address indexed newAddress);

    address public pauser;
    bool public paused = false;

    /**
     * @dev Initializes the contract setting the owner as the initial pauser.
     */
    constructor() {
        pauser = owner();
        emit PauserChanged(pauser);
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     * @notice Functions with this modifier will revert if the contract is paused.
     */
    modifier whenNotPaused() {
        require(!paused, "Pausable: contract is paused");
        _;
    }

    /**
     * @dev Modifier to restrict access to the pauser.
     * @notice Only the account with the pauser role can call functions with this modifier.
     */
    modifier onlyPauser() {
        require(_msgSender() == pauser, "Pausable: caller is not the pauser");
        _;
    }

    /**
     * @dev Allows the pauser to pause the contract, preventing any further actions until it is unpaused.
     * @notice Emits a {Pause} event.
     */
    function pause() external onlyPauser {
        paused = true;
        emit Pause();
    }

    /**
     * @dev Allows the pauser to unpause the contract, allowing normal operations to resume.
     * @notice Emits an {Unpause} event.
     */
    function unpause() external onlyPauser {
        paused = false;
        emit Unpause();
    }

    /**
     * @dev Allows the owner to update the pauser role.
     * @notice Reverts if the new pauser is the zero address. Emits a {PauserChanged} event.
     */
    function updatePauser(address _newPauser) external onlyOwner {
        require(_newPauser != address(0), "Pausable: new pauser is the zero address");
        pauser = _newPauser;
        emit PauserChanged(_newPauser);
    }
}
```

### Explanation:
1. **State Variables**:
   - `pauser`: Tracks the current address with permission to pause/unpause the contract.
   - `paused`: Boolean indicating whether the contract is paused.

2. **Modifiers**:
   - `whenNotPaused`: Ensures that functions can only be called when the contract is not paused.
   - `onlyPauser`: Restricts certain functions to the address assigned as `pauser`.

3. **Constructor**:
   - Initializes the `pauser` role to the contract owner by default and emits the `PauserChanged` event.

4. **Functions**:
   - `pause`: Sets `paused` to `true` and emits the `Pause` event. Only callable by the `pauser`.
   - `unpause`: Sets `paused` to `false` and emits the `Unpause` event. Only callable by the `pauser`.
   - `updatePauser`: Allows the owner to update the `pauser` address, reverting if the new address is `0`. Emits the `PauserChanged` event.

This implementation strictly adheres to the provided context and description while avoiding extraneous features or dependencies.