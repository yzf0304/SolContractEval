Here is the completed `Pausable` contract based on the provided context and description:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title Pausable
 * @dev This contract allows the owner to pause and unpause all functions that use the `whenNotPaused` modifier.
 * @notice The pauser, initially set by the contract owner, can change the paused state of the contract. 
 * Only the owner can change the pauser role.
 */
contract Pausable is Context, Ownable {
    
    event Pause();
    event Unpause();
    event PauserChanged(address indexed newAddress);

    address public pauser;
    bool public paused = false;

    /**
     * @dev Initializes the contract with the deployer as the initial owner and pauser.
     */
    constructor() {
        pauser = _msgSender();
        emit PauserChanged(pauser);
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     * @notice Functions with this modifier will revert if the contract is paused.
     */
    modifier whenNotPaused() {
        require(!paused, "Network paused by administrator");
        _;
    }

    /**
     * @dev Modifier to restrict access to the pauser.
     * @notice Only the account with the pauser role can call functions with this modifier.
     */
    modifier onlyPauser() {
        require(_msgSender() == pauser, "Caller is not the pause administrator");
        _;
    }

    /**
     * @dev Allows the pauser to pause the contract, preventing any further actions until it is unpaused.
     * @notice Emits a {Pause} event.
     */
    function pause() external onlyPauser {
        require(!paused, "Contract is already paused");
        paused = true;
        emit Pause();
    }

    /**
     * @dev Allows the pauser to unpause the contract, allowing normal operations to resume.
     * @notice Emits an {Unpause} event.
     */
    function unpause() external onlyPauser {
        require(paused, "Contract is not paused");
        paused = false;
        emit Unpause();
    }

    /**
     * @dev Allows the owner to update the pauser role.
     * @notice Reverts if the new pauser is the zero address. Emits a {PauserChanged} event.
     */
    function updatePauser(address _newPauser) external onlyOwner {
        require(_newPauser != address(0), "Pausable: new pauser is the zero address");
        pauser = _newPauser;
        emit PauserChanged(_newPauser);
    }
}
```

### Explanation:
1. **State Variables**:
   - `address public pauser`: Stores the address that has the role of pauser.
   - `bool public paused`: Indicates whether the contract is paused.

2. **Events**:
   - `Pause`: Emitted when the contract is paused.
   - `Unpause`: Emitted when the contract is unpaused.
   - `PauserChanged`: Emitted when the pauser role is updated.

3. **Modifiers**:
   - `whenNotPaused`: Ensures that the function can only be called when the contract is not paused.
   - `onlyPauser`: Restricts function access to the pauser.

4. **Functions**:
   - `pause`: Allows the pauser to set the contract to a paused state. Reverts if the contract is already paused.
   - `unpause`: Allows the pauser to resume operations by unpausing the contract. Reverts if the contract is not currently paused.
   - `updatePauser`: Allows the contract owner to change the address of the pauser. Reverts if the new pauser address is the zero address.

5. **Constructor**:
   - Initializes the contract by setting the deployer as the initial pauser and emitting the `PauserChanged` event.

### Notes:
- The contract strictly adheres to the description provided.
- The `pause` and `unpause` functions perform basic checks before setting the `paused` state.
- The `updatePauser` function ensures the new pauser address is valid and emits an event for transparency.