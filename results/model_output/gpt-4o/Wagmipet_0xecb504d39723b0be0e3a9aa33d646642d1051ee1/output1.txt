```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

/**
 * @title Wagmipet
 * @notice A simple pet simulation contract where the pet's needs (hunger, uncleanliness, boredom, sleepiness) must be managed.
 * @dev The pet's conditions deteriorate over time and must be maintained by calling specific functions. If any condition exceeds 100, the pet is no longer alive.
 */
contract Wagmipet {
    address _owner;
    bool _birthed;

    event CaretakerLoved(address indexed caretaker, uint256 indexed amount);

    uint256 lastFeedBlock;
    uint256 lastCleanBlock;
    uint256 lastPlayBlock;
    uint256 lastSleepBlock;

    uint8 internal hunger;
    uint8 internal uncleanliness;
    uint8 internal boredom;
    uint8 internal sleepiness;

    mapping(address => uint256) public love;

    /**
     * @dev Modifier to restrict function calls to the owner of the contract.
     */
    modifier onlyOwner() {
        require(msg.sender == _owner, "Only the owner can call this function");
        _;
    }

    /**
     * @notice Initializes the contract, setting the owner and initial state of the pet.
     * @dev Sets the initial values for the pet's needs and the owner of the contract.
     */
    constructor() {
        _owner = msg.sender;
        lastFeedBlock = block.number;
        lastCleanBlock = block.number;
        lastPlayBlock = block.number;
        lastSleepBlock = block.number;

        hunger = 0;
        uncleanliness = 0;
        boredom = 0;
        sleepiness = 0;
    }

    /**
     * @notice Internal function to add love points to a caretaker.
     * @dev Emits an event when a caretaker is given love points.
     * @param caretaker The address of the caretaker.
     * @param amount The amount of love points to add.
     */
    function addLove(address caretaker, uint256 amount) internal {
        love[caretaker] += amount;
        emit CaretakerLoved(caretaker, amount);
    }

    /**
     * @notice Feeds the entity, resetting hunger and increasing other stats.
     * @dev Reverts if entity is dead, too bored, or too dirty to eat.
     * @dev Increases boredom by 10 and uncleanliness by 3 after feeding.
     * @dev Adds 1 love point to the caller.
     */
    function feed() public {
        require(getAlive(), "The pet is no longer alive");
        require(boredom <= 50, "The pet is too bored to eat");
        require(uncleanliness <= 50, "The pet is too dirty to eat");

        hunger = 0;
        boredom += 10;
        uncleanliness += 3;
        lastFeedBlock = block.number;

        addLove(msg.sender, 1);
    }

    /**
     * @notice Cleans the entity, resetting uncleanliness.
     * @dev Reverts if entity is dead or already clean.
     * @dev Adds 1 love point to the caller.
     */
    function clean() public {
        require(getAlive(), "The pet is no longer alive");
        require(uncleanliness > 0, "The pet is already clean");

        uncleanliness = 0;
        lastCleanBlock = block.number;

        addLove(msg.sender, 1);
    }

    /**
     * @notice Lets the entity play, resetting boredom but increasing other stats.
     * @dev Reverts if entity is dead, too hungry, sleepy, or dirty to play.
     * @dev Increases hunger by 10, sleepiness by 10, and uncleanliness by 5 after playing.
     * @dev Adds 1 love point to the caller.
     */
    function play() public {
        require(getAlive(), "The pet is no longer alive");
        require(hunger <= 50, "The pet is too hungry to play");
        require(sleepiness <= 50, "The pet is too sleepy to play");
        require(uncleanliness <= 50, "The pet is too dirty to play");

        boredom = 0;
        hunger += 10;
        sleepiness += 10;
        uncleanliness += 5;
        lastPlayBlock = block.number;

        addLove(msg.sender, 1);
    }

    /**
     * @notice Puts the entity to sleep, resetting sleepiness and increasing uncleanliness.
     * @dev Reverts if the entity is not alive, too dirty, or not sleepy enough.
     * @dev Adds 1 love point to the caller.
     */
    function sleep() public {
        require(getAlive(), "The pet is no longer alive");
        require(uncleanliness < 80, "The pet is too dirty to sleep");
        require(sleepiness > 0, "The pet is not sleepy");

        sleepiness = 0;
        uncleanliness += 5;
        lastSleepBlock = block.number;

        addLove(msg.sender, 1);
    }

    /**
     * @notice Retrieves the current status of the entity.
     * @return string The status message reflecting the entity's condition.
     */
    function getStatus() public view returns (string memory) {
        if (!getAlive()) {
            return "no longer with us";
        }

        if (sleepiness > 50) {
            return "i need sleep";
        } else if (boredom > 50) {
            return "i need play";
        } else if (uncleanliness > 50) {
            return "i need cleaning";
        } else if (hunger > 50) {
            return "i need food";
        }

        string[4] memory goodStatuses = ["gm", "im feeling great", "all good", "i love u"];
        return goodStatuses[block.number % 4];
    }

    /**
     * @notice Checks if the pet is still alive.
     * @dev The pet is considered alive if all its needs are below 101.
     * @return A boolean indicating whether the pet is alive.
     */
    function getAlive() public view returns (bool) {
        return hunger < 101 && uncleanliness < 101 && boredom < 101 && sleepiness < 101;
    }

    /**
     * @notice Gets the current hunger level of the pet.
     * @return The current hunger level as a uint256.
     */
    function getHunger() public view returns (uint256) {
        return hunger + uint8(block.number - lastFeedBlock);
    }

    /**
     * @notice Gets the current uncleanliness level of the pet.
     * @return The current uncleanliness level as a uint256.
     */
    function getUncleanliness() public view returns (uint256) {
        return uncleanliness + uint8(block.number - lastCleanBlock);
    }

    /**
     * @notice Gets the current boredom level of the pet.
     * @return The current boredom level as a uint256.
     */
    function getBoredom() public view returns (uint256) {
        return boredom + uint8(block.number - lastPlayBlock);
    }

    /**
     * @notice Gets the current sleepiness level of the pet.
     * @return The current sleepiness level as a uint256.
     */
    function getSleepiness() public view returns (uint256) {
        return sleepiness + uint8(block.number - lastSleepBlock);
    }
}
```