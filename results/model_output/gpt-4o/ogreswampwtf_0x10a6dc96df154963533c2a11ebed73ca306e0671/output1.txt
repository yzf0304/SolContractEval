Here is the complete `ogreswampwtf` contract implementation based on the provided description and requirements. 

```solidity
// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract ogreswampwtf is ERC721, Ownable {
    using Counters for Counters.Counter;
    using Strings for uint256;

    Counters.Counter private _tokenSupply;
    string public ogreURI;
    string public ogreExtension = ".json";
    uint256 public cost = 0 ether;
    uint256 public maxSupply = 3333;
    uint256 public freeMints = 3333;
    uint256 public maxMintAmount = 3;
    bool public paused = false;
    bool public revealed = false;
    string public SwampUri;
    mapping(address => bool) public whitelisted;
    mapping(address => uint256) private freeMintsWallet;

    constructor(
        string memory _name,
        string memory _symbol,
        string memory _initOgreURI,
        string memory _initSwampUri
    ) ERC721(_name, _symbol) {
        setOgreURI(_initOgreURI);
        setSwampURI(_initSwampUri);
    }

    function totalSupply() public view returns (uint256) {
        return _tokenSupply.current();
    }

    function _ogreURI() internal view virtual override returns (string memory) {
        return ogreURI;
    }

    function mint(address _to, uint256 _mintAmount) public payable {
        require(!paused, "Minting is paused");
        require(_mintAmount > 0, "Mint amount must be greater than 0");
        require(_mintAmount <= maxMintAmount, "Exceeds maximum mint amount per transaction");
        require(_tokenSupply.current() + _mintAmount <= maxSupply, "Exceeds maximum supply");

        if (_tokenSupply.current() + _mintAmount <= freeMints) {
            require(whitelisted[msg.sender], "Free mints are only available for whitelisted users");
        } else {
            require(msg.value >= cost * _mintAmount, "Insufficient funds for minting");
        }

        if (freeMintsWallet[msg.sender] + _mintAmount > 20) {
            require(_tokenSupply.current() + _mintAmount > freeMints, "Max free mints per wallet exceeded");
        }

        for (uint256 i = 1; i <= _mintAmount; i++) {
            freeMintsWallet[msg.sender] += 1;
            _tokenSupply.increment();
            uint256 tokenId = _tokenSupply.current();
            _safeMint(_to, tokenId);
        }
    }

    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        if (!revealed) {
            return SwampUri;
        }

        string memory currentBaseURI = _ogreURI();
        return
            bytes(currentBaseURI).length > 0
                ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), ogreExtension))
                : "";
    }

    function reveal() public onlyOwner {
        revealed = true;
    }

    function setCost(uint256 _newCost) public onlyOwner {
        cost = _newCost;
    }

    function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {
        maxMintAmount = _newmaxMintAmount;
    }

    function setSwampURI(string memory _SwampURI) public onlyOwner {
        SwampUri = _SwampURI;
    }

    function setOgreURI(string memory _newOgreURI) public onlyOwner {
        ogreURI = _newOgreURI;
    }

    function setOgreExtension(string memory _newOgreExtension) public onlyOwner {
        ogreExtension = _newOgreExtension;
    }

    function pause(bool _state) public onlyOwner {
        paused = _state;
    }

    function whitelistUser(address _user) public onlyOwner {
        whitelisted[_user] = true;
    }

    function removeWhitelistUser(address _user) public onlyOwner {
        whitelisted[_user] = false;
    }

    function withdraw() public payable onlyOwner {
        (bool success, ) = payable(owner()).call{value: address(this).balance}("");
        require(success, "Withdrawal failed");
    }
}
```

### Key Points:
1. **Total Supply**: `_tokenSupply` tracks the number of tokens minted.
2. **Minting Rules**:
   - Free mints are restricted to whitelisted users and within the free mint limit (`freeMints`).
   - Once free mints are used, minting costs are enforced.
   - No wallet can mint more than 20 tokens for free.
3. **Reveal Mechanism**: `reveal()` toggles the URI between `SwampUri` and `ogreURI`.
4. **Admin Features**:
   - Configure minting price, max supply, max minting per transaction, and base/placeholder URIs.
   - Whitelist management.
   - Pause/unpause minting.
   - Withdraw contract balance to the owner's wallet.

This implementation strictly adheres to the provided description and functionality guidelines.