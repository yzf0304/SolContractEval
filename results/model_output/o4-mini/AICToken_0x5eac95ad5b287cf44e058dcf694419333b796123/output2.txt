pragma solidity 0.4.25;

contract BasicToken is ERC20Basic {
    using SafeMath for uint256;

    mapping(address => uint256) balances;
    uint256 totalSupply_;

    /**
     * @dev All tokens are assigned to the creator upon deployment.
     * @param _initialSupply The total number of tokens to mint.
     */
    constructor(uint256 _initialSupply) public {
        totalSupply_ = _initialSupply;
        balances[msg.sender] = _initialSupply;
        emit Transfer(address(0), msg.sender, _initialSupply);
    }

    /**
     * @notice Returns the total token supply.
     * @return The total supply of tokens.
     */
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    /**
     * @notice Returns the address of the message sender.
     * @return The address of the message sender.
     */
    function msgSender() public view returns (address) {
        return msg.sender;
    }

    /**
     * @notice Transfers tokens from the sender to a recipient.
     * @param _to The address of the recipient.
     * @param _value The amount of tokens to transfer.
     * @return True if the operation was successful.
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        _preValidateTransfer(msg.sender, _to, _value);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);

        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Returns the token balance of a given address.
     * @param _owner The address to query.
     * @return The balance of the passed address.
     */
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    /**
     * @dev Internal hook to validate conditions before a transfer.
     * @param _from Address sending the tokens.
     * @param _to Address receiving the tokens.
     * @param _value Amount of tokens to transfer.
     */
    function _preValidateTransfer(
        address _from,
        address _to,
        uint256 _value
    )
        internal
    {
        require(_to != address(0), "BasicToken: transfer to the zero address");
        require(_to != _from,      "BasicToken: transfer to self");
        require(balances[_from] >= _value, "BasicToken: insufficient balance");
    }
}