pragma solidity 0.8.0;

contract Freezable is Ownable {
    mapping(address => bool) private _frozen;

    event Freeze(address indexed target);
    event Unfreeze(address indexed target);

    modifier whenNotFrozen(address target) {
        require(!_frozen[target], "Freezable : target is frozen");
        _;
    }

    /**
     * @notice Allows the owner to freeze a specific address.
     * @param target The address to be frozen.
     * @return success Returns true if the operation was successful.
     */
    function freeze(address target) external onlyOwner returns (bool success) {
        require(!_frozen[target], "Freezable : target already frozen");
        _frozen[target] = true;
        emit Freeze(target);
        success = true;
    }

    /**
     * @notice Allows the owner to unfreeze a specific address.
     * @param target The address to be unfrozen.
     * @return success Returns true if the operation was successful.
     */
    function unFreeze(address target) external onlyOwner returns (bool success) {
        require(_frozen[target], "Freezable : target is not frozen");
        _frozen[target] = false;
        emit Unfreeze(target);
        success = true;
    }

    /**
     * @notice Checks if a specific address is frozen.
     * @param target The address to check.
     * @return frozen Returns true if the address is frozen, otherwise false.
     */
    function isFrozen(address target) external view returns (bool frozen) {
        frozen = _frozen[target];
    }
}