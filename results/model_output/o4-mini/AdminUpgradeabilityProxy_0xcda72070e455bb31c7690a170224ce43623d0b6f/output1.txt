pragma solidity 0.6.8;

import "./Address.sol";
import "./Proxy.sol";

/**
 * @notice This contract serves as an upgradeable proxy, allowing the logic implementation of a contract to be updated.
 * @dev The contract uses the EIP-1967 standard for storing the implementation address. It provides functions to set and upgrade the implementation.
 */
contract UpgradeabilityProxy is Proxy {
    /**
     * @notice Emitted when the implementation is upgraded.
     * @param implementation The address of the new implementation.
     */
    event Upgraded(address indexed implementation);

    /**
     * @notice Internal constant for the storage slot used to store the implementation address.
     * @dev This slot is used in the EIP-1967 standard for storing the implementation address.
     */
    bytes32 internal constant IMPLEMENTATION_SLOT =
        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;

    /**
     * @notice Initializes the proxy with an initial implementation and optionally calls a function on the implementation.
     * @param _logic The address of the initial implementation.
     * @param _data Data to be passed to the initial implementation after it is set.
     */
    constructor(address _logic, bytes memory _data) public payable {
        // Verify the EIP-1967 implementation slot is correct
        assert(
            IMPLEMENTATION_SLOT ==
                bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1)
        );
        _setImplementation(_logic);
        if (_data.length > 0) {
            (bool success, ) = _logic.delegatecall(_data);
            require(success, "UpgradeabilityProxy: init call failed");
        }
    }

    /**
     * @notice Returns the current implementation address.
     * @dev Reads the implementation address from the EIP-1967 storage slot.
     */
    function _implementation()
        internal
        override
        view
        returns (address impl)
    {
        bytes32 slot = IMPLEMENTATION_SLOT;
        assembly {
            impl := sload(slot)
        }
    }

    /**
     * @notice Upgrades the implementation to a new address.
     * @dev Sets the new implementation and emits the Upgraded event.
     * @param newImplementation The address of the new implementation.
     */
    function _upgradeTo(address newImplementation) internal {
        _setImplementation(newImplementation);
        emit Upgraded(newImplementation);
    }

    /**
     * @notice Sets the implementation to a new address.
     * @dev Ensures the new implementation is a contract and updates the storage slot.
     * @param newImplementation The address of the new implementation.
     */
    function _setImplementation(address newImplementation) internal {
        require(
            Address.isContract(newImplementation),
            "UpgradeabilityProxy: new implementation is not a contract"
        );
        bytes32 slot = IMPLEMENTATION_SLOT;
        assembly {
            sstore(slot, newImplementation)
        }
    }

    /**
     * @notice Fallback receive function to accept Ether transfers.
     */
    receive() external payable {}
}