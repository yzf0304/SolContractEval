pragma solidity ^0.5.16;

contract AtomicSwap is ReentrancyGuard {
    using SafeMath for uint;
    using SafeERC20 for IERC20;

    enum State { Empty, Initiated, Redeemed, Refunded }

    struct Swap {
        bytes32 hashedSecret;
        bytes32 secret;
        address contractAddr;
        address participant;
        address payable initiator;
        uint refundTimestamp;
        uint countdown;
        uint value;
        uint payoff;
        bool active;
        State state;
    }
    
    event Initiated(
        bytes32 indexed _hashedSecret,
        address indexed _contract,
        address indexed _participant,
        address _initiator,
        uint _refundTimestamp,
        uint _countdown,
        uint _value,
        uint _payoff,
        bool _active
    );
    event Added(
        bytes32 indexed _hashedSecret,
        address _sender,
        uint _value  
    );
    event Activated(
        bytes32 indexed _hashedSecret
    );
    event Redeemed(
        bytes32 indexed _hashedSecret,
        bytes32 _secret
    );
    event Refunded(
        bytes32 indexed _hashedSecret
    );

    mapping(bytes32 => Swap) public swaps;

    modifier onlyByInitiator(bytes32 _hashedSecret) {
        require(msg.sender == swaps[_hashedSecret].initiator, "sender is not the initiator");
        _;
    }

    modifier isInitiatable(bytes32 _hashedSecret, address _participant, uint _refundTimestamp, uint _countdown) {
        require(_participant != address(0), "invalid participant address");
        require(swaps[_hashedSecret].state == State.Empty, "swap for this hash is initiated");
        require(block.timestamp <= _refundTimestamp, "invalid refundTimestamp");
        require(_countdown < _refundTimestamp, "invalid countdown");
        _;
    }
    
    modifier isInitiated(bytes32 _hashedSecret) {
        require(swaps[_hashedSecret].state == State.Initiated, "swap for this hash is empty or spent");
        _;
    }

    modifier isAddable(bytes32 _hashedSecret) {
        require(block.timestamp <= swaps[_hashedSecret].refundTimestamp, "refundTimestamp has come");
        _;
    }
        
    modifier isActivated(bytes32 _hashedSecret) {
        require(swaps[_hashedSecret].active, "swap is not active");
        _;
    }    
    
    modifier isNotActivated(bytes32 _hashedSecret) {
        require(!swaps[_hashedSecret].active, "swap is active");
        _;
    }

    modifier isRedeemable(bytes32 _hashedSecret, bytes32 _secret) {
        require(block.timestamp <= swaps[_hashedSecret].refundTimestamp, "refundTimestamp has come");
        require(
            sha256(abi.encodePacked(sha256(abi.encodePacked(_secret)))) == _hashedSecret,
            "secret is not correct"
        );
        _;
    }

    modifier isRefundable(bytes32 _hashedSecret) {
        require(block.timestamp > swaps[_hashedSecret].refundTimestamp, "refundTimestamp has not come");
        _;
    }

    function initiate(
        bytes32 _hashedSecret,
        address _contract,
        address _participant,
        uint _refundTimestamp,
        uint _countdown,
        uint _value,
        uint _payoff,
        bool _active
    )
        public
        nonReentrant
        isInitiatable(_hashedSecret, _participant, _refundTimestamp, _countdown)
    {
        // Store swap data
        swaps[_hashedSecret] = Swap({
            hashedSecret: _hashedSecret,
            secret: bytes32(0),
            contractAddr: _contract,
            participant: _participant,
            initiator: msg.sender,
            refundTimestamp: _refundTimestamp,
            countdown: _countdown,
            value: _value,
            payoff: _payoff,
            active: _active,
            state: State.Initiated
        });

        // Transfer tokens (value + payoff) from initiator to this contract
        uint total = _value.add(_payoff);
        if (total > 0) {
            IERC20(_contract).safeTransferFrom(msg.sender, address(this), total);
        }

        emit Initiated(
            _hashedSecret,
            _contract,
            _participant,
            msg.sender,
            _refundTimestamp,
            _countdown,
            _value,
            _payoff,
            _active
        );
    }

    function add(bytes32 _hashedSecret, uint _value)
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isAddable(_hashedSecret)
    {
        Swap storage s = swaps[_hashedSecret];

        // Increase the swap value
        s.value = s.value.add(_value);

        // Transfer additional tokens from sender to contract
        IERC20(s.contractAddr).safeTransferFrom(msg.sender, address(this), _value);

        emit Added(_hashedSecret, msg.sender, _value);
    }

    function activate(bytes32 _hashedSecret)
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isNotActivated(_hashedSecret)
        onlyByInitiator(_hashedSecret)
    {
        swaps[_hashedSecret].active = true;
        emit Activated(_hashedSecret);
    }

    function redeem(bytes32 _hashedSecret, bytes32 _secret)
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isActivated(_hashedSecret)
        isRedeemable(_hashedSecret, _secret)
    {
        Swap storage s = swaps[_hashedSecret];

        // Record the secret and mark redeemed
        s.secret = _secret;
        s.state = State.Redeemed;
        s.active = false;

        IERC20 token = IERC20(s.contractAddr);

        // Early reveal (before countdown): participant gets everything
        if (block.timestamp <= s.countdown) {
            token.safeTransfer(s.participant, s.value.add(s.payoff));
        } else {
            // Late reveal (after countdown, before refundTimestamp):
            // participant gets base value, caller (revealer) gets payoff
            token.safeTransfer(s.participant, s.value);
            token.safeTransfer(msg.sender, s.payoff);
        }

        emit Redeemed(_hashedSecret, _secret);
    }

    function refund(bytes32 _hashedSecret)
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isRefundable(_hashedSecret)
    {
        Swap storage s = swaps[_hashedSecret];

        s.state = State.Refunded;
        s.active = false;

        // Return all funds to initiator
        IERC20(s.contractAddr).safeTransfer(s.initiator, s.value.add(s.payoff));

        emit Refunded(_hashedSecret);
    }
}