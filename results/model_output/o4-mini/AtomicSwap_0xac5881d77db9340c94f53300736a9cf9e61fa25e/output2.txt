pragma solidity 0.5.16;

import "openzeppelin-contracts/contracts/math/SafeMath.sol";
import "openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol";
import "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
import "openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol";

/**
 * @title AtomicSwap
 * @author [Your Name]
 * @notice This contract facilitates atomic swaps between two parties using a hashed secret.
 * @dev Implements non-reentrancy guard and uses SafeMath and SafeERC20 for secure arithmetic and token operations.
 */
contract AtomicSwap is ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    enum State { Empty, Initiated, Redeemed, Refunded }

    struct Swap {
        bytes32 hashedSecret;
        bytes32 secret;
        address contractAddr;
        address participant;
        address payable initiator;
        uint256 refundTimestamp;
        uint256 countdown;
        uint256 value;
        uint256 payoff;
        bool active;
        State state;
    }

    event Initiated(
        bytes32 indexed _hashedSecret,
        address indexed _contract,
        address indexed _participant,
        address _initiator,
        uint256 _refundTimestamp,
        uint256 _countdown,
        uint256 _value,
        uint256 _payoff,
        bool _active
    );
    event Added(
        bytes32 indexed _hashedSecret,
        address _sender,
        uint256 _value
    );
    event Activated(
        bytes32 indexed _hashedSecret
    );
    event Redeemed(
        bytes32 indexed _hashedSecret,
        bytes32 _secret
    );
    event Refunded(
        bytes32 indexed _hashedSecret
    );

    mapping(bytes32 => Swap) public swaps;

    modifier onlyByInitiator(bytes32 _hashedSecret) {
        require(
            msg.sender == swaps[_hashedSecret].initiator,
            "sender is not the initiator"
        );
        _;
    }

    modifier isInitiatable(
        bytes32 _hashedSecret,
        address _participant,
        uint256 _refundTimestamp,
        uint256 _countdown
    ) {
        require(_participant != address(0), "invalid participant address");
        require(
            swaps[_hashedSecret].state == State.Empty,
            "swap for this hash is initiated"
        );
        require(block.timestamp <= _refundTimestamp, "invalid refundTimestamp");
        require(_countdown < _refundTimestamp, "invalid countdown");
        _;
    }

    modifier isInitiated(bytes32 _hashedSecret) {
        require(
            swaps[_hashedSecret].state == State.Initiated,
            "swap for this hash is empty or spent"
        );
        _;
    }

    modifier isAddable(bytes32 _hashedSecret) {
        require(
            block.timestamp <= swaps[_hashedSecret].refundTimestamp,
            "refundTimestamp has come"
        );
        _;
    }

    modifier isActivated(bytes32 _hashedSecret) {
        require(swaps[_hashedSecret].active, "swap is not active");
        _;
    }

    modifier isNotActivated(bytes32 _hashedSecret) {
        require(!swaps[_hashedSecret].active, "swap is active");
        _;
    }

    modifier isRedeemable(bytes32 _hashedSecret, bytes32 _secret) {
        require(
            block.timestamp <= swaps[_hashedSecret].refundTimestamp,
            "refundTimestamp has come"
        );
        // double-hash verification
        require(
            sha256(abi.encodePacked(sha256(abi.encodePacked(_secret)))) ==
                _hashedSecret,
            "secret is not correct"
        );
        _;
    }

    modifier isRefundable(bytes32 _hashedSecret) {
        require(
            block.timestamp > swaps[_hashedSecret].refundTimestamp,
            "refundTimestamp has not come"
        );
        _;
    }

    /**
     * @notice Initiates a new atomic swap.
     * @dev Transfers value + payoff from initiator into the contract.
     */
    function initiate(
        bytes32 _hashedSecret,
        address _contract,
        address _participant,
        uint256 _refundTimestamp,
        uint256 _countdown,
        uint256 _value,
        uint256 _payoff,
        bool _active
    )
        public
        nonReentrant
        isInitiatable(_hashedSecret, _participant, _refundTimestamp, _countdown)
    {
        // Pull in tokens: value + payoff
        uint256 total = _value.add(_payoff);
        IERC20(_contract).safeTransferFrom(msg.sender, address(this), total);

        // Record swap
        swaps[_hashedSecret] = Swap({
            hashedSecret: _hashedSecret,
            secret: 0x0,
            contractAddr: _contract,
            participant: _participant,
            initiator: msg.sender,
            refundTimestamp: _refundTimestamp,
            countdown: _countdown,
            value: _value,
            payoff: _payoff,
            active: _active,
            state: State.Initiated
        });

        emit Initiated(
            _hashedSecret,
            _contract,
            _participant,
            msg.sender,
            _refundTimestamp,
            _countdown,
            _value,
            _payoff,
            _active
        );
    }

    /**
     * @notice Adds more value to an existing swap.
     * @dev Only initiator may add. Transfers additional tokens into the contract.
     */
    function add(bytes32 _hashedSecret, uint256 _value)
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isAddable(_hashedSecret)
    {
        Swap storage s = swaps[_hashedSecret];
        require(
            msg.sender == s.initiator,
            "only initiator can add to swap"
        );
        // Pull only value (no payoff on add)
        IERC20(s.contractAddr).safeTransferFrom(
            msg.sender,
            address(this),
            _value
        );
        s.value = s.value.add(_value);

        emit Added(_hashedSecret, msg.sender, _value);
    }

    /**
     * @notice Activates an initiated swap.
     */
    function activate(bytes32 _hashedSecret)
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isNotActivated(_hashedSecret)
        onlyByInitiator(_hashedSecret)
    {
        swaps[_hashedSecret].active = true;
        emit Activated(_hashedSecret);
    }

    /**
     * @notice Redeems a swap by revealing the secret and transferring funds.
     */
    function redeem(bytes32 _hashedSecret, bytes32 _secret)
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isActivated(_hashedSecret)
        isRedeemable(_hashedSecret, _secret)
    {
        Swap storage s = swaps[_hashedSecret];
        IERC20 token = IERC20(s.contractAddr);

        // record secret and mark redeemed
        s.secret = _secret;
        s.state = State.Redeemed;

        // transfer according to timing
        if (block.timestamp > s.refundTimestamp) {
            // expired window (unreachable under isRedeemable)
            token.safeTransfer(s.participant, s.value);
            token.safeTransfer(msg.sender, s.payoff);
        } else {
            // in-time redemption: full amount+payoff to participant
            token.safeTransfer(
                s.participant,
                s.value.add(s.payoff)
            );
        }

        emit Redeemed(_hashedSecret, _secret);

        // clear storage
        delete swaps[_hashedSecret];
    }

    /**
     * @notice Refunds the swap if the refund timestamp has passed.
     */
    function refund(bytes32 _hashedSecret)
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isRefundable(_hashedSecret)
    {
        Swap storage s = swaps[_hashedSecret];
        require(
            msg.sender == s.initiator,
            "only initiator can refund"
        );

        IERC20(s.contractAddr).safeTransfer(
            s.initiator,
            s.value.add(s.payoff)
        );
        s.state = State.Refunded;

        emit Refunded(_hashedSecret);

        // clear storage
        delete swaps[_hashedSecret];
    }
}