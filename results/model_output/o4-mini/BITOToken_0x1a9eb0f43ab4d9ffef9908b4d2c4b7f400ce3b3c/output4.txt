pragma solidity 0.4.21;

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) { return 0; }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

// ERC20 Standard Interface
contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

// Interface for approveAndCall hook
interface tokenRecipient {
    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;
}

/**
 * @title BITOToken
 * @dev ERC20 token with freezing, emergency freeze, burn, and ownership features.
 */
contract BITOToken is ERC20Interface {
    using SafeMath for uint256;

    // Token metadata
    string public symbol = "BITO";
    string public name   = "BITO Coin";
    uint8  public decimals = 8;
    uint256 public totalSupply = 210000000 * (10 ** uint256(decimals));

    // Ownership and emergency freeze
    address public owner;
    bool    public emergencyFreeze;

    // Balances and allowances
    mapping(address => uint256)                     balances;
    mapping(address => mapping(address => uint256)) allowed;
    // Frozen account flags
    mapping(address => bool)                        frozen;

    // Events
    event OwnershipTransferred(address indexed _from, address indexed _to);
    event Burn(address indexed from, uint256 amount);
    event Freezed(address indexed targetAddress, bool frozen);
    event EmerygencyFreezed(bool emergencyFreezeStatus);

    // Modifiers
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    modifier unfreezed(address _account) {
        require(!frozen[_account]);
        _;
    }

    modifier noEmergencyFreeze() {
        require(!emergencyFreeze);
        _;
    }

    /**
     * @dev Constructor assigns total supply to contract deployer.
     */
    function BITOToken() public {
        owner = msg.sender;
        balances[owner] = totalSupply;
    }

    /**
     * @dev Transfer token to a specified address.
     */
    function transfer(address _to, uint256 _value)
        public
        unfreezed(_to)
        noEmergencyFreeze()
        returns (bool success)
    {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to]          = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @dev Approve the passed address to spend the specified amount.
     */
    function approve(address _spender, uint256 _value)
        public
        unfreezed(_spender)
        unfreezed(msg.sender)
        noEmergencyFreeze()
        returns (bool success)
    {
        require(_spender != address(0));

        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @dev Approve and then communicate the approval to the contract.
     */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        noEmergencyFreeze()
        returns (bool success)
    {
        require(approve(_spender, _value));
        tokenRecipient(_spender).receiveApproval(
            msg.sender,
            _value,
            this,
            _extraData
        );
        return true;
    }

    /**
     * @dev Transfer tokens from one address to another.
     */
    function transferFrom(address _from, address _to, uint256 _value)
        public
        unfreezed(_to)
        unfreezed(_from)
        noEmergencyFreeze()
        returns (bool success)
    {
        require(_from != address(0));
        require(_to   != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);

        balances[_from]               = balances[_from].sub(_value);
        balances[_to]                 = balances[_to].add(_value);
        allowed[_from][msg.sender]    = allowed[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @dev Burns a specific amount of tokens.
     */
    function burn(uint256 _value) public returns (bool success) {
        require(_value <= balances[msg.sender]);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        totalSupply          = totalSupply.sub(_value);
        emit Burn(msg.sender, _value);
        return true;
    }

    /**
     * @dev Transfers ownership to a new address.
     */
    function transferOwnership(address _newOwner) public onlyOwner {
        require(_newOwner != address(0));
        emit OwnershipTransferred(owner, _newOwner);
        owner = _newOwner;
    }

    /**
     * @dev Freezes or unfreezes an account.
     */
    function freezeAccount(address _target, bool _freeze)
        public
        onlyOwner
        returns (bool)
    {
        frozen[_target] = _freeze;
        emit Freezed(_target, _freeze);
        return true;
    }

    /**
     * @dev Activates or deactivates emergency freeze.
     */
    function emergencyFreezeAllAccounts(bool _freeze)
        public
        onlyOwner
        returns (bool)
    {
        emergencyFreeze = _freeze;
        emit EmerygencyFreezed(_freeze);
        return true;
    }

    /**
     * @dev Returns the amount which _spender is still allowed to withdraw from _owner.
     */
    function allowance(address _tokenOwner, address _spender)
        public
        constant
        returns (uint256 remaining)
    {
        return allowed[_tokenOwner][_spender];
    }

    /**
     * @dev Gets the balance of the specified address.
     */
    function balanceOf(address _tokenOwner)
        public
        constant
        returns (uint256 balance)
    {
        return balances[_tokenOwner];
    }

    /**
     * @dev Returns total token supply.
     */
    function totalSupply()
        public
        constant
        returns (uint256)
    {
        return totalSupply;
    }

    /**
     * @dev Returns freeze status of an account.
     */
    function isFreezed(address _targetAddress)
        public
        constant
        returns (bool)
    {
        return frozen[_targetAddress];
    }

    /**
     * @dev Fallback function to reject any incoming ETH.
     */
    function () public payable {
        revert();
    }

    /**
     * @dev Owner can transfer out any accidentally sent ERC20 tokens.
     */
    function transferAnyERC20Token(address _tokenAddress, uint256 _value)
        public
        onlyOwner
        returns (bool success)
    {
        return ERC20Interface(_tokenAddress).transfer(owner, _value);
    }
}