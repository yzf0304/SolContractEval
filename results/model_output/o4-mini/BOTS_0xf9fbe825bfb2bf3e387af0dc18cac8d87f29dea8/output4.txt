pragma solidity 0.7.3;

contract BOTS is ERC20("Bot Ocean", "BOTS") {
    /**
     * @notice Mints new tokens to a specified address.
     * @dev Only the contract owner can call this function.
     * @param _to The address to which the tokens will be minted.
     * @param _amount The amount of tokens to mint.
     */
    function mint(address _to, uint256 _amount) public onlyOwner {
        _mint(_to, _amount);
    }

    /**
     * @notice Burns a specified amount of tokens from a given address.
     * @dev Only the contract owner can call this function.
     * @param _from The address from which the tokens will be burned.
     * @param _amount The amount of tokens to burn.
     */
    function burn(address _from, uint256 _amount) public onlyOwner {
        _burn(_from, _amount);
    }

    /**
     * @notice Sets a new name for the token.
     * @dev Only the contract owner can call this function.
     * @param _newName The new name for the token.
     */
    function setName(string memory _newName) public onlyOwner {
        _name = _newName;
    }

    /**
     * @notice Sets a new symbol for the token.
     * @dev Only the contract owner can call this function.
     * @param _newSymbol The new symbol for the token.
     */
    function setSymbol(string memory _newSymbol) public onlyOwner {
        _symbol = _newSymbol;
    }

    /**
     * @notice Sets a new website for the token.
     * @dev Only the contract owner can call this function.
     * @param _newWebsite The new website for the token.
     */
    function setWebsite(string memory _newWebsite) public onlyOwner {
        _website = _newWebsite;
    }

    /**
     * @notice A fallback function for receiving tokens.
     * @dev Always reverts to reject incoming calls.
     */
    function tokenFallback(
        address /* _from */,
        uint256 /* _value */,
        bytes memory /* _data */
    ) public {
        revert("BOTS: tokenFallback not supported");
    }

    /**
     * @notice Allows the owner to withdraw a specified amount of another ERC20 token.
     * @dev Only the contract owner can call this function.
     * @param _token The ERC20 token to withdraw.
     * @param _amount The amount of the token to withdraw.
     */
    function takeOut(IERC20 _token, uint256 _amount) external onlyOwner {
        require(_token.transfer(owner, _amount), "BOTS: takeOut transfer failed");
    }
}