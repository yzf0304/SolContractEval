pragma solidity ^0.4.18;

contract BeatTokenCrowdsale is Ownable {
    using SafeMath for uint256;

    enum Stages {
        Deployed,
        PreIco,
        IcoPhase1,
        IcoPhase2,
        IcoPhase3,
        IcoEnded,
        Finalized
    }

    Stages public stage;

    BeatToken public token;

    uint256 public contractStartTime;
    uint256 public preIcoEndTime;
    uint256 public icoPhase1EndTime;
    uint256 public icoPhase2EndTime;
    uint256 public icoPhase3EndTime;
    uint256 public contractEndTime;

    address public ethTeamWallet;
    address public beatTeamWallet;

    uint256 public ethWeiRaised;
    mapping(address => uint256) public balanceOf;

    uint public constant PRE_ICO_PERIOD = 28 days;
    uint public constant ICO_PHASE1_PERIOD = 28 days;
    uint public constant ICO_PHASE2_PERIOD = 28 days;
    uint public constant ICO_PHASE3_PERIOD = 28 days;

    uint256 public constant PRE_ICO_BONUS_PERCENTAGE = 100;
    uint256 public constant ICO_PHASE1_BONUS_PERCENTAGE = 75;
    uint256 public constant ICO_PHASE2_BONUS_PERCENTAGE = 50;
    uint256 public constant ICO_PHASE3_BONUS_PERCENTAGE = 25;

    uint256 public constant PRE_ICO_AMOUNT = 5000 * (10**6) * (10**18);
    uint256 public constant ICO_PHASE1_AMOUNT = 7000 * (10**6) * (10**18);
    uint256 public constant ICO_PHASE2_AMOUNT = 10500 * (10**6) * (10**18);
    uint256 public constant ICO_PHASE3_AMOUNT = 11875 * (10**6) * (10**18);

    uint256 public constant PRE_ICO_LIMIT = PRE_ICO_AMOUNT;
    uint256 public constant ICO_PHASE1_LIMIT = PRE_ICO_LIMIT + ICO_PHASE1_AMOUNT;
    uint256 public constant ICO_PHASE2_LIMIT = ICO_PHASE1_LIMIT + ICO_PHASE2_AMOUNT;
    uint256 public constant ICO_PHASE3_LIMIT = ICO_PHASE2_LIMIT + ICO_PHASE3_AMOUNT;

    uint256 public constant HARD_CAP = 230 * (10**9) * (10**18);

    uint256 public ethPriceInEuroCent;

    event BeatTokenPurchased(
        address indexed purchaser,
        address indexed beneficiary,
        uint256 ethWeiAmount,
        uint256 beatWeiAmount
    );
    event BeatTokenEthPriceChanged(uint256 newPrice);
    event BeatTokenPreIcoStarted();
    event BeatTokenIcoPhase1Started();
    event BeatTokenIcoPhase2Started();
    event BeatTokenIcoPhase3Started();
    event BeatTokenIcoFinalized();

    function BeatTokenCrowdsale(
        address _ethTeamWallet,
        address _beatTeamWallet
    )
        public
    {
        require(_ethTeamWallet != address(0));
        require(_beatTeamWallet != address(0));

        token = new BeatToken(HARD_CAP);
        stage = Stages.Deployed;
        ethTeamWallet = _ethTeamWallet;
        beatTeamWallet = _beatTeamWallet;
        ethPriceInEuroCent = 0;

        contractStartTime = 0;
        preIcoEndTime = 0;
        icoPhase1EndTime = 0;
        icoPhase2EndTime = 0;
        icoPhase3EndTime = 0;
        contractEndTime = 0;
    }

    function setEtherPriceInEuroCent(uint256 _ethPriceInEuroCent)
        onlyOwner
        public
    {
        require(_ethPriceInEuroCent > 0);
        ethPriceInEuroCent = _ethPriceInEuroCent;
        BeatTokenEthPriceChanged(_ethPriceInEuroCent);
    }

    function start()
        onlyOwner
        public
    {
        require(stage == Stages.Deployed);
        require(ethPriceInEuroCent > 0);

        stage = Stages.PreIco;
        contractStartTime = now;
        preIcoEndTime = now.add(PRE_ICO_PERIOD);

        BeatTokenPreIcoStarted();
    }

    function finalize()
        onlyOwner
        public
    {
        require(stage != Stages.Finalized);

        // Mint unsold tokens to the BEAT team
        uint256 remaining = HARD_CAP.sub(token.totalSupply());
        if (remaining > 0) {
            token.mint(beatTeamWallet, remaining);
        }
        token.finishMinting();
        token.transferOwnership(beatTeamWallet);

        // Forward any ETH balance to the ETH team wallet
        if (this.balance > 0) {
            ethTeamWallet.transfer(this.balance);
        }

        stage = Stages.Finalized;
        contractEndTime = now;
        BeatTokenIcoFinalized();
    }

    function () payable public {
        buyTokens(msg.sender);
    }

    function buyTokens(address beneficiary)
        payable
        public
    {
        require(beneficiary != address(0));
        require(msg.value > 0);
        require(isWithinValidIcoPhase());
        require(ethPriceInEuroCent > 0);

        uint256 tokens = calculateBeatWeiAmount(msg.value);

        determineCurrentStage(tokens);
        require(isWithinTokenAllocLimit(tokens));

        token.mint(beneficiary, tokens);

        ethWeiRaised = ethWeiRaised.add(msg.value);
        balanceOf[beneficiary] = balanceOf[beneficiary].add(tokens);

        BeatTokenPurchased(msg.sender, beneficiary, msg.value, tokens);

        // Forward ETH immediately
        ethTeamWallet.transfer(msg.value);
    }

    function isWithinValidIcoPhase()
        internal
        view
        returns (bool)
    {
        return (
            stage == Stages.PreIco ||
            stage == Stages.IcoPhase1 ||
            stage == Stages.IcoPhase2 ||
            stage == Stages.IcoPhase3
        );
    }

    function calculateBeatWeiAmount(uint256 ethWeiAmount)
        internal
        view
        returns (uint256)
    {
        uint256 baseAmount = ethWeiAmount.mul(ethPriceInEuroCent);
        uint256 bonusPercent = 0;

        if (stage == Stages.PreIco) {
            bonusPercent = PRE_ICO_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase1) {
            bonusPercent = ICO_PHASE1_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase2) {
            bonusPercent = ICO_PHASE2_BONUS_PERCENTAGE;
        } else if (stage == Stages.IcoPhase3) {
            bonusPercent = ICO_PHASE3_BONUS_PERCENTAGE;
        }

        uint256 bonusAmount = baseAmount.mul(bonusPercent).div(100);
        return baseAmount.add(bonusAmount);
    }

    function isWithinTokenAllocLimit(uint256 beatWeiAmount)
        internal
        view
        returns (bool)
    {
        uint256 newSupply = token.totalSupply().add(beatWeiAmount);
        uint256 limit;

        if (stage == Stages.PreIco) {
            limit = PRE_ICO_LIMIT;
        } else if (stage == Stages.IcoPhase1) {
            limit = ICO_PHASE1_LIMIT;
        } else if (stage == Stages.IcoPhase2) {
            limit = ICO_PHASE2_LIMIT;
        } else if (stage == Stages.IcoPhase3) {
            limit = ICO_PHASE3_LIMIT;
        } else {
            return false;
        }

        return newSupply <= limit;
    }

    function determineCurrentStage(uint256 beatWeiAmount)
        internal
    {
        // PRE-ICO -> ICO Phase 1
        if (stage == Stages.PreIco) {
            if (
                token.totalSupply().add(beatWeiAmount) > PRE_ICO_LIMIT ||
                now > preIcoEndTime
            ) {
                stage = Stages.IcoPhase1;
                icoPhase1EndTime = now.add(ICO_PHASE1_PERIOD);
                BeatTokenIcoPhase1Started();
            }
        }
        // ICO Phase 1 -> ICO Phase 2
        else if (stage == Stages.IcoPhase1) {
            if (
                token.totalSupply().add(beatWeiAmount) > ICO_PHASE1_LIMIT ||
                now > icoPhase1EndTime
            ) {
                stage = Stages.IcoPhase2;
                icoPhase2EndTime = now.add(ICO_PHASE2_PERIOD);
                BeatTokenIcoPhase2Started();
            }
        }
        // ICO Phase 2 -> ICO Phase 3
        else if (stage == Stages.IcoPhase2) {
            if (
                token.totalSupply().add(beatWeiAmount) > ICO_PHASE2_LIMIT ||
                now > icoPhase2EndTime
            ) {
                stage = Stages.IcoPhase3;
                icoPhase3EndTime = now.add(ICO_PHASE3_PERIOD);
                BeatTokenIcoPhase3Started();
            }
        }
        // ICO Phase 3 -> ICO Ended
        else if (stage == Stages.IcoPhase3) {
            if (
                token.totalSupply().add(beatWeiAmount) > ICO_PHASE3_LIMIT ||
                now > icoPhase3EndTime
            ) {
                stage = Stages.IcoEnded;
                contractEndTime = now;
            }
        }
    }
}