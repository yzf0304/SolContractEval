Here is the completed BotMinting contract. It strictly follows your context (0.4.20), uses the internal _createBot from BotBase, enforces both creation limits, defaults promo‚Äêowner to the COO, and launches Gen0 bots into the sale auction with a dynamically computed starting price:

```solidity
pragma solidity ^0.4.20;

contract BotMinting is BotAuction {
    uint256 public constant PROMO_CREATION_LIMIT    = 5000;
    uint256 public constant GEN0_CREATION_LIMIT    = 45000;
    uint256 public constant GEN0_STARTING_PRICE    = 10 finney;
    uint256 public constant GEN0_AUCTION_DURATION  = 1 days;

    uint256 public promoCreatedCount;
    uint256 public gen0CreatedCount;

    /**
     * @notice Creates a promo bot with the specified genes and assigns it to an owner.
     * @dev Only the COO can call this function. The bot owner defaults to the COO if not specified.
     * @param _genes The genetic makeup of the bot.
     * @param _owner The address of the owner of the new bot.
     */
    function createPromoBot(uint256 _genes, address _owner) external onlyCOO {
        require(promoCreatedCount < PROMO_CREATION_LIMIT);

        // default to COO if no owner passed in
        address botOwner = _owner;
        if (botOwner == address(0)) {
            botOwner = cooAddress;
        }

        promoCreatedCount++;
        // matron=0, sire=0, generation=0
        _createBot(0, 0, 0, _genes, botOwner);
    }

    /**
     * @notice Creates a Gen0 bot with the specified genes and starts an auction for it.
     * @dev Only the COO can call this function. The bot is owned by this contract and then auctioned.
     * @param _genes The genetic makeup of the bot.
     */
    function createGen0Auction(uint256 _genes) external onlyCOO {
        require(gen0CreatedCount < GEN0_CREATION_LIMIT);

        // create Gen0 bot owned by this contract
        uint256 botId = _createBot(0, 0, 0, _genes, address(this));

        // approve the sale auction
        _approve(botId, saleAuction);

        // launch Dutch auction: startingPrice = dynamic, endingPrice = 0
        uint256 startingPrice = _computeNextGen0Price();
        saleAuction.createAuction(
            botId,
            startingPrice,
            0,
            GEN0_AUCTION_DURATION,
            address(this)
        );

        gen0CreatedCount++;
    }

    /**
     * @notice Computes the next price for a Gen0 bot based on the average sale price.
     * @dev price = avg + (avg / 2); floored to GEN0_STARTING_PRICE if below.
     * @return The next Gen0 starting price.
     */
    function _computeNextGen0Price() internal view returns (uint256) {
        uint256 avg = saleAuction.averageGen0SalePrice();
        uint256 next = avg + (avg / 2);

        if (next < GEN0_STARTING_PRICE) {
            next = GEN0_STARTING_PRICE;
        }
        return next;
    }
}
```