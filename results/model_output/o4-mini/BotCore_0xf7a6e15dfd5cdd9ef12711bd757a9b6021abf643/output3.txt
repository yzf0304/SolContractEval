pragma solidity ^0.4.20;

contract BotMinting is BotAuction {

    uint256 public constant PROMO_CREATION_LIMIT = 5000;
    uint256 public constant GEN0_CREATION_LIMIT = 45000;
    uint256 public constant GEN0_STARTING_PRICE = 10 finney;
    uint256 public constant GEN0_AUCTION_DURATION = 1 days;

    uint256 public promoCreatedCount;
    uint256 public gen0CreatedCount;

    /**
     * @notice Creates a promo bot with the specified genes and assigns it to an owner.
     * @dev Only the COO can call this function. The bot owner defaults to the COO if not specified.
     * @param _genes The genetic makeup of the bot.
     * @param _owner The address of the owner of the new bot.
     */
    function createPromoBot(uint256 _genes, address _owner) external onlyCOO {
        require(promoCreatedCount < PROMO_CREATION_LIMIT);
        promoCreatedCount++;

        address botOwner = _owner;
        if (botOwner == address(0)) {
            botOwner = msg.sender;
        }

        _createBot(
            0,      // matronId
            0,      // sireId
            0,      // generation
            _genes, // genes
            botOwner
        );
    }

    /**
     * @notice Creates a Gen0 bot with the specified genes and starts an auction for it.
     * @dev Only the COO can call this function. The bot is initially owned by the contract and then put up for auction.
     * @param _genes The genetic makeup of the bot.
     */
    function createGen0Auction(uint256 _genes) external onlyCOO {
        require(gen0CreatedCount < GEN0_CREATION_LIMIT);
        gen0CreatedCount++;

        // Mint a Gen0 bot owned by this contract
        uint256 botId = _createBot(
            0,      // matronId
            0,      // sireId
            0,      // generation
            _genes, // genes
            address(this)
        );

        // Compute a dynamic starting price and create the auction
        uint256 startingPrice = _computeNextGen0Price();
        saleAuction.createAuction(
            botId,
            startingPrice,
            0,                        // ending price
            GEN0_AUCTION_DURATION,
            address(this)
        );
    }

    /**
     * @notice Computes the next price for a Gen0 bot based on the average sale price.
     * @dev The price is calculated as the average sale price plus half of the average sale price.
     *      If the computed price is below the starting price, it defaults to the starting price.
     * @return The next price for a Gen0 bot.
     */
    function _computeNextGen0Price() internal view returns (uint256) {
        uint256 avgPrice = saleAuction.averageGen0SalePrice();
        uint256 nextPrice = avgPrice + (avgPrice / 2);

        if (nextPrice < GEN0_STARTING_PRICE) {
            nextPrice = GEN0_STARTING_PRICE;
        }

        return nextPrice;
    }
}