pragma solidity 0.5.17;

contract Collection is Ownable {
    // Address of the contract creator
    address private createAddress;

    // Hardcoded TRB token contract address
    address private constant trbAddress = 0x0Ba45A8b5d5575935B8158a88C631E9F9C95a2e5;
    TrbInterface private trbContract = TrbInterface(trbAddress);

    constructor() public {
        createAddress = msg.sender;
    }

    // Fallback: only owner & original creator can send Ether here
    function() external payable onlyOwner {
        require(msg.sender == createAddress, "author no");
    }

    /**
     * @notice Finalizes (self-destructs) the contract and sends remaining ETH to creator.
     * @dev Only the owner and original creator can call.
     */
    function finalize() external onlyOwner {
        require(msg.sender == createAddress, "author no");
        address payable recipient = address(uint160(createAddress));
        selfdestruct(recipient);
    }

    /// @return The address that deployed this contract.
    function getCreate() public view returns (address) {
        return createAddress;
    }

    /**
     * @notice Withdraw a specified amount of ETH to the caller.
     * @param _amount Amount of wei to withdraw.
     */
    function withdrawEth(uint256 _amount) public onlyOwner {
        require(msg.sender == createAddress, "author no");
        require(address(this).balance >= _amount, "insufficient balance");
        msg.sender.transfer(_amount);
    }

    /**
     * @notice Withdraw a specified amount of TRB tokens to the caller.
     * @param _amount Amount of TRB to withdraw.
     */
    function withdrawTrb(uint256 _amount) public onlyOwner {
        require(msg.sender == createAddress, "author no");
        require(trbContract.transfer(msg.sender, _amount), "transfer failed");
    }

    /// @notice Deposit stake into the TRB token contract.
    function depositStake() external onlyOwner {
        require(msg.sender == createAddress, "author no");
        trbContract.depositStake();
    }

    /// @notice Request staking withdrawal from the TRB token contract.
    function requestStakingWithdraw() external onlyOwner {
        require(msg.sender == createAddress, "author no");
        trbContract.requestStakingWithdraw();
    }

    /// @notice Withdraw staked TRB from the TRB token contract.
    function withdrawStake() external onlyOwner {
        require(msg.sender == createAddress, "author no");
        trbContract.withdrawStake();
    }

    /**
     * @notice Add a tip to a given request in the TRB token contract.
     * @param _requestId The ID of the request to tip.
     * @param _tip The amount of TRB to tip.
     */
    function addTip(uint256 _requestId, uint256 _tip) external onlyOwner {
        require(msg.sender == createAddress, "author no");
        trbContract.addTip(_requestId, _tip);
    }

    /**
     * @notice Retrieve a uint256 variable from the TRB token contract.
     * @param _data The data key to query.
     * @return The uint256 value stored under that key.
     */
    function getUintVar(bytes32 _data) public onlyOwner view returns (uint256) {
        require(msg.sender == createAddress, "author no");
        return trbContract.getUintVar(_data);
    }

    /**
     * @notice Submit a mining solution to the TRB token contract.
     * @param _nonce The nonce for the solution.
     * @param _requestId Array of 5 request IDs.
     * @param _value Array of 5 corresponding values.
     */
    function submitMiningSolution(
        string calldata _nonce,
        uint256[5] calldata _requestId,
        uint256[5] calldata _value
    )
        external
        onlyOwner
    {
        require(msg.sender == createAddress, "author no");

        if (gasleft() <= 10**6) {
            // progress slot key
            bytes32 slotProgress = 0x6c505cb2db6644f57b42d87bd9407b0f66788b07d0617a2bc1356a0e69e66f9a;
            uint256 tmpSlot = trbContract.getUintVar(slotProgress);
            require(tmpSlot < 4, "Z");
        }

        trbContract.submitMiningSolution(_nonce, _requestId, _value);
    }
}