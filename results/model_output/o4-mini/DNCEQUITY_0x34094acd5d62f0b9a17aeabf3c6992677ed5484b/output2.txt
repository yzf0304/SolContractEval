```solidity
pragma solidity ^0.4.21;

/* SafeMath for checking error */
library SafeMath {
  function mul(uint a, uint b) internal returns (uint) {
    uint c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }
  function div(uint a, uint b) internal returns (uint) {
    assert(b > 0);
    uint c = a / b;
    assert(a == b * c + a % b);
    return c;
  }
  function sub(uint a, uint b) internal returns (uint) {
    assert(b <= a);
    return a - b;
  }
  function add(uint a, uint b) internal returns (uint) {
    uint c = a + b;
    assert(c >= a);
    return c;
  }

  function max64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a >= b ? a : b;
  }
  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a < b ? a : b;
  }
  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a >= b ? a : b;
  }
  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a < b ? a : b;
  }
  function assert(bool assertion) internal {
    if (!assertion) {
      throw;
    }
  }
}

contract DNCAsset {
    uint256 public totalSupply = 0;
    event Transfer(address indexed from, address indexed to, uint value);
}

contract DNCReceivingContract {
    function tokenFallback(address _from, uint _value, bytes _data);
}

contract ERC223BasicToken is DNCAsset {
    using SafeMath for uint256;

    mapping(address => uint256) balances;

    function transfer(address _to, uint _value) returns (bool success) {
        uint codeLength;
        bytes memory empty;
        assembly {
            codeLength := extcodesize(_to)
        }
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to]        = balances[_to].add(_value);
        if (codeLength > 0) {
            DNCReceivingContract receiver = DNCReceivingContract(_to);
            receiver.tokenFallback(msg.sender, _value, empty);
        }
        Transfer(msg.sender, _to, _value);
        return true;
    }

    function balanceOf(address _owner) constant returns (uint balance) {
        return balances[_owner];
    }
}

/**
 * @title DNCEQUITY
 * @notice This contract implements a basic token following the ERC223 standard with additional
 *         functionalities like minting, burning, and admin-controlled transfers.
 * @dev The contract includes an admin role for managing mintable users, transferring tokens,
 *      and minting/burning tokens. The decimals are fixed at 18.
 */
contract DNCEQUITY is ERC223BasicToken {
    address admin;
    string  public name     = "DinarCoin";
    string  public symbol   = "DNC";
    uint    public decimals = 18;
    mapping(address => bool) public mintable;

    event Minted(address indexed recipient, uint256 value);
    event Burned(address indexed user,      uint256 value);

    /**
     * @notice Initializes the contract and sets the admin to the contract deployer.
     * @dev The admin is set to the address that deploys the contract.
     */
    function DNCEQUITY() {
        admin = msg.sender;
    }

    /**
     * @notice Modifier to restrict access to only the admin.
     * @dev Ensures that the function can only be called by the admin.
     */
    modifier onlyadmin {
        if (msg.sender == admin) _;
    }

    /**
     * @notice Allows the current admin to change the admin to a new address.
     * @dev Only the current admin can call this function.
     * @param _newAdminAddr The address of the new admin.
     */
    function changeAdmin(address _newAdminAddr) onlyadmin {
        require(_newAdminAddr != address(0));
        admin = _newAdminAddr;
    }

    /**
     * @notice Allows the admin to create a new mintable user.
     * @dev Only the admin can call this function. The user must not have any existing balance.
     * @param newAddr The address of the new mintable user.
     */
    function createNewMintableUser(address newAddr) onlyadmin {
        require(newAddr != address(0));
        require(!mintable[newAddr]);
        require(balances[newAddr] == 0);
        mintable[newAddr] = true;
    }

    /**
     * @notice Allows the admin to remove the mintable status from a user.
     * @dev Only the admin can call this function.
     * @param addr The address of the user to remove mintable status from.
     */
    function deleteMintable(address addr) onlyadmin {
        require(mintable[addr]);
        mintable[addr] = false;
    }

    /**
     * @notice Allows the admin to transfer tokens from one address to another.
     * @dev Only the admin can call this function. The `from` address must be mintable.
     * @param from  The address to transfer tokens from.
     * @param to    The address to transfer tokens to.
     * @param value The amount of tokens to transfer.
     */
    function adminTransfer(address from, address to, uint256 value) onlyadmin {
        require(mintable[from]);
        require(to != address(0));
        balances[from] = balances[from].sub(value);
        balances[to]   = balances[to].add(value);
        Transfer(from, to, value);
    }

    /**
     * @notice Allows the admin to mint new tokens to a specified user.
     * @dev Only the admin can call this function. The user must be mintable.
     * @param user     The address of the user to receive the new tokens.
     * @param quantity The amount of tokens to mint.
     */
    function mintNewDNC(address user, uint256 quantity) onlyadmin {
        require(mintable[user]);
        require(user != address(0));
        require(quantity > 0);

        totalSupply       = totalSupply.add(quantity);
        balances[user]    = balances[user].add(quantity);
        Minted(user, quantity);
        Transfer(address(0), user, quantity);
    }

    /**
     * @notice Allows the admin to burn tokens from a specified user.
     * @dev Only the admin can call this function. The user must be mintable.
     * @param user     The address of the user to burn tokens from.
     * @param quantity The amount of tokens to burn.
     */
    function burnDNC(address user, uint256 quantity) onlyadmin {
        require(mintable[user]);
        require(user != address(0));
        require(quantity > 0);

        balances[user] = balances[user].sub(quantity);
        totalSupply    = totalSupply.sub(quantity);
        Burned(user, quantity);
        Transfer(user, address(0), quantity);
    }
}
```