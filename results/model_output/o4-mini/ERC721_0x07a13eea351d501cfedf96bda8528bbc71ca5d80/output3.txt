pragma solidity ^0.8.0;

// SPDX-License-Identifier: MIT

contract ERC721 is ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;
    
    uint256 private _totalMintsAllowed = 4;
    string  private uriLink              = "https://spicypumpkins.com/api/json";
    bool    private _minting             = true;
    address payable private _owner;
    uint256 private _count;
    string  private _name;
    string  private _symbol;

    mapping(uint256 => address)            private _owners;
    mapping(address => uint256)            private _balances;
    mapping(uint256 => address)            private _tokenApprovals;
    mapping(address => mapping(address => bool)) private _operatorApprovals;
    mapping(address => uint256)            private _minted;

    constructor(string memory name_, string memory symbol_) {
        _name    = name_;
        _symbol  = symbol_;
        // mint tokenId 0 to deployer
        _owners[0]   = msg.sender;
        _balances[msg.sender] = 1;
        _owned    = payable(msg.sender);
        _minted[msg.sender] = 1;
        _count     = 1;
    }

    function setMinting(bool boolean) external {
        require(msg.sender == _owner, "ERC721: caller is not contract owner");
        _minting = boolean;
    }

    function transferOwnership(address to) external {
        require(msg.sender == _owner, "ERC721: caller is not contract owner");
        require(to != address(0), "ERC721: new owner is the zero address");
        _owner = payable(to);
    }

    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner_ = _owners[tokenId];
        require(owner_ != address(0), "ERC721: owner query for nonexistent token");
        return owner_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return 4444;
    }

    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721: URI query for nonexistent token");
        return string(abi.encodePacked(uriLink, "/", tokenId.toString()));
    }

    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    function approve(address to, uint256 tokenId) external virtual override {
        address owner_ = ownerOf(tokenId);
        require(to != owner_, "ERC721: approval to current owner");
        require(
            msg.sender == owner_ || isApprovedForAll(owner_, msg.sender),
            "ERC721: approve caller is not owner nor approved for all"
        );
        _approve(to, tokenId);
    }

    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");
        return _tokenApprovals[tokenId];
    }

    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != msg.sender, "ERC721: approve to caller");
        _operatorApprovals[msg.sender][operator] = approved;
        emit ApprovalForAll(msg.sender, operator, approved);
    }

    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    function transferFrom(address from, address to, uint256 tokenId) external virtual override {
        require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721: transfer caller is not owner nor approved");
        _transfer(from, to, tokenId);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId) external virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(
            _checkOnERC721Received(from, to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    function _exists(uint256 tokenId) internal view returns (bool) {
        return _owners[tokenId] != address(0);
    }

    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner_ = ownerOf(tokenId);
        return (spender == owner_ ||
                getApproved(tokenId) == spender ||
                isApprovedForAll(owner_, spender));
    }

    function mint(address to) external payable returns (uint256) {
        require(_minting, "ERC721: minting is disabled");
        require(to != address(0), "ERC721: mint to the zero address");
        require(_minted[to] + 1 <= _totalMintsAllowed, "ERC721: mint limit exceeded");
        require(msg.value > 0, "ERC721: insufficient ETH for minting");
        _owner.transfer(msg.value);

        uint256 newId = internalMint(to);
        _minted[to] += 1;
        return newId;
    }

    function internalMint(address to) internal returns (uint256) {
        uint256 id = _count;
        _owners[id]     = to;
        _balances[to]  += 1;
        emit Transfer(address(0), to, id);
        _count         += 1;
        return id;
    }

    function concat(string memory _base, string memory _value) pure internal returns (string memory) {
        return string(abi.encodePacked(_base, _value));
    }

    function multiMint(address to, uint256 amount) external payable returns (uint256[] memory) {
        require(_minting, "ERC721: minting is disabled");
        require(to != address(0), "ERC721: mint to the zero address");
        require(_minted[to] + amount <= _totalMintsAllowed, "ERC721: mint limit exceeded");
        require(msg.value > 0, "ERC721: insufficient ETH for minting");
        _owner.transfer(msg.value);

        uint256[] memory ids = new uint256[](amount);
        for (uint256 i = 0; i < amount; i++) {
            uint256 id = internalMint(to);
            ids[i] = id;
            _minted[to] += 1;
        }
        return ids;
    }

    function changeMax(uint256 newMax) external {
        require(msg.sender == _owner, "ERC721: caller is not contract owner");
        _totalMintsAllowed = newMax;
    }

    function _transfer(address from, address to, uint256 tokenId) internal virtual {
        require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to]   += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ownerOf(tokenId), to, tokenId);
    }

    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch {
                return false;
            }
        } else {
            return true;
        }
    }

    receive() external payable {}
}