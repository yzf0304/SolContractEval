```solidity
pragma solidity 0.4.24;

contract ESSENTIA_ERC20 is Ownable {
    using SafeMath for uint256;

    // Mapping of addresses to their respective token balances
    mapping (address => uint256) public balances;

    // Mapping of allowances for spending tokens
    mapping (address => mapping (address => uint256)) internal allowed;

    // Public variables for the ESSENTIA ERC20 ESS token contract
    string public constant standard = "ESSENTIA erc20 and Genesis";
    uint256 public constant decimals = 18;   // hardcoded to be a constant
    string public name = "ESSENTIA";
    string public symbol = "ESS";
    uint256 public totalSupply;

    // Event to notify when tokens are transferred
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Event to notify when an allowance is set
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @notice Returns the balance of the specified address.
     */
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    /**
     * @notice Transfers `_value` amount of tokens from the caller's account to `_to`.
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(balances[msg.sender] >= _value);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to]        = balances[_to].add(_value);

        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Transfers `_value` amount of tokens from `_from` to `_to` using the allowance mechanism.
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(balances[_from] >= _value);
        require(allowed[_from][msg.sender] >= _value);

        balances[_from]                = balances[_from].sub(_value);
        balances[_to]                  = balances[_to].add(_value);
        allowed[_from][msg.sender]     = allowed[_from][msg.sender].sub(_value);

        emit Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Approves `_spender` to spend `_value` amount of tokens on behalf of the caller.
     */
    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Returns the remaining number of tokens that `_spender` is allowed to spend on behalf of `_owner`.
     */
    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }

    /**
     * @notice Increases the allowance granted to `_spender` by `_addedValue`.
     */
    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    /**
     * @notice Decreases the allowance granted to `_spender` by `_subtractedValue`.
     */
    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue >= oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    /**
     * @notice Approves `_spender` to spend `_value` amount of tokens and then calls a function on `_spender`.
     */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success)
    {
        require(approve(_spender, _value));
        tokenRecipient(_spender).receiveApproval(
            msg.sender,
            _value,
            this,
            _extraData
        );
        return true;
    }
}
```