```solidity
// SPDX-License-Identifier: MIT
pragma solidity 0.6.10;

/**
 *Submitted for verification at Etherscan.io on 2021-06-06
 *Submitted for verification at Etherscan.io on 2020-07-21
*/

// ----------------------------------------------------------------------------
// ERC20 Token Interface
// ----------------------------------------------------------------------------
abstract contract ERC20Interface {
    function totalSupply() external view virtual returns (uint256);
    function balanceOf(address tokenOwner) external view virtual returns (uint256);
    function allowance(address tokenOwner, address spender) external view virtual returns (uint256);
    function transfer(address to, uint256 tokens) external virtual returns (bool);
    function approve(address spender, uint256 tokens) external virtual returns (bool);
    function transferFrom(address from, address to, uint256 tokens) external virtual returns (bool);
    function burn(uint256 tokens) external virtual returns (bool success);
    function buy(address to, uint256 tokens) external virtual returns (bool);
    function operationProfit(uint256 _profit) external virtual returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);
    event Burn(address from, address, uint256 value);
    event Profit(address from, uint256 profit, uint256 totalProfit);
}

// ----------------------------------------------------------------------------
// Safe Math Library
// ----------------------------------------------------------------------------
contract SafeMath {
    function safeAdd(uint256 a, uint256 b) public pure returns (uint256 c) {
        c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function safeSub(uint256 a, uint256 b) public pure returns (uint256 c) {
        require(b <= a, "SafeMath: subtraction overflow");
        c = a - b;
        return c;
    }
}

// ----------------------------------------------------------------------------
// Evaitoken
// ----------------------------------------------------------------------------
/**
 * @title Evaitoken
 * @notice This contract implements the ERC20 token standard with additional functionalities like profit tracking and token burning.
 * @dev The contract uses SafeMath for arithmetic operations to prevent overflows and underflows.
 */
contract Evaitoken is ERC20Interface, SafeMath {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public initialSupply;
    uint256 public _totalSupply;
    address public owner;
    uint256 public totalProfit;
    uint256 public profit;

    mapping(address => uint256) internal balances;
    mapping(address => mapping(address => uint256)) internal allowed;
    mapping(uint256 => uint256) internal token;

    /**
     * @notice Initializes the contract with the initial supply of tokens and sets the owner.
     * @dev The constructor sets the token's name, symbol, decimals, and initial supply. It also assigns the entire initial supply to the contract deployer.
     */
    constructor() public {
        name = "EVAI.IO";
        symbol = "EVAI";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint256(decimals);
        initialSupply = _totalSupply;
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    /**
     * @notice Returns the total supply of tokens, excluding any tokens sent to the zero address.
     * @return The total supply of tokens.
     */
    function totalSupply() external view override returns (uint256) {
        // Exclude burned tokens (at address(0))
        return safeSub(_totalSupply, balances[address(0)]);
    }

    /**
     * @notice Returns the balance of a specific token holder.
     * @param tokenOwner The address of the token holder.
     * @return The balance of the token holder.
     */
    function balanceOf(address tokenOwner) external view override returns (uint256) {
        return balances[tokenOwner];
    }

    /**
     * @notice Returns the amount of tokens that an owner allowed to a spender.
     * @param tokenOwner The address of the token owner.
     * @param spender The address of the spender.
     * @return The remaining allowance.
     */
    function allowance(address tokenOwner, address spender)
        external
        view
        override
        returns (uint256)
    {
        return allowed[tokenOwner][spender];
    }

    /**
     * @notice Sets the amount of tokens that an owner allows to a spender.
     * @param spender The address of the spender.
     * @param tokens The number of tokens to approve.
     * @return A boolean value indicating whether the operation succeeded.
     */
    function approve(address spender, uint256 tokens)
        external
        override
        returns (bool)
    {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    /**
     * @notice Transfers a specified amount of tokens from the message sender to another address.
     * @param to The address to transfer tokens to.
     * @param tokens The number of tokens to transfer.
     * @return A boolean value indicating whether the operation succeeded.
     */
    function transfer(address to, uint256 tokens)
        external
        override
        returns (bool)
    {
        require(to != address(0), "Cannot transfer to zero address");
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }

    /**
     * @notice Transfers a specified amount of tokens from one address to another, using the allowance mechanism.
     * @param from The address to transfer tokens from.
     * @param to The address to transfer tokens to.
     * @param tokens The number of tokens to transfer.
     * @return A boolean value indicating whether the operation succeeded.
     */
    function transferFrom(address from, address to, uint256 tokens)
        external
        override
        returns (bool)
    {
        require(to != address(0), "Cannot transfer to zero address");
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(from, to, tokens);
        return true;
    }

    /**
     * @notice Allows the purchase (distribution) of tokens by the owner to a specified address.
     * @param to The address to transfer tokens to.
     * @param tokens The number of tokens to transfer.
     * @return A boolean value indicating whether the operation succeeded.
     */
    function buy(address to, uint256 tokens)
        external
        override
        returns (bool)
    {
        require(msg.sender == owner, "Only owner can distribute tokens");
        require(to != address(0), "Cannot transfer to zero address");
        balances[owner] = safeSub(balances[owner], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(owner, to, tokens);
        return true;
    }

    /**
     * @notice Updates the profit and total profit of the contract.
     * @param _profit The amount of profit to add.
     * @return A boolean value indicating whether the operation succeeded.
     */
    function operationProfit(uint256 _profit)
        external
        override
        returns (bool)
    {
        require(msg.sender == owner, "Only owner can record profit");
        profit = _profit;
        totalProfit = safeAdd(totalProfit, _profit);
        emit Profit(msg.sender, _profit, totalProfit);
        return true;
    }

    /**
     * @notice Burns a specified amount of tokens from the owner's balance.
     * @param tokens The number of tokens to burn.
     * @return A boolean value indicating whether the operation succeeded.
     */
    function burn(uint256 tokens)
        external
        override
        returns (bool)
    {
        require(msg.sender == owner, "Only owner can burn tokens");
        balances[owner] = safeSub(balances[owner], tokens);
        _totalSupply = safeSub(_totalSupply, tokens);
        emit Burn(msg.sender, address(0), tokens);
        return true;
    }

    /**
     * @notice Fallback function to receive Ether.
     */
    receive() external payable {}
}
```