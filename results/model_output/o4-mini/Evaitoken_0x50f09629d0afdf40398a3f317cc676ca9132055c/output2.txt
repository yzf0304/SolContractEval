```solidity
// SPDX-License-Identifier: MIT
pragma solidity 0.6.10;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
abstract contract ERC20Interface {
    function totalSupply() external view virtual returns (uint256);

    function balanceOf(address tokenOwner)
        external
        view
        virtual
        returns (uint256);

    function allowance(address tokenOwner, address spender)
        external
        view
        virtual
        returns (uint256);

    function transfer(address to, uint256 tokens)
        external
        virtual
        returns (bool);

    function approve(address spender, uint256 tokens)
        external
        virtual
        returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 tokens
    ) external virtual returns (bool);

    function burn(uint256 tokens) external virtual returns (bool success);

    function buy(address to, uint256 tokens) external virtual returns (bool);

    function operationProfit(uint256 _profit) external virtual returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 tokens);
    event Approval(
        address indexed tokenOwner,
        address indexed spender,
        uint256 tokens
    );
    event Burn(address from, address, uint256 value);
    event Profit(address from, uint256 profit, uint256 totalProfit);
}

/**
 * @dev Safe math operations to prevent overflows/underflows.
 */
contract SafeMath {
    function safeAdd(uint256 a, uint256 b) public pure returns (uint256 c) {
        c = a + b;
        require(c >= a, "SafeMath: addition overflow");
    }

    function safeSub(uint256 a, uint256 b) public pure returns (uint256 c) {
        require(b <= a, "SafeMath: subtraction overflow");
        c = a - b;
    }
}

/**
 * @title Evaitoken
 * @notice ERC20 token with profit tracking and burn functionality.
 */
contract Evaitoken is ERC20Interface, SafeMath {
    string public name;                 // Token name
    string public symbol;               // Token symbol
    uint8 public decimals;              // Token decimals
    uint256 public initialSupply;       // Initial supply (minted at deployment)
    uint256 public _totalSupply;        // Current total supply
    address public owner;               // Contract owner
    uint256 public totalProfit;         // Cumulative profit recorded
    uint256 public profit;              // Last profit recorded

    mapping(address => uint256) internal balances;
    mapping(address => mapping(address => uint256)) internal allowed;

    /**
     * @dev Set token details and mint the entire supply to deployer.
     */
    constructor() public {
        name = "EVAI.IO";
        symbol = "EVAI";
        decimals = 8;

        _totalSupply = 1_000_000_000 * 10**uint256(decimals);
        initialSupply = _totalSupply;

        owner = msg.sender;
        balances[owner] = _totalSupply;

        emit Transfer(address(0), owner, _totalSupply);
    }

    /**
     * @notice Total number of tokens in existence, excluding zero‚Äêaddress burns.
     */
    function totalSupply() external view override returns (uint256) {
        return _totalSupply - balances[address(0)];
    }

    /**
     * @notice Get the token balance of an account.
     * @param tokenOwner The address whose balance will be returned.
     */
    function balanceOf(address tokenOwner)
        external
        view
        override
        returns (uint256)
    {
        return balances[tokenOwner];
    }

    /**
     * @notice Amount of tokens that spender is still allowed to withdraw from owner.
     */
    function allowance(address tokenOwner, address spender)
        external
        view
        override
        returns (uint256)
    {
        return allowed[tokenOwner][spender];
    }

    /**
     * @notice Approve spender to transfer up to tokens on caller's behalf.
     */
    function approve(address spender, uint256 tokens)
        external
        override
        returns (bool)
    {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    /**
     * @notice Transfer tokens from caller to recipient.
     */
    function transfer(address to, uint256 tokens)
        external
        override
        returns (bool)
    {
        require(to != address(0), "Evaitoken: transfer to zero address");

        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);

        emit Transfer(msg.sender, to, tokens);
        return true;
    }

    /**
     * @notice Transfer tokens from one address to another using allowance.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokens
    ) external override returns (bool) {
        require(to != address(0), "Evaitoken: transfer to zero address");

        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(
            allowed[from][msg.sender],
            tokens
        );
        balances[to] = safeAdd(balances[to], tokens);

        emit Transfer(from, to, tokens);
        return true;
    }

    /**
     * @notice Owner-only function to sell (transfer) tokens from owner to buyer.
     */
    function buy(address to, uint256 tokens)
        external
        override
        returns (bool)
    {
        require(msg.sender == owner, "Evaitoken: only owner can execute buy");
        require(to != address(0), "Evaitoken: buy to zero address");

        balances[owner] = safeSub(balances[owner], tokens);
        balances[to] = safeAdd(balances[to], tokens);

        emit Transfer(owner, to, tokens);
        return true;
    }

    /**
     * @notice Owner-only: record a new profit amount.
     */
    function operationProfit(uint256 _profit)
        external
        override
        returns (bool)
    {
        require(msg.sender == owner, "Evaitoken: only owner can record profit");

        profit = _profit;
        totalProfit = safeAdd(totalProfit, _profit);

        emit Profit(msg.sender, _profit, totalProfit);
        return true;
    }

    /**
     * @notice Owner-only: burn tokens from owner's balance, reducing total supply.
     */
    function burn(uint256 tokens) external override returns (bool) {
        require(msg.sender == owner, "Evaitoken: only owner can burn");

        balances[owner] = safeSub(balances[owner], tokens);
        _totalSupply = safeSub(_totalSupply, tokens);

        emit Burn(msg.sender, address(0), tokens);
        return true;
    }

    /**
     * @notice Allow contract to receive Ether. No-op.
     */
    receive() external payable {}
}
```