```solidity
pragma solidity 0.6.10;

contract Evaitoken is ERC20Interface, SafeMath {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public initialSupply;
    uint256 public _totalSupply;
    address public owner;
    uint256 public totalProfit;
    uint256 public profit;

    mapping(address => uint256) internal balances;
    mapping(address => mapping(address => uint256)) internal allowed;
    mapping(uint256 => uint256) internal token;

    constructor() public {
        name = "EVAI.IO";
        symbol = "EVAI";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint256(decimals);
        initialSupply = _totalSupply;
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function totalSupply() external view override returns (uint256) {
        // Exclude any tokens sent to the zero address from the circulating supply
        return safeSub(_totalSupply, balances[address(0)]);
    }

    function balanceOf(address tokenOwner) external view override returns (uint256) {
        return balances[tokenOwner];
    }

    function allowance(address tokenOwner, address spender)
        external
        view
        override
        returns (uint256)
    {
        return allowed[tokenOwner][spender];
    }

    function approve(address spender, uint256 tokens)
        external
        override
        returns (bool)
    {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    function transfer(address to, uint256 tokens)
        external
        override
        returns (bool)
    {
        require(to != address(0), "Evaitoken: transfer to zero address");
        require(balances[msg.sender] >= tokens, "Evaitoken: insufficient balance");

        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 tokens
    ) external override returns (bool) {
        require(from != address(0), "Evaitoken: transfer from zero address");
        require(to != address(0), "Evaitoken: transfer to zero address");
        require(balances[from] >= tokens, "Evaitoken: insufficient balance");
        require(
            allowed[from][msg.sender] >= tokens,
            "Evaitoken: transfer amount exceeds allowance"
        );

        balances[from] = safeSub(balances[from], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);

        emit Transfer(from, to, tokens);
        return true;
    }

    function buy(address to, uint256 tokens)
        external
        override
        returns (bool)
    {
        require(to != address(0), "Evaitoken: buy to zero address");
        require(balances[owner] >= tokens, "Evaitoken: not enough tokens available");

        balances[owner] = safeSub(balances[owner], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(owner, to, tokens);
        return true;
    }

    function operationProfit(uint256 _profit)
        external
        override
        returns (bool)
    {
        require(msg.sender == owner, "Evaitoken: only owner can record profit");
        profit = _profit;
        totalProfit = safeAdd(totalProfit, _profit);
        emit Profit(msg.sender, _profit, totalProfit);
        return true;
    }

    function burn(uint256 tokens)
        external
        override
        returns (bool)
    {
        require(msg.sender == owner, "Evaitoken: only owner can burn");
        require(balances[owner] >= tokens, "Evaitoken: insufficient balance to burn");

        balances[owner] = safeSub(balances[owner], tokens);
        _totalSupply = safeSub(_totalSupply, tokens);

        emit Burn(owner, address(0), tokens);
        emit Transfer(owner, address(0), tokens);
        return true;
    }

    receive() external payable {}
}
```