pragma solidity ^0.8.8;

contract EverMigrate is IEverMigrate, Context, Ownable {
    using SafeMath for uint256;

    struct TokenDetails {
        address sourceToken;
        address targetToken;
        address devAddress;
        uint256 ratio;
        bool isPresent;
    }

    struct Transaction {
        uint256 amount;
        uint256 timestamp;
        uint32 txnId;
    }

    mapping(address => TokenDetails) private _tokenList;
    address[] private _allTokens;

    uint32 private _txnId = 0;
    mapping(address => mapping(address => Transaction[])) private _userTxns;

    constructor() {}

    function addTokenDetails(
        address sourceToken,
        address targetToken,
        address devAddress,
        uint256 ratio
    ) external onlyOwner {
        require(sourceToken != address(0), "EverMigrate: sourceToken is zero");
        require(targetToken != address(0), "EverMigrate: targetToken is zero");
        require(devAddress != address(0), "EverMigrate: devAddress is zero");
        require(ratio > 0, "EverMigrate: ratio must be > 0");
        require(!_tokenList[sourceToken].isPresent, "EverMigrate: token already added");

        _tokenList[sourceToken] = TokenDetails({
            sourceToken: sourceToken,
            targetToken: targetToken,
            devAddress: devAddress,
            ratio: ratio,
            isPresent: true
        });
        _allTokens.push(sourceToken);

        emit TokenAdded(sourceToken, targetToken, ratio);
    }

    function migrateTokens(
        address sourceToken,
        address toAddress,
        uint256 amount
    ) external override {
        require(_tokenList[sourceToken].isPresent, "EverMigrate: unsupported token");
        require(toAddress != address(0), "EverMigrate: toAddress is zero");
        require(amount > 0, "EverMigrate: amount must be > 0");

        TokenDetails memory details = _tokenList[sourceToken];

        // Transfer source tokens from sender to devAddress
        bool sentIn = IERC20(sourceToken).transferFrom(_msgSender(), details.devAddress, amount);
        require(sentIn, "EverMigrate: source transfer failed");

        // Calculate output amount
        uint256 amountOut = amount.mul(details.ratio);

        // Transfer target tokens from contract to recipient
        bool sentOut = IERC20(details.targetToken).transfer(toAddress, amountOut);
        require(sentOut, "EverMigrate: target transfer failed");

        // Record the transaction
        _txnId += 1;
        Transaction memory txn = Transaction({
            amount: amount,
            timestamp: block.timestamp,
            txnId: _txnId
        });
        _userTxns[sourceToken][toAddress].push(txn);

        emit TokensMigrated(sourceToken, details.targetToken, amount, amountOut);
    }

    function userTransactionsLength(address sourceToken, address userAddress)
        external
        view
        returns (uint256)
    {
        return _userTxns[sourceToken][userAddress].length;
    }

    function userTransaction(
        address sourceToken,
        address userAddress,
        uint256 position
    )
        external
        view
        returns (
            uint256 amount,
            uint256 timestamp,
            uint32 txnId
        )
    {
        Transaction storage txn = _userTxns[sourceToken][userAddress][position];
        return (txn.amount, txn.timestamp, txn.txnId);
    }

    function returnTokens(
        address sourceToken,
        address toAddress,
        uint256 amount
    ) external override onlyOwner {
        require(_tokenList[sourceToken].isPresent, "EverMigrate: unsupported token");
        require(toAddress != address(0), "EverMigrate: toAddress is zero");
        require(amount > 0, "EverMigrate: amount must be > 0");

        address targetToken = _tokenList[sourceToken].targetToken;
        bool sent = IERC20(targetToken).transfer(toAddress, amount);
        require(sent, "EverMigrate: return transfer failed");

        emit TokensReturned(sourceToken, toAddress, amount);
    }

    function tokenMigrateDetails(address sourceToken)
        external
        view
        override
        returns (address targetToken, uint256 ratio)
    {
        require(_tokenList[sourceToken].isPresent, "EverMigrate: unsupported token");
        TokenDetails storage details = _tokenList[sourceToken];
        return (details.targetToken, details.ratio);
    }

    function allSupportedTokens()
        external
        view
        override
        returns (address[] memory)
    {
        return _allTokens;
    }

    function allSupportedTokensLength()
        external
        view
        override
        returns (uint256)
    {
        return _allTokens.length;
    }

    function supportsToken(address sourceToken)
        public
        view
        override
        returns (bool)
    {
        return _tokenList[sourceToken].isPresent;
    }
}