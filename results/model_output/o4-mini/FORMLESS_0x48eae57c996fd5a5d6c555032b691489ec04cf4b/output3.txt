```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract FORMLESS is Ownable, ERC721A, ReentrancyGuard {
    using Strings for uint256;

    uint256 public MAX_PER_Transtion = 1;
    uint256 public MAX_PER_Address   = 1;
    uint256 public PRICE             = 0.069 ether;
    uint256 private TotalCollectionSize_ = 500;
    uint256 private constant MaxMintPerBatch_ = 1;

    mapping(address => bool) private whitelistedAddressesForMint;

    string private _baseTokenURI;

    /// @notice 0 = paused, 1 = whitelist sale, 2 = public sale
    uint public status = 0;

    modifier callerIsUser() {
        require(tx.origin == msg.sender, "The caller is another contract");
        _;
    }

    constructor()
        ERC721A("FORMLESS", "FORMLESS", MaxMintPerBatch_, TotalCollectionSize_)
    {
        _baseTokenURI = "https://gateway.pinata.cloud/ipfs/QmWT2u6UEeXJs5MWcSTQhHFyYC9wKevQNjXC4J3k67ymtQ/";
    }

    /// @notice Mint `quantity` NFTs to msg.sender according to sale status.
    function mint(uint256 quantity)
        external
        payable
        callerIsUser
    {
        require(status != 0, "Sale is paused");
        require(quantity > 0 && quantity <= MAX_PER_Transtion, "Invalid mint quantity");
        require(totalSupply() + quantity <= TotalCollectionSize_, "Exceeds collection size");
        require(msg.value == PRICE * quantity, "Incorrect ETH amount");

        if (status == 1) {
            require(isWhitelistedForMint(msg.sender), "Not whitelisted");
        }

        // enforce per-address limit
        require(
            numberMinted(msg.sender) + quantity <= MAX_PER_Address,
            "Exceeds per-address limit"
        );

        _safeMint(msg.sender, quantity);
    }

    /// @notice Returns the token URI for `tokenId`.
    function tokenURI(uint256 tokenId)
        public
        view
        override
        returns (string memory)
    {
        require(_exists(tokenId), "URI query for nonexistent token");
        return
            string(
                abi.encodePacked(
                    _baseURI(),
                    tokenId.toString()
                )
            );
    }

    /// @notice Is `_user` whitelisted?
    function isWhitelistedForMint(address _user)
        public
        view
        returns (bool)
    {
        return whitelistedAddressesForMint[_user];
    }

    /// @notice Add `_users` to whitelist.
    function addNewWhitelistUserForMint(address[] calldata _users)
        external
        onlyOwner
    {
        for (uint i = 0; i < _users.length; i++) {
            whitelistedAddressesForMint[_users[i]] = true;
        }
    }

    /// @notice Update base URI.
    function setBaseURI(string memory baseURI) external onlyOwner {
        _baseTokenURI = baseURI;
    }

    /// @dev internal override for ERC721A
    function _baseURI() internal view override returns (string memory) {
        return _baseTokenURI;
    }

    /// @notice How many NFTs has `owner` minted?
    function numberMinted(address owner) public view returns (uint256) {
        return _numberMinted(owner);
    }

    /// @notice Returns ownership data for `tokenId`.
    function getOwnershipData(uint256 tokenId)
        external
        view
        returns (TokenOwnership memory)
    {
        return ownershipOf(tokenId);
    }

    /// @notice Withdraw contract balance to owner.
    function withdrawMoney() external onlyOwner nonReentrant {
        uint256 bal = address(this).balance;
        require(bal > 0, "No funds");
        payable(owner()).transfer(bal);
    }

    /// @notice Change per-address mint limit.
    function changeMAX_PER_Address(uint256 q) external onlyOwner {
        MAX_PER_Address = q;
    }

    /// @notice Reserve `quantity` tokens for `_address`.
    function reserve(address _address, uint256 quantity) external onlyOwner {
        require(totalSupply() + quantity <= TotalCollectionSize_, "Exceeds collection size");
        _safeMint(_address, quantity);
    }

    /// @notice Change mint price.
    function changeMintPrice(uint256 _newPrice) external onlyOwner {
        PRICE = _newPrice;
    }

    /// @notice Change total collection size.
    function changeCollectionSize(uint256 _collectionSize)
        external
        onlyOwner
    {
        require(_collectionSize >= totalSupply(), "Too small");
        TotalCollectionSize_ = _collectionSize;
    }

    /// @notice Change per-transaction mint limit.
    function changeMAX_PER_Transtion(uint256 q) external onlyOwner {
        MAX_PER_Transtion = q;
    }

    /// @notice Giveaway `q` tokens to address `a`.
    function giveaway(address a, uint q) external onlyOwner {
        require(totalSupply() + q <= TotalCollectionSize_, "Exceeds collection size");
        _safeMint(a, q);
    }

    /// @notice Change sale status.
    function setStatus(uint256 s) external onlyOwner {
        require(s <= 2, "Invalid status");
        status = s;
    }

    /// @notice Get current sale status.
    function getStatus() external view returns (uint) {
        return status;
    }

    /// @notice Get total collection size.
    function getcollectionSize() external view returns (uint) {
        return TotalCollectionSize_;
    }
}
```