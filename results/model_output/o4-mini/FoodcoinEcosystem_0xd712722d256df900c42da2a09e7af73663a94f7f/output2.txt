pragma solidity ^0.4.16;

contract Manager is SpecialManager {

    // адрес менеджеров
    mapping(address => bool) public managerAddressMap;
    // Соответствие адреса менеджеров и его номера
    mapping(address => uint256) public managerAddressNumberMap;
    // список менеджеров
    mapping(uint256 => address) public managerListMap;
    // сколько всего менеджеров
    uint256 public managerCountInt = 0;

    /**
     * @notice Modifier to restrict access to only the owner or a manager.
     * @dev This modifier checks if the message sender is either the owner or a registered manager.
     */
    modifier isManagerOrOwner {
        require(
            managerAddressMap[msg.sender] == true ||
            ownerAddressMap[msg.sender] == true
        );
        _;
    }

    /**
     * @dev Enables or re-enables a manager address.
     * @param _onManagerAddress The address of the manager to enable.
     * @return retrnVal Boolean indicating success (true) or if manager already active (false).
     * @dev Requirements:
     *   - Only callable by contract owner.
     *   - Manager address cannot be zero.
     * @dev Emits ContractManagementUpdate("Manager", initiator, manager, newValue).
     */
    function managerOn(address _onManagerAddress)
        external
        isOwner
        returns (bool retrnVal)
    {
        require(_onManagerAddress != address(0));

        // Если менеджер уже был когда-либо добавлен
        if (managerAddressNumberMap[_onManagerAddress] > 0) {
            // Если он сейчас отключен – включаем
            if (!managerAddressMap[_onManagerAddress]) {
                managerAddressMap[_onManagerAddress] = true;
                ContractManagementUpdate(
                    "Manager",
                    msg.sender,
                    _onManagerAddress,
                    true
                );
                retrnVal = true;
            } else {
                retrnVal = false;
            }
        } else {
            // Новый менеджер
            managerAddressMap[_onManagerAddress] = true;
            managerAddressNumberMap[_onManagerAddress] = managerCountInt;
            managerListMap[managerCountInt] = _onManagerAddress;
            managerCountInt++;
            ContractManagementUpdate(
                "Manager",
                msg.sender,
                _onManagerAddress,
                true
            );
            retrnVal = true;
        }
    }

    /**
     * @notice Disables a manager.
     * @param _offManagerAddress The address of the manager to be disabled.
     * @return retrnVal Returns true if the operation was successful, false otherwise.
     * @dev Only the owner can call this function.
     * @dev Emits ContractManagementUpdate("Manager", initiator, manager, false).
     */
    function managerOff(address _offManagerAddress)
        external
        isOwner
        returns (bool retrnVal)
    {
        // Менеджер должен существовать (номер > 0) и быть активен
        if (
            managerAddressNumberMap[_offManagerAddress] > 0 &&
            managerAddressMap[_offManagerAddress]
        ) {
            managerAddressMap[_offManagerAddress] = false;
            ContractManagementUpdate(
                "Manager",
                msg.sender,
                _offManagerAddress,
                false
            );
            retrnVal = true;
        } else {
            retrnVal = false;
        }
    }

    /**
     * @notice Initializes the contract and adds the creator as the first manager.
     */
    function Manager() public {
        managerAddressMap[msg.sender] = true;
        managerAddressNumberMap[msg.sender] = managerCountInt;
        managerListMap[managerCountInt] = msg.sender;
        managerCountInt++;
    }
}