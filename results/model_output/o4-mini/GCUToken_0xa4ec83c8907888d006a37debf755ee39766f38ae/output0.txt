pragma solidity 0.4.26;

/**
 * @dev SafeMath library to perform safe arithmetic operations.
 */
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity automatically throws when dividing by 0
        require(b > 0);
        return a / b;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
}

/**
 * @title GCUToken
 * @dev This contract implements the ERC20 and ERC223 token standards.
 * It includes functionalities for transferring tokens, approving token transfers,
 * and handling token transfers to contracts that implement the `tokenFallback` function.
 */
contract GCUToken is ERC223Interface {
    using SafeMath for uint256;

    /* Contract Constants */
    string public constant _name = "Global Currency Unit";
    string public constant _symbol = "GCU";
    uint8  public constant _decimals = 18;

    /* Contract Variables */
    address public owner;
    uint256 public totalSupply_;

    mapping(address => uint256)                       public balances;
    mapping(address => mapping(address => uint256))   public allowed;

    /* ERC20 Events */
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed from, address indexed to, uint256 value);

    /* ERC223 Events */
    event Transfer(address indexed from, address indexed to, uint value, bytes data);

    /**
     * @dev Constructor initializes the owner's balance and the supply.
     * @param _amount Initial token amount (in whole units, will be multiplied by 10^decimals).
     * @param _initialWallet Address that will receive the entire initial supply.
     */
    constructor(uint256 _amount, address _initialWallet) public {
        owner = _initialWallet;
        totalSupply_ = _amount.mul(uint256(10) ** _decimals);
        balances[_initialWallet] = totalSupply_;
        emit Transfer(address(0), _initialWallet, totalSupply_);
    }

    /**
     * @notice Returns the total number of tokens in existence.
     */
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    /**
     * @notice Returns the balance of the specified address.
     */
    function balanceOf(address _address) public view returns (uint256 balance) {
        return balances[_address];
    }

    /**
     * @notice Transfers tokens with no extra data (ERC20 style).
     */
    function transfer(address _to, uint _value) public returns (bool success) {
        bytes memory empty;
        return transfer(_to, _value, empty);
    }

    /**
     * @notice Transfers tokens from one address to another.
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balances[_from], "Insufficient balance");
        require(_value <= allowed[_from][msg.sender], "Allowance exceeded");
        require(_to != address(0), "Cannot transfer to zero address");

        // decrement balances and allowance
        balances[_from] = balances[_from].sub(_value);
        balances[_to]   = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);

        // emit standard ERC20 Transfer event
        emit Transfer(_from, _to, _value);

        // emit ERC223 event with empty data
        bytes memory empty;
        emit Transfer(_from, _to, _value, empty);
        return true;
    }

    /**
     * @notice Approves a spender to transfer up to `_allowance` on behalf of the sender.
     */
    function approve(address _spender, uint256 _allowance) public returns (bool success) {
        allowed[msg.sender][_spender] = _allowance;
        emit Approval(msg.sender, _spender, _allowance);
        return true;
    }

    /**
     * @notice Returns the remaining allowance for a spender.
     */
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    /**
     * @notice Returns the name of the token.
     */
    function name() public view returns (string) {
        return _name;
    }

    /**
     * @notice Returns the symbol of the token.
     */
    function symbol() public view returns (string) {
        return _symbol;
    }

    /**
     * @notice Returns the number of decimals used by the token.
     */
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    /**
     * @notice Transfers tokens with additional data (ERC223 style).
     */
    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {
        require(_value <= balances[msg.sender], "Insufficient balance");
        require(_to != address(0), "Cannot transfer to zero address");

        if (isContract(_to)) {
            return transferToContract(_to, _value, _data);
        } else {
            return transferToAddress(_to, _value, _data);
        }
    }

    /**
     * @dev Internal function to transfer tokens to a regular address.
     */
    function transferToAddress(address _to, uint _value, bytes _data) internal returns (bool) {
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to]       = balances[_to].add(_value);

        emit Transfer(msg.sender, _to, _value);
        emit Transfer(msg.sender, _to, _value, _data);
        return true;
    }

    /**
     * @dev Internal function to transfer tokens to a contract address.
     */
    function transferToContract(address _to, uint _value, bytes _data) internal returns (bool) {
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to]       = balances[_to].add(_value);

        ContractReceiver receiver = ContractReceiver(_to);
        receiver.tokenFallback(msg.sender, _value, _data);

        emit Transfer(msg.sender, _to, _value);
        emit Transfer(msg.sender, _to, _value, _data);
        return true;
    }

    /**
     * @dev Checks if the given address is a contract.
     */
    function isContract(address _address) internal view returns (bool) {
        uint256 length;
        assembly {
            length := extcodesize(_address)
        }
        return (length > 0);
    }

    /**
     * @dev Fallback function to prevent sending Ether to this contract.
     */
    function () public {
        revert();
    }
}