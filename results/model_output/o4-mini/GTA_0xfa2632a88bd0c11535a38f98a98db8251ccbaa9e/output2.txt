pragma solidity 0.4.16;

/**
 * @title StandardToken
 * @dev Implementation of the basic standard token with ERC20 functionality.
 * @notice This contract provides a basic implementation of an ERC20 token, including balance tracking and allowance management.
 */
contract StandardToken is ERC20 {
    using SafeMath for uint256;

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;

    /**
     * @notice Returns the balance of the specified address.
     * @param _owner The address to query the balance of.
     * @return The balance of the specified address.
     * @dev This function is used to check the balance of a specific address.
     */
    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }

    /**
     * @notice Approves the specified address to spend a certain amount of tokens on behalf of the message sender.
     * @param _spender The address which will spend the funds.
     * @param _value The amount of tokens to be spent.
     * @return True if the approval was successful.
     * @dev To change the approve amount, you first have to reduce the addresses' allowance to zero by calling
     *      `approve(_spender, 0)` if it is not already 0 to mitigate the race condition described here:
     *      https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     */
    function approve(address _spender, uint256 _value) public returns (bool) {
        // To change the approve amount you first have to reduce the addresses'
        // allowance to zero by calling `approve(_spender, 0)` if it is not
        // already 0 to mitigate the race condition described in the EIP.
        require(_value == 0 || allowed[msg.sender][_spender] == 0);

        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Returns the remaining number of tokens that `_spender` is allowed to spend
     *         on behalf of `_owner`.
     * @param _owner The address of the token owner.
     * @param _spender The address of the spender.
     * @return The remaining allowance for the spender.
     * @dev This function is used to check the remaining allowance for a specific spender.
     */
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}