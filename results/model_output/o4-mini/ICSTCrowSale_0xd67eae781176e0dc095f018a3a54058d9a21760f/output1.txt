pragma solidity ^0.4.21;

contract ICSTCrowSale is Ownable {
    using SafeMath for uint256;

    // The total amount of tokens that have been distributed through funding.
    uint256 public totalFundingSupply;

    // The ERC20 token being sold in the crowdsale.
    ERC20 public token;

    // The start time of the crowdsale.
    uint256 public startTime;

    // The end time of the crowdsale.
    uint256 public endTime;

    // The total supply of tokens reserved for airdrops.
    uint256 public airdropSupply;

    // The rate at which tokens are sold (tokens per wei).
    uint256 public rate;

    // Event emitted when tokens are wasted, typically during an airdrop.
    event Wasted(address to, uint256 value, uint256 date);

    /**
     * @dev Constructor for the ICSTCrowSale contract.
     *      Initializes rate, times and supplies to zero and sets the token address.
     */
    function ICSTCrowSale() public {
        rate = 0;
        startTime = 0;
        endTime = 0;
        airdropSupply = 0;
        totalFundingSupply = 0;
        token = ERC20(0xe6bc60a00b81c7f3cbc8f4ef3b0a6805b6851753);
    }

    /**
     * @dev Fallback function to handle incoming ether and process funding.
     *      Requires the current time to be within the sale period.
     */
    function () payable external {
        require(now > startTime);
        require(now <= endTime);
        // process funding and transfer tokens
        processFunding(msg.sender, msg.value, rate);
        // update total funded token supply
        uint256 tokenAmount = msg.value.mul(rate);
        totalFundingSupply = totalFundingSupply.add(tokenAmount);
    }

    /**
     * @notice Allows the owner to withdraw a specified amount of tokens.
     * @param _value The amount of tokens to withdraw.
     */
    function withdrawCoinToOwner(uint256 _value) external onlyOwner {
        require(_value > 0);
        uint256 contractBalance = token.balanceOf(address(this));
        require(contractBalance >= _value);
        require(token.transfer(owner, _value));
    }

    /**
     * @notice Allows the owner to airdrop tokens to a list of addresses.
     * @param _holders The list of addresses to receive the airdrop.
     * @param paySize The amount of tokens each address will receive.
     */
    function airdrop(address[] _holders, uint256 paySize) external onlyOwner {
        require(paySize > 0);
        uint256 count = _holders.length;
        require(count > 0);
        // total required
        uint256 total = paySize.mul(count);
        require(airdropSupply >= total);
        // perform airdrops
        for (uint256 i = 0; i < count; i++) {
            address recipient = _holders[i];
            require(token.transfer(recipient, paySize));
            emit Wasted(recipient, paySize, now);
        }
        // decrement airdrop supply
        airdropSupply = airdropSupply.sub(total);
    }

    /**
     * @dev Internal function to process the funding and transfer tokens to the receiver.
     * @param receiver The address to receive the tokens.
     * @param _value The amount of wei sent.
     * @param _rate The rate at which to convert wei to tokens.
     */
    function processFunding(address receiver, uint256 _value, uint256 _rate) internal {
        require(receiver != address(0));
        require(_value > 0);
        require(_rate > 0);
        uint256 tokenAmount = _value.mul(_rate);
        // ensure the contract has enough tokens
        require(token.balanceOf(address(this)) >= tokenAmount);
        // transfer tokens to purchaser
        require(token.transfer(receiver, tokenAmount));
    }

    /**
     * @notice Allows the owner to withdraw all ether from the contract.
     */
    function etherProceeds() external onlyOwner {
        uint256 balance = address(this).balance;
        require(balance > 0);
        owner.transfer(balance);
    }

    /**
     * @notice Initializes the crowdsale with the start time, end time, and rate.
     * @param _startTime The start time of the crowdsale.
     * @param _endTime The end time of the crowdsale.
     * @param _rate The rate at which tokens are sold (tokens per wei).
     */
    function init(uint256 _startTime, uint256 _endTime, uint256 _rate) external onlyOwner {
        require(_startTime > 0);
        require(_endTime > _startTime);
        require(_rate > 0);
        startTime = _startTime;
        endTime = _endTime;
        rate = _rate;
    }

    /**
     * @notice Allows the owner to change the token address.
     * @param _tokenAddress The new token address.
     */
    function changeToken(address _tokenAddress) external onlyOwner {
        require(_tokenAddress != address(0));
        token = ERC20(_tokenAddress);
    }
}