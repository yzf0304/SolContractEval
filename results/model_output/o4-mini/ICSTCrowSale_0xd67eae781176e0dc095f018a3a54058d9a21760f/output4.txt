pragma solidity 0.4.21;

contract ICSTCrowSale is Ownable {
    using SafeMath for uint256;

    uint256 public totalFundingSupply;
    ERC20 public token;
    uint256 public startTime;
    uint256 public endTime;
    uint256 public airdropSupply;
    uint256 public rate;

    event Wasted(address to, uint256 value, uint256 date);

    function ICSTCrowSale() public {
        rate = 0;
        startTime = 0;
        endTime = 0;
        airdropSupply = 0;
        totalFundingSupply = 0;
        token = ERC20(0xe6bc60a00b81c7f3cbc8f4ef3b0a6805b6851753);
    }

    function () external payable {
        require(now > startTime);
        require(now <= endTime);
        processFunding(msg.sender, msg.value, rate);
        uint256 amount = msg.value.mul(rate);
        totalFundingSupply = totalFundingSupply.add(amount);
    }

    function withdrawCoinToOwner(uint256 _value) external onlyOwner {
        require(_value > 0);
        require(token.balanceOf(this) >= _value);
        require(token.transfer(owner, _value));
    }

    function airdrop(address[] _holders, uint256 paySize) external onlyOwner {
        require(paySize > 0);
        for (uint256 i = 0; i < _holders.length; i++) {
            address to = _holders[i];
            require(airdropSupply >= paySize);
            require(token.balanceOf(this) >= paySize);
            airdropSupply = airdropSupply.sub(paySize);
            require(token.transfer(to, paySize));
            Wasted(to, paySize, now);
        }
    }

    function processFunding(address receiver, uint256 _value, uint256 _rate) internal {
        uint256 tokenAmount = _value.mul(_rate);
        require(tokenAmount > 0);
        require(token.balanceOf(this) >= tokenAmount);
        require(token.transfer(receiver, tokenAmount));
    }

    function etherProceeds() external onlyOwner {
        owner.transfer(address(this).balance);
    }

    function init(uint256 _startTime, uint256 _endTime, uint256 _rate) external onlyOwner {
        require(_startTime < _endTime);
        require(_rate > 0);
        startTime = _startTime;
        endTime = _endTime;
        rate = _rate;
    }

    function changeToken(address _tokenAddress) external onlyOwner {
        require(_tokenAddress != address(0));
        token = ERC20(_tokenAddress);
    }
}