pragma solidity ^0.4.18;

contract Bonus is IcoPhase, Ownable {
    using SafeMath for uint256;

    // decimals of tokens (not used directly in this implementation)
    uint256 constant decimals = 18;

    // enable/disable bonus distribution
    bool public isBonus;

    // storage for bonus balances
    mapping(address => uint256) public bonusAccountBalances;
    mapping(uint256 => address) public bonusAccountIndex;
    uint256 public bonusAccountCount;

    /**
     * @notice Initializes the contract with bonuses enabled.
     */
    function Bonus() public {
        isBonus = true;
    }

    /**
     * @notice Enables the bonus system.
     * @dev Can only be called by the owner when bonuses are currently disabled.
     */
    function enableBonus() public onlyOwner returns (bool) {
        require(!isBonus);
        isBonus = true;
        return true;
    }

    /**
     * @notice Disables the bonus system.
     * @dev Can only be called by the owner when bonuses are currently enabled.
     */
    function disableBonus() public onlyOwner returns (bool) {
        require(isBonus);
        isBonus = false;
        return true;
    }

    /**
     * @notice Gets the bonus percentage based on the current time.
     * @dev Checks the current time against predefined phases.
     * @return The bonus percentage as a uint256.
     */
    function getBonusByTime() public view returns (uint256) {
        // Presale phase
        if (now >= phasePresale_From && now < phasePresale_To) {
            return 20;  // 20%
        }
        // Public Sale 1
        if (now >= phasePublicSale1_From && now < phasePublicSale1_To) {
            return 10;  // 10%
        }
        // Public Sale 2
        if (now >= phasePublicSale2_From && now < phasePublicSale2_To) {
            return 5;   // 5%
        }
        // Public Sale 3
        if (now >= phasePublicSale3_From && now < phasePublicSale3_To) {
            return 2;   // 2%
        }
        // Outside any sale window: no bonus
        return 0;
    }

    /**
     * @notice Calculates the bonus amount based on the provided ETH/token value.
     * @dev Returns zero if bonuses are disabled or if the current time yields zero bonus.
     * @param _value The amount (in smallest units) to calculate the bonus on.
     * @return The bonus amount as a uint256.
     */
    function getBonusByETH(uint256 _value) public view returns (uint256) {
        if (!isBonus) {
            return 0;
        }
        uint256 pct = getBonusByTime();
        if (pct == 0) {
            return 0;
        }
        return _value.mul(pct).div(100);
    }

    /**
     * @notice Returns the bonus balance of a specific account.
     * @param _owner The address to query.
     * @return The bonus balance.
     */
    function balanceBonusOf(address _owner) public view returns (uint256) {
        return bonusAccountBalances[_owner];
    }

    /**
     * @notice Pays out the stored bonus to a specified address.
     * @dev Only the owner can call this. Transfers Ether equal to the bonus balance.
     * @param _address The recipient address.
     * @return success True if payment succeeds.
     */
    function payBonusToAddress(address _address) public onlyOwner returns (bool success) {
        require(isBonus);
        require(_address != address(0));
        uint256 amount = bonusAccountBalances[_address];
        require(amount > 0);
        // zero out before transfer to prevent re-entrancy
        bonusAccountBalances[_address] = 0;
        _address.transfer(amount);
        return true;
    }

    /**
     * @notice Fallback function to receive Ether into the contract.
     */
    function () public payable {
        // Accept Ether deposits; this can fund bonus payouts
    }
}