pragma solidity ^0.4.13;

contract KyberContributorWhitelist is Ownable {
    // 7 wei is a dummy cap. Will be set by owner to a real cap after registration ends.
    uint public slackUsersCap = 7;
    mapping(address => uint) public addressCap;

    /**
     * @notice Event emitted when an address is listed with a specific cap.
     * @param _user The address being listed.
     * @param _cap The contribution cap set for the address.
     * @param _time The timestamp when the address was listed.
     */
    event ListAddress(address indexed _user, uint _cap, uint _time);

    /**
     * @notice Constructor for the KyberContributorWhitelist contract.
     * @dev Initializes the contract. No specific initialization is required in this constructor.
     */
    function KyberContributorWhitelist() {
        // no initialization required beyond Ownable
    }

    /**
     * @notice Allows the owner to list an address with a specific contribution cap.
     * @dev The owner can delist an address by setting the cap to 0. The cap can also be changed at any time.
     * @param _user The address to be listed.
     * @param _cap The contribution cap for the address.
     */
    function listAddress(address _user, uint _cap) onlyOwner {
        addressCap[_user] = _cap;
        ListAddress(_user, _cap, now);
    }

    /**
     * @notice Allows the owner to list multiple addresses with their respective contribution caps.
     * @dev This function is optimized for network congestion by batching the listing process.
     * @param _users An array of addresses to be listed.
     * @param _cap An array of contribution caps corresponding to the addresses.
     */
    function listAddresses(address[] _users, uint[] _cap) onlyOwner {
        require(_users.length == _cap.length);
        for (uint i = 0; i < _users.length; i++) {
            addressCap[_users[i]] = _cap[i];
            ListAddress(_users[i], _cap[i], now);
        }
    }

    /**
     * @notice Allows the owner to set the global cap for all addresses with a cap value of 1.
     * @dev This function sets the `slackUsersCap` which is used as the cap for addresses with a cap value of 1.
     * @param _cap The new global cap value.
     */
    function setSlackUsersCap(uint _cap) onlyOwner {
        slackUsersCap = _cap;
    }

    /**
     * @notice Returns the contribution cap for a given address.
     * @dev If the address has a cap of 1, it returns the `slackUsersCap`. Otherwise, it returns the specific cap.
     * @param _user The address to check the cap for.
     * @return The contribution cap for the address.
     */
    function getCap(address _user) constant returns (uint) {
        uint cap = addressCap[_user];
        if (cap == 1) {
            return slackUsersCap;
        }
        return cap;
    }

    /**
     * @notice Allows the owner to destroy the contract and send the remaining funds to the owner's address.
     * @dev This function self-destructs the contract and transfers any remaining balance to the owner.
     */
    function destroy() onlyOwner {
        selfdestruct(owner);
    }
}