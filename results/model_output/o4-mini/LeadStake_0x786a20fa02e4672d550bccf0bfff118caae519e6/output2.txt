pragma solidity ^0.6.12;

interface IERC20 {
    function transfer(address to, uint tokens) external returns (bool success);
    function transferFrom(address from, address to, uint tokens) external returns (bool success);
    function balanceOf(address tokenOwner) external view returns (uint balance);
}

library SafeMath {
    function add(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a, "SafeMath: addition overflow");
    }
    function sub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a, "SafeMath: subtraction overflow");
        c = a - b;
    }
    function mul(uint a, uint b) internal pure returns (uint c) {
        if (a == 0) return 0;
        c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
    }
    function div(uint a, uint b) internal pure returns (uint c) {
        require(b > 0, "SafeMath: division by zero");
        c = a / b;
    }
}

contract Owned {
    address public owner;
    event OwnershipTransferred(address indexed _from, address indexed _to);
    constructor() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner, "Only owner");
        _;
    }
    function transferOwnership(address _newOwner) public onlyOwner {
        emit OwnershipTransferred(owner, _newOwner);
        owner = _newOwner;
    }
}

contract LeadStake is Owned {
    using SafeMath for uint;

    address public lead;
    uint public totalStaked;
    uint public stakingTaxRate;     // 10 = 1%
    uint public unstakingTaxRate;   // 10 = 1%
    uint public dailyROI;           // 100 = 1%
    uint public registrationTax;
    uint public minimumStakeValue;
    bool public active = true;

    mapping(address => uint) public stakes;
    mapping(address => uint) public referralRewards;
    mapping(address => uint) public referralCount;
    mapping(address => uint) public stakeRewards;
    mapping(address => uint) private lastClock;
    mapping(address => bool) public registered;

    event OnWithdrawal(address sender, uint amount);
    event OnStake(address sender, uint amount, uint tax);
    event OnUnstake(address sender, uint amount, uint tax);
    event OnRegisterAndStake(address stakeholder, uint amount, uint totalTax , address referrer);

    constructor(
        address _token,
        uint _stakingTaxRate,
        uint _unstakingTaxRate,
        uint _dailyROI,
        uint _registrationTax,
        uint _minimumStakeValue
    ) public {
        lead = _token;
        stakingTaxRate = _stakingTaxRate;
        unstakingTaxRate = _unstakingTaxRate;
        dailyROI = _dailyROI;
        registrationTax = _registrationTax;
        minimumStakeValue = _minimumStakeValue;
    }

    modifier onlyRegistered() {
        require(registered[msg.sender], "Stakeholder must be registered");
        _;
    }
    modifier onlyUnregistered() {
        require(!registered[msg.sender], "Stakeholder is already registered");
        _;
    }
    modifier whenActive() {
        require(active, "Smart contract is currently inactive");
        _;
    }

    function registerAndStake(uint _amount, address _referrer)
        external
        onlyUnregistered
        whenActive
    {
        require(_amount >= registrationTax.add(minimumStakeValue), "Insufficient amount for registration and minimum stake");
        require(_referrer != msg.sender, "Cannot refer self");
        require(_referrer == address(0) || registered[_referrer], "Referrer must be registered or zero");

        // Transfer tokens in
        require(IERC20(lead).transferFrom(msg.sender, address(this), _amount), "Transfer failed");

        // Deduct registration tax
        uint afterReg = _amount.sub(registrationTax);

        // Calculate staking tax (stakingTaxRate / 1000)
        uint tax = afterReg.mul(stakingTaxRate).div(1000);
        uint netStake = afterReg.sub(tax);

        // Assign referral bonus if applicable (50% of staking tax)
        if (_referrer != address(0) && tax > 0) {
            uint bonus = tax.div(2);
            referralRewards[_referrer] = referralRewards[_referrer].add(bonus);
            referralCount[_referrer] = referralCount[_referrer].add(1);
        }

        // Register user and record timestamp
        registered[msg.sender] = true;
        lastClock[msg.sender] = block.timestamp;

        // Update staking balances
        stakes[msg.sender] = netStake;
        totalStaked = totalStaked.add(netStake);

        emit OnRegisterAndStake(msg.sender, netStake, registrationTax.add(tax), _referrer);
    }

    function calculateEarnings(address _stakeholder) public view returns (uint) {
        if (!registered[_stakeholder] || stakes[_stakeholder] == 0) {
            return 0;
        }
        uint since = block.timestamp.sub(lastClock[_stakeholder]);
        // earnings = stake * dailyROI * secondsElapsed / (10000 * 1 day)
        uint earn = stakes[_stakeholder]
            .mul(dailyROI)
            .mul(since)
            .div(10000)
            .div(1 days);
        return earn;
    }

    function stake(uint _amount)
        external
        onlyRegistered
        whenActive
    {
        require(_amount >= minimumStakeValue, "Amount below minimum");
        require(IERC20(lead).transferFrom(msg.sender, address(this), _amount), "Transfer failed");

        // Accrue pending earnings
        uint earned = calculateEarnings(msg.sender);
        if (earned > 0) {
            stakeRewards[msg.sender] = stakeRewards[msg.sender].add(earned);
        }

        // Reset timer
        lastClock[msg.sender] = block.timestamp;

        // Apply staking tax
        uint tax = _amount.mul(stakingTaxRate).div(1000);
        uint net = _amount.sub(tax);

        // Add to stake
        stakes[msg.sender] = stakes[msg.sender].add(net);
        totalStaked = totalStaked.add(net);

        emit OnStake(msg.sender, net, tax);
    }

    function unstake(uint _amount) external onlyRegistered {
        require(_amount > 0 && _amount <= stakes[msg.sender], "Invalid unstake amount");

        // Accrue pending earnings
        uint earned = calculateEarnings(msg.sender);
        if (earned > 0) {
            stakeRewards[msg.sender] = stakeRewards[msg.sender].add(earned);
        }
        lastClock[msg.sender] = block.timestamp;

        // Apply unstaking tax
        uint tax = _amount.mul(unstakingTaxRate).div(1000);
        uint net = _amount.sub(tax);

        // Update stakes
        stakes[msg.sender] = stakes[msg.sender].sub(_amount);
        totalStaked = totalStaked.sub(_amount);

        // Transfer net back to user
        require(IERC20(lead).transfer(msg.sender, net), "Transfer failed");

        // Deregister if nothing left
        if (stakes[msg.sender] == 0) {
            registered[msg.sender] = false;
        }

        emit OnUnstake(msg.sender, net, tax);
    }

    function withdrawEarnings() external returns (bool success) {
        // Calculate all earnings
        uint earned = calculateEarnings(msg.sender);
        uint reward = stakeRewards[msg.sender].add(referralRewards[msg.sender]).add(earned);
        require(reward > 0, "No rewards available");

        // Check pool
        uint poolBal = IERC20(lead).balanceOf(address(this)).sub(totalStaked);
        require(poolBal >= reward, "Insufficient contract balance");

        // Reset user reward state
        stakeRewards[msg.sender] = 0;
        referralRewards[msg.sender] = 0;
        lastClock[msg.sender] = block.timestamp;

        // Transfer rewards
        require(IERC20(lead).transfer(msg.sender, reward), "Transfer failed");

        emit OnWithdrawal(msg.sender, reward);
        return true;
    }

    function rewardPool() external view onlyOwner returns (uint) {
        return IERC20(lead).balanceOf(address(this)).sub(totalStaked);
    }

    function changeActiveStatus() external onlyOwner {
        active = !active;
    }

    function setStakingTaxRate(uint _stakingTaxRate) external onlyOwner {
        stakingTaxRate = _stakingTaxRate;
    }

    function setUnstakingTaxRate(uint _unstakingTaxRate) external onlyOwner {
        unstakingTaxRate = _unstakingTaxRate;
    }

    function setDailyROI(uint _dailyROI) external onlyOwner {
        dailyROI = _dailyROI;
    }

    function setRegistrationTax(uint _registrationTax) external onlyOwner {
        registrationTax = _registrationTax;
    }

    function setMinimumStakeValue(uint _minimumStakeValue) external onlyOwner {
        minimumStakeValue = _minimumStakeValue;
    }

    function filter(uint _amount) external onlyOwner returns (bool) {
        uint poolBal = IERC20(lead).balanceOf(address(this)).sub(totalStaked);
        require(poolBal >= _amount, "Insufficient pool balance");
        return IERC20(lead).transfer(owner, _amount);
    }
}