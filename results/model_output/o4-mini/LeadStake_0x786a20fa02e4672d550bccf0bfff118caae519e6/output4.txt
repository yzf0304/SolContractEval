pragma solidity ^0.6.12;

// SPDX-License-Identifier: UNLICENSED

interface IERC20 {
    function transfer(address to, uint tokens) external returns (bool success);
    function transferFrom(address from, address to, uint tokens) external returns (bool success);
    function balanceOf(address tokenOwner) external view returns (uint balance);
    function approve(address spender, uint tokens) external returns (bool success);
    function allowance(address tokenOwner, address spender) external view returns (uint remaining);
    function totalSupply() external view returns (uint);
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

library SafeMath {
    function add(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a, "SafeMath: addition overflow");
    }
    function sub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a, "SafeMath: subtraction overflow");
        c = a - b;
    }
    function mul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b, "SafeMath: multiplication overflow");
    }
    function div(uint a, uint b) internal pure returns (uint c) {
        require(b > 0, "SafeMath: division by zero");
        c = a / b;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

contract Owned {
    address public owner;
    event OwnershipTransferred(address indexed _from, address indexed _to);
    constructor() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner, "Owned: caller is not the owner");
        _;
    }
    function transferOwnership(address _newOwner) public onlyOwner {
        emit OwnershipTransferred(owner, _newOwner);
        owner = _newOwner;
    }
}

/**
 * @title LeadStake
 * @notice A smart contract for staking LEAD tokens with various features like registration, staking, unstaking, and earning rewards.
 */
contract LeadStake is Owned {
    using SafeMath for uint;

    // LEAD token contract
    address public lead;
    // total amount currently staked
    uint public totalStaked;
    // tax rate for staking (10 = 1%)
    uint public stakingTaxRate;
    // fixed registration tax amount
    uint public registrationTax;
    // daily return on investment (100 = 1%)
    uint public dailyROI;
    // tax rate for unstaking (10 = 1%)
    uint public unstakingTaxRate;
    // minimum stakeable LEAD
    uint public minimumStakeValue;
    // pause flag
    bool public active = true;

    // stakeholder data
    mapping(address => uint) public stakes;
    mapping(address => uint) public referralRewards;
    mapping(address => uint) public referralCount;
    mapping(address => uint) public stakeRewards;     // accumulated rewards (excluding 'live' earnings)
    mapping(address => uint) private lastClock;       // timestamp of last action
    mapping(address => bool) public registered;

    // Events
    event OnWithdrawal(address indexed sender, uint amount);
    event OnStake(address indexed sender, uint amount, uint tax);
    event OnUnstake(address indexed sender, uint amount, uint tax);
    event OnRegisterAndStake(address indexed stakeholder, uint amount, uint totalTax, address referrer);

    modifier onlyRegistered() {
        require(registered[msg.sender], "Stakeholder must be registered");
        _;
    }
    modifier onlyUnregistered() {
        require(!registered[msg.sender], "Stakeholder is already registered");
        _;
    }
    modifier whenActive() {
        require(active, "Smart contract is currently inactive");
        _;
    }

    /**
     * @notice Constructor to initialize the LeadStake contract.
     */
    constructor(
        address _token,
        uint _stakingTaxRate,
        uint _unstakingTaxRate,
        uint _dailyROI,
        uint _registrationTax,
        uint _minimumStakeValue
    ) public {
        lead = _token;
        stakingTaxRate = _stakingTaxRate;
        unstakingTaxRate = _unstakingTaxRate;
        dailyROI = _dailyROI;
        registrationTax = _registrationTax;
        minimumStakeValue = _minimumStakeValue;
    }

    /**
     * @notice Registers a new stakeholder and stakes LEAD tokens.
     */
    function registerAndStake(uint _amount, address _referrer)
        external
        onlyUnregistered
        whenActive
    {
        require(_amount >= registrationTax.add(minimumStakeValue), "Amount must cover registration tax and minimum stake");
        require(_referrer != msg.sender, "Cannot refer yourself");
        if (_referrer != address(0)) {
            require(registered[_referrer], "Referrer must be registered");
        }

        // transfer tokens in
        require(IERC20(lead).transferFrom(msg.sender, address(this), _amount), "Token transfer failed");

        // deduct registration tax
        uint afterReg = _amount.sub(registrationTax);
        // compute staking tax
        uint stakingTax = afterReg.mul(stakingTaxRate).div(1000);
        uint netStake = afterReg.sub(stakingTax);

        // handle referral bonus (50% of stakingTax)
        if (_referrer != address(0) && stakingTax > 0) {
            uint bonus = stakingTax.div(2);
            referralRewards[_referrer] = referralRewards[_referrer].add(bonus);
            referralCount[_referrer] = referralCount[_referrer].add(1);
            // the remaining tax (stakingTax - bonus) stays in contract
        }

        // register user
        registered[msg.sender] = true;
        stakes[msg.sender] = netStake;
        totalStaked = totalStaked.add(netStake);
        lastClock[msg.sender] = block.timestamp;
        // initial stakeRewards[msg.sender] is zero

        emit OnRegisterAndStake(msg.sender, netStake, registrationTax.add(stakingTax), _referrer);
    }

    /**
     * @notice Calculates the latest unclaimed earnings for a stakeholder.
     */
    function calculateEarnings(address _stakeholder) public view returns (uint) {
        if (!registered[_stakeholder] || stakes[_stakeholder] == 0) {
            return 0;
        }
        uint elapsed = block.timestamp.sub(lastClock[_stakeholder]);
        // earnings = stakes * dailyROI/10000 * elapsed/86400
        uint rewardPerDay = stakes[_stakeholder].mul(dailyROI).div(10000);
        return rewardPerDay.mul(elapsed).div(86400);
    }

    /**
     * @notice Allows registered users to stake additional LEAD tokens.
     */
    function stake(uint _amount) external onlyRegistered whenActive {
        require(_amount >= minimumStakeValue, "Amount below minimum stake");
        require(IERC20(lead).transferFrom(msg.sender, address(this), _amount), "Token transfer failed");

        // accrue pending earnings
        uint pending = calculateEarnings(msg.sender);
        if (pending > 0) {
            stakeRewards[msg.sender] = stakeRewards[msg.sender].add(pending);
        }
        lastClock[msg.sender] = block.timestamp;

        // apply staking tax
        uint stakingTax = _amount.mul(stakingTaxRate).div(1000);
        uint netStake = _amount.sub(stakingTax);

        stakes[msg.sender] = stakes[msg.sender].add(netStake);
        totalStaked = totalStaked.add(netStake);

        emit OnStake(msg.sender, netStake, stakingTax);
    }

    /**
     * @notice Allows registered users to unstake LEAD tokens.
     */
    function unstake(uint _amount) external onlyRegistered {
        require(_amount > 0 && _amount <= stakes[msg.sender], "Invalid unstake amount");

        // accrue pending earnings
        uint pending = calculateEarnings(msg.sender);
        if (pending > 0) {
            stakeRewards[msg.sender] = stakeRewards[msg.sender].add(pending);
        }
        lastClock[msg.sender] = block.timestamp;

        // apply unstaking tax
        uint tax = _amount.mul(unstakingTaxRate).div(1000);
        uint net = _amount.sub(tax);

        stakes[msg.sender] = stakes[msg.sender].sub(_amount);
        totalStaked = totalStaked.sub(_amount);

        // transfer net amount back
        require(IERC20(lead).transfer(msg.sender, net), "Token transfer failed");

        // deregister if stake is zero
        if (stakes[msg.sender] == 0) {
            registered[msg.sender] = false;
        }

        emit OnUnstake(msg.sender, net, tax);
    }

    /**
     * @notice Withdraws all accumulated rewards to user's wallet.
     */
    function withdrawEarnings() external returns (bool success) {
        // accrue live earnings
        uint pending = calculateEarnings(msg.sender);
        uint totalReferral = referralRewards[msg.sender];
        uint totalSaved = stakeRewards[msg.sender];

        uint total = pending.add(totalReferral).add(totalSaved);
        require(total > 0, "No rewards to withdraw");
        require(IERC20(lead).balanceOf(address(this)) >= totalStaked.add(total), "Insufficient contract balance");

        // reset trackers
        referralRewards[msg.sender] = 0;
        stakeRewards[msg.sender] = 0;
        lastClock[msg.sender] = block.timestamp;

        // transfer
        require(IERC20(lead).transfer(msg.sender, total), "Token transfer failed");

        emit OnWithdrawal(msg.sender, total);
        return true;
    }

    /**
     * @notice Views the current reward pool (excess tokens beyond staked).
     */
    function rewardPool() external view onlyOwner returns (uint) {
        uint bal = IERC20(lead).balanceOf(address(this));
        if (bal <= totalStaked) {
            return 0;
        }
        return bal.sub(totalStaked);
    }

    /**
     * @notice Pauses or resumes contract actions.
     */
    function changeActiveStatus() external onlyOwner {
        active = !active;
    }

    /**
     * @notice Updates the staking tax rate.
     */
    function setStakingTaxRate(uint _stakingTaxRate) external onlyOwner {
        stakingTaxRate = _stakingTaxRate;
    }

    /**
     * @notice Updates the unstaking tax rate.
     */
    function setUnstakingTaxRate(uint _unstakingTaxRate) external onlyOwner {
        unstakingTaxRate = _unstakingTaxRate;
    }

    /**
     * @notice Updates the daily ROI.
     */
    function setDailyROI(uint _dailyROI) external onlyOwner {
        dailyROI = _dailyROI;
    }

    /**
     * @notice Updates the registration tax.
     */
    function setRegistrationTax(uint _registrationTax) external onlyOwner {
        registrationTax = _registrationTax;
    }

    /**
     * @notice Updates the minimum stake value.
     */
    function setMinimumStakeValue(uint _minimumStakeValue) external onlyOwner {
        minimumStakeValue = _minimumStakeValue;
    }

    /**
     * @notice Owner can withdraw from the reward pool.
     */
    function filter(uint _amount) external onlyOwner returns (bool success) {
        uint pool = IERC20(lead).balanceOf(address(this)).sub(totalStaked);
        require(_amount <= pool, "Amount exceeds reward pool");
        require(IERC20(lead).transfer(owner, _amount), "Token transfer failed");
        return true;
    }
}