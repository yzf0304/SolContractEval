```solidity
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address _owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function increaseAllowance(address spender, uint256 addedValue) external;

    function decreaseAllowance(address spender, uint256 subtractedValue) external;

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
}

interface contract2 {
    function claimRewards(address user) external returns (bool);
}

interface MCHstakingInterface {
    function stakingStats(address user)
        external
        view
        returns (uint256 amount, uint256 stakingBlock);

    function totalStaked() external view returns (uint256);

    function showBlackUser(address user) external view returns (bool);

    function allowance(address user) external view returns (bool);

    function transferOwnership(address to) external;

    function giveAllowence(address user) external;

    function removeAllowence(address user) external;

    function addToBlackList(address user) external;

    function removeFromBlackList(address user) external;

    function stakeMCH(uint256 amount) external;

    function unstake(address user, uint256 amount) external;

    function refreshBlock(address user) external;

    function setData(
        address user,
        uint256 staked,
        uint256 stakingBlock,
        uint256 stakedMCH
    ) external;

    function transferMCH(address to, uint256 amount) external;

    function emergencyWithdraw(uint256 amount) external;

    event Stake(address indexed staker, uint256 indexed amount);
}

/**
 * @title MCHstaking
 * @notice This contract allows users to stake MCH tokens and provides functionalities for managing staking, blacklisting, and allowances.
 * @dev The contract is designed to interact with an MCH token (ERC20) and a secondary contract (MCF). It also includes owner-only functions for management.
 */
contract MCHstaking is MCHstakingInterface {
    address private _owner;
    mapping(address => bool) private _allowence;
    IERC20 private MCH;
    contract2 private MCF;

    mapping(address => uint256) private _staking;
    mapping(address => uint256) private _block;
    uint256 private _totalStaked;
    mapping(address => bool) private _blackListed;

    modifier onlyOwner() {
        require(msg.sender == _owner, "MCHstaking: caller is not the owner");
        _;
    }

    modifier onlyAllowed() {
        require(
            _allowence[msg.sender],
            "MCHstaking: caller does not have allowance"
        );
        _;
    }

    constructor(address MCHtoken) {
        _owner = msg.sender;
        MCH = IERC20(MCHtoken);
        _allowence[msg.sender] = true;
    }

    /// @notice Sets the MCF contract address.
    /// @dev Only the contract owner can call this function.
    function setMCFcontract(address contractAddress) external onlyOwner {
        MCF = contract2(contractAddress);
    }

    /// @notice Returns the staking statistics of a user.
    /// @param user The address of the user.
    /// @return amount The amount of MCH staked by the user.
    /// @return stakingBlock The block number at which the user last staked.
    function stakingStats(address user)
        external
        view
        override
        returns (uint256 amount, uint256 stakingBlock)
    {
        amount = _staking[user];
        stakingBlock = _block[user];
    }

    /// @notice Returns the total amount of MCH staked in the contract.
    /// @return The total amount of MCH staked.
    function totalStaked() external view override returns (uint256) {
        return _totalStaked;
    }

    /// @notice Checks if a user is blacklisted.
    /// @dev Only addresses with allowance can call this function.
    /// @param user The address of the user.
    /// @return A boolean indicating whether the user is blacklisted.
    function showBlackUser(address user)
        external
        view
        override
        onlyAllowed
        returns (bool)
    {
        return _blackListed[user];
    }

    /// @notice Checks if a user has allowance.
    /// @dev Only addresses with allowance can call this function.
    /// @param user The address of the user.
    /// @return A boolean indicating whether the user has allowance.
    function allowance(address user)
        external
        view
        override
        onlyAllowed
        returns (bool)
    {
        return _allowence[user];
    }

    /// @notice Transfers ownership of the contract to a new address.
    /// @dev Only the current owner can call this function.
    /// @param to The address of the new owner.
    function transferOwnership(address to) external override onlyOwner {
        require(to != address(0), "MCHstaking: zero address");
        _owner = to;
    }

    /// @notice Grants allowance to a user.
    /// @dev Only the contract owner can call this function.
    /// @param user The address of the user to grant allowance to.
    function giveAllowence(address user) external override onlyOwner {
        _allowence[user] = true;
    }

    /// @notice Revokes allowance from a user.
    /// @dev Only the contract owner can call this function.
    /// @param user The address of the user to revoke allowance from.
    function removeAllowence(address user) external override onlyOwner {
        _allowence[user] = false;
    }

    /// @notice Adds a user to the blacklist.
    /// @dev Only the contract owner can call this function.
    /// @param user The address of the user to add to the blacklist.
    function addToBlackList(address user) external override onlyOwner {
        _blackListed[user] = true;
    }

    /// @notice Removes a user from the blacklist.
    /// @dev Only the contract owner can call this function.
    /// @param user The address of the user to remove from the blacklist.
    function removeFromBlackList(address user) external override onlyOwner {
        _blackListed[user] = false;
    }

    /// @notice Allows a user to stake MCH tokens.
    /// @dev Transfers MCH tokens and updates staking data.
    /// @param amount The amount of MCH to stake.
    function stakeMCH(uint256 amount) external override {
        require(!_blackListed[msg.sender], "MCHstaking: blacklisted");
        require(amount > 0, "MCHstaking: zero amount");

        // settle rewards first if MCF is set
        if (address(MCF) != address(0)) {
            MCF.claimRewards(msg.sender);
        }

        // transfer tokens in
        bool transferred = MCH.transferFrom(
            msg.sender,
            address(this),
            amount
        );
        require(transferred, "MCHstaking: transferFrom failed");

        // update stake data
        _staking[msg.sender] += amount;
        _block[msg.sender] = block.number;
        _totalStaked += amount;

        emit Stake(msg.sender, amount);
    }

    /// @notice Allows a user to unstake MCH tokens.
    /// @dev Only addresses with allowance can call this function.
    /// @param user The address of the user to unstake.
    /// @param amount The amount of MCH to unstake.
    function unstake(address user, uint256 amount) external override onlyAllowed {
        require(amount > 0, "MCHstaking: zero amount");
        require(_staking[user] >= amount, "MCHstaking: insufficient stake");

        // settle rewards
        if (address(MCF) != address(0)) {
            MCF.claimRewards(user);
        }

        // update stake data
        _staking[user] -= amount;
        _totalStaked -= amount;
        _block[user] = block.number;

        // transfer tokens out
        bool sent = MCH.transfer(user, amount);
        require(sent, "MCHstaking: transfer failed");
    }

    /// @notice Refreshes the block number for a user's staking.
    /// @dev Only addresses with allowance can call this function.
    /// @param user The address of the user.
    function refreshBlock(address user) external override onlyAllowed {
        _block[user] = block.number;
    }

    /// @notice Sets the staking data for a user.
    /// @dev Only addresses with allowance can call this function.
    /// @param user The address of the user.
    /// @param staked The amount of MCH staked by the user.
    /// @param stakingBlock The block number at which the user last staked.
    /// @param stakedMCH The total amount of MCH staked in the contract.
    function setData(
        address user,
        uint256 staked,
        uint256 stakingBlock,
        uint256 stakedMCH
    ) external override onlyAllowed {
        _staking[user] = staked;
        _block[user] = stakingBlock;
        _totalStaked = stakedMCH;
    }

    /// @notice Transfers MCH tokens to another address.
    /// @dev Only addresses with allowance can call this function.
    /// @param to The address to transfer the MCH tokens to.
    /// @param amount The amount of MCH to transfer.
    function transferMCH(address to, uint256 amount)
        external
        override
        onlyAllowed
    {
        require(amount > 0, "MCHstaking: zero amount");
        bool sent = MCH.transfer(to, amount);
        require(sent, "MCHstaking: transfer failed");
    }

    /// @notice Allows the owner to withdraw MCH tokens in case of an emergency.
    /// @dev Only the contract owner can call this function.
    /// @param amount The amount of MCH to withdraw.
    function emergencyWithdraw(uint256 amount)
        external
        override
        onlyOwner
    {
        require(amount > 0, "MCHstaking: zero amount");
        bool sent = MCH.transfer(_owner, amount);
        require(sent, "MCHstaking: transfer failed");
    }
}
```