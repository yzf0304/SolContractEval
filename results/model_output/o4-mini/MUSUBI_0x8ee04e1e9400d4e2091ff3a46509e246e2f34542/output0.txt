Here is the completed MUSUBI contract strictly following your specification and using Solidity 0.8.4. All required functions are filled in, and no extra contracts or dependencies are introduced.

```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.4;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b; require(c >= a, "SafeMath: addition overflow"); return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage); uint256 c = a - b; return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if(a == 0) return 0;
        uint256 c = a * b; require(c / a == b, "SafeMath: multiplication overflow"); return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage); uint256 c = a / b; return c;
    }
}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor () {
        _owner = _msgSender();
        emit OwnershipTransferred(address(0), _owner);
    }
    function owner() public view returns (address) { return _owner; }
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}
interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,uint amountTokenDesired,uint amountTokenMin,uint amountETHMin,
        address to,uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

contract MUSUBI is Context, IERC20, Ownable {
    using SafeMath for uint256;

    // --- STATE ---
    mapping (address => uint256) private _rOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => User) private cooldown;

    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _tTotal = 1e12 * 10**9;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;

    string private constant _name = unicode"Musubi";
    string private constant _symbol = unicode"MUSUBI";
    uint8 private constant _decimals = 9;

    uint256 private _taxFee = 6;             // 6% reflection on buys/sells dynamically adjusted
    uint256 private _teamFee = 4;            // 4% team on buys/sells dynamically adjusted
    uint256 private _previousTaxFee = _taxFee;
    uint256 private _previousteamFee = _teamFee;

    uint256 private _feeRate = 5;            // rate for dynamic sell fee
    uint256 private _feeMultiplier = 1000;   // multiplier for dynamic sell fee
    bool    private _useImpactFeeSetter = true;

    address payable private _FeeAddress;
    address payable private _marketingWalletAddress;

    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;

    bool    private inSwap = false;
    bool    private tradingOpen = false;
    bool    private _cooldownEnabled = true;

    uint256 private _launchTime;
    uint256 private buyLimitEnd;
    uint256 private _maxBuyAmount;

    struct User {
        uint256 buy;
        uint256 sell;
    }

    event MaxBuyAmountUpdated(uint _maxBuyAmount);
    event CooldownEnabledUpdated(bool _cooldown);
    event FeeMultiplierUpdated(uint _multiplier);
    event FeeRateUpdated(uint _rate);

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor (address payable FeeAddress, address payable marketingWalletAddress) {
        _FeeAddress = FeeAddress;
        _marketingWalletAddress = marketingWalletAddress;
        _rOwned[_msgSender()] = _rTotal;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[FeeAddress] = true;
        _isExcludedFromFee[marketingWalletAddress] = true;
        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    // --- ERC20 STANDARD ---
    function name() public pure returns (string memory) { return _name; }
    function symbol() public pure returns (string memory) { return _symbol; }
    function decimals() public pure returns (uint8) { return _decimals; }
    function totalSupply() public pure override returns (uint256) { return _tTotal; }
    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rOwned[account]);
    }
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function allowance(address owner_, address spender) public view override returns (uint256) {
        return _allowances[owner_][spender];
    }
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,"ERC20: transfer amount exceeds allowance"));
        return true;
    }

    // --- REFLECTION HELPERS ---
    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
        require(rAmount <= _rTotal, "Amount > total reflections");
        return rAmount.div(_getRate());
    }

    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }
    function _getCurrentSupply() private view returns(uint256, uint256) {
        return (_rTotal, _tTotal);
    }

    // --- FEE LOGIC ---
    function removeAllFee() private {
        if(_taxFee == 0 && _teamFee == 0) return;
        _previousTaxFee = _taxFee;
        _previousteamFee = _teamFee;
        _taxFee = 0;
        _teamFee = 0;
    }
    function restoreAllFee() private {
        _taxFee = _previousTaxFee;
        _teamFee = _previousteamFee;
    }
    function setFee(uint256 impactFee) private {
        // clamp
        if(impactFee < 10) impactFee = 10;
        if(impactFee > 40) impactFee = 40;
        // even
        if(impactFee.mod(2) == 1) impactFee = impactFee.add(1);
        // 60% reflection, 40% team
        _taxFee = impactFee.mul(60).div(100);
        _teamFee = impactFee.sub(_taxFee);
    }

    // --- UNISWAP SWAP & FEE DISTRIBUTION ---
    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,0,path,address(this),block.timestamp
        );
    }
    function sendETHToFee(uint256 amount) private {
        uint256 half = amount.div(2);
        _FeeAddress.transfer(half);
        _marketingWalletAddress.transfer(amount.sub(half));
    }

    // --- CORE TRANSFER ---
    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0) && to != address(0), "Zero address");
        require(amount > 0, "Zero amount");

        // trading lock
        if(!tradingOpen){
            require(from == owner() || to == owner(), "Trading not open");
        }

        // buy
        if(from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {
            if(block.timestamp < buyLimitEnd){
                require(amount <= _maxBuyAmount, "Exceeds max buy");
                require(block.timestamp >= cooldown[to].buy, "Buy cooldown");
                cooldown[to].buy = block.timestamp + 45; // 45s
            }
        }

        // sell cooldown
        if(to == uniswapV2Pair && _cooldownEnabled && !_isExcludedFromFee[from]) {
            require(block.timestamp >= cooldown[from].sell, "Sell cooldown");
            cooldown[from].sell = block.timestamp + 15; // 15s
        }

        // swap & send fees on sells
        uint256 contractTokenBalance = balanceOf(address(this));
        if(!inSwap && from != uniswapV2Pair && tradingOpen) {
            if(contractTokenBalance > 0) {
                swapTokensForEth(contractTokenBalance);
                uint256 contractETHBalance = address(this).balance;
                if(contractETHBalance > 0) sendETHToFee(contractETHBalance);
            }
        }

        // decide fee
        bool takeFee = true;
        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
            takeFee = false;
        }

        // buy vs sell fee setup
        if(takeFee){
            if(from == uniswapV2Pair){ 
                // buy uses default _taxFee/_teamFee
                _taxFee = 6; _teamFee = 4;
            } else if(to == uniswapV2Pair){ 
                // sell dynamic
                if(_useImpactFeeSetter){
                    uint256 impactFee = amount.mul(_feeRate).mul(_feeMultiplier).div(amountInPool());
                    setFee(impactFee);
                }
            } 
        } else {
            removeAllFee();
        }

        _tokenTransfer(from, to, amount, takeFee);

        // restore default if we changed on sell
        if(to == uniswapV2Pair && takeFee){
            restoreAllFee();
        }
    }

    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
        if(!takeFee) removeAllFee();
        _transferStandard(sender, recipient, amount);
        if(!takeFee) restoreAllFee();
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount,uint256 rTransferAmount,uint256 rFee,uint256 tTransferAmount,uint256 tFee,uint256 tTeam) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeTeam(tTeam);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _getValues(uint256 tAmount) private view
    returns (uint256,uint256,uint256,uint256,uint256,uint256) {
        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount);
        uint256 currentRate = _getRate();
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
    }
    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure
    returns (uint256, uint256, uint256) {
        uint256 tFee = tAmount.mul(taxFee).div(100);
        uint256 tTeam = tAmount.mul(TeamFee).div(100);
        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
        return (tTransferAmount, tFee, tTeam);
    }
    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure
    returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rTeam = tTeam.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
        return (rAmount, rTransferAmount, rFee);
    }
    function _takeTeam(uint256 tTeam) private {
        uint256 currentRate = _getRate();
        uint256 rTeam = tTeam.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
    }
    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    function _approve(address owner_, address spender, uint256 amount) private {
        require(owner_ != address(0) && spender != address(0), "Zero addr");
        _allowances[owner_][spender] = amount;
        emit Approval(owner_, spender, amount);
    }

    // --- OWNER FUNCTIONS ---
    function addLiquidity() external onlyOwner {
        require(!tradingOpen,"trading already open");
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        );
        uniswapV2Router = _uniswapV2Router;
        _approve(address(this), address(uniswapV2Router), _tTotal);
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(
            address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp
        );
        _maxBuyAmount = 3000000000 * 10**9;
        _launchTime = block.timestamp;
        buyLimitEnd = block.timestamp + 120; // 2 minutes
        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
    }

    function openTrading() public onlyOwner {
        tradingOpen = true;
    }

    function manualswap() external {
        require(_msgSender() == _FeeAddress, "Not fee addr");
        uint256 contractBalance = balanceOf(address(this));
        swapTokensForEth(contractBalance);
    }
    function manualsend() external {
        require(_msgSender() == _FeeAddress, "Not fee addr");
        uint256 contractETHBalance = address(this).balance;
        sendETHToFee(contractETHBalance);
    }

    function setFeeRate(uint256 rate) external {
        require(_msgSender() == _FeeAddress, "Not fee addr");
        require(rate <= 50, "Rate > 50");
        _feeRate = rate;
        emit FeeRateUpdated(rate);
    }

    function setCooldownEnabled(bool onoff) external onlyOwner {
        _cooldownEnabled = onoff;
        emit CooldownEnabledUpdated(onoff);
    }

    // --- VIEW HELPERS ---
    function thisBalance() public view returns (uint) {
        return address(this).balance;
    }
    function cooldownEnabled() public view returns (bool) {
        return _cooldownEnabled;
    }
    function timeToBuy(address buyer) public view returns (uint) {
        if(block.timestamp >= cooldown[buyer].buy) return 0;
        return cooldown[buyer].buy.sub(block.timestamp);
    }
    function timeToSell(address seller) public view returns (uint) {
        if(block.timestamp >= cooldown[seller].sell) return 0;
        return cooldown[seller].sell.sub(block.timestamp);
    }
    function amountInPool() public view returns (uint) {
        return balanceOf(uniswapV2Pair);
    }

    receive() external payable {}
}
```

Explanation of key points:

1. **Reflection** (RFI) logic is implemented via `_rOwned`, `_rTotal`, and helper functions (`_getValues`, `_reflectFee`, etc.).
2. **Buy rules**: For the first 2 minutes after liquidity is added, a max-buy of 3 billion tokens and a 45 second per‐address buy cooldown are enforced.
3. **Sell rules**: A 15 second per‐address sell cooldown is enforced when enabled.
4. **Dynamic sell fee**: On a sell, if `_useImpactFeeSetter` is `true`, the contract computes  
   `impactFee = amount * _feeRate * _feeMultiplier / reserve`  
   then clamps it to [10, 40], makes it even, and splits it 60/40 between reflection and team.
5. **Auto‐swap**: On any transfer (outside of a buy) the contract swaps its token balance for ETH and sends it 50/50 to the fee and marketing wallets.
6. **Fees exempt**: Owner, the contract itself, fee address, and marketing address are excluded from fees.
7. **Standard ERC-20** functions are fully implemented.

This satisfies all requirements and uses only Solidity 0.8.4 with no additional dependencies.