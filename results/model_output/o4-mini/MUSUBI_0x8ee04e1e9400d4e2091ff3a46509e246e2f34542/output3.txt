```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.4;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }
}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor () {
        _owner = _msgSender();
        emit OwnershipTransferred(address(0), _owner);
    }
    function owner() public view returns (address) { return _owner; }
    modifier onlyOwner() {
        require(_msgSender() == _owner, "Ownable: caller is not the owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}
interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,uint amountTokenDesired,uint amountTokenMin,uint amountETHMin,address to,uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

contract MUSUBI is Context, IERC20, Ownable {
    using SafeMath for uint256;

    mapping (address => uint256) private _rOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => User) private cooldown;

    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _tTotal = 1e12 * 10**9;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;

    string private constant _name = unicode"Musubi";
    string private constant _symbol = unicode"MUSUBI";
    uint8  private constant _decimals = 9;

    uint256 private _taxFee        = 6;  // default buy tax
    uint256 private _teamFee       = 4;  // default buy team
    uint256 private _feeRate       = 5;  // used in dynamic sell calculation
    uint256 private _feeMultiplier = 1000;
    uint256 private _launchTime;
    uint256 private _previousTaxFee  = _taxFee;
    uint256 private _previousteamFee = _teamFee;
    uint256 private _maxBuyAmount;
    uint256 private buyLimitEnd;

    address payable private _FeeAddress;
    address payable private _marketingWalletAddress;

    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;

    bool private tradingOpen       = false;
    bool private _cooldownEnabled  = true;
    bool private inSwap            = false;
    bool private _useImpactFeeSetter = true;

    struct User {
        uint256 buy;
        uint256 sell;
        bool    exists;
    }

    event MaxBuyAmountUpdated(uint256 _maxBuyAmount);
    event CooldownEnabledUpdated(bool _cooldown);
    event FeeMultiplierUpdated(uint256 _multiplier);
    event FeeRateUpdated(uint256 _rate);

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor(address payable FeeAddress, address payable marketingWalletAddress) {
        _FeeAddress              = FeeAddress;
        _marketingWalletAddress  = marketingWalletAddress;
        _rOwned[_msgSender()]    = _rTotal;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[FeeAddress] = true;
        _isExcludedFromFee[marketingWalletAddress] = true;
        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory)     { return _name; }
    function symbol() public pure returns (string memory)   { return _symbol; }
    function decimals() public pure returns (uint8)         { return _decimals; }
    function totalSupply() public pure override returns (uint256) { return _tTotal; }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner_, address spender) public view override returns (uint256) {
        return _allowances[owner_][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
        require(rAmount <= _rTotal, "Amount > total reflections");
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function removeAllFee() private {
        if(_taxFee == 0 && _teamFee == 0) return;
        _previousTaxFee  = _taxFee;
        _previousteamFee = _teamFee;
        _taxFee  = 0;
        _teamFee = 0;
    }

    function restoreAllFee() private {
        _taxFee  = _previousTaxFee;
        _teamFee = _previousteamFee;
    }

    function setFee(uint256 impactFee) private {
        // clamp between 10 and 40
        if(impactFee < 10) impactFee = 10;
        if(impactFee > 40) impactFee = 40;
        // make even
        if(impactFee % 2 == 1) impactFee = impactFee + 1;
        // tax = 60%, team = 40%
        _taxFee  = impactFee.mul(60).div(100);
        _teamFee = impactFee.sub(_taxFee);
    }

    function _approve(address owner_, address spender, uint256 amount) private {
        require(owner_ != address(0) && spender != address(0), "Zero address");
        _allowances[owner_][spender] = amount;
        emit Approval(owner_, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0) && to != address(0), "Zero address");
        require(amount > 0, "Zero amount");
        if(!tradingOpen) {
            require(from == owner() || to == owner(), "Trading not open");
        }

        bool takeFee = true;
        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
            takeFee = false;
        }

        // swap and send fee if selling and contract has tokens
        if(!inSwap && tradingOpen && to == uniswapV2Pair && balanceOf(address(this)) > 0) {
            uint256 contractTokenBalance = balanceOf(address(this));
            swapTokensForEth(contractTokenBalance);
            uint256 contractETH = address(this).balance;
            if(contractETH > 0) sendETHToFee(contractETH);
        }

        // BUY
        if(from == uniswapV2Pair && !_isExcludedFromFee[to]) {
            // cooldown and max buy in first two minutes
            if(_cooldownEnabled && block.timestamp < buyLimitEnd) {
                require(amount <= _maxBuyAmount, "Exceeds max buy");
                if(!cooldown[to].exists) {
                    cooldown[to].exists = true;
                }
                require(block.timestamp > cooldown[to].buy, "Buy cooldown");
                cooldown[to].buy = block.timestamp + 45; // 45s buy cooldown
            }
            // 15s sell cooldown after buy
            if(_cooldownEnabled) {
                cooldown[to].sell = block.timestamp + 15;
            }
            // default buy fees
            _taxFee  = _previousTaxFee;
            _teamFee = _previousteamFee;
        }

        // SELL
        if(to == uniswapV2Pair && !_isExcludedFromFee[from]) {
            if(_cooldownEnabled) {
                require(block.timestamp > cooldown[from].sell, "Sell cooldown");
            }
            if(_useImpactFeeSetter) {
                uint256 poolTokens = amountInPool();
                uint256 impactFee = amount.mul(100).mul(_feeRate).div(poolTokens).div(_feeMultiplier);
                setFee(impactFee);
            } else {
                restoreAllFee();
            }
        }

        _tokenTransfer(from, to, amount, takeFee);
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,0,path,address(this),block.timestamp
        );
    }

    function sendETHToFee(uint256 amount) private {
        uint256 half = amount.div(2);
        _FeeAddress.transfer(half);
        _marketingWalletAddress.transfer(amount.sub(half));
    }

    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
        if(!takeFee) removeAllFee();
        _transferStandard(sender, recipient, amount);
        if(!takeFee) restoreAllFee();
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount,uint256 rTransferAmount,uint256 rFee,uint256 tTransferAmount,uint256 tFee,uint256 tTeam) = _getValues(tAmount);
        _rOwned[sender]    = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeTeam(tTeam);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _getValues(uint256 tAmount) private view returns (uint256,uint256,uint256,uint256,uint256,uint256) {
        (uint256 tTransfer, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);
        uint256 currentRate = _getRate();
        (uint256 rAmount, uint256 rTransfer, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
        return (rAmount, rTransfer, rFee, tTransfer, tFee, tTeam);
    }

    function _getTValues(uint256 tAmount, uint256 taxFee_, uint256 teamFee_) private pure returns (uint256,uint256,uint256) {
        uint256 tFee  = tAmount.mul(taxFee_).div(100);
        uint256 tTeam = tAmount.mul(teamFee_).div(100);
        uint256 tTransfer = tAmount.sub(tFee).sub(tTeam);
        return (tTransfer, tFee, tTeam);
    }

    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256,uint256,uint256) {
        uint256 rAmount    = tAmount.mul(currentRate);
        uint256 rFee       = tFee.mul(currentRate);
        uint256 rTeam      = tTeam.mul(currentRate);
        uint256 rTransfer  = rAmount.sub(rFee).sub(rTeam);
        return (rAmount, rTransfer, rFee);
    }

    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256,uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function _takeTeam(uint256 tTeam) private {
        uint256 currentRate = _getRate();
        uint256 rTeam = tTeam.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
    }

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal    = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    receive() external payable {}

    function addLiquidity() external onlyOwner {
        require(!tradingOpen, "Trading already open");
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        );
        uniswapV2Router = _uniswapV2Router;
        _approve(address(this), address(uniswapV2Router), _tTotal);
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(
            address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp
        );
        _maxBuyAmount = 3000000000 * 10**9;
        _launchTime   = block.timestamp;
        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
    }

    function openTrading() public onlyOwner {
        tradingOpen = true;
        buyLimitEnd = block.timestamp + 120;
    }

    function manualswap() external {
        require(_msgSender() == _FeeAddress, "Not fee address");
        uint256 contractBalance = balanceOf(address(this));
        swapTokensForEth(contractBalance);
    }

    function manualsend() external {
        require(_msgSender() == _FeeAddress, "Not fee address");
        uint256 contractETH = address(this).balance;
        sendETHToFee(contractETH);
    }

    function setFeeRate(uint256 rate) external {
        require(_msgSender() == _FeeAddress, "Not fee address");
        require(rate <= 50, "Rate >50");
        _feeRate = rate;
        emit FeeRateUpdated(rate);
    }

    function setCooldownEnabled(bool onoff) external onlyOwner {
        _cooldownEnabled = onoff;
        emit CooldownEnabledUpdated(onoff);
    }

    function thisBalance() public view returns (uint256) {
        return address(this).balance;
    }

    function cooldownEnabled() public view returns (bool) {
        return _cooldownEnabled;
    }

    function timeToBuy(address buyer) public view returns (uint256) {
        if(!cooldown[buyer].exists || block.timestamp > cooldown[buyer].buy) return 0;
        return cooldown[buyer].buy.sub(block.timestamp);
    }

    function timeToSell(address seller) public view returns (uint256) {
        if(!cooldown[seller].exists || block.timestamp > cooldown[seller].sell) return 0;
        return cooldown[seller].sell.sub(block.timestamp);
    }

    function amountInPool() public view returns (uint256) {
        return balanceOf(uniswapV2Pair);
    }
}
```