pragma solidity 0.6.11;

contract MerkleDistributor is IMerkleDistributor {
    // Address of the token distributed by this contract.
    address public immutable override token;
    // Merkle root of the tree containing account balances available to claim.
    bytes32 public immutable override merkleRoot;

    // This is a packed array of booleans to track claimed indices.
    mapping(uint256 => uint256) private claimedBitMap;

    /**
     * @notice Initializes the contract with the token address and the Merkle root.
     * @param token_ The address of the token to be distributed.
     * @param merkleRoot_ The root of the Merkle tree used for verifying claims.
     */
    constructor(address token_, bytes32 merkleRoot_) public {
        token = token_;
        merkleRoot = merkleRoot_;
    }

    /**
     * @notice Checks if a particular index has already been claimed.
     * @param index The index in the Merkle tree to check.
     * @return True if the index has been claimed, false otherwise.
     */
    function isClaimed(uint256 index) public view override returns (bool) {
        uint256 wordIndex = index >> 8;            // divide by 256
        uint256 bitIndex = index & 0xff;           // mod 256
        uint256 word = claimedBitMap[wordIndex];
        uint256 mask = (1 << bitIndex);
        return (word & mask) != 0;
    }

    /**
     * @notice Marks a particular index as claimed.
     * @param index The index in the Merkle tree to mark as claimed.
     */
    function _setClaimed(uint256 index) private {
        uint256 wordIndex = index >> 8;
        uint256 bitIndex = index & 0xff;
        claimedBitMap[wordIndex] = claimedBitMap[wordIndex] | (1 << bitIndex);
    }

    /**
     * @notice Allows a user to claim their tokens by providing a valid Merkle proof.
     * @param index The index in the Merkle tree corresponding to the claim.
     * @param account The address of the account claiming the tokens.
     * @param amount The amount of tokens to be claimed.
     * @param merkleProof The Merkle proof to verify the claim.
     */
    function claim(
        uint256 index,
        address account,
        uint256 amount,
        bytes32[] calldata merkleProof
    ) external override {
        // Ensure this index has not been claimed yet
        require(!isClaimed(index), "MerkleDistributor: Drop already claimed");

        // Compute the leaf node to verify
        bytes32 node = keccak256(abi.encodePacked(index, account, amount));
        // Verify the proof against the stored root
        require(
            MerkleProof.verify(merkleProof, merkleRoot, node),
            "MerkleDistributor: Invalid proof"
        );

        // Mark it claimed and send the token
        _setClaimed(index);

        require(
            IERC20(token).transfer(account, amount),
            "MerkleDistributor: Transfer failed"
        );

        emit Claimed(index, account, amount);
    }
}