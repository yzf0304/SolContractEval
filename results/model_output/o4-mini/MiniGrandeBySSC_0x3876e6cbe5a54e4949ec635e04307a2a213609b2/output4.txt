pragma solidity ^0.8.7;

contract MiniGrandeBySSC is Ownable, ERC721A, ReentrancyGuard {
    using MerkleProof for bytes32[];

    uint256 private _publicPrice = 0.007 ether;
    uint256 private _presalePrice = 0 ether;
    uint256 private _maxPurchaseDuringWhitelist = 1;
    uint256 private _maxPurchaseDuringSale = 1;
    uint256 private _maxPerTransaction = 1;
    uint256 private _maxMint = 2000;
    uint32  private _maxWhitelistMints = 200;
    address private _team = 0x6FEf5A781A35d158096736dBc561F298ef47B86c;

    bytes32 public merkleRoot = 0x8daf3296866531d8a9a23e382da52d37f29af1f17e5e9ed8a403c896de82be5f;
    mapping(address => uint256) public presaleAddressMintCount;
    mapping(address => uint256) public saleAddressMintCount;
    uint32  public  whitelistMinted = 0;

    bool public isPaused = false;
    bool public isPublicMint = false;
    bool public isWhitelistMint = false;

    string private _tokenURI = "ipfs://QmZzPHpPmtBHACKpu4MQ6XH2mNXJcJgRhdv1KYpnHqQ6q9/";

    constructor()
        ERC721A("MiniGrandeBySecretSocietyClub", "MINIBYSSC", _maxPerTransaction, _maxMint)
    {}

    function setMaxWhitelistMints(uint32 val) external onlyOwner {
        _maxWhitelistMints = val;
    }

    function setMaxMintPerWalletWhitelist(uint256 val) external onlyOwner {
        _maxPurchaseDuringWhitelist = val;
    }

    function setMaxMintPerWalletSale(uint256 val) external onlyOwner {
        _maxPurchaseDuringSale = val;
    }

    function checkIsPublicMint() external view returns (bool) {
        return isPublicMint;
    }

    function pause() external onlyOwner {
        isPaused = true;
    }

    function unpause() external onlyOwner {
        isPaused = false;
    }

    function setTeam(address team) external onlyOwner {
        _team = team;
    }

    function getPublicPrice() external view returns (uint256) {
        return _publicPrice;
    }

    function setPublicMint(bool value) external onlyOwner {
        isPublicMint = value;
    }

    function setWhitelistMint(bool value) external onlyOwner {
        isWhitelistMint = value;
    }

    function setPresalePrice(uint256 price) external onlyOwner {
        _presalePrice = price;
    }

    function setPublicPrice(uint256 price) external onlyOwner {
        _publicPrice = price;
    }

    function setCollectionSize(uint256 size) external onlyOwner {
        _maxMint = size;
    }

    modifier mintGuard(uint256 tokenCount) {
        require(!isPaused, "Paused!");
        require(tokenCount > 0 && tokenCount <= _maxPerTransaction, "Max one per transaction");
        require(msg.sender == tx.origin, "Sender not origin");
        uint256 cost = isPublicMint ? _publicPrice * tokenCount : _presalePrice * tokenCount;
        require(cost <= msg.value, "Insufficient funds");
        require(totalSupply() + tokenCount <= _maxMint + 1, "Sold out!");
        _;
    }

    function mint(uint256 amount)
        external
        payable
        nonReentrant
        mintGuard(amount)
    {
        require(isPublicMint, "Public mint is not active");
        require(
            saleAddressMintCount[msg.sender] + amount <= _maxPurchaseDuringSale,
            "Exceeds max per wallet"
        );
        saleAddressMintCount[msg.sender] += amount;
        _safeMint(msg.sender, amount);
    }

    function mintPresale(bytes32[] calldata proof, uint256 amount)
        external
        payable
        nonReentrant
        mintGuard(amount)
    {
        require(isWhitelistMint, "Whitelist mint is not active");
        require(
            whitelistMinted + amount <= _maxWhitelistMints,
            "Exceeds max whitelist mints"
        );
        require(
            presaleAddressMintCount[msg.sender] + amount <= _maxPurchaseDuringWhitelist,
            "Exceeds max per wallet in whitelist"
        );
        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
        require(
            MerkleProof.verify(proof, merkleRoot, leaf),
            "Invalid Merkle Proof"
        );
        presaleAddressMintCount[msg.sender] += amount;
        whitelistMinted += uint32(amount);
        _safeMint(msg.sender, amount);
    }

    function setMaxBatchSize(uint256 val) external onlyOwner {
        maxBatchSize = val;
    }

    function cashout() external onlyOwner nonReentrant {
        uint256 balance = address(this).balance;
        require(balance > 0, "No balance");
        Address.sendValue(payable(_team), balance);
    }

    function setCashout(address addr)
        external
        onlyOwner
        returns (address)
    {
        _team = addr;
        return _team;
    }

    function devMint(uint32 qty) external onlyOwner {
        require(totalSupply() + qty <= _maxMint + 1, "Sold out!");
        _safeMint(msg.sender, qty);
    }

    function setMerkleRoot(bytes32 root) external onlyOwner {
        merkleRoot = root;
    }

    function setMaxMint(uint256 maxMint) external onlyOwner {
        _maxMint = maxMint;
    }

    function setBaseURI(string calldata baseURI) external onlyOwner {
        _tokenURI = baseURI;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _tokenURI;
    }
}