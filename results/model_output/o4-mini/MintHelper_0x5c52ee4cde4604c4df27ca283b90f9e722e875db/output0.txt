pragma solidity 0.5.10;

interface ERC20Interface {
    function totalSupply() external view returns (uint);
    function balanceOf(address tokenOwner) external view returns (uint balance);
    function allowance(address tokenOwner, address spender) external view returns (uint remaining);
    function transfer(address to, uint tokens) external returns (bool success);
    function approve(address spender, uint tokens) external returns (bool success);
    function transferFrom(address from, address to, uint tokens) external returns (bool success);
}

interface ERC918Interface {
    function totalSupply() external view returns (uint);
    function getMiningDifficulty() external view returns (uint);
    function getMiningTarget() external view returns (uint);
    function getMiningReward() external view returns (uint);
    function balanceOf(address tokenOwner) external view returns (uint balance);
    function mint(uint256 nonce, bytes32 challenge_digest) external returns (bool success);
    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);
}

library SafeMath {
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint a, uint b) internal pure returns (uint) {
        require(b <= a, "SafeMath: subtraction underflow");
        return a - b;
    }
    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }
        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint a, uint b) internal pure returns (uint) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }
}

contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () internal {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

/**
 * @notice This contract serves as a helper for minting tokens and managing token transfers.
 * @dev Inherits from OpenZeppelin's Ownable contract for access control.
 *      Uses SafeMath for arithmetic operations to prevent overflows/underflows.
 *      Implements a mapping to track successful payments by payment ID.
 */
contract MintHelper is Ownable {
    using SafeMath for uint;

    string public name;
    address public mintableToken;
    mapping(bytes32 => bool) private successfulPayments;

    constructor(address mToken, string memory mName) public {
        mintableToken = mToken;
        name = mName;
    }

    /**
     * @notice Allows the owner to set the mintable token address.
     * @dev Only the owner can call this function.
     * @param mToken The address of the mintable token.
     * @return A boolean indicating the success of the operation.
     */
    function setMintableToken(address mToken)
        public
        onlyOwner
        returns (bool)
    {
        mintableToken = mToken;
        return true;
    }

    /**
     * @notice Checks if a payment with a given ID was successful.
     * @param paymentId The unique identifier for the payment.
     * @return A boolean indicating whether the payment was successful.
     */
    function paymentSuccessful(bytes32 paymentId)
        public
        view
        returns (bool)
    {
        return successfulPayments[paymentId];
    }

    /**
     * @notice Proxies the minting of a token using the provided nonce and challenge digest.
     * @dev Calls the `mint` function on the `mintableToken` contract. Requires that the minting is successful.
     * @param nonce The nonce used in the minting process.
     * @param challenge_digest The challenge digest used in the minting process.
     * @return A boolean indicating the success of the minting operation.
     */
    function proxyMint(uint256 nonce, bytes32 challenge_digest)
        public
        returns (bool)
    {
        bool ok = ERC918Interface(mintableToken).mint(nonce, challenge_digest);
        require(ok, "MintHelper: mint call failed");
        return ok;
    }

    /**
     * @notice Allows the owner to withdraw any ETH held by the contract.
     * @dev Only the owner can call this function. Transfers the entire balance of the contract to the owner.
     */
    function withdraw()
        public
        onlyOwner
    {
        address payable to = address(uint160(owner()));
        to.transfer(address(this).balance);
    }

    /**
     * @notice Sends a specified amount of tokens to a destination address.
     * @dev Only the owner can call this function.
     * @param _tokenAddr The address of the ERC20 token to send.
     * @param dest The destination address to receive the tokens.
     * @param value The amount of tokens to send.
     * @return A boolean indicating the success of the transfer.
     */
    function send(address _tokenAddr, address dest, uint value)
        public
        onlyOwner
        returns (bool)
    {
        return ERC20Interface(_tokenAddr).transfer(dest, value);
    }

    /**
     * @notice Sends tokens to multiple destination addresses in a single transaction.
     * @dev Only the owner can call this function.
     *      Ensures that the payment ID is unique and not already marked as successful.
     * @param _tokenAddr The address of the ERC20 token to send.
     * @param paymentId The unique identifier for the payment.
     * @param dests An array of destination addresses.
     * @param values An array of token amounts corresponding to each destination address.
     * @return The number of successful transfers.
     */
    function multisend(
        address _tokenAddr,
        bytes32 paymentId,
        address[] memory dests,
        uint256[] memory values
    )
        public
        onlyOwner
        returns (uint256)
    {
        require(!successfulPayments[paymentId], "MintHelper: paymentId already used");
        require(dests.length == values.length, "MintHelper: dests and values length mismatch");

        uint256 count = 0;
        ERC20Interface token = ERC20Interface(_tokenAddr);

        for (uint i = 0; i < dests.length; i = i.add(1)) {
            bool sent = token.transfer(dests[i], values[i]);
            if (sent) {
                count = count.add(1);
            }
        }

        successfulPayments[paymentId] = true;
        return count;
    }

    // Allow the contract to receive ETH
    function() external payable {}
}