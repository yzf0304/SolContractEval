pragma solidity 0.5.10;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity automatically throws when dividing by 0
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }
}

contract MintHelper is Ownable {
    using SafeMath for uint256;

    string public name;
    address public mintableToken;
    mapping(bytes32 => bool) private successfulPayments;

    constructor(address mToken, string memory mName) public {
        require(mToken != address(0), "MintHelper: zero token address");
        mintableToken = mToken;
        name = mName;
    }

    /**
     * @notice Allows the owner to set the mintable token address.
     * @param mToken The address of the mintable token.
     * @return A boolean indicating the success of the operation.
     */
    function setMintableToken(address mToken)
        public
        onlyOwner
        returns (bool)
    {
        require(mToken != address(0), "MintHelper: zero token address");
        mintableToken = mToken;
        return true;
    }

    /**
     * @notice Checks if a payment with a given ID was successful.
     * @param paymentId The unique identifier for the payment.
     * @return A boolean indicating whether the payment was successful.
     */
    function paymentSuccessful(bytes32 paymentId)
        public
        view
        returns (bool)
    {
        return successfulPayments[paymentId];
    }

    /**
     * @notice Proxies the minting of a token using the provided nonce and challenge digest.
     * @param nonce The nonce used in the minting process.
     * @param challenge_digest The challenge digest used in the minting process.
     * @return A boolean indicating the success of the minting operation.
     */
    function proxyMint(uint256 nonce, bytes32 challenge_digest)
        public
        returns (bool)
    {
        require(mintableToken != address(0), "MintHelper: mintableToken not set");
        bool minted = ERC918Interface(mintableToken).mint(nonce, challenge_digest);
        require(minted, "MintHelper: mint failed");
        return true;
    }

    /**
     * @notice Allows the owner to withdraw any ETH held by the contract.
     */
    function withdraw() public onlyOwner {
        uint256 balance = address(this).balance;
        require(balance > 0, "MintHelper: no ETH to withdraw");
        address payable to = msg.sender;
        to.transfer(balance);
    }

    /**
     * @notice Sends a specified amount of tokens to a destination address.
     * @param _tokenAddr The address of the ERC20 token to send.
     * @param dest The destination address to receive the tokens.
     * @param value The amount of tokens to send.
     * @return A boolean indicating the success of the transfer.
     */
    function send(address _tokenAddr, address dest, uint256 value)
        public
        onlyOwner
        returns (bool)
    {
        require(_tokenAddr != address(0), "MintHelper: zero token address");
        bool ok = ERC20Interface(_tokenAddr).transfer(dest, value);
        require(ok, "MintHelper: transfer failed");
        return true;
    }

    /**
     * @notice Sends tokens to multiple destination addresses in a single transaction.
     * @param _tokenAddr The address of the ERC20 token to send.
     * @param paymentId The unique identifier for the payment.
     * @param dests An array of destination addresses.
     * @param values An array of token amounts corresponding to each destination address.
     * @return The number of successful transfers.
     */
    function multisend(
        address _tokenAddr,
        bytes32 paymentId,
        address[] memory dests,
        uint256[] memory values
    ) public onlyOwner returns (uint256) {
        require(_tokenAddr != address(0), "MintHelper: zero token address");
        require(!successfulPayments[paymentId], "MintHelper: paymentId already used");
        require(dests.length == values.length, "MintHelper: array length mismatch");

        uint256 successCount = 0;
        ERC20Interface token = ERC20Interface(_tokenAddr);

        for (uint256 i = 0; i < dests.length; i = i.add(1)) {
            bool ok = token.transfer(dests[i], values[i]);
            if (ok) {
                successCount = successCount.add(1);
            }
        }

        successfulPayments[paymentId] = true;
        return successCount;
    }
}