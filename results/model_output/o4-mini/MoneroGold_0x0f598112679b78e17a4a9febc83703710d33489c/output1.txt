pragma solidity ^0.4.18;

contract MoneroGold {

    string public name = "Monero Gold";
    string public symbol = "XMRG";
    uint256 public decimals = 8;

    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    uint256 public totalSupply = 21000000 * (10 ** decimals);
    address public owner;

    modifier isOwner {
        assert(owner == msg.sender);
        _;
    }

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event SupplyBurn(uint256 _amount);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function MoneroGold() public {
        owner = msg.sender;
        balanceOf[owner] = totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));
        require(balanceOf[msg.sender] >= _value);

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));
        require(balanceOf[_from] >= _value);
        require(allowance[_from][msg.sender] >= _value);

        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(_spender != address(0));
        // To change the approve amount you first have to reduce the addresses`
        // allowance to zero by calling approve(_spender, 0) if it is not
        // already 0 to mitigate the race condition described here:
        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function setName(string _name) public isOwner {
        name = _name;
    }

    /**
     * @notice Burns tokens from the owner's balance and reduces total supply.
     * @param _amount The amount of tokens to burn.
     */
    function burnSupply(uint256 _amount) public isOwner {
        require(balanceOf[owner] >= _amount);
        balanceOf[owner] -= _amount;
        totalSupply -= _amount;
        SupplyBurn(_amount);
    }

    /**
     * @notice Burns tokens from the total supply without affecting balances.
     * @param _amount The amount of tokens to remove from totalSupply.
     */
    function burnTotalSupply(uint256 _amount) public isOwner {
        require(totalSupply >= _amount);
        totalSupply -= _amount;
    }
}