```solidity
// SPDX-License-Identifier: Mines™®©
pragma solidity 0.8.4;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) { return 0; }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }
}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor() {
        _owner = _msgSender();
        emit OwnershipTransferred(address(0), _owner);
    }
    function owner() public view returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller not owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}
interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 inAmt,
        uint256 outMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint256 tokMin,
        uint256 tokMax,
        uint256 ethMin,
        address to,
        uint256 deadline
    ) external payable returns (uint256,uint256,uint256);
}

contract Myobu is Context, IERC20, Ownable {
    using SafeMath for uint256;

    string private constant _name     = unicode"Myōbu";
    string private constant _symbol   = "MYOBU";
    uint8  private constant _decimals = 9;

    uint256 private constant _tTotal = 1000000000000 * 10**9;
    uint256 private constant MAX = ~uint256(0);
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;

    uint256 private constant _initialTaxFee  = 7;  // default sell reflection %
    uint256 private constant _initialTeamFee = 5;  // default team %
    uint256 private constant _buyTaxFee      = 2;  // buy reflection %
    uint256 private constant _buyTeamFee     = 5;  // buy team %

    uint256 private _taxFee  = _initialTaxFee;
    uint256 private _teamFee = _initialTeamFee;

    uint256 private _previousTaxFee;
    uint256 private _previousTeamFee;

    mapping(address => uint256) private _rOwned;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool)    private _isExcludedFromFee;
    mapping(address => bool)    private bots;
    mapping(address => uint256) private buycooldown;
    mapping(address => uint256) private sellcooldown;
    mapping(address => uint256) private firstsell;
    mapping(address => uint256) private sellnumber;

    address payable private _teamAddress;
    address payable private _marketingFunds;

    IUniswapV2Router02 private uniswapV2Router;
    address            private uniswapV2Pair;

    bool private tradingOpen   = false;
    bool private liquidityAdded= false;
    bool private inSwap        = false;
    bool private swapEnabled   = false;
    bool private cooldownEnabled = false;

    uint256 private _maxTxAmount = _tTotal;

    event MaxTxAmountUpdated(uint256 _maxTxAmount);

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor(address payable addr1, address payable addr2) {
        _teamAddress    = addr1;
        _marketingFunds = addr2;
        _rOwned[_msgSender()] = _rTotal;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_teamAddress] = true;
        _isExcludedFromFee[_marketingFunds] = true;
        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    // ERC20 standard
    function name() public pure returns (string memory) { return _name; }
    function symbol() public pure returns (string memory) { return _symbol; }
    function decimals() public pure returns (uint8) { return _decimals; }
    function totalSupply() public pure override returns (uint256) { return _tTotal; }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner_, address spender) public view override returns (uint256) {
        return _allowances[owner_][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        uint256 cur = _allowances[sender][_msgSender()];
        require(cur >= amount, "ERC20: transfer exceeds allowance");
        _approve(sender, _msgSender(), cur.sub(amount));
        return true;
    }

    function setCooldownEnabled(bool onoff) external onlyOwner {
        cooldownEnabled = onoff;
    }

    // Core transfer
    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0) && to != address(0), "ERC20: zero addr");
        require(amount > 0, "ERC20: zero amount");
        if (from != owner() && to != owner()) {
            require(tradingOpen, "Trading not open");
        }
        require(!bots[from] && !bots[to], "Bot blocked");

        // BUY
        if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to] && cooldownEnabled) {
            require(amount <= _maxTxAmount, "Buy > maxTx");
            require(block.timestamp > buycooldown[to], "Buy cooldown");
            buycooldown[to] = block.timestamp + 30 seconds;
        }

        // Swap and fee distribution
        uint256 contractTokenBalance = balanceOf(address(this));
        bool canSwap = contractTokenBalance > 0 && !inSwap && from != uniswapV2Pair && swapEnabled;
        if (canSwap) {
            swapTokensForEth(contractTokenBalance);
            uint256 bal = address(this).balance;
            if (bal > 0) sendETHToFee(bal);
        }

        // Determine fee
        bool takeFee = true;
        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
            takeFee = false;
        }
        uint256 multiplier = 1;

        if (takeFee) {
            // BUY
            if (from == uniswapV2Pair) {
                removeAllFee();
                _taxFee  = _buyTaxFee;
                _teamFee = _buyTeamFee;
            }
            // SELL
            else if (to == uniswapV2Pair) {
                require(amount <= _maxTxAmount, "Sell > maxTx");
                require(block.timestamp > sellcooldown[from], "Sell cooldown");
                // reset or increment sale count
                if (firstsell[from] == 0 || block.timestamp > firstsell[from] + 24 hours) {
                    firstsell[from] = block.timestamp;
                    sellnumber[from] = 1;
                } else {
                    sellnumber[from] = sellnumber[from] < 4 ? sellnumber[from] + 1 : 4;
                }
                multiplier = sellnumber[from];
                // set progressive cooldown
                if (multiplier == 1) sellcooldown[from] = block.timestamp + 1 hours;
                else if (multiplier == 2) sellcooldown[from] = block.timestamp + 2 hours;
                else if (multiplier == 3) sellcooldown[from] = block.timestamp + 6 hours;
                else sellcooldown[from] = block.timestamp + 24 hours;

                removeAllFee();
                _taxFee  = _initialTaxFee.mul(multiplier);
                _teamFee = _initialTeamFee;
            }
            else {
                takeFee = false;
            }
        }

        // Execute transfer
        _tokenTransfer(from, to, amount, takeFee);

        // restore
        if (takeFee) {
            restoreAllFee();
        }
    }

    // Swap tokens for ETH
    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount, 0, path, address(this), block.timestamp
        );
    }

    // Distribute ETH to team & marketing
    function sendETHToFee(uint256 amount) private {
        uint256 half = amount.div(2);
        _teamAddress.transfer(half);
        _marketingFunds.transfer(amount.sub(half));
    }

    // Open trading
    function openTrading() external onlyOwner {
        require(!tradingOpen, "Already open");
        tradingOpen = true;
    }

    // Add liquidity
    function addLiquidity() external onlyOwner {
        IUniswapV2Router02 _router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        );
        uniswapV2Router = _router;
        _approve(address(this), address(_router), _tTotal);
        uniswapV2Pair = IUniswapV2Factory(_router.factory())
            .createPair(address(this), _router.WETH());
        _router.addLiquidityETH{value: address(this).balance}(
            address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp
        );
        swapEnabled    = true;
        cooldownEnabled= true;
        liquidityAdded = true;
        _maxTxAmount   = 3000000000 * 10**9;
        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint256).max);
    }

    // Manual swap & send
    function manualswap() external onlyOwner {
        uint256 bal = balanceOf(address(this));
        require(bal > 0, "No token");
        swapTokensForEth(bal);
    }
    function manualsend() external onlyOwner {
        uint256 bal = address(this).balance;
        require(bal > 0, "No ETH");
        sendETHToFee(bal);
    }

    // Core token transfer with fee
    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private {
        if (!takeFee) {
            removeAllFee();
        }
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
        // deduct
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        // take team
        if (tTeam > 0) {
            uint256 currentRate = _getRate();
            uint256 rTeam = tTeam.mul(currentRate);
            _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
            emit Transfer(sender, address(this), tTeam);
        }
        // reflect fee
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
        emit Transfer(sender, recipient, tTransferAmount);

        if (!takeFee) {
            restoreAllFee();
        }
    }

    // Helpers
    function removeAllFee() private {
        _previousTaxFee  = _taxFee;
        _previousTeamFee = _teamFee;
        _taxFee  = 0;
        _teamFee = 0;
    }
    function restoreAllFee() private {
        _taxFee  = _previousTaxFee;
        _teamFee = _previousTeamFee;
    }
    function setFee(uint256 multiplier) private {
        _taxFee  = _initialTaxFee.mul(multiplier);
        _teamFee = _initialTeamFee;
    }

    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
        require(rAmount <= _rTotal, "Amt > total");
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function _getValues(uint256 tAmount) private view returns (
        uint256 rAmount, uint256 rTransferAmount, uint256 rFee,
        uint256 tTransferAmount, uint256 tFee, uint256 tTeam
    ) {
        (tTransferAmount, tFee, tTeam) = _getTValues(tAmount, _taxFee, _teamFee);
        uint256 currentRate = _getRate();
        (rAmount, rTransferAmount, rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
    }

    function _getTValues(
        uint256 tAmount, uint256 taxFee, uint256 teamFee
    ) private pure returns (
        uint256 tTransferAmount, uint256 tFee, uint256 tTeam
    ) {
        tFee   = tAmount.mul(taxFee).div(100);
        tTeam  = tAmount.mul(teamFee).div(100);
        tTransferAmount = tAmount.sub(tFee).sub(tTeam);
        return (tTransferAmount, tFee, tTeam);
    }

    function _getRValues(
        uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate
    ) private pure returns (
        uint256 rAmount, uint256 rTransferAmount, uint256 rFee
    ) {
        rAmount = tAmount.mul(currentRate);
        uint256 rTeam = tTeam.mul(currentRate);
        rFee    = tFee.mul(currentRate);
        rTransferAmount = rAmount.sub(rFee).sub(rTeam);
        return (rAmount, rTransferAmount, rFee);
    }

    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        if (rSupply < rSupply.div(tSupply)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function _approve(address owner_, address spender, uint256 amount) private {
        require(owner_ != address(0) && spender != address(0), "Zero addr");
        _allowances[owner_][spender] = amount;
        emit Approval(owner_, spender, amount);
    }

    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {
        require(maxTxPercent > 0 && maxTxPercent <= 100, "Percent 1-100");
        _maxTxAmount = _tTotal.mul(maxTxPercent).div(100);
        emit MaxTxAmountUpdated(_maxTxAmount);
    }

    receive() external payable {}
}
```

Explanation of key points:
1) Implements all ERC-20 functions and reflection logic via `_rOwned` and `_getValues`.
2) BUY side enforces a 30-second cooldown and max-tx limit, applying a 2% reflection fee and 5% team fee.
3) SELL side enforces progressive cooldowns (1 h → 2 h → 6 h → 24 h) over a 24 h window, with reflection fee of 7%×N (N=1..4) and 5% team fee.
4) Fees are accumulated in the contract, swapped for ETH, and distributed equally to team & marketing wallets.
5) Owner can add liquidity, open trading, toggle cooldowns, adjust max-tx % and trigger manual swap/send.
6) No external dependencies beyond UniswapV2 interfaces and SafeMath.
