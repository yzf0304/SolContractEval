contract standardToken is ERC20Token, limitedFactor {
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowances;

    /**
     * @notice Returns the balance of the specified address.
     * @param _owner The address to query the balance of.
     * @return The balance of the specified address.
     */
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    /**
     * @notice Transfers tokens from the sender's address to another address.
     * @param _to The recipient address.
     * @param _value The amount of tokens to transfer.
     * @return A boolean value indicating whether the transfer was successful.
     */
    function transfer(address _to, uint256 _value)
        public
        FoundationAccountNeedFreezeOneYear(msg.sender)
        returns (bool success)
    {
        require(_to != address(0));
        require(balances[msg.sender] >= _value);
        require(balances[_to] + _value >= balances[_to]);

        balances[msg.sender] -= _value;
        balances[_to] += _value;

        Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Approves another address to spend tokens on behalf of the sender.
     * @param _spender The address that will be allowed to spend the tokens.
     * @param _value The amount of tokens to approve.
     * @return A boolean value indicating whether the approval was successful.
     */
    function approve(address _spender, uint256 _value)
        public
        returns (bool success)
    {
        allowances[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Approves and then calls the recipient contract with the approved amount and extra data.
     * @param _spender The address of the recipient contract.
     * @param _value The amount of tokens to approve.
     * @param _extraData Additional data to pass to the recipient contract.
     * @return A boolean value indicating whether the operation was successful.
     */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success)
    {
        allowances[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);

        tokenRecipient(_spender).receiveApproval(
            msg.sender,
            _value,
            this,
            _extraData
        );
        return true;
    }

    /**
     * @notice Transfers tokens from one address to another, using the allowance mechanism.
     * @param _from The address to transfer tokens from.
     * @param _to The address to transfer tokens to.
     * @param _value The amount of tokens to transfer.
     * @return A boolean value indicating whether the transfer was successful.
     */
    function transferFrom(address _from, address _to, uint256 _value)
        public
        returns (bool success)
    {
        require(_to != address(0));
        require(balances[_from] >= _value);
        require(allowances[_from][msg.sender] >= _value);
        require(balances[_to] + _value >= balances[_to]);

        balances[_from] -= _value;
        balances[_to] += _value;
        allowances[_from][msg.sender] -= _value;

        Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Returns the amount of tokens that an owner has allowed a spender to spend.
     * @param _owner The address of the token owner.
     * @param _spender The address of the spender.
     * @return The remaining allowance for the spender.
     */
    function allowance(address _owner, address _spender)
        constant
        public
        returns (uint256 remaining)
    {
        return allowances[_owner][_spender];
    }
}