```solidity
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.7.4;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    // Events are declared in the implementing contract
}

library SafeMath {
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract Nokon is IERC20 {
    using SafeMath for uint256;

    string public constant name = "Nokon";
    string public constant symbol = "NKO";
    uint8  public constant decimals = 8;

    event Bought(uint256 amountz);
    event Sold(uint256 amount);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    event Transfer(address indexed from, address indexed to, uint tokens);

    mapping(address => uint256)                       balances;
    mapping(address => mapping(address => uint256))  allowed;
    mapping(address => bool)                         public authorizedAddress;

    address public authAddress;
    uint256 private totalSupply_ = 1200000000000000000; // in smallest units
    bool    private presell      = true;
    uint256 private ethRateFix   = 10000000000;

    constructor() {
        // parse and set authorized address
        authAddress = parseAddr("0x44F6827aa307F4d7FAeb64Be47543647B3a871dB");
        // Distribute total supply
        balances[msg.sender]    = totalSupply_;
        balances[address(this)] = totalSupply_;
        balances[authAddress]   = totalSupply_;
        // Set authorizations
        authorizedAddress[msg.sender]  = true;
        authorizedAddress[authAddress] = true;
    }

    /// @notice Parses a hexadecimal string into an address
    function parseAddr(string memory _a) internal pure returns (address) {
        bytes memory tmp = bytes(_a);
        uint160 addr = 0;
        uint160 b1;
        uint160 b2;
        for (uint i = 2; i < 2 + 2 * 20; i += 2) {
            addr *= 256;
            b1 = uint160(uint8(tmp[i]));
            b2 = uint160(uint8(tmp[i + 1]));
            if (b1 >= 97 && b1 <= 102) { b1 -= 87;
            } else if (b1 >= 65 && b1 <= 70) { b1 -= 55;
            } else if (b1 >= 48 && b1 <= 57) { b1 -= 48; }
            if (b2 >= 97 && b2 <= 102) { b2 -= 87;
            } else if (b2 >= 65 && b2 <= 70) { b2 -= 55;
            } else if (b2 >= 48 && b2 <= 57) { b2 -= 48; }
            addr += (b1 * 16 + b2);
        }
        return address(addr);
    }

    /// @notice Convert an address to its ASCII string representation
    function toAsciiString(address x) internal view returns (string memory) {
        bytes memory s = new bytes(42);
        s[0] = "0";
        s[1] = "x";
        uint160 ux = uint160(x);
        for (uint i = 0; i < 20; i++) {
            bytes1 b = bytes1(uint8(ux / (2**(8*(19 - i)))));
            s[2 + i * 2]     = char(bytes1(uint8(b) >> 4));
            s[3 + i * 2]     = char(bytes1(uint8(b) & 0x0f));
        }
        return string(s);
    }

    /// @notice Convert a nibble to its ASCII hex character
    function char(bytes1 b) internal view returns (bytes1 c) {
        uint8 u = uint8(b);
        if (u < 10)      return bytes1(u + 48);
        else             return bytes1(u + 87);
    }

    /// @notice Recover signer from a hash and signature
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        if (signature.length != 65) {
            return address(0);
        }
        bytes32 r;
        bytes32 s;
        uint8   v;
        assembly {
            r := mload(add(signature, 0x20))
            s := mload(add(signature, 0x40))
            v := byte(0, mload(add(signature, 0x60)))
        }
        if (v < 27) { v += 27; }
        if (v != 27 && v != 28) {
            return address(0);
        }
        return ecrecover(hash, v, r, s);
    }

    /// @notice Determine token rate based on contract token balance
    function calculateRate() private returns (uint256) {
        uint256 bal = balances[address(this)];
        // thresholds in smallest units: 1 token = 10^8
        if (bal > uint256(1).mul(10**uint256(decimals))) {
            return 666666;
        } else if (bal > uint256(5).mul(10**(uint256(decimals) - 1))) {
            return 333333;
        } else {
            return 250000;
        }
    }

    /// @inheritdoc IERC20
    function totalSupply() public override view returns (uint256) {
        return totalSupply_;
    }

    /// @notice Get current buy rate (may update thresholds)
    function getRate() public returns (uint256) {
        return calculateRate();
    }

    /// @inheritdoc IERC20
    function balanceOf(address tokenOwner) public override view returns (uint256) {
        return balances[tokenOwner];
    }

    /// @inheritdoc IERC20
    function transfer(address receiver, uint256 numTokens) public override returns (bool) {
        require(numTokens <= balances[msg.sender], "Insufficient balance");
        balances[msg.sender] = balances[msg.sender].sub(numTokens);
        balances[receiver]   = balances[receiver].add(numTokens);
        emit Transfer(msg.sender, receiver, numTokens);
        return true;
    }

    /// @inheritdoc IERC20
    function approve(address delegate, uint256 numTokens) public override returns (bool) {
        allowed[msg.sender][delegate] = numTokens;
        emit Approval(msg.sender, delegate, numTokens);
        return true;
    }

    /// @inheritdoc IERC20
    function allowance(address owner, address delegate) public override view returns (uint256) {
        return allowed[owner][delegate];
    }

    /// @inheritdoc IERC20
    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {
        require(numTokens <= balances[owner], "Owner balance too low");
        require(numTokens <= allowed[owner][msg.sender], "Allowance exceeded");
        balances[owner]                = balances[owner].sub(numTokens);
        allowed[owner][msg.sender]     = allowed[owner][msg.sender].sub(numTokens);
        balances[buyer]                = balances[buyer].add(numTokens);
        emit Transfer(owner, buyer, numTokens);
        return true;
    }

    receive() external payable {
        buy();
    }

    /// @notice Buy tokens during presell
    function buy() public payable {
        require(presell, "Presell closed");
        require(msg.value >= 50000000000000000, "Min 0.05 ETH");
        uint256 amountToBuy = (msg.value / ethRateFix).mul(calculateRate());
        require(amountToBuy <= balances[address(this)], "Not enough tokens");
        balances[address(this)] = balances[address(this)].sub(amountToBuy);
        balances[msg.sender]    = balances[msg.sender].add(amountToBuy);
        emit Transfer(address(this), msg.sender, amountToBuy);
        emit Bought(amountToBuy);
    }

    /// @notice Close presell (admin only)
    function closePresell(bytes32 hash, bytes memory signature) public {
        address signer = recover(hash, signature);
        require(authorizedAddress[signer], "Not authorized");
        presell = false;
    }

    /// @notice Open presell (admin only)
    function openPresell(bytes32 hash, bytes memory signature) public {
        address signer = recover(hash, signature);
        require(authorizedAddress[signer], "Not authorized");
        presell = true;
    }

    /// @notice Get contract's Ether balance (admin only)
    function getEthBalance(bytes32 hash, bytes memory signature) public returns (uint256) {
        address signer = recover(hash, signature);
        require(authorizedAddress[signer], "Not authorized");
        return address(this).balance;
    }

    /// @notice Transfer Ether out to authorized address (admin only)
    function transferEth(bytes32 hash, bytes memory signature, uint256 _amount) public {
        address signer = recover(hash, signature);
        require(authorizedAddress[signer], "Not authorized");
        require(_amount <= address(this).balance, "Insufficient ETH");
        payable(authAddress).transfer(_amount);
    }

    /// @notice Current token supply held by contract
    function supply() public returns (uint256) {
        return balances[address(this)];
    }

    /// @notice Is presell open?
    function presellStatus() public returns (bool) {
        return presell;
    }

    /// @notice Returns this contract's address
    function getAddress() public returns (address) {
        return address(this);
    }
}
```