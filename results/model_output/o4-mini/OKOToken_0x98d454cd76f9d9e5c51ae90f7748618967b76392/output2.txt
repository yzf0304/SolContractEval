```solidity
pragma solidity 0.4.19;

contract StandardToken is SafeMath {

  uint256 public totalSupply;

  mapping(address => uint) balances;
  mapping (address => mapping (address => uint)) allowed;

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);

  modifier onlyPayloadSize(uint256 size) {
    require(msg.data.length == size + 4);
    _;
  }

  function transfer(address _to, uint256 _value)
    onlyPayloadSize(2 * 32)
    public
    returns (bool success)
  {
    balances[msg.sender] = safeSub(balances[msg.sender], _value);
    balances[_to]         = safeAdd(balances[_to], _value);
    Transfer(msg.sender, _to, _value);
    return true;
  }

  function transferFrom(address _from, address _to, uint256 _value)
    public
    returns (bool success)
  {
    balances[_from]               = safeSub(balances[_from], _value);
    allowed[_from][msg.sender]    = safeSub(allowed[_from][msg.sender], _value);
    balances[_to]                 = safeAdd(balances[_to], _value);
    Transfer(_from, _to, _value);
    return true;
  }

  function balanceOf(address _owner)
    public
    view
    returns (uint256 balance)
  {
    return balances[_owner];
  }

  function approve(address _spender, uint256 _value)
    public
    returns (bool success)
  {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }

  function allowance(address _owner, address _spender)
    public
    view
    returns (uint256 remaining)
  {
    return allowed[_owner][_spender];
  }

  function addApproval(address _spender, uint256 _addedValue)
    onlyPayloadSize(2 * 32)
    public
    returns (bool success)
  {
    allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  function subApproval(address _spender, uint256 _subtractedValue)
    onlyPayloadSize(2 * 32)
    public
    returns (bool success)
  {
    uint256 oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue >= oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
}
```