pragma solidity ^0.4.19;

contract StandardToken is SafeMath {
    uint256 public totalSupply;
    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    modifier onlyPayloadSize(uint256 size) {
        require(msg.data.length == size + 4);
        _;
    }

    function transfer(address _to, uint256 _value)
        onlyPayloadSize(2 * 32)
        public
        returns (bool success)
    {
        // Subtract from sender
        balances[msg.sender] = safeSub(balances[msg.sender], _value);
        // Add to recipient
        balances[_to] = safeAdd(balances[_to], _value);
        Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value)
        public
        returns (bool success)
    {
        // Subtract from _from balance
        balances[_from] = safeSub(balances[_from], _value);
        // Subtract from allowance
        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);
        // Add to recipient
        balances[_to] = safeAdd(balances[_to], _value);
        Transfer(_from, _to, _value);
        return true;
    }

    function balanceOf(address _owner)
        public
        view
        returns (uint256 balance)
    {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value)
        public
        returns (bool success)
    {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender)
        public
        view
        returns (uint256 remaining)
    {
        return allowed[_owner][_spender];
    }

    function addApproval(address _spender, uint256 _addedValue)
        onlyPayloadSize(2 * 32)
        public
        returns (bool success)
    {
        uint256 current = allowed[msg.sender][_spender];
        uint256 updated = safeAdd(current, _addedValue);
        allowed[msg.sender][_spender] = updated;
        Approval(msg.sender, _spender, updated);
        return true;
    }

    function subApproval(address _spender, uint256 _subtractedValue)
        onlyPayloadSize(2 * 32)
        public
        returns (bool success)
    {
        uint256 current = allowed[msg.sender][_spender];
        uint256 updated;
        if (_subtractedValue >= current) {
            updated = 0;
        } else {
            updated = safeSub(current, _subtractedValue);
        }
        allowed[msg.sender][_spender] = updated;
        Approval(msg.sender, _spender, updated);
        return true;
    }
}