pragma solidity 0.7.5;
// SPDX-License-Identifier: AGPL-3.0-or-later

/**
 * @title OlympusERC20Token
 * @notice This contract implements a custom ERC223‐style token with minting and burning functionalities.
 * @dev Inherits from Divine, which pulls in ERC20Permit, ERC20, Ownable, VaultOwned, and the TWAP oracle updater.
 */
contract OlympusERC20Token is Divine {
    using SafeMath for uint256;

    /**
     * @notice Initializes the OlympusERC20Token contract with the name "Olympus", symbol "OHM", and 9 decimals.
     */
    constructor() Divine("Olympus", "OHM", 9) {
        // Intentionally left blank
    }

    /**
     * @notice Mints `amount_` tokens to `account_`.
     * @dev Can only be called by the Vault. Emits a Transfer from address(this) inside _mint.
     * @param account_ The address receiving the minted tokens.
     * @param amount_  The number of tokens to mint.
     */
    function mint(address account_, uint256 amount_) external onlyVault {
        _mint(account_, amount_);
    }

    /**
     * @notice Burns `amount` tokens from the caller.
     * @dev Uses the internal ERC20 `_burn` to destroy tokens.
     * @param amount The number of tokens to burn.
     */
    function burn(uint256 amount) public virtual {
        _burn(msg.sender, amount);
    }

    /**
     * @notice Burns `amount_` tokens from `account_`, deducting from the caller's allowance.
     * @dev Calls into `_burnFrom` to perform the allowance check and the actual burn.
     * @param account_ The address whose tokens will be burned.
     * @param amount_  The number of tokens to burn.
     */
    function burnFrom(address account_, uint256 amount_) public virtual {
        _burnFrom(account_, amount_);
    }

    /**
     * @notice Internal routine that burns `amount_` from `account_` and updates allowance.
     * @dev Reverts if the caller's allowance is insufficient.
     * @param account_ The address whose tokens will be burned.
     * @param amount_  The number of tokens to burn.
     */
    function _burnFrom(address account_, uint256 amount_) public virtual {
        // Check and update allowance
        uint256 currentAllowance = allowance(account_, msg.sender);
        require(currentAllowance >= amount_, "ERC20: burn amount exceeds allowance");
        uint256 newAllowance = currentAllowance.sub(amount_);
        _approve(account_, msg.sender, newAllowance);

        // Perform burn
        _burn(account_, amount_);
    }
}