```solidity
pragma solidity 0.5.17;

/**
 *Submitted for verification at Etherscan.io on 2021-11-15
*/
// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol
// Subject to the MIT license.
/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 */
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction underflow");
    }
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) { return 0; }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

/**
 * @title PSP Token Contract
 * @notice ERC-20 with minting, delegation and EIP-712 permit
 */
contract PSP {
    using SafeMath for uint;

    string public constant name = "ParaSwap";
    string public constant symbol = "PSP";
    uint8  public constant decimals = 18;

    uint public totalSupply = 2_000_000_000e18; // 2 billion
    address public minter;
    uint    public mintingAllowedAfter;
    uint32  public constant minimumTimeBetweenMints = 1 days * 365;
    uint8   public constant mintCap = 2;

    mapping(address => mapping(address => uint96)) internal allowances;
    mapping(address => uint96)               internal balances;

    mapping(address => address) public delegates;

    struct Checkpoint { uint32 fromBlock; uint96 votes; }
    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;
    mapping(address => uint32) public numCheckpoints;

    bytes32 public constant DOMAIN_TYPEHASH    = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
    bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
    bytes32 public constant PERMIT_TYPEHASH     = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");

    mapping(address => uint) public nonces;

    event MinterChanged(address indexed oldMinter, address indexed newMinter);
    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);

    constructor(address account, address minter_, uint mintingAllowedAfter_) public {
        require(mintingAllowedAfter_ >= block.timestamp, "PSP::constructor: minting can only begin after deployment");
        balances[account] = uint96(totalSupply);
        emit Transfer(address(0), account, totalSupply);
        minter = minter_;
        emit MinterChanged(address(0), minter_);
        mintingAllowedAfter = mintingAllowedAfter_;
    }

    function setMinter(address minter_) external {
        require(msg.sender == minter, "PSP::setMinter: only current minter");
        emit MinterChanged(minter, minter_);
        minter = minter_;
    }

    function mint(address dst, uint rawAmount) external {
        require(msg.sender == minter,     "PSP::mint: only minter");
        require(block.timestamp >= mintingAllowedAfter, "PSP::mint: not allowed yet");
        require(dst != address(0),        "PSP::mint: zero address");

        // cap
        uint maxMint = totalSupply.mul(mintCap).div(100);
        require(rawAmount <= maxMint, "PSP::mint: exceeds cap");

        mintingAllowedAfter = block.timestamp + minimumTimeBetweenMints;

        totalSupply = totalSupply.add(rawAmount);
        uint96 amount = safe96(rawAmount, "PSP::mint: amount exceeds 96 bits");
        balances[dst] = add96(balances[dst], amount, "PSP::mint: balance overflow");

        emit Transfer(address(0), dst, rawAmount);

        _moveDelegates(address(0), delegates[dst], amount);
    }

    function allowance(address account, address spender) external view returns (uint) {
        return allowances[account][spender];
    }

    function approve(address spender, uint rawAmount) external returns (bool) {
        uint96 amount = safe96(rawAmount, "PSP::approve: amount exceeds 96 bits");
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, rawAmount);
        return true;
    }

    function permit(
        address owner, address spender, uint rawAmount, uint deadline,
        uint8 v, bytes32 r, bytes32 s
    ) external {
        require(owner != address(0), "PSP::permit: zero owner");
        require(block.timestamp <= deadline, "PSP::permit: expired");

        bytes32 domainSeparator = keccak256(
            abi.encode(
                DOMAIN_TYPEHASH,
                keccak256(bytes(name)),
                getChainId(),
                address(this)
            )
        );
        bytes32 structHash = keccak256(
            abi.encode(
                PERMIT_TYPEHASH,
                owner, spender, rawAmount,
                nonces[owner]++, deadline
            )
        );
        bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
        address signatory = ecrecover(digest, v, r, s);
        require(signatory == owner, "PSP::permit: invalid signature");

        uint96 amount = safe96(rawAmount, "PSP::permit: amount exceeds 96 bits");
        allowances[owner][spender] = amount;
        emit Approval(owner, spender, rawAmount);
    }

    function balanceOf(address account) external view returns (uint) {
        return balances[account];
    }

    function transfer(address dst, uint rawAmount) external returns (bool) {
        uint96 amount = safe96(rawAmount, "PSP::transfer: amount exceeds 96 bits");
        _transferTokens(msg.sender, dst, amount);
        return true;
    }

    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {
        uint96 amount = safe96(rawAmount, "PSP::transferFrom: amount exceeds 96 bits");
        uint96 currentAllowance = allowances[src][msg.sender];
        if (currentAllowance != uint96(-1)) {
            allowances[src][msg.sender] = sub96(currentAllowance, amount, "PSP::transferFrom: transfer amount exceeds allowance");
            emit Approval(src, msg.sender, allowances[src][msg.sender]);
        }
        _transferTokens(src, dst, amount);
        return true;
    }

    function delegate(address delegatee) public {
        _delegate(msg.sender, delegatee);
    }

    function delegateBySig(
        address delegatee, uint nonce, uint expiry,
        uint8 v, bytes32 r, bytes32 s
    ) public {
        require(block.timestamp <= expiry, "PSP::delegateBySig: signature expired");

        bytes32 domainSeparator = keccak256(
            abi.encode(
                DOMAIN_TYPEHASH,
                keccak256(bytes(name)),
                getChainId(),
                address(this)
            )
        );
        bytes32 structHash = keccak256(
            abi.encode(
                DELEGATION_TYPEHASH,
                delegatee, nonce, expiry
            )
        );
        bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
        address signatory = ecrecover(digest, v, r, s);
        require(signatory != address(0), "PSP::delegateBySig: invalid signature");
        require(nonce == nonces[signatory]++, "PSP::delegateBySig: invalid nonce");

        _delegate(signatory, delegatee);
    }

    function getCurrentVotes(address account) external view returns (uint96) {
        uint32 nCheckpoints = numCheckpoints[account];
        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
    }

    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {
        require(blockNumber < block.number, "PSP::getPriorVotes: not yet determined");

        uint32 nCheckpoints = numCheckpoints[account];
        if (nCheckpoints == 0) { return 0; }

        // First check most recent
        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
            return checkpoints[account][nCheckpoints - 1].votes;
        }
        // Next check earliest
        if (checkpoints[account][0].fromBlock > blockNumber) {
            return 0;
        }

        // Binary search
        uint32 lower = 0;
        uint32 upper = nCheckpoints - 1;
        while (upper > lower) {
            uint32 center = upper - (upper - lower) / 2;
            Checkpoint memory cp = checkpoints[account][center];
            if (cp.fromBlock == blockNumber) {
                return cp.votes;
            } else if (cp.fromBlock < blockNumber) {
                lower = center;
            } else {
                upper = center - 1;
            }
        }
        return checkpoints[account][lower].votes;
    }

    function _delegate(address delegator, address delegatee) internal {
        address currentDelegate = delegates[delegator];
        uint96 delegatorBalance = balances[delegator];
        delegates[delegator] = delegatee;

        emit DelegateChanged(delegator, currentDelegate, delegatee);

        _moveDelegates(currentDelegate, delegatee, delegatorBalance);
    }

    function _transferTokens(address src, address dst, uint96 amount) internal {
        require(src != address(0), "PSP::_transferTokens: source zero");
        require(dst != address(0), "PSP::_transferTokens: destination zero");

        balances[src] = sub96(balances[src], amount, "PSP::_transferTokens: amount exceeds balance");
        balances[dst] = add96(balances[dst], amount, "PSP::_transferTokens: balance overflow");
        emit Transfer(src, dst, amount);

        _moveDelegates(delegates[src], delegates[dst], amount);
    }

    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {
        if (srcRep != dstRep && amount > 0) {
            // decrease old
            if (srcRep != address(0)) {
                uint32 srcNum = numCheckpoints[srcRep];
                uint96 srcOld = srcNum > 0 ? checkpoints[srcRep][srcNum - 1].votes : 0;
                uint96 srcNew = sub96(srcOld, amount, "PSP::_moveDelegates: vote underflow");
                _writeCheckpoint(srcRep, srcNum, srcOld, srcNew);
            }
            // increase new
            if (dstRep != address(0)) {
                uint32 dstNum = numCheckpoints[dstRep];
                uint96 dstOld = dstNum > 0 ? checkpoints[dstRep][dstNum - 1].votes : 0;
                uint96 dstNew = add96(dstOld, amount, "PSP::_moveDelegates: vote overflow");
                _writeCheckpoint(dstRep, dstNum, dstOld, dstNew);
            }
        }
    }

    function _writeCheckpoint(
        address delegatee,
        uint32 nCheckpoints,
        uint96 oldVotes,
        uint96 newVotes
    ) internal {
        uint32 blockNumber = safe32(block.number, "PSP::_writeCheckpoint: block > 32 bits");

        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
        } else {
            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
            numCheckpoints[delegatee] = nCheckpoints + 1;
        }

        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
    }

    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
        require(n < 2**32, errorMessage);
        return uint32(n);
    }

    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {
        require(n < 2**96, errorMessage);
        return uint96(n);
    }

    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {
        uint96 c = a + b;
        require(c >= a, errorMessage);
        return c;
    }

    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {
        require(b <= a, errorMessage);
        return a - b;
    }

    function getChainId() internal pure returns (uint) {
        uint cid;
        assembly { cid := chainid() }
        return cid;
    }
}
```