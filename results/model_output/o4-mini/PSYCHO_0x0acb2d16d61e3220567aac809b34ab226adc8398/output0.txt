```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract PSYCHO is Ownable, ERC721A {
    using Address for address;

    uint256 public  maxSupply                   = 8888;
    uint256 public  maxFreeSupply               = 8888;
    uint256 public  maxPerTxDuringMint          = 20;
    uint256 public  maxPerAddressDuringMint     = 21;
    uint256 public  maxPerAddressDuringFreeMint = 1;
    uint256 public  price                       = 0.003 ether;
    bool    public  saleIsActive                = true;
    bool    public  revealed                    = false;

    address constant internal TEAM_ADDRESS = 0x06C8033719b4fa22DE97d4632b4120D2F429c538;

    string public  baseURI;
    string public constant baseExtension      = "";
    string public  hiddenMetadataUri;

    mapping(address => uint256) public freeMintedAmount;
    mapping(address => uint256) public mintedAmount;

    constructor() ERC721A("PSYCHO", "PSYCHO") {
        // mint one to owner so that tokenId = 1 is taken
        _safeMint(msg.sender, 1);
        hiddenMetadataUri = "https://gateway.pinata.cloud/ipfs/QmcJ9dJMmgNiUD9oSASjgxhbuqam7y2WVSxDKLuX3GFyz5";
    }

    modifier mintCompliance() {
        require(saleIsActive, "Sale is not active");
        require(tx.origin == msg.sender, "Caller must be EOA");
        _;
    }

    /// @notice public paid mint
    function mint(uint256 _quantity) external payable mintCompliance {
        require(_quantity > 0, "Must mint at least one");
        require(_quantity <= maxPerTxDuringMint, "Exceeds per-tx limit");
        require(totalSupply() + _quantity <= maxSupply, "Exceeds max supply");
        require(mintedAmount[msg.sender] + _quantity <= maxPerAddressDuringMint,
                "Exceeds wallet mint limit");
        require(msg.value >= price * _quantity, "Insufficient ETH");

        mintedAmount[msg.sender] += _quantity;
        _safeMint(msg.sender, _quantity);
    }

    /// @notice free claim
    function freeMint(uint256 _quantity) external mintCompliance {
        require(_quantity > 0, "Must mint at least one");
        require(totalSupply() + _quantity <= maxFreeSupply, "Exceeds free supply");
        require(freeMintedAmount[msg.sender] + _quantity <= maxPerAddressDuringFreeMint,
                "Exceeds free mint allowance");

        freeMintedAmount[msg.sender] += _quantity;
        _safeMint(msg.sender, _quantity);
    }

    /*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
                      administrative functions
    –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/

    function setPrice(uint256 _price) external onlyOwner {
        price = _price;
    }

    function setMaxPerTx(uint256 _amount) external onlyOwner {
        maxPerTxDuringMint = _amount;
    }

    function setMaxPerAddress(uint256 _amount) external onlyOwner {
        maxPerAddressDuringMint = _amount;
    }

    function setMaxFreePerAddress(uint256 _amount) external onlyOwner {
        maxPerAddressDuringFreeMint = _amount;
    }

    function flipSale() external onlyOwner {
        saleIsActive = !saleIsActive;
    }

    function setMaxSupply(uint256 newSupply) external onlyOwner {
        require(newSupply >= totalSupply(), "Cannot undercut total supply");
        maxSupply = newSupply;
    }

    function cutMaxSupply(uint256 _amount) external onlyOwner {
        require(maxSupply - _amount >= totalSupply(),
                "Cannot undercut total supply");
        maxSupply -= _amount;
    }

    function setRevealed(bool _state) external onlyOwner {
        revealed = _state;
    }

    function setBaseURI(string memory _baseURI) external onlyOwner {
        baseURI = _baseURI;
    }

    function setHiddenMetadataUri(string memory _hiddenMetadataUri)
        public
        onlyOwner
    {
        hiddenMetadataUri = _hiddenMetadataUri;
    }

    /// @dev override of ERC721A
    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    /// @notice returns metadata URI, either hidden or revealed
    function tokenURI(uint256 _tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(_exists(_tokenId), "ERC721A: URI query for nonexistent token");

        if (!revealed) {
            return hiddenMetadataUri;
        }

        string memory currentBase = _baseURI();
        return
            string(
                abi.encodePacked(
                    currentBase,
                    _toString(_tokenId),
                    baseExtension
                )
            );
    }

    /// @notice withdraw all ETH to the team address
    function withdrawBalance() external payable onlyOwner {
        uint256 bal = address(this).balance;
        require(bal > 0, "Nothing to withdraw");
        (bool success, ) = TEAM_ADDRESS.call{value: bal}("");
        require(success, "Transfer failed");
    }
}
```