pragma solidity 0.8.13;

contract PSYCHO is Ownable, ERC721A {
    using Strings for uint256;

    uint256 public maxSupply                   = 8888;
    uint256 public maxFreeSupply               = 8888;
    uint256 public maxPerTxDuringMint          = 20;
    uint256 public maxPerAddressDuringMint     = 21;
    uint256 public maxPerAddressDuringFreeMint = 1;
    uint256 public price                       = 0.003 ether;
    bool    public saleIsActive                = true;
    bool    public revealed                    = false;

    address constant internal TEAM_ADDRESS = 0x06C8033719b4fa22DE97d4632b4120D2F429c538;
    string public baseURI;
    string public constant baseExtension = "";
    string public hiddenMetadataUri;

    mapping(address => uint256) public freeMintedAmount;
    mapping(address => uint256) public mintedAmount;

    constructor() ERC721A("PSYCHO", "PSYCHO") {
        // mint token ID 1 to owner
        _safeMint(msg.sender, 1);
        // set default hidden metadata URI
        setHiddenMetadataUri("https://gateway.pinata.cloud/ipfs/QmcJ9dJMmgNiUD9oSASjgxhbuqam7y2WVSxDKLuX3GFyz5");
    }

    modifier mintCompliance() {
        require(saleIsActive, "Sale is not active yet.");
        require(tx.origin == msg.sender, "Wrong Caller");
        _;
    }

    function mint(uint256 _quantity) external payable mintCompliance {
        require(_quantity > 0, "Quantity must be > 0");
        require(_quantity <= maxPerTxDuringMint, "Exceeds max per tx");
        require(msg.value >= price * _quantity, "Insufficient funds");
        require(mintedAmount[msg.sender] + _quantity <= maxPerAddressDuringMint, "Exceeds max per address");
        require(totalSupply() + _quantity <= maxSupply, "Max supply exceeded");

        mintedAmount[msg.sender] += _quantity;
        _safeMint(msg.sender, _quantity);
    }

    function freeMint(uint256 _quantity) external mintCompliance {
        require(_quantity > 0, "Quantity must be > 0");
        require(freeMintedAmount[msg.sender] + _quantity <= maxPerAddressDuringFreeMint, "Exceeds max free per address");
        require(totalSupply() + _quantity <= maxFreeSupply, "Max free supply exceeded");
        require(totalSupply() + _quantity <= maxSupply, "Max supply exceeded");

        freeMintedAmount[msg.sender] += _quantity;
        _safeMint(msg.sender, _quantity);
    }

    function setPrice(uint256 _price) external onlyOwner {
        price = _price;
    }

    function setMaxPerTx(uint256 _amount) external onlyOwner {
        maxPerTxDuringMint = _amount;
    }

    function setMaxPerAddress(uint256 _amount) external onlyOwner {
        maxPerAddressDuringMint = _amount;
    }

    function setMaxFreePerAddress(uint256 _amount) external onlyOwner {
        maxPerAddressDuringFreeMint = _amount;
    }

    function flipSale() external onlyOwner {
        saleIsActive = !saleIsActive;
    }

    function setMaxSupply(uint256 newSupply) external onlyOwner {
        require(newSupply >= totalSupply(), "Cannot set below totalSupply");
        maxSupply = newSupply;
    }

    function cutMaxSupply(uint256 _amount) external onlyOwner {
        require(_amount > 0, "Amount must be > 0");
        require(maxSupply - _amount >= totalSupply(), "Cannot cut below totalSupply");
        maxSupply -= _amount;
    }

    function setRevealed(bool _state) external onlyOwner {
        revealed = _state;
    }

    function setBaseURI(string memory baseURI_) external onlyOwner {
        baseURI = baseURI_;
    }

    function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {
        hiddenMetadataUri = _hiddenMetadataUri;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
        require(_exists(_tokenId), "ERC721Metadata: URI query for nonexistent token");
        if (!revealed) {
            return hiddenMetadataUri;
        }
        string memory currentBaseURI = _baseURI();
        return bytes(currentBaseURI).length > 0
            ? string(abi.encodePacked(currentBaseURI, _toString(_tokenId), baseExtension))
            : "";
    }

    function withdrawBalance() external payable onlyOwner {
        uint256 balance = address(this).balance;
        (bool success, ) = TEAM_ADDRESS.call{value: balance}("");
        require(success, "Transfer failed");
    }
}