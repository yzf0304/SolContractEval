pragma solidity ^0.4.18;

/**
 * @title PaymentForwarder
 * @notice A contract to forward payments to a team multisig address, tracking the total amount transferred, number of customers, and individual customer and benefactor contributions.
 * @dev This contract inherits from Haltable, allowing for emergency stops. It records payments and forwards them to a specified team multisig address.
 */
contract PaymentForwarder is Haltable {
  /** Who will get all ETH in the end */
  address public teamMultisig;
  /** Total incoming money */
  uint public totalTransferred;
  /** How many distinct customers we have that have made a payment */
  uint public customerCount;
  /** Total incoming money per centrally tracked customer id */
  mapping(uint128 => uint) public paymentsByCustomer;
  /** Total incoming money per benefactor address */
  mapping(address => uint) public paymentsByBenefactor;

  /** A customer has made a payment. Benefactor is the address where the tokens will be ultimately issued. */
  event PaymentForwarded(address source, uint amount, uint128 customerId, address benefactor);

  /**
   * @notice Initializes the contract with the owner and team multisig addresses.
   * @dev Sets the `teamMultisig` and `owner` addresses.
   * @param _owner The address of the contract owner.
   * @param _teamMultisig The address of the team multisig wallet.
   */
  function PaymentForwarder(address _owner, address _teamMultisig) public {
    require(_owner != address(0));
    require(_teamMultisig != address(0));
    owner = _owner;
    teamMultisig = _teamMultisig;
  }

  /**
   * @notice Allows a customer to make a payment without a checksum.
   * @dev Records the payment, updates the total transferred, and forwards the payment to the team multisig address.
   * @param customerId The unique identifier for the customer.
   * @param benefactor The address that will benefit from the payment.
   */
  function payWithoutChecksum(uint128 customerId, address benefactor) 
    public 
    payable 
    stopInEmergency 
  {
    require(benefactor != address(0));
    require(msg.value > 0);

    // if first payment for this customerId, increment distinct customer count
    if (paymentsByCustomer[customerId] == 0) {
      customerCount++;
    }

    // record payments
    paymentsByCustomer[customerId] += msg.value;
    paymentsByBenefactor[benefactor] += msg.value;
    totalTransferred += msg.value;

    // emit event
    PaymentForwarded(msg.sender, msg.value, customerId, benefactor);

    // forward funds
    teamMultisig.transfer(msg.value);
  }

  /**
   * @notice Allows a customer to make a payment on behalf of an address with a checksum.
   * @dev Verifies the checksum and then calls `payWithoutChecksum` to process the payment.
   * @param customerId The unique identifier for the customer.
   * @param benefactor The address that will benefit from the payment.
   * @param checksum The checksum to verify the payment.
   */
  function pay(uint128 customerId, address benefactor, bytes1 checksum) 
    public 
    payable 
    stopInEmergency 
  {
    // compute checksum = first byte of keccak256(customerId, benefactor)
    bytes1 computed = bytes1(keccak256(customerId, benefactor));
    require(computed == checksum);

    // delegate to core logic
    payWithoutChecksum(customerId, benefactor);
  }

  /**
   * @notice Allows a customer to make a payment on their own behalf with a checksum.
   * @dev Verifies the checksum and then calls `pay` to process the payment.
   * @param customerId The unique identifier for the customer.
   * @param checksum The checksum to verify the payment.
   */
  function payForMyselfWithChecksum(uint128 customerId, bytes1 checksum) public payable {
    // beneficiary is msg.sender
    pay(customerId, msg.sender, checksum);
  }

  /**
   * @notice Allows a customer to make a payment on their own behalf without a checksum.
   * @dev Calls `payWithoutChecksum` to process the payment.
   * @param customerId The unique identifier for the customer.
   */
  function payForMyself(uint128 customerId) public payable {
    payWithoutChecksum(customerId, msg.sender);
  }

  /**
   * @notice Fallback function to receive Ether.
   * @dev Reverts if the contract receives Ether directly.
   */
  function() public payable {
    revert();
  }
}