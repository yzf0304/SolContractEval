```solidity
// SPDX-License-Identifier: MIT
pragma solidity 0.8.11;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        return msg.data;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
interface IERC20Metadata is IERC0 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string  private _name;
    string  private _symbol;
    constructor(string memory name_, string memory symbol_) {
        _name   = name_;
        _symbol = symbol_;
    }
    function name() public view override returns (string memory) { return _name; }
    function symbol()public view override returns(string memory){return _symbol;}
    function decimals()public view override returns(uint8){return 18;}
    function totalSupply()public view override returns(uint256){return _totalSupply;}
    function balanceOf(address account)public view override returns(uint256){return _balances[account];}
    function transfer(address recipient,uint256 amount)public override returns(bool){
        _transfer(_msgSender(),recipient,amount);
        return true;
    }
    function allowance(address owner,address spender)public view override returns(uint256){
        return _allowances[owner][spender];
    }
    function approve(address spender,uint256 amount)public override returns(bool){
        _approve(_msgSender(),spender,amount);
        return true;
    }
    function transferFrom(address sender,address recipient,uint256 amount)public override returns(bool){
        _transfer(sender,recipient,amount);
        uint256 current = _allowances[sender][_msgSender()];
        require(current>=amount,"ERC20: allowance exceeded");
        unchecked{_approve(sender,_msgSender(),current-amount);}
        return true;
    }
    function increaseAllowance(address spender,uint256 addedValue)public returns(bool){
        _approve(_msgSender(),spender,_allowances[_msgSender()][spender]+addedValue);
        return true;
    }
    function decreaseAllowance(address spender,uint256 subtractedValue)public returns(bool){
        uint256 current = _allowances[_msgSender()][spender];
        require(current>=subtractedValue,"ERC20: decreased below zero");
        unchecked{_approve(_msgSender(),spender,current-subtractedValue);}
        return true;
    }
    function _transfer(address from,address to,uint256 amount) internal virtual {
        require(from!=address(0),"ERC20: from zero");
        require(to!=address(0),"ERC20: to zero");
        uint256 bal = _balances[from];
        require(bal>=amount,"ERC20: exceeds balance");
        unchecked{_balances[from]=bal-amount;}
        _balances[to]+=amount;
        emit Transfer(from,to,amount);
    }
    function _createInitialSupply(address acct,uint256 amount) internal {
        require(acct!=address(0),"ERC20: mint to zero");
        _totalSupply+=amount;
        _balances[acct]+=amount;
        emit Transfer(address(0),acct,amount);
    }
    function _approve(address owner,address spender,uint256 amount) internal {
        require(owner!=address(0),"ERC20: approv from zero");
        require(spender!=address(0),"ERC20: approv to zero");
        _allowances[owner][spender]=amount;
        emit Approval(owner,spender,amount);
    }
}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed prev,address indexed next);
    constructor(){
        _owner=_msgSender();
        emit OwnershipTransferred(address(0),_owner);
    }
    function owner() public view returns(address){return _owner;}
    modifier onlyOwner(){
        require(_owner==_msgSender(),"Ownable: not owner");
        _;
    }
    function renounceOwnership() external onlyOwner {
        emit OwnershipTransferred(_owner,address(0));
        _owner = address(0);
    }
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner!=address(0),"Ownable: zero");
        emit OwnershipTransferred(_owner,newOwner);
        _owner=newOwner;
    }
}

interface IDexRouter {
    function factory() external pure returns(address);
    function WETH() external pure returns(address);
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline
    ) external;
    function addLiquidityETH(
        address token,uint amountTokenDesired,uint amountTokenMin,
        uint amountETHMin,address to,uint deadline
    ) external payable returns(uint amountToken,uint amountETH,uint liquidity);
}

interface IDexFactory {
    function createPair(address a,address b) external returns(address);
}

contract PochiInu is ERC20, Ownable {
    // limits and fee state
    uint256 public maxBuyAmount;
    uint256 public maxSellAmount;
    uint256 public maxWalletAmount;
    uint256 public swapTokensAtAmount;
    bool    public limitsInEffect = true;
    bool    public tradingActive  = false;
    bool    public swapEnabled     = false;
    uint256 public tradingActiveBlock = 0;
    bool    public transferDelayEnabled = true;

    IDexRouter public immutable uniswapV2Router;
    address     public immutable uniswapV2Pair;
    bool        private swapping;

    address public operationsAddress;
    address public yashaAddress;

    uint256 public buyOperationsFee;
    uint256 public buyLiquidityFee;
    uint256 public buyYashaFee;
    uint256 public buyTotalFees;

    uint256 public sellOperationsFee;
    uint256 public sellLiquidityFee;
    uint256 public sellYashaFee;
    uint256 public sellTotalFees;

    uint256 public tokensForOperations;
    uint256 public tokensForLiquidity;
    uint256 public tokensForYasha;

    mapping(address=>bool) private _isExcludedFromFees;
    mapping(address=>bool) public  _isExcludedMaxTransactionAmount;
    mapping(address=>bool) public  automatedMarketMakerPairs;
    mapping(address=>uint256) private _holderLastTransferTimestamp;

    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);
    event EnabledTrading();
    event RemovedLimits();
    event ExcludeFromFees(address indexed account, bool isExcluded);
    event UpdatedMaxBuyAmount(uint256 newAmount);
    event UpdatedMaxSellAmount(uint256 newAmount);
    event UpdatedMaxWalletAmount(uint256 newAmount);
    event UpdatedOperationsAddress(address indexed newWallet);
    event UpdatedYashaAddress(address indexed newWallet);
    event MaxTransactionExclusion(address indexed _address, bool excluded);
    event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived,uint256 tokensIntoLiquidity);
    event TransferForeignToken(address token, uint256 amount);

    constructor() ERC20("Pochi Inu","POCHI") {
        address newOwner = msg.sender;
        IDexRouter _router = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Router = _router;
        _excludeFromMaxTransaction(address(_router), true);
        address pair = IDexFactory(_router.factory()).createPair(address(this), _router.WETH());
        uniswapV2Pair = pair;
        _setAutomatedMarketMakerPair(pair, true);

        uint256 totalSupply = 100 * 1e9 * 1e18;
        maxBuyAmount        = totalSupply * 1 / 1000;
        maxSellAmount       = totalSupply * 1 / 1000;
        maxWalletAmount     = totalSupply * 3 / 1000;
        swapTokensAtAmount  = totalSupply * 25 / 100000;

        buyOperationsFee = 8; buyLiquidityFee = 3; buyYashaFee = 4;
        buyTotalFees = buyOperationsFee + buyLiquidityFee + buyYashaFee;
        sellOperationsFee = 8; sellLiquidityFee = 5; sellYashaFee = 2;
        sellTotalFees = sellOperationsFee + sellLiquidityFee + sellYashaFee;

        _excludeFromMaxTransaction(newOwner, true);
        _excludeFromMaxTransaction(address(this), true);
        _excludeFromMaxTransaction(address(0xdead), true);

        excludeFromFees(newOwner, true);
        excludeFromFees(address(this), true);
        excludeFromFees(address(0xdead), true);

        operationsAddress = newOwner;
        yashaAddress      = newOwner;

        _createInitialSupply(newOwner, totalSupply);
        transferOwnership(newOwner);
    }

    receive() external payable {}

    function enableTrading() external onlyOwner {
        require(!tradingActive,"Already");
        tradingActive = true;
        swapEnabled   = true;
        tradingActiveBlock = block.number;
        emit EnabledTrading();
    }

    function removeLimits() external onlyOwner {
        limitsInEffect = false;
        emit RemovedLimits();
    }

    function disableTransferDelay() external onlyOwner {
        transferDelayEnabled = false;
    }

    function updateMaxBuyAmount(uint256 newNum) external onlyOwner {
        require(newNum >= totalSupply() / 1000, "min 0.1%");
        maxBuyAmount = newNum;
        emit UpdatedMaxBuyAmount(newNum);
    }

    function updateMaxSellAmount(uint256 newNum) external onlyOwner {
        require(newNum >= totalSupply() / 1000, "min 0.1%");
        maxSellAmount = newNum;
        emit UpdatedMaxSellAmount(newNum);
    }

    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {
        require(newNum >= totalSupply() * 3 / 1000, "min 0.3%");
        maxWalletAmount = newNum;
        emit UpdatedMaxWalletAmount(newNum);
    }

    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner {
        require(
            newAmount >= totalSupply()/100000 && newAmount <= totalSupply()/1000,
            "amount must be between 0.001% and 0.1%"
        );
        swapTokensAtAmount = newAmount;
    }

    function _excludeFromMaxTransaction(address updAds, bool isExcluded) private {
        _isExcludedMaxTransactionAmount[updAds] = isExcluded;
    }

    function airdropToWallets(address[] memory wallets, uint256[] memory amountsInTokens) external onlyOwner {
        require(wallets.length == amountsInTokens.length, "Length mismatch");
        require(wallets.length <= 200, "Max 200");
        for (uint256 i = 0; i < wallets.length; i++) {
            super._transfer(msg.sender, wallets[i], amountsInTokens[i]);
        }
    }

    function excludeFromMaxTransaction(address updAds, bool isEx) external onlyOwner {
        require(!(updAds == uniswapV2Pair && !isEx), "Cannot remove pair");
        _excludeFromMaxTransaction(updAds, isEx);
        emit MaxTransactionExclusion(updAds, isEx);
    }

    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {
        require(pair != uniswapV2Pair || value, "Cannot remove pair");
        _setAutomatedMarketMakerPair(pair, value);
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        automatedMarketMakerPairs[pair] = value;
        _excludeFromMaxTransaction(pair, value);
        emit SetAutomatedMarketMakerPair(pair, value);
    }

    function updateBuyFees(uint256 _operationsFee, uint256 _liquidityFee, uint256 _yashaFee) external onlyOwner {
        buyOperationsFee = _operationsFee;
        buyLiquidityFee  = _liquidityFee;
        buyYashaFee      = _yashaFee;
        buyTotalFees     = _operationsFee + _liquidityFee + _yashaFee;
        require(buyTotalFees <= 15, "Max 15%");
    }

    function updateSellFees(uint256 _operationsFee, uint256 _liquidityFee, uint256 _yashaFee) external onlyOwner {
        sellOperationsFee = _operationsFee;
        sellLiquidityFee  = _liquidityFee;
        sellYashaFee      = _yashaFee;
        sellTotalFees     = _operationsFee + _liquidityFee + _yashaFee;
        require(sellTotalFees <= 20, "Max 20%");
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFromFees[account] = excluded;
        emit ExcludeFromFees(account, excluded);
    }

    function _transfer(address from, address to, uint256 amount) internal override {
        require(from != address(0) && to != address(0), "Zero address");
        if (amount == 0) {
            super._transfer(from, to, 0);
            return;
        }

        if (limitsInEffect) {
            if (
                from != owner() && to != owner() &&
                !_isExcludedFromFees[from] && !_isExcludedFromFees[to] &&
                !swapping
            ) {
                require(tradingActive, "Trading not active");
                // Transfer delay
                if (transferDelayEnabled) {
                    if (automatedMarketMakerPairs[from]) {
                        require(_holderLastTransferTimestamp[tx.origin] < block.number, "Only one tx per block");
                        _holderLastTransferTimestamp[tx.origin] = block.number;
                    }
                }
                // Buy
                if (automatedMarketMakerPairs[from]) {
                    require(amount <= maxBuyAmount, "Buy > max");
                    require(balanceOf(to) + amount <= maxWalletAmount, "Exceeds wallet");
                }
                // Sell
                else if (automatedMarketMakerPairs[to]) {
                    require(amount <= maxSellAmount, "Sell > max");
                }
                else {
                    require(balanceOf(to) + amount <= maxWalletAmount, "Exceeds wallet");
                }
            }
        }

        uint256 contractTokenBalance = balanceOf(address(this));
        bool canSwap = contractTokenBalance >= swapTokensAtAmount;
        if (
            canSwap &&
            swapEnabled &&
            !swapping &&
            !automatedMarketMakerPairs[from] &&
            !_isExcludedFromFees[from] &&
            !_isExcludedFromFees[to]
        ) {
            swapping = true;
            swapBack();
            swapping = false;
        }

        bool takeFee = tradingActive && !swapping;
        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
            takeFee = false;
        }

        if (takeFee) {
            uint256 fees = 0;
            // Bot penalty
            if (block.number <= tradingActiveBlock + 1) {
                fees = amount * 99 / 100;
                tokensForOperations += fees;
            }
            // Buy
            else if (automatedMarketMakerPairs[from]) {
                fees = amount * buyTotalFees / 100;
                tokensForLiquidity  += fees * buyLiquidityFee / buyTotalFees;
                tokensForOperations += fees * buyOperationsFee / buyTotalFees;
                tokensForYasha      += fees * buyYashaFee / buyTotalFees;
            }
            // Sell
            else if (automatedMarketMakerPairs[to]) {
                fees = amount * sellTotalFees / 100;
                tokensForLiquidity  += fees * sellLiquidityFee / sellTotalFees;
                tokensForOperations += fees * sellOperationsFee / sellTotalFees;
                tokensForYasha      += fees * sellYashaFee / sellTotalFees;
            }
            if (fees > 0) {
                super._transfer(from, address(this), fees);
                amount -= fees;
            }
        }

        super._transfer(from, to, amount);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount, 0, path, address(this), block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this), tokenAmount, 0, 0, address(this), block.timestamp
        );
    }

    function swapBack() private {
        uint256 contractBalance = balanceOf(address(this));
        uint256 totalTokensToSwap = tokensForLiquidity + tokensForOperations + tokensForYasha;
        if (contractBalance == 0 || totalTokensToSwap == 0) { return; }

        if (contractBalance > swapTokensAtAmount * 10) {
            contractBalance = swapTokensAtAmount * 10;
        }

        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;
        uint256 amountToSwapForETH = contractBalance - liquidityTokens;

        uint256 initialETHBalance = address(this).balance;
        swapTokensForEth(amountToSwapForETH);
        uint256 newETHBalance = address(this).balance - initialETHBalance;

        uint256 ethForOperations = newETHBalance * tokensForOperations / (totalTokensToSwap - (tokensForLiquidity/2));
        uint256 ethForYasha      = newETHBalance * tokensForYasha      / (totalTokensToSwap - (tokensForLiquidity/2));
        uint256 ethForLiquidity  = newETHBalance - ethForOperations - ethForYasha;

        tokensForLiquidity = 0;
        tokensForOperations = 0;
        tokensForYasha = 0;

        if (liquidityTokens > 0 && ethForLiquidity > 0) {
            addLiquidity(liquidityTokens, ethForLiquidity);
            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, liquidityTokens);
        }

        (bool os,) = payable(operationsAddress).call{value: ethForOperations}("");
        (bool ys,) = payable(yashaAddress).call{value: ethForYasha}("");
        require(os && ys, "ETH transfer failed");
    }

    function transferForeignToken(address _token, address _to) external onlyOwner returns (bool _sent) {
        require(_token != address(this), "Cannot withdraw native");
        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));
        _sent = IERC20(_token).transfer(_to, _contractBalance);
        emit TransferForeignToken(_token, _contractBalance);
    }

    function withdrawStuckETH() external onlyOwner {
        (bool success,) = payable(operationsAddress).call{value: address(this).balance}("");
        require(success, "Transfer failed");
    }

    function setOperationsAddress(address _operationsAddress) external onlyOwner {
        require(_operationsAddress != address(0), "Zero");
        operationsAddress = _operationsAddress;
        emit UpdatedOperationsAddress(_operationsAddress);
    }

    function setYashaAddress(address _yashaAddress) external onlyOwner {
        require(_yashaAddress != address(0), "Zero");
        yashaAddress = _yashaAddress;
        emit UpdatedYashaAddress(_yashaAddress);
    }
}
```