pragma solidity ^0.4.22;

// Standard ERC20 interface
contract ERC20Token {
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function totalSupply() constant public returns (uint256 supply);
    function balanceOf(address _owner) constant public returns (uint256 balance);
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    function approve(address _spender, uint256 _value) public returns (bool success);
    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);
}

/**
 * @title PortalToken
 * @notice Basic ERC20 token with jail functionality and controllable transfers.
 */
contract PortalToken is ERC20Token {
    address public initialOwner;
    uint256 public supply   = 1000000000 * 10 ** 18;  // 1,000,000,000 PTC
    string  public name     = 'PortalToken';
    uint8   public decimals = 18;
    string  public symbol   = 'PTC';
    string  public version  = 'v0.1';
    bool    public transfersEnabled = true;
    uint    public creationBlock;
    uint    public creationTime;

    mapping(address => uint256)                      balance;
    mapping(address => mapping(address => uint256)) m_allowance;
    mapping(address => uint)                         jail;        // timestamp until which tokens are locked
    mapping(address => uint256)                      jailAmount;  // amount locked until jail time

    /**
     * @notice Constructor assigns total supply to deployer.
     */
    function PortalToken() public {
        initialOwner        = msg.sender;
        balance[msg.sender] = supply;
        creationBlock       = block.number;
        creationTime        = block.timestamp;
    }

    /**
     * @notice Get balance of an account.
     */
    function balanceOf(address _account) constant public returns (uint256) {
        return balance[_account];
    }

    /**
     * @notice Get jailed (locked) amount of an account.
     */
    function jailAmountOf(address _account) constant public returns (uint256) {
        // if jail period expired, no locked amount
        if (block.timestamp > jail[_account]) {
            return 0;
        }
        return jailAmount[_account];
    }

    /**
     * @notice Total supply of tokens.
     */
    function totalSupply() constant public returns (uint256) {
        return supply;
    }

    /**
     * @dev Internal transfer implementation, updates balances and emits event.
     */
    function doTransfer(address _from, address _to, uint _value) internal returns (bool) {
        balance[_from] -= _value;
        balance[_to]   += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Transfer tokens to another address.
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(transfersEnabled);
        require(_to != address(0));
        uint256 locked = 0;
        if (block.timestamp <= jail[msg.sender]) {
            locked = jailAmount[msg.sender];
        }
        require(balance[msg.sender] >= _value);
        require(balance[msg.sender] - _value >= locked);
        return doTransfer(msg.sender, _to, _value);
    }

    /**
     * @notice Transfer tokens on behalf of another address.
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(transfersEnabled);
        require(_to != address(0));
        // check from-account jail
        uint256 lockedFrom = 0;
        if (block.timestamp <= jail[_from]) {
            lockedFrom = jailAmount[_from];
        }
        require(balance[_from] >= _value);
        require(balance[_from] - _value >= lockedFrom);
        // check to-account jail (recipient cannot be jailed during receive)
        require(block.timestamp > jail[_to]);
        // allowance
        uint256 allowed = m_allowance[_from][msg.sender];
        require(allowed >= _value);
        m_allowance[_from][msg.sender] = allowed - _value;
        return doTransfer(_from, _to, _value);
    }

    /**
     * @notice Approve an address to spend tokens on your behalf.
     */
    function approve(address _spender, uint256 _value) public returns (bool) {
        require(transfersEnabled);
        require(_spender != address(0));
        require(block.timestamp > jail[msg.sender]);
        require(block.timestamp > jail[_spender]);
        m_allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Check remaining allowance.
     */
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        require(transfersEnabled);
        return m_allowance[_owner][_spender];
    }

    /**
     * @notice Enable or disable transfers. Only initial owner.
     */
    function enableTransfers(bool _transfersEnabled) public returns (bool) {
        require(msg.sender == initialOwner);
        transfersEnabled = _transfersEnabled;
        return transfersEnabled;
    }

    /**
     * @notice Jail an address, locking a specified amount until a timestamp.
     */
    function catchYou(address _target, uint _timestamp, uint256 _amount) public returns (uint) {
        require(msg.sender == initialOwner);
        require(transfersEnabled);
        require(_target != address(0));
        require(_timestamp > block.timestamp);
        require(_amount <= balance[_target]);
        jail[_target]      = _timestamp;
        jailAmount[_target]= _amount;
        return jail[_target];
    }

    /**
     * @notice Fallback to receive Ether.
     */
    function() external payable {
        // simply accept Ether
    }
}