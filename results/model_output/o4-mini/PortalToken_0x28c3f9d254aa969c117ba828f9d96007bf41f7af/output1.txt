pragma solidity 0.4.22;

/**
 * @title PortalToken
 * @notice This contract implements a basic ERC20 token with additional features such as jail functionality and transfer enabling.
 * @dev The contract extends the ERC20Token interface and includes mappings for balances, allowances, and jail information.
 */
contract PortalToken is ERC20Token {
    address public initialOwner;
    uint256 public supply   = 1000000000 * 10 ** 18;  // 1,000,000,000 tokens with 18 decimals
    string  public name     = "PortalToken";
    uint8   public decimals = 18;
    string  public symbol   = "PTC";
    string  public version  = "v0.1";
    bool    public transfersEnabled = true;
    uint    public creationBlock;
    uint    public creationTime;

    mapping (address => uint256)                     balance;
    mapping (address => mapping (address => uint256)) m_allowance;
    mapping (address => uint)                        jail;
    mapping (address => uint256)                     jailAmount;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    /**
     * @notice Initializes the contract and sets the initial owner's balance to the total supply.
     */
    function PortalToken() public {
        initialOwner        = msg.sender;
        balance[msg.sender] = supply;
        creationBlock       = block.number;
        creationTime        = block.timestamp;
    }

    /**
     * @notice Returns the balance of the specified account.
     */
    function balanceOf(address _account) constant public returns (uint256) {
        return balance[_account];
    }

    /**
     * @notice Returns the amount of tokens that are jailed (frozen) for the specified account.
     */
    function jailAmountOf(address _account) constant public returns (uint256) {
        return jailAmount[_account];
    }

    /**
     * @notice Returns the total supply of the token.
     */
    function totalSupply() constant public returns (uint256) {
        return supply;
    }

    /**
     * @notice Transfers a specified amount of tokens from the sender to the recipient.
     */
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(transfersEnabled);
        require(_to != address(0));
        require(_value <= balance[msg.sender]);

        // enforce frozen amount while in jail period
        if (block.timestamp < jail[msg.sender]) {
            require(balance[msg.sender] - _value >= jailAmount[msg.sender]);
        }

        return doTransfer(msg.sender, _to, _value);
    }

    /**
     * @notice Transfers tokens from one account to another using allowance mechanism.
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(transfersEnabled);
        require(_to != address(0));
        require(_value <= balance[_from]);
        require(m_allowance[_from][msg.sender] >= _value);

        // enforce frozen amounts and jail status
        if (block.timestamp < jail[_from]) {
            require(balance[_from] - _value >= jailAmount[_from]);
        }
        require(block.timestamp >= jail[_to]);

        // deduct allowance
        uint256 previousAllowance = m_allowance[_from][msg.sender];
        m_allowance[_from][msg.sender] = previousAllowance - _value;

        // perform transfer
        bool ok = doTransfer(_from, _to, _value);
        if (!ok) {
            // restore allowance on failure
            m_allowance[_from][msg.sender] = previousAllowance;
        }
        return ok;
    }

    /**
     * @notice Internal function to perform the actual transfer of tokens.
     */
    function doTransfer(address _from, address _to, uint256 _value) internal returns (bool) {
        require(_to != address(0));
        require(balance[_from] >= _value);

        balance[_from] -= _value;
        balance[_to]   += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Approves a specified address to spend a certain amount of tokens on behalf of the sender.
     */
    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(transfersEnabled);
        require(block.timestamp >= jail[msg.sender]);
        require(block.timestamp >= jail[_spender]);

        m_allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Returns the remaining number of tokens that a spender is allowed to spend on behalf of an owner.
     */
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        require(transfersEnabled);
        return m_allowance[_owner][_spender];
    }

    /**
     * @notice Enables or disables token transfers.
     */
    function enableTransfers(bool _transfersEnabled) public returns (bool) {
        require(msg.sender == initialOwner);
        transfersEnabled = _transfersEnabled;
        return transfersEnabled;
    }

    /**
     * @notice Jails (freezes) a specified address, preventing a portion of their tokens from transferring until a timestamp.
     */
    function catchYou(address _target, uint _timestamp, uint256 _amount) public returns (uint) {
        require(msg.sender == initialOwner);
        require(transfersEnabled);
        require(_target != address(0));
        require(_timestamp > block.timestamp);
        require(_amount <= balance[_target]);

        jail[_target]       = _timestamp;
        jailAmount[_target] = _amount;
        return jail[_target];
    }

    /**
     * @notice Fallback function to receive Ether. Does nothing.
     */
    function() public payable {}
}