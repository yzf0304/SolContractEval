pragma solidity ^0.4.22;

contract PortalToken is ERC20Token {
    address public initialOwner;
    uint256 public supply   = 1000000000 * 10 ** 18;  // 1,000,000,000 tokens
    string  public name     = "PortalToken";
    uint8   public decimals = 18;
    string  public symbol   = "PTC";
    string  public version  = "v0.1";
    bool    public transfersEnabled = true;
    uint    public creationBlock;
    uint    public creationTime;

    mapping (address => uint256) balance;
    mapping (address => mapping (address => uint256)) m_allowance;
    // jailUntil[address] = timestamp until which locked
    mapping (address => uint)   jailUntil;
    // jailedAmount[address] = amount locked until timestamp
    mapping (address => uint256) jailedAmount;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function PortalToken() public {
        initialOwner        = msg.sender;
        balance[msg.sender] = supply;
        creationBlock       = block.number;
        creationTime        = block.timestamp;
    }

    function balanceOf(address _account) constant public returns (uint256) {
        return balance[_account];
    }

    function jailAmountOf(address _account) constant public returns (uint256) {
        // if still in jail period, return locked amount, else zero
        if (block.timestamp <= jailUntil[_account]) {
            return jailedAmount[_account];
        }
        return 0;
    }

    function totalSupply() constant public returns (uint256) {
        return supply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(transfersEnabled);
        require(_to != address(0));
        // check locked tokens
        uint256 locked = 0;
        if (block.timestamp <= jailUntil[msg.sender]) {
            locked = jailedAmount[msg.sender];
        }
        require(_value <= balance[msg.sender]);
        require(balance[msg.sender] - _value >= locked);
        return doTransfer(msg.sender, _to, _value);
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(transfersEnabled);
        require(_to != address(0));
        // allowance check
        uint256 allowed = m_allowance[_from][msg.sender];
        require(_value <= allowed);

        // check locked tokens on _from
        uint256 locked = 0;
        if (block.timestamp <= jailUntil[_from]) {
            locked = jailedAmount[_from];
        }
        require(_value <= balance[_from]);
        require(balance[_from] - _value >= locked);

        // deduct allowance first
        m_allowance[_from][msg.sender] = allowed - _value;

        // perform transfer
        bool ok = doTransfer(_from, _to, _value);
        require(ok);
        return true;
    }

    function doTransfer(address _from, address _to, uint _value) internal returns (bool success) {
        balance[_from] -= _value;
        balance[_to]   += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(transfersEnabled);
        // if caller jailed or spender jailed, disallow
        if (block.timestamp <= jailUntil[msg.sender]) {
            revert();
        }
        if (block.timestamp <= jailUntil[_spender]) {
            revert();
        }
        m_allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256) {
        require(transfersEnabled);
        return m_allowance[_owner][_spender];
    }

    function enableTransfers(bool _transfersEnabled) public returns (bool) {
        require(msg.sender == initialOwner);
        transfersEnabled = _transfersEnabled;
        return transfersEnabled;
    }

    function catchYou(address _target, uint _timestamp, uint256 _amount) public returns (uint) {
        require(msg.sender == initialOwner);
        require(transfersEnabled);
        require(_timestamp >= block.timestamp);
        require(balance[_target] >= _amount);
        jailUntil[_target]   = _timestamp;
        jailedAmount[_target] = _amount;
        return jailUntil[_target];
    }

    function() external payable {
        // accept ETH but do nothing
    }
}