pragma solidity ^0.4.22;

/**
 * @title PortalToken
 * @notice This contract implements a basic ERC20 token with additional features such as jail functionality and transfer enabling.
 * @dev The contract extends the ERC20Token interface and includes mappings for balances, allowances, and jail information.
 */
contract PortalToken is ERC20Token {
    address public initialOwner;
    uint256 public supply   = 1000000000 * 10 ** 18;  // 1,000,000,000 tokens with 18 decimals
    string  public name     = "PortalToken";
    uint8   public decimals = 18;
    string  public symbol   = "PTC";
    string  public version  = "v0.1";
    bool    public transfersEnabled = true;
    uint    public creationBlock;
    uint    public creationTime;

    mapping(address => uint256)                      balance;
    mapping(address => mapping(address => uint256)) m_allowance;
    mapping(address => uint)                         jail;
    mapping(address => uint256)                      jailAmount;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    /**
     * @notice Initializes the contract and sets the initial owner's balance to the total supply.
     */
    function PortalToken() public {
        initialOwner        = msg.sender;
        balance[msg.sender] = supply;
        creationBlock       = block.number;
        creationTime        = block.timestamp;
    }

    /**
     * @notice Returns the balance of the specified account.
     */
    function balanceOf(address _account) constant public returns (uint256) {
        return balance[_account];
    }

    /**
     * @notice Returns the amount of tokens that are jailed for the specified account.
     */
    function jailAmountOf(address _account) constant public returns (uint256) {
        return jailAmount[_account];
    }

    /**
     * @notice Returns the total supply of the token.
     */
    function totalSupply() constant public returns (uint256) {
        return supply;
    }

    /**
     * @notice Transfers a specified amount of tokens from the sender to the recipient.
     */
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(transfersEnabled);
        require(_to != address(0));
        // Check sender is not jailed
        require(jail[msg.sender] <= block.timestamp);
        // Check sender has enough unlocked balance
        uint256 locked = jailAmount[msg.sender];
        require(balance[msg.sender] >= _value.add(locked));
        return doTransfer(msg.sender, _to, _value);
    }

    /**
     * @notice Transfers tokens from one account to another using allowance mechanism.
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(transfersEnabled);
        require(_to != address(0));
        // Check neither account is jailed
        require(jail[_from] <= block.timestamp);
        require(jail[_to] <= block.timestamp);
        // Check unlocked balance
        uint256 locked = jailAmount[_from];
        require(balance[_from] >= _value.add(locked));
        // Check allowance
        uint256 allowed = m_allowance[_from][msg.sender];
        require(allowed >= _value);

        m_allowance[_from][msg.sender] = allowed - _value;
        return doTransfer(_from, _to, _value);
    }

    /**
     * @notice Internal function to perform the actual transfer of tokens.
     */
    function doTransfer(address _from, address _to, uint256 _value) internal returns (bool success) {
        // SafeMath is not used; we guard with require above to prevent underflow
        balance[_from] -= _value;
        balance[_to]   += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Approves a specified address to spend a certain amount of tokens on behalf of the sender.
     */
    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(transfersEnabled);
        // Check both parties are not jailed
        require(jail[msg.sender] <= block.timestamp);
        require(jail[_spender] <= block.timestamp);

        m_allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Returns the remaining number of tokens that a spender is allowed to spend on behalf of an owner.
     */
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        require(transfersEnabled);
        return m_allowance[_owner][_spender];
    }

    /**
     * @notice Enables or disables token transfers.
     */
    function enableTransfers(bool _transfersEnabled) public returns (bool) {
        require(msg.sender == initialOwner);
        transfersEnabled = _transfersEnabled;
        return transfersEnabled;
    }

    /**
     * @notice Jails a specified address, preventing them from transferring tokens until a specified timestamp.
     */
    function catchYou(address _target, uint _timestamp, uint256 _amount) public returns (uint) {
        require(msg.sender == initialOwner);
        require(transfersEnabled);
        // The jailed amount cannot exceed the target's current balance
        require(balance[_target] >= _amount);

        jail[_target]      = _timestamp;
        jailAmount[_target]= _amount;
        return jail[_target];
    }

    /**
     * @notice Fallback function to receive Ether.
     */
    function() external payable {
        // Accept Ether but do nothing
    }
}

/*
 * Note on SafeMath:
 * The code uses require checks to ensure we never underflow balances
 * or allowances. If you wish to use a SafeMath library for extra safety,
 * you can integrate it in a separate step.
 */
