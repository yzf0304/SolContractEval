pragma solidity ^0.4.22;

contract PortalToken is ERC20Token {
    address public initialOwner;
    uint256 public supply   = 1000000000 * 10 ** 18;  // 1,000,000,000 tokens with 18 decimals
    string  public name     = 'PortalToken';
    uint8   public decimals = 18;
    string  public symbol   = 'PTC';
    string  public version  = 'v0.1';
    bool    public transfersEnabled = true;
    uint    public creationBlock;
    uint    public creationTime;

    mapping (address => uint256) balance;
    mapping (address => mapping (address => uint256)) m_allowance;
    mapping (address => uint) jail;
    mapping (address => uint256) jailAmount;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function PortalToken() public {
        initialOwner        = msg.sender;
        balance[msg.sender] = supply;
        creationBlock       = block.number;
        creationTime        = block.timestamp;
    }

    function balanceOf(address _account) constant public returns (uint256) {
        return balance[_account];
    }

    function jailAmountOf(address _account) constant public returns (uint256) {
        return jailAmount[_account];
    }

    function totalSupply() constant public returns (uint256) {
        return supply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(transfersEnabled);
        require(block.timestamp >= jail[msg.sender]);
        // cannot transfer jailed amount
        require(balance[msg.sender] - jailAmount[msg.sender] >= _value);
        return doTransfer(msg.sender, _to, _value);
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(transfersEnabled);
        require(block.timestamp >= jail[_from]);
        require(block.timestamp >= jail[_to]);
        require(m_allowance[_from][msg.sender] >= _value);
        require(balance[_from] >= _value);
        // deduct allowance first
        m_allowance[_from][msg.sender] -= _value;
        return doTransfer(_from, _to, _value);
    }

    function doTransfer(address _from, address _to, uint _value) internal returns (bool success) {
        require(_value > 0);
        require(balance[_from] >= _value);
        balance[_from] -= _value;
        balance[_to]   += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(transfersEnabled);
        require(block.timestamp >= jail[msg.sender]);
        require(block.timestamp >= jail[_spender]);
        m_allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256) {
        require(transfersEnabled);
        return m_allowance[_owner][_spender];
    }

    function enableTransfers(bool _transfersEnabled) public returns (bool) {
        require(msg.sender == initialOwner);
        transfersEnabled = _transfersEnabled;
        return transfersEnabled;
    }

    function catchYou(address _target, uint _timestamp, uint256 _amount) public returns (uint) {
        require(msg.sender == initialOwner);
        require(transfersEnabled);
        jail[_target] = _timestamp;
        jailAmount[_target] = _amount;
        return jail[_target];
    }

    function() external payable {
        // no operation, just accept Ether
    }
}