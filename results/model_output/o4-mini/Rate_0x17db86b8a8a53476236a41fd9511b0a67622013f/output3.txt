pragma solidity ^0.4.18;

contract RBInformationStore is Ownable {
    /**
     * @notice Public address representing the profit container.
     */
    address public profitContainerAddress;

    /**
     * @notice Public address representing the company's wallet.
     */
    address public companyWalletAddress;

    /**
     * @notice Public uint representing the ratio of Ether for the owner.
     */
    uint    public etherRatioForOwner;

    /**
     * @notice Public address representing the multi-signature wallet.
     */
    address public multiSigAddress;

    /**
     * @notice Public address representing the account address for the sponsee.
     */
    address public accountAddressForSponsee;

    /**
     * @notice Public boolean indicating if the contract is payable by all.
     */
    bool    public isPayableEnabledForAll;

    /**
     * @notice Modifier to restrict function access to the multi-signature wallet.
     */
    modifier onlyMultiSig() {
        require(msg.sender == multiSigAddress);
        _;
    }

    /**
     * @notice Constructor to initialize the contract with the necessary addresses and values.
     * @param _profitContainerAddress The address of the profit container.
     * @param _companyWalletAddress The address of the company's wallet.
     * @param _etherRatioForOwner The ratio of Ether for the owner.
     * @param _multiSigAddress The address of the multi-signature wallet.
     * @param _accountAddressForSponsee The account address for the sponsee.
     */
    function RBInformationStore(
        address _profitContainerAddress,
        address _companyWalletAddress,
        uint    _etherRatioForOwner,
        address _multiSigAddress,
        address _accountAddressForSponsee
    ) public {
        profitContainerAddress    = _profitContainerAddress;
        companyWalletAddress      = _companyWalletAddress;
        etherRatioForOwner        = _etherRatioForOwner;
        multiSigAddress           = _multiSigAddress;
        accountAddressForSponsee  = _accountAddressForSponsee;
        isPayableEnabledForAll    = false;
    }

    /**
     * @notice Fallback function. Accepts Ether only when enabled for all.
     */
    function() public payable {
        require(isPayableEnabledForAll);
    }

    /**
     * @notice Function to change the profit container address.
     * @dev Only the multi-signature wallet can call this function.
     */
    function changeProfitContainerAddress(address _address) onlyMultiSig public {
        profitContainerAddress = _address;
    }

    /**
     * @notice Function to change the company wallet address.
     * @dev Only the multi-signature wallet can call this function.
     */
    function changeCompanyWalletAddress(address _address) onlyMultiSig public {
        companyWalletAddress = _address;
    }

    /**
     * @notice Function to change the ether ratio for the owner.
     * @dev Only the multi-signature wallet can call this function.
     */
    function changeEtherRatioForOwner(uint _value) onlyMultiSig public {
        etherRatioForOwner = _value;
    }

    /**
     * @notice Function to change the multi-signature wallet address.
     * @dev Only the multi-signature wallet can call this function.
     */
    function changeMultiSigAddress(address _address) onlyMultiSig public {
        multiSigAddress = _address;
    }

    /**
     * @notice Function to change the owner of the contract.
     * @dev Only the multi-signature wallet can call this function.
     */
    function changeOwner(address _address) onlyMultiSig public {
        owner = _address;
    }

    /**
     * @notice Function to change the account address for the sponsee.
     * @dev Only the multi-signature wallet can call this function.
     */
    function changeAccountAddressForSponsee(address _address) onlyMultiSig public {
        accountAddressForSponsee = _address;
    }

    /**
     * @notice Function to toggle the payable status for all.
     * @dev Only the multi-signature wallet can call this function.
     */
    function changeIsPayableEnabledForAll() onlyMultiSig public {
        isPayableEnabledForAll = !isPayableEnabledForAll;
    }
}