pragma solidity ^0.4.18;

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;

    function Ownable() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        if (msg.sender != owner) {
            revert();
        }
        _;
    }
}

/**
 * @notice This contract, RBInformationStore, is designed to store and manage various addresses and a ratio
 * related to the distribution of profits and control. It inherits from the Ownable contract to restrict
 * certain functions to the owner or a multi-signature wallet.
 * @dev The contract allows for the modification of stored addresses and the ether ratio only by a specified
 * multi-signature address. Additionally, it controls whether the contract can receive Ether.
 */
contract RBInformationStore is Ownable {
    address public profitContainerAddress;
    address public companyWalletAddress;
    uint    public etherRatioForOwner;
    address public multiSigAddress;
    address public accountAddressForSponsee;
    bool    public isPayableEnabledForAll;

    /**
     * @notice Modifier to restrict function access to the multi-signature wallet.
     */
    modifier onlyMultiSig() {
        require(msg.sender == multiSigAddress);
        _;
    }

    /**
     * @notice Constructor to initialize the contract with the necessary addresses and values.
     * @param _profitContainerAddress The address of the profit container.
     * @param _companyWalletAddress The address of the company's wallet.
     * @param _etherRatioForOwner The ratio of Ether for the owner.
     * @param _multiSigAddress The address of the multi-signature wallet.
     * @param _accountAddressForSponsee The account address for the sponsee.
     */
    function RBInformationStore(
        address _profitContainerAddress,
        address _companyWalletAddress,
        uint    _etherRatioForOwner,
        address _multiSigAddress,
        address _accountAddressForSponsee
    ) public {
        profitContainerAddress    = _profitContainerAddress;
        companyWalletAddress      = _companyWalletAddress;
        etherRatioForOwner        = _etherRatioForOwner;
        multiSigAddress           = _multiSigAddress;
        accountAddressForSponsee  = _accountAddressForSponsee;
        isPayableEnabledForAll    = false;
    }

    /**
     * @notice Fallback function. Allows the contract to receive Ether only when enabled.
     */
    function () public payable {
        require(isPayableEnabledForAll);
    }

    /**
     * @notice Change the profit container address.
     * @dev Only the multi-signature wallet can call this function.
     * @param _address The new address for the profit container.
     */
    function changeProfitContainerAddress(address _address) public onlyMultiSig {
        profitContainerAddress = _address;
    }

    /**
     * @notice Change the company wallet address.
     * @dev Only the multi-signature wallet can call this function.
     * @param _address The new address for the company wallet.
     */
    function changeCompanyWalletAddress(address _address) public onlyMultiSig {
        companyWalletAddress = _address;
    }

    /**
     * @notice Change the ether ratio for the owner.
     * @dev Only the multi-signature wallet can call this function.
     * @param _value The new ether ratio for the owner.
     */
    function changeEtherRatioForOwner(uint _value) public onlyMultiSig {
        etherRatioForOwner = _value;
    }

    /**
     * @notice Change the multi-signature wallet address.
     * @dev Only the multi-signature wallet can call this function.
     * @param _address The new address for the multi-signature wallet.
     */
    function changeMultiSigAddress(address _address) public onlyMultiSig {
        multiSigAddress = _address;
    }

    /**
     * @notice Change the owner of the contract.
     * @dev Only the multi-signature wallet can call this function.
     * @param _address The new owner address.
     */
    function changeOwner(address _address) public onlyMultiSig {
        owner = _address;
    }

    /**
     * @notice Change the account address for the sponsee.
     * @dev Only the multi-signature wallet can call this function.
     * @param _address The new account address for the sponsee.
     */
    function changeAccountAddressForSponsee(address _address) public onlyMultiSig {
        accountAddressForSponsee = _address;
    }

    /**
     * @notice Toggle the payable status for all.
     * @dev This function toggles `isPayableEnabledForAll`, allowing or disallowing the contract to receive Ether.
     * Only the multi-signature wallet can call this function.
     */
    function changeIsPayableEnabledForAll() public onlyMultiSig {
        isPayableEnabledForAll = !isPayableEnabledForAll;
    }
}