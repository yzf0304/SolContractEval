pragma solidity ^0.8.7;

contract SaudiPotatoz is ERC721A, Ownable, ReentrancyGuard {
    string public baseURI;
    uint public price = 0 ether;
    uint public maxPerTx = 1;
    uint public maxPerWallet = 1;
    uint public totalFree = 0;
    uint public maxSupply = 5000;
    uint public nextOwnerToExplicitlySet;
    bool public mintEnabled;

    constructor() ERC721A("SaudiPotatoz", "SaudiPotatoz") {}

    modifier callerIsUser() {
        require(tx.origin == msg.sender, "The caller is another contract");
        _;
    }

    function freeMint(uint256 amt) external callerIsUser {
        require(mintEnabled, "Minting is off");
        require(amt > 0, "Must mint at least one");
        require(amt <= maxPerTx, "Exceeds max per transaction");
        require(totalSupply() + amt <= totalFree, "Exceeds free supply");
        require(_numberMinted(msg.sender) + amt <= maxPerWallet, "Exceeds max per wallet");
        _safeMint(msg.sender, amt);
    }

    function mint(uint256 amt) external payable callerIsUser {
        require(mintEnabled, "Minting is off");
        require(amt > 0, "Must mint at least one");
        require(amt <= maxPerTx, "Exceeds max per transaction");
        require(totalSupply() + amt <= maxSupply, "Exceeds max supply");
        require(_numberMinted(msg.sender) + amt <= maxPerWallet, "Exceeds max per wallet");
        require(msg.value == price * amt, "Incorrect Ether value");
        _safeMint(msg.sender, amt);
    }

    function ownerBatchMint(uint256 amt) external onlyOwner {
        require(amt > 0, "Must mint at least one");
        require(totalSupply() + amt <= maxSupply, "Exceeds max supply");
        _safeMint(msg.sender, amt);
    }

    function toggleMinting() external onlyOwner {
        mintEnabled = !mintEnabled;
    }

    function numberMinted(address owner) public view returns (uint256) {
        return _numberMinted(owner);
    }

    function setBaseURI(string calldata baseURI_) external onlyOwner {
        baseURI = baseURI_;
    }

    function setPrice(uint256 price_) external onlyOwner {
        price = price_;
    }

    function setTotalFree(uint256 totalFree_) external onlyOwner {
        totalFree = totalFree_;
    }

    function setMaxPerTx(uint256 maxPerTx_) external onlyOwner {
        maxPerTx = maxPerTx_;
    }

    function setMaxPerWallet(uint256 maxPerWallet_) external onlyOwner {
        maxPerWallet = maxPerWallet_;
    }

    function setmaxSupply(uint256 maxSupply_) external onlyOwner {
        maxSupply = maxSupply_;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    function withdraw() external onlyOwner nonReentrant {
        uint256 balance = address(this).balance;
        require(balance > 0, "No ether to withdraw");
        (bool success, ) = payable(owner()).call{value: balance}("");
        require(success, "Withdraw failed");
    }

    function setOwnersExplicit(uint256 quantity) external onlyOwner nonReentrant {
        require(quantity > 0, "Quantity must be nonzero");
        _setOwnersExplicit(quantity);
    }

    function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {
        return ownershipOf(tokenId);
    }

    function _setOwnersExplicit(uint256 quantity) internal {
        uint256 _next = nextOwnerToExplicitlySet;
        uint256 end = _next + quantity;
        if (end > currentIndex) {
            end = currentIndex;
        }
        require(_next < end, "No more tokens to set");
        for (uint256 i = _next; i < end; i++) {
            if (_ownerships[i].addr == address(0)) {
                TokenOwnership memory ownership = ownershipOf(i);
                _ownerships[i] = TokenOwnership({
                    addr: ownership.addr,
                    startTimestamp: ownership.startTimestamp
                });
            }
        }
        nextOwnerToExplicitlySet = end;
    }
}