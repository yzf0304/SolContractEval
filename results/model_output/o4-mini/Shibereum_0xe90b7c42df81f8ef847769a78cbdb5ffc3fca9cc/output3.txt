```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

interface IUniswapV2Router {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

contract Ownable {
    address private _owner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    constructor() {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), msg.sender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

contract Shibereum is IERC20, Ownable {
    // --- ERC20 metadata ---
    string private constant _name = "Shibereum.Ai";
    string private constant _symbol = "Shibereum";
    uint8 private constant _decimals = 9;
    uint256 private constant _totalSupply = 100_000_000 * 10**_decimals;

    // --- Balances & allowances ---
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    // --- Bot blocking & anti-MEV ---
    mapping(address => bool) private _blocked;
    mapping(address => uint256) private _lastTradeBlock;
    mapping(address => bool) private isContractExempt;
    uint256 private tradeCooldown = 1;

    // --- Wallet & swap limits ---
    uint256 public constant maxWalletAmount = 3_000_000 * 10**_decimals;
    uint256 private constant contractSwapLimit = 300_000 * 10**_decimals;
    uint256 private constant contractSwapMax = 2_000_000 * 10**_decimals;

    // --- Fees ---
    struct TradingFees {
        uint256 buyTax;
        uint256 sellTax;
    }
    TradingFees public tradingFees = TradingFees({buyTax: 10, sellTax: 45});
    uint256 public constant sniperTax = 49;

    // --- Uniswap ---
    IUniswapV2Router private constant uniswapRouter =
        IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
    address private immutable ETH = uniswapRouter.WETH();
    address private immutable uniswapPair;

    // --- Addresses ---
    address payable private immutable deployerAddress =
        payable(msg.sender);
    address payable private constant devWallet =
        payable(0xC454F88358c3A56Fe53A22bE8881EDFd36bde2Bc);

    // --- Trading controls ---
    bool private tradingOpen = false;
    bool private swapping = false;
    bool private antiMEV = false;
    uint256 private startingBlock;
    uint256 private preLaunch; // number of blocks to apply sniper tax

    // --- Modifiers ---
    modifier swapLock() {
        swapping = true;
        _;
        swapping = false;
    }

    modifier tradingLock(address sender) {
        require(
            tradingOpen || sender == deployerAddress || sender == devWallet,
            "Trading is not open"
        );
        _;
    }

    // --- Events ---
    // (IERC20 Transfer and Approval are reused)

    constructor() {
        // create Uniswap pair
        uniswapPair = IUniswapV2Factory(uniswapRouter.factory())
            .createPair(address(this), ETH);
        // exempt contract itself
        isContractExempt[address(this)] = true;
        // mint total supply to deployer
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    receive() external payable {}

    // --- IERC20 standard methods ---
    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account)
        public
        view
        override
        returns (uint256)
    {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner_, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner_][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(
            currentAllowance >= amount,
            "ERC20: transfer amount exceeds allowance"
        );
        _approve(sender, msg.sender, currentAllowance - amount);
        _transfer(sender, recipient, amount);
        return true;
    }

    // --- Internal approve ---
    function _approve(
        address owner_,
        address spender,
        uint256 amount
    ) private {
        require(owner_ != address(0), "ERC20: approve from zero");
        require(spender != address(0), "ERC20: approve to zero");
        _allowances[owner_][spender] = amount;
        emit Approval(owner_, spender, amount);
    }

    // --- Core transfer with fees, anti-MEV, cooldown, swapback ---
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private tradingLock(from) {
        require(from != address(0) && to != address(0), "Zero address");
        require(amount > 0, "Zero amount");
        require(!_blocked[from] && !_blocked[to], "Blocked address");

        // Anti-MEV: ensure at least one human and enforce cooldown
        if (antiMEV) {
            address human = ensureOneHuman(to, from);
            ensureMaxTxFrequency(human);
        }

        // Enforce max wallet on buys/transfers
        if (
            from != owner() &&
            to != owner() &&
            from != address(this) &&
            to != address(this)
        ) {
            if (
                to != uniswapPair && !isContractExempt[to]
            ) {
                require(
                    _balances[to] + amount <= maxWalletAmount,
                    "Exceeds max wallet"
                );
            }
        }

        // Swapback on sells or regular transfers when threshold met
        uint256 contractBalance = _balances[address(this)];
        if (shouldSwapback(from, amount) && contractBalance >= contractSwapLimit) {
            swapback(getSwapAmount(contractBalance));
        }

        // Compute fee
        uint256 fee = takeFee(from, amount);
        uint256 amountReceived = amount - fee;

        // Transfer amounts
        _balances[from] -= amount;
        if (fee > 0) {
            _balances[address(this)] += fee;
            emit Transfer(from, address(this), fee);
        }
        _balances[to] += amountReceived;
        emit Transfer(from, to, amountReceived);
    }

    // --- Swap tokens for ETH, send to dev wallet ---
    function swapback(uint256 tokenAmount) private swapLock {
        _approve(address(this), address(uniswapRouter), tokenAmount);
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = ETH;
        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            devWallet,
            block.timestamp
        );
    }

    // --- Determine if we should swap ---
    function shouldSwapback(address from, uint256)
        private
        view
        returns (bool)
    {
        return
            tradingOpen &&
            !swapping &&
            from != uniswapPair &&
            _balances[address(this)] >= contractSwapLimit;
    }

    // --- Cap swap amount ---
    function getSwapAmount(uint256 tokenBalance)
        private
        pure
        returns (uint256)
    {
        if (tokenBalance > contractSwapMax) {
            return contractSwapMax;
        }
        return tokenBalance;
    }

    // --- Calculate fee ---
    function takeFee(address from, uint256 amount)
        private
        view
        returns (uint256)
    {
        // Exempt addresses pay no fee
        if (
            isContractExempt[from] ||
            from == deployerAddress ||
            from == devWallet
        ) {
            return 0;
        }
        // Sniper tax window
        if (
            block.number < startingBlock + preLaunch
        ) {
            return (amount * sniperTax) / 100;
        }
        // Buy
        if (from == uniswapPair) {
            return (amount * tradingFees.buyTax) / 100;
        }
        // Sell
        if (msg.sender == uniswapPair || tx.origin == uniswapPair) {
            // unlikely path for fee-on-transfer tokens but included
            return (amount * tradingFees.sellTax) / 100;
        }
        // Standard sell detection
        if (tx.origin == from && tx.origin != to && to == uniswapPair) {
            return (amount * tradingFees.sellTax) / 100;
        }
        // No fee otherwise
        return 0;
    }

    // --- Check code size to detect a contract ---
    function isContract(address account) private view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    // --- Ensure at least one party is not a contract ---
    function ensureOneHuman(address _to, address _from)
        private
        view
        returns (address)
    {
        bool toContract = isContract(_to);
        bool fromContract = isContract(_from);
        require(
            !(toContract && fromContract),
            "Both addresses are contracts"
        );
        return toContract ? _from : _to;
    }

    // --- Enforce block cooldown per address ---
    function ensureMaxTxFrequency(address addr) private view {
        uint256 last = _lastTradeBlock[addr];
        require(
            block.number > last + tradeCooldown,
            "Transfer cooldown"
        );
    }

    // --- Owner functions ---

    /// @notice Toggle anti-MEV protection
    function toggleAntiMEV(bool toggle) external onlyOwner {
        antiMEV = toggle;
    }

    /// @notice Set trade cooldown in blocks
    function setTradeCooldown(uint256 newTradeCooldown)
        external
        onlyOwner
    {
        tradeCooldown = newTradeCooldown;
    }

    /// @notice Manual swapback of a percentage of the contract's balance
    function manualSwapback(uint256 percent) external onlyOwner {
        require(percent > 0 && percent <= 100, "Invalid percent");
        uint256 contractBal = _balances[address(this)];
        uint256 amt = (contractBal * percent) / 100;
        swapback(amt);
    }

    /// @notice Adjust buy/sell fees
    function setFees(uint256 newBuyTax, uint256 newSellTax)
        external
        onlyOwner
    {
        require(newBuyTax <= 100 && newSellTax <= 100, "Fees too high");
        tradingFees.buyTax = newBuyTax;
        tradingFees.sellTax = newSellTax;
    }

    /// @notice Exempt or unexempt an address from fees & limits
    function setContractExempt(address account, bool value)
        external
        onlyOwner
    {
        isContractExempt[account] = value;
    }

    /// @notice Block or unblock bot addresses
    function setBots(address[] calldata bots, bool shouldBlock)
        external
        onlyOwner
    {
        for (uint256 i = 0; i < bots.length; i++) {
            _blocked[bots[i]] = shouldBlock;
        }
    }

    /// @notice Initialize exemptions (owner & dev)
    function initialize() external onlyOwner {
        require(!tradingOpen, "Already initialized");
        isContractExempt[deployerAddress] = true;
        isContractExempt[devWallet] = true;
    }

    /// @notice Set sniper-tax duration (preLaunch blocks)
    function modifyParameters(bool[] calldata, uint256 nrBlocks)
        external
        onlyOwner
    {
        // The bool[] is unused but present in the signature by design
        preLaunch = nrBlocks;
    }

    /// @notice Open trading and record start block
    function openTrading() external onlyOwner {
        require(!tradingOpen, "Trading already open");
        tradingOpen = true;
        startingBlock = block.number;
    }
}
```