```solidity
pragma solidity 0.5.2;

contract T0ken is ERC20, Ownable, LockableDestroyable {
    using AdditiveMath for uint256;
    using AddressMap for AddressMap.Data;

    address constant internal ZERO_ADDRESS = address(0);
    string public constant name = "TZERO PREFERRED";
    string public constant symbol = "TZROP";
    uint8 public constant decimals = 0;

    AddressMap.Data public shareholders;
    Compliance public compliance;
    address public issuer;
    bool public issuingFinished = false;
    mapping(address => address) public cancellations;

    mapping(address => uint256) internal balances;
    uint256 internal totalSupplyTokens;

    mapping (address => mapping (address => uint256)) private allowed;

    // ------------------------------- Modifiers -------------------------------

    modifier onlyIssuer() {
        require(msg.sender == issuer, "Only issuer allowed");
        _;
    }

    modifier canIssue() {
        require(!issuingFinished, "Issuing is already finished");
        _;
    }

    modifier isNotCancelled(address addr) {
        require(cancellations[addr] == ZERO_ADDRESS, "Address has been cancelled");
        _;
    }

    modifier hasFunds(address addr, uint256 tokens) {
        require(tokens <= balances[addr], "Insufficient funds");
        _;
    }

    // -------------------------------- Events ---------------------------------

    event VerifiedAddressSuperseded(
        address indexed original,
        address indexed replacement,
        address indexed sender
    );
    event IssuerSet(address indexed previousIssuer, address indexed newIssuer);
    event Issue(address indexed to, uint256 tokens);
    event IssueFinished();
    event ShareholderAdded(address shareholder);
    event ShareholderRemoved(address shareholder);

    // -------------------------------------------------------------------------

    function transfer(address to, uint256 tokens)
        external
        isUnlocked
        isNotCancelled(to)
        hasFunds(msg.sender, tokens)
        returns (bool)
    {
        canTransfer(msg.sender, to, tokens, false);
        transferTokens(msg.sender, to, tokens);
        return true;
    }

    function transferFrom(address from, address to, uint256 tokens)
        external
        isUnlocked
        isNotCancelled(to)
        hasFunds(from, tokens)
        returns (bool)
    {
        require(tokens <= allowed[from][msg.sender], "Allowance exceeded");
        allowed[from][msg.sender] = allowed[from][msg.sender].subtract(tokens);
        emit Approval(from, msg.sender, allowed[from][msg.sender]);

        canTransfer(from, to, tokens, false);
        transferTokens(from, to, tokens);
        return true;
    }

    function transferOverride(address from, address to, uint256 tokens)
        external
        isUnlocked
        isNotCancelled(to)
        hasFunds(from, tokens)
        returns (bool)
    {
        canTransfer(from, to, tokens, true);
        transferTokens(from, to, tokens);
        return true;
    }

    function issueTokens(uint256 quantity)
        external
        isUnlocked
        onlyIssuer
        canIssue
        returns (bool)
    {
        require(quantity > 0, "Quantity must be > 0");
        require(compliance != Compliance(ZERO_ADDRESS), "Compliance not set");
        // compliance check
        require(
            compliance.canIssue(msg.sender, ZERO_ADDRESS, issuer, quantity),
            "Issuance denied by compliance"
        );

        // Mint
        balances[issuer] = balances[issuer].add(quantity);
        totalSupplyTokens = totalSupplyTokens.add(quantity);

        // Add shareholder if new
        if (!shareholders.exists(issuer)) {
            shareholders.append(issuer);
            emit ShareholderAdded(issuer);
        }

        emit Issue(issuer, quantity);
        emit Transfer(ZERO_ADDRESS, issuer, quantity);
        return true;
    }

    function finishIssuing()
        external
        isUnlocked
        onlyIssuer
        canIssue
        returns (bool)
    {
        issuingFinished = true;
        emit IssueFinished();
        return true;
    }

    function cancelAndReissue(address original, address replacement)
        external
        isUnlocked
        onlyIssuer
        isNotCancelled(replacement)
    {
        require(original != replacement, "Original and replacement must differ");
        // original must be current shareholder
        require(shareholders.exists(original), "Original not a shareholder");
        // replacement must already exist as a shareholder
        require(shareholders.exists(replacement), "Replacement not a shareholder");

        uint256 held = balances[original];
        // mark original as cancelled
        cancellations[original] = replacement;

        // remove original from shareholders and zero balance
        if (held > 0) {
            balances[original] = 0;
            shareholders.remove(original);
            emit ShareholderRemoved(original);
        }

        // credit replacement
        balances[replacement] = balances[replacement].add(held);
        // (replacement already a shareholder)

        emit VerifiedAddressSuperseded(original, replacement, msg.sender);
        if (held > 0) {
            emit Transfer(original, replacement, held);
        }
    }

    function approve(address spender, uint256 tokens)
        external
        isUnlocked
        isNotCancelled(msg.sender)
        returns (bool)
    {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    function setIssuer(address newIssuer)
        external
        isUnlocked
        onlyOwner
    {
        require(newIssuer != ZERO_ADDRESS, "Issuer cannot be zero address");
        emit IssuerSet(issuer, newIssuer);
        issuer = newIssuer;
    }

    function setCompliance(address newComplianceAddress)
        external
        isUnlocked
        onlyOwner
    {
        require(newComplianceAddress != ZERO_ADDRESS, "Compliance cannot be zero address");
        compliance = Compliance(newComplianceAddress);
    }

    // -------------------------------- Getters --------------------------------

    function totalSupply()
        external
        view
        returns (uint256)
    {
        return totalSupplyTokens;
    }

    function balanceOf(address addr)
        external
        view
        returns (uint256)
    {
        return balances[addr];
    }

    function allowance(address addrOwner, address spender)
        external
        view
        returns (uint256)
    {
        return allowed[addrOwner][spender];
    }

    function holderAt(int256 index)
        external
        view
        returns (address)
    {
        return shareholders.at(index);
    }

    function isHolder(address addr)
        external
        view
        returns (bool)
    {
        return shareholders.exists(addr);
    }

    function isSuperseded(address addr)
        external
        view
        returns (bool)
    {
        return cancellations[addr] != ZERO_ADDRESS;
    }

    function getSuperseded(address addr)
        external
        view
        returns (address)
    {
        address current = addr;
        while (cancellations[current] != ZERO_ADDRESS) {
            current = cancellations[current];
        }
        return current;
    }

    // -------------------------------- Private --------------------------------

    function canTransfer(
        address from,
        address to,
        uint256 tokens,
        bool isOverride
    )
        private
        isNotCancelled(to)
        returns (bool)
    {
        require(compliance != Compliance(ZERO_ADDRESS), "Compliance not set");
        bool ok;
        if (isOverride) {
            ok = compliance.canOverride(msg.sender, from, to, tokens);
        } else {
            ok = compliance.canTransfer(msg.sender, from, to, tokens);
        }
        require(ok, "Transfer not compliant");
        return ok;
    }

    function transferTokens(address from, address to, uint256 tokens)
        private
    {
        // update balances
        balances[from] = balances[from].subtract(tokens);
        balances[to]   = balances[to].add(tokens);

        // add 'to' as shareholder if new
        if (!shareholders.exists(to)) {
            shareholders.append(to);
            emit ShareholderAdded(to);
        }

        // remove 'from' if balance now zero
        if (balances[from] == 0 && shareholders.exists(from)) {
            shareholders.remove(from);
            emit ShareholderRemoved(from);
        }

        emit Transfer(from, to, tokens);
    }
}
```