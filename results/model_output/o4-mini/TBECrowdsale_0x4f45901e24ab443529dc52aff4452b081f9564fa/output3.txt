pragma solidity 0.4.24;

interface Token {
    function transfer(address _to, uint256 _value) external;
}

contract TBECrowdsale {
    Token       public tokenReward;
    uint256     public price;
    address     public creator;
    address     public owner = 0x700635ad386228dEBCfBb5705d2207F529af8323;
    uint256     public startDate;
    uint256     public endDate;

    mapping(address => bool)    public tokenAddress;
    mapping(address => uint256) public balanceOfEther;
    mapping(address => uint256) public balanceOf;

    modifier isCreator() {
        require(msg.sender == creator);
        _;
    }

    event FundTransfer(address backer, uint amount, bool isContribution);

    constructor() public {
        creator = msg.sender;
        price    = 100;
        startDate = now;
        endDate   = startDate + 3 days;
        tokenReward = Token(0xf18b97b312EF48C5d2b5C21c739d499B7c65Cf96);
    }

    function setOwner(address _owner) 
        public 
        isCreator 
    {
        require(_owner != address(0));
        owner = _owner;
    }

    function setStartDate(uint256 _startDate) 
        public 
        isCreator 
    {
        require(_startDate < endDate);
        startDate = _startDate;
    }

    function setEndtDate(uint256 _endDate) 
        public 
        isCreator 
    {
        require(_endDate > startDate);
        endDate = _endDate;
    }

    function setPrice(uint256 _price) 
        public 
        isCreator 
    {
        require(_price > 0);
        price = _price;
    }

    function setToken(address _token) 
        public 
        isCreator 
    {
        require(_token != address(0));
        tokenReward = Token(_token);
        tokenAddress[_token] = true;
    }

    function sendToken(address _to, uint256 _value) 
        public 
        isCreator 
    {
        require(_to != address(0));
        require(_value > 0);
        tokenReward.transfer(_to, _value);
        balanceOf[_to] += _value;
        emit FundTransfer(_to, _value, false);
    }

    function () 
        external 
        payable 
    {
        require(now > startDate);
        require(now < endDate);

        uint256 amount = price;

        balanceOfEther[msg.sender] += msg.value / 1 ether;
        tokenReward.transfer(msg.sender, amount);
        emit FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
}