pragma solidity 0.4.24;

interface Token {
    function transfer(address _to, uint256 _value) external;
}

/**
 * @notice This contract is designed to manage a crowdsale for a token, allowing users to purchase tokens by sending Ether.
 * @dev The contract includes functionalities for setting the price, start and end dates, and managing the token distribution. 
 * Only the creator of the contract can set these parameters. The contract also ensures that contributions are only accepted within the specified time frame.
 */
contract TBECrowdsale {
    
    Token    public tokenReward;
    uint256  public price;
    address  public creator;
    address  public owner = 0x700635ad386228dEBCfBb5705d2207F529af8323;
    uint256  public startDate;
    uint256  public endDate;
    
    mapping(address => bool)    public tokenAddress;
    mapping(address => uint256) public balanceOfEther;
    mapping(address => uint256) public balanceOf;

    /**
     * @notice Modifier to ensure that only the creator can call certain functions.
     * @dev This modifier checks if the message sender is the creator of the contract.
     */
    modifier isCreator() {
        require(msg.sender == creator, "Only creator can call this");
        _;
    }

    /**
     * @notice Event emitted when a fund transfer occurs.
     * @param backer The address of the backer or recipient.
     * @param amount The amount of Ether or tokens transferred.
     * @param isContribution Boolean indicating if the transfer is a contribution (true) or a manual send (false).
     */
    event FundTransfer(address indexed backer, uint256 amount, bool isContribution);

    /**
     * @notice Initializes the crowdsale with default parameters.
     * @dev The constructor sets the creator, price, sale period, and the initial token contract address.
     */
    constructor() public {
        creator    = msg.sender;
        price      = 100;
        startDate  = now;
        endDate    = startDate + 3 days;
        tokenReward = Token(0xf18b97b312EF48C5d2b5C21c739d499B7c65Cf96);
    }

    /**
     * @notice Sets the owner of the contract.
     * @param _owner The new owner's address.
     * @dev Only the creator can call this function.
     */
    function setOwner(address _owner) 
        public 
        isCreator 
    {
        owner = _owner;
    }

    /**
     * @notice Sets the start date of the crowdsale.
     * @param _startDate The new start date (timestamp).
     * @dev Only the creator can call this function.
     */
    function setStartDate(uint256 _startDate) 
        public 
        isCreator 
    {
        startDate = _startDate;
    }

    /**
     * @notice Sets the end date of the crowdsale.
     * @param _endDate The new end date (timestamp).
     * @dev Only the creator can call this function.
     */
    function setEndtDate(uint256 _endDate) 
        public 
        isCreator 
    {
        endDate = _endDate;
    }

    /**
     * @notice Sets the price of the token in terms of Ether.
     * @param _price The new price (tokens per Ether unit).
     * @dev Only the creator can call this function.
     */
    function setPrice(uint256 _price) 
        public 
        isCreator 
    {
        price = _price;
    }

    /**
     * @notice Sets the token contract address.
     * @param _token The new token contract address.
     * @dev Only the creator can call this function.
     */
    function setToken(address _token) 
        public 
        isCreator 
    {
        tokenReward = Token(_token);
    }

    /**
     * @notice Sends a specified amount of tokens to a given address manually.
     * @param _to The recipient's address.
     * @param _value The amount of tokens to send.
     * @dev Only the creator can call this function.
     */
    function sendToken(address _to, uint256 _value) 
        public 
        isCreator 
    {
        tokenReward.transfer(_to, _value);
        balanceOf[_to] += _value;
        emit FundTransfer(_to, _value, false);
    }

    /**
     * @notice Fallback function to handle incoming Ether and distribute tokens.
     * @dev This function ensures that contributions are only accepted within the specified time frame,
     *      updates contribution records, transfers tokens to the sender, and forwards the Ether to the owner.
     */
    function () 
        external 
        payable 
    {
        require(now > startDate, "Crowdsale not started");
        require(now < endDate,   "Crowdsale ended");
        
        // Each contributor pays Ether and receives `price` tokens per 1 ETH.
        // Here, `amount` is fixed to `price` (as per original spec).
        uint256 amount = price;

        // Record the contributor's Ether (in whole ETH units) and token balance
        balanceOfEther[msg.sender] += msg.value / 1 ether;
        balanceOf[msg.sender]      += amount;

        // Transfer tokens and emit event
        tokenReward.transfer(msg.sender, amount);
        emit FundTransfer(msg.sender, amount, true);

        // Forward Ether to the owner
        owner.transfer(msg.value);
    }
}