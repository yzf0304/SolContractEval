pragma solidity 0.4.18;

contract CrowdsaleToken {
    using TokenLib for TokenLib.TokenStorage;

    TokenLib.TokenStorage public token;

    /**
     * @notice Initializes the token with the provided parameters.
     * @param owner The initial owner of the token.
     * @param name The name of the token.
     * @param symbol The symbol of the token.
     * @param decimals The number of decimal places the token supports.
     * @param initialSupply The initial supply of tokens.
     * @param allowMinting Whether or not minting is allowed.
     */
    function CrowdsaleToken(
        address owner,
        string memory name,
        string memory symbol,
        uint8 decimals,
        uint256 initialSupply,
        bool allowMinting
    )
        public
    {
        token.init(owner, name, symbol, decimals, initialSupply, allowMinting);
    }

    /**
     * @notice Returns the name of the token.
     */
    function name() public view returns (string memory) {
        return token.name;
    }

    /**
     * @notice Returns the symbol of the token.
     */
    function symbol() public view returns (string memory) {
        return token.symbol;
    }

    /**
     * @notice Returns the number of decimals the token supports.
     */
    function decimals() public view returns (uint8) {
        return token.decimals;
    }

    /**
     * @notice Returns the total supply of the token.
     */
    function totalSupply() public view returns (uint256) {
        return token.totalSupply;
    }

    /**
     * @notice Returns the initial supply of the token.
     */
    function initialSupply() public view returns (uint256) {
        return token.initialSupply;
    }

    /**
     * @notice Returns the balance of the specified address.
     * @param who The address to query the balance of.
     */
    function balanceOf(address who) public view returns (uint256) {
        return token.balanceOf(who);
    }

    /**
     * @notice Returns the remaining allowance of the spender over the owner's tokens.
     * @param owner The address of the token owner.
     * @param spender The address of the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
        return token.allowance(owner, spender);
    }

    /**
     * @notice Transfers a specified amount of tokens to the recipient.
     * @param to The recipient address.
     * @param value The amount of tokens to transfer.
     */
    function transfer(address to, uint256 value) public returns (bool ok) {
        return token.transfer(to, value);
    }

    /**
     * @notice Transfers tokens from one address to another.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param value The amount of tokens to transfer.
     */
    function transferFrom(address from, address to, uint256 value) public returns (bool ok) {
        return token.transferFrom(from, to, value);
    }

    /**
     * @notice Approves the spender to spend a specified amount of tokens on behalf of the owner.
     * @param spender The address of the spender.
     * @param value The amount of tokens to approve.
     */
    function approve(address spender, uint256 value) public returns (bool ok) {
        return token.approve(spender, value);
    }

    /**
     * @notice Changes the approved amount for a spender by a specified value.
     * @param spender The address of the spender.
     * @param valueChange The amount to change the approval by.
     * @param increase Whether to increase or decrease the approval.
     */
    function approveChange(address spender, uint256 valueChange, bool increase) public returns (bool ok) {
        return token.approveChange(spender, valueChange, increase);
    }

    /**
     * @notice Changes the owner of the token.
     * @param newOwner The new owner address.
     */
    function changeOwner(address newOwner) public returns (bool ok) {
        return token.changeOwner(newOwner);
    }

    /**
     * @notice Burns a specified amount of tokens.
     * @param amount The amount of tokens to burn.
     */
    function burnToken(uint256 amount) public returns (bool ok) {
        return token.burnToken(amount);
    }
}