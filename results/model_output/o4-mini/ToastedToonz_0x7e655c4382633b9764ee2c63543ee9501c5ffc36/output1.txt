```solidity
// SPDX-License-Identifier: MIT
pragma solidity 0.8.11;

library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    function toString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    function toHexString(uint256 value, uint256 length)
        internal
        pure
        returns (string memory)
    {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly { size := extcodesize(account) }
        return size > 0;
    }
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");
        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
    // omitted other Address helpers for brevity...
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");
        (bool success, bytes memory returndata) = target.call(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) return returndata;
        if (returndata.length > 0) {
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        }
        revert(errorMessage);
    }
}

interface IERC721Receiver {
    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)
        external returns (bytes4);
}

interface IERC165 {
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

abstract contract ERC165 is IERC165 {
    function supportsInterface(bytes4 interfaceId)
        public view virtual override returns (bool)
    {
        return interfaceId == type(IERC165).interfaceId;
    }
}

interface IERC721 is IERC165 {
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
    function balanceOf(address owner) external view returns (uint256 balance);
    function ownerOf(uint256 tokenId) external view returns (address owner);
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
    function transferFrom(address from, address to, uint256 tokenId) external;
    function approve(address to, uint256 tokenId) external;
    function getApproved(uint256 tokenId) external view returns (address operator);
    function setApprovalForAll(address operator, bool _approved) external;
    function isApprovedForAll(address owner, address operator) external view returns (bool);
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
}

interface IERC721Enumerable is IERC721 {
    function totalSupply() external view returns (uint256);
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
    function tokenByIndex(uint256 index) external view returns (uint256);
}

interface IERC721Metadata is IERC721 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

/**
 * @title ERC721A
 * @notice ERC721 with batch-minting and efficient ownership tracking.
 */
contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
    using Address for address;
    using Strings for uint256;

    struct TokenOwnership {
        address addr;
        uint64  startTimestamp;
    }
    struct AddressData {
        uint128 balance;
        uint128 numberMinted;
    }

    uint256 private currentIndex = 1;
    uint256 public  nextOwnerToExplicitlySet = 0;
    uint256 internal immutable collectionSize;
    uint256 internal immutable maxBatchSize;
    string  private _name;
    string  private _symbol;

    mapping(uint256 => TokenOwnership) private _ownerships;
    mapping(address => AddressData)   private _addressData;
    mapping(uint256 => address)       private _tokenApprovals;
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    constructor(
        string memory name_,
        string memory symbol_,
        uint256 maxBatchSize_,
        uint256 collectionSize_
    ) {
        require(collectionSize_ > 0, "ERC721A: collection must have nonzero supply");
        require(maxBatchSize_ > 0, "ERC721A: max batch size must be nonzero");
        _name          = name_;
        _symbol        = symbol_;
        maxBatchSize   = maxBatchSize_;
        collectionSize = collectionSize_;
    }

    // ====== IERC721Enumerable ======
    function totalSupply() public view override returns (uint256) {
        return currentIndex - 1;
    }
    function tokenByIndex(uint256 index) public view override returns (uint256) {
        require(index < totalSupply(), "ERC721A: global index out of bounds");
        return index + 1;
    }
    function tokenOfOwnerByIndex(address owner, uint256 index)
        public view override returns (uint256)
    {
        require(index < balanceOf(owner), "ERC721A: owner index out of bounds");
        uint256 count;
        for (uint256 i = 1; i < currentIndex; i++) {
            if (ownerOf(i) == owner) {
                if (count == index) return i;
                count++;
            }
        }
        revert("ERC721A: token not found");
    }

    // ====== IERC165 ======
    function supportsInterface(bytes4 interfaceId)
        public view virtual override(ERC165, IERC165)
        returns (bool)
    {
        return
            interfaceId == type(IERC721).interfaceId       ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            interfaceId == type(IERC721Enumerable).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    // ====== IERC721 ======
    function balanceOf(address owner) public view override returns (uint256) {
        require(owner != address(0), "ERC721A: balance query for zero addr");
        return uint256(_addressData[owner].balance);
    }
    function ownerOf(uint256 tokenId) public view override returns (address) {
        return ownershipOf(tokenId).addr;
    }
    function approve(address to, uint256 tokenId) public override {
        address owner = ownerOf(tokenId);
        require(to != owner, "ERC721A: approval to current owner");
        require(
            _msgSender() == owner ||
            isApprovedForAll(owner, _msgSender()),
            "ERC721A: approve caller not owner nor operator"
        );
        _approve(to, tokenId, owner);
    }
    function getApproved(uint256 tokenId) public view override returns (address) {
        require(_exists(tokenId), "ERC721A: approved query for nonexistent");
        return _tokenApprovals[tokenId];
    }
    function setApprovalForAll(address operator, bool approved) public override {
        require(operator != _msgSender(), "ERC721A: approve to caller");
        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }
    function isApprovedForAll(address owner, address operator)
        public view virtual override returns (bool)
    {
        return _operatorApprovals[owner][operator];
    }
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public override {
        _transfer(from, to, tokenId);
    }
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public override {
        safeTransferFrom(from, to, tokenId, "");
    }
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public override {
        _transfer(from, to, tokenId);
        require(
            _checkOnERC721Received(from, to, tokenId, _data),
            "ERC721A: transfer to non ERC721Receiver"
        );
    }

    // ====== IERC721Metadata ======
    function name() public view virtual override returns (string memory) {
        return _name;
    }
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }
    function tokenURI(uint256 tokenId)
        public view virtual override returns (string memory)
    {
        require(_exists(tokenId), "ERC721A: URI query for nonexistent");
        string memory baseURI = _baseURI();
        if (bytes(baseURI).length == 0) {
            return "";
        }
        return string(
            abi.encodePacked(baseURI, tokenId.toString(), _getUriExtension())
        );
    }

    // ====== Internal Views ======
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }
    function _getUriExtension() internal view virtual returns (string memory) {
        return "";
    }
    function _numberMinted(address owner) internal view returns (uint256) {
        require(owner != address(0), "ERC721A: number minted query zero addr");
        return uint256(_addressData[owner].numberMinted);
    }
    function _exists(uint256 tokenId) internal view returns (bool) {
        return tokenId > 0 && tokenId < currentIndex;
    }
    function ownershipOf(uint256 tokenId)
        internal view returns (TokenOwnership memory)
    {
        require(_exists(tokenId), "ERC721A: owner query for nonexistent");
        uint256 curr = tokenId;
        while (true) {
            TokenOwnership memory ownership = _ownerships[curr];
            if (ownership.addr != address(0)) {
                return ownership;
            }
            curr--;
        }
    }

    // ====== Minting ======
    function _safeMint(address to, uint256 quantity) internal {
        _safeMint(to, quantity, "");
    }
    function _safeMint(
        address to,
        uint256 quantity,
        bytes memory _data
    ) internal {
        require(to != address(0), "ERC721A: mint to zero address");
        require(quantity > 0, "ERC721A: quantity must be > 0");
        require(quantity <= maxBatchSize, "ERC721A: quantity too high");
        require(
            currentIndex + quantity - 1 <= collectionSize,
            "ERC721A: max supply exceeded"
        );

        uint256 startTokenId = currentIndex;
        _beforeTokenTransfers(address(0), to, startTokenId, quantity);

        // update state
        AddressData storage addrData = _addressData[to];
        addrData.balance       += uint128(quantity);
        addrData.numberMinted  += uint128(quantity);
        _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));

        // emit & safety-check
        for (uint256 i = 0; i < quantity; i++) {
            emit Transfer(address(0), to, startTokenId + i);
            require(
                _checkOnERC721Received(address(0), to, startTokenId + i, _data),
                "ERC721A: transfer to non ERC721Receiver"
            );
        }
        currentIndex += quantity;
        _afterTokenTransfers(address(0), to, startTokenId, quantity);
    }

    // ====== Transfers ======
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) private {
        TokenOwnership memory prev = ownershipOf(tokenId);
        address owner = prev.addr;

        require(owner == from, "ERC721A: transfer of token not owned");
        require(to != address(0), "ERC721A: transfer to zero address");

        address spender = _msgSender();
        require(
            spender == owner ||
            getApproved(tokenId) == spender ||
            isApprovedForAll(owner, spender),
            "ERC721A: caller not owner nor approved"
        );

        _beforeTokenTransfers(from, to, tokenId, 1);

        // clear approvals
        _approve(address(0), tokenId, owner);

        // adjust balances
        _addressData[from].balance -= 1;
        _addressData[to].balance   += 1;

        // set new ownership
        _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));

        // fixup next token's slot if needed
        uint256 nextId = tokenId + 1;
        if (
            _ownerships[nextId].addr == address(0) &&
            _exists(nextId)
        ) {
            _ownerships[nextId] = TokenOwnership(
                from,
                prev.startTimestamp
            );
        }

        emit Transfer(from, to, tokenId);
        _afterTokenTransfers(from, to, tokenId, 1);
    }

    function _approve(
        address to,
        uint256 tokenId,
        address owner
    ) private {
        _tokenApprovals[tokenId] = to;
        emit Approval(owner, to, tokenId);
    }

    // ====== Explicit Owners Setter ======
    function _setOwnersExplicit(uint256 quantity) internal {
        require(quantity > 0, "ERC721A: quantity must be nonzero");
        uint256 start = nextOwnerToExplicitlySet != 0
            ? nextOwnerToExplicitlySet
            : 1;
        uint256 end = start + quantity - 1;
        require(end < currentIndex, "ERC721A: end out of bounds");

        for (uint256 tokenId = start; tokenId <= end; tokenId++) {
            if (_ownerships[tokenId].addr == address(0)) {
                TokenOwnership memory ownership = ownershipOf(tokenId);
                _ownerships[tokenId] = TokenOwnership(
                    ownership.addr,
                    ownership.startTimestamp
                );
            }
        }
        nextOwnerToExplicitlySet = end + 1;
    }

    // ====== ERC721Receiver check ======
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to)
                .onERC721Received(_msgSender(), from, tokenId, _data)
                returns (bytes4 retval)
            {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721A: transfer to non ERC721Receiver");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        }
        return true;
    }

    // ====== Hooks ======
    function _beforeTokenTransfers(
        address from,
        address to,
        uint256 startTokenId,
        uint256 quantity
    ) internal virtual {}
    function _afterTokenTransfers(
        address from,
        address to,
        uint256 startTokenId,
        uint256 quantity
    ) internal virtual {}
}
```