pragma solidity ^0.4.23;

contract TokenReclaim {
    mapping(address => string) internal _ethToSphtx;
    mapping(string  => string) internal _accountToPubKey;

    event AccountRegister(address ethAccount, string sphtxAccount, string pubKey);

    function register(string memory name, string memory pubKey) public {
        bytes memory nameBytes = bytes(name);
        // 1. Name length check
        require(nameBytes.length >= 3 && nameBytes.length <= 16, "Invalid name length");
        // 2. Name first-character check
        uint8 fc = uint8(nameBytes[0]);
        require(
            (fc >= 0x61 && fc <= 0x7A) || (fc >= 0x30 && fc <= 0x39),
            "Name must start with a lowercase letter or digit"
        );
        // 3. Name character set check
        for (uint i = 1; i < nameBytes.length; i++) {
            uint8 c = uint8(nameBytes[i]);
            bool isLower = (c >= 0x61 && c <= 0x7A);
            bool isDigit = (c >= 0x30 && c <= 0x39);
            bool isHyphen = (c == 0x2D);
            bool isDot    = (c == 0x2E);
            require(isLower || isDigit || isHyphen || isDot, "Invalid character in name");
        }
        // 4. Public key length check
        bytes memory keyBytes = bytes(pubKey);
        require(keyBytes.length >= 50 && keyBytes.length <= 64, "Invalid public key length");
        // 5. Caller not already registered
        require(
            keccak256(bytes(_ethToSphtx[msg.sender])) == keccak256(bytes("")),
            "Address already registered"
        );
        // 6. Name not already in use
        require(
            keccak256(bytes(_accountToPubKey[name])) == keccak256(bytes("")),
            "Name already taken"
        );
        // State updates
        _ethToSphtx[msg.sender]     = name;
        _accountToPubKey[name]      = pubKey;
        emit AccountRegister(msg.sender, name, pubKey);
    }

    function account(address addr) public view returns (string memory) {
        return _ethToSphtx[addr];
    }

    function keys(address addr) public view returns (string memory) {
        string memory sphtxName = _ethToSphtx[addr];
        if (bytes(sphtxName).length == 0) {
            return "";
        }
        return _accountToPubKey[sphtxName];
    }

    function nameAvailable(string memory name) public view returns (bool) {
        bytes memory nameBytes = bytes(name);
        // Length
        if (nameBytes.length < 3 || nameBytes.length > 16) {
            return false;
        }
        // First char
        uint8 fc = uint8(nameBytes[0]);
        if (!((fc >= 0x61 && fc <= 0x7A) || (fc >= 0x30 && fc <= 0x39))) {
            return false;
        }
        // Rest of chars
        for (uint i = 1; i < nameBytes.length; i++) {
            uint8 c = uint8(nameBytes[i]);
            bool isLower = (c >= 0x61 && c <= 0x7A);
            bool isDigit = (c >= 0x30 && c <= 0x39);
            bool isHyphen = (c == 0x2D);
            bool isDot    = (c == 0x2E);
            if (!(isLower || isDigit || isHyphen || isDot)) {
                return false;
            }
        }
        // Check unused
        if (keccak256(bytes(_accountToPubKey[name])) != keccak256(bytes(""))) {
            return false;
        }
        return true;
    }
}