pragma solidity ^0.4.18;

/**
 * @title TronToken
 * @notice A simple ERC20-like token contract with additional features like pausing and burning.
 * @dev This contract allows for the creation of a token, transferring tokens, and managing the token's state.
 */
contract TronToken {

    string   public name;            
    string   public symbol;          
    uint256  public decimals;        

    mapping (address => uint256) public balanceOf;

    uint256 public totalSupply = 0;
    bool public stopped = false;      

    uint256 constant valueFounder = 500000000000000000;
    address owner = 0x0;

    modifier isOwner {
        assert(owner == msg.sender);
        _;
    }

    modifier isRunning {
        assert(!stopped);
        _;
    }

    modifier validAddress {
        assert(0x0 != msg.sender);
        _;
    }

    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    /**
     * @notice Constructor to initialize the token with initial supply, name, symbol, and decimal units.
     * @param _addressFounder The address of the founder who will receive the initial supply.
     * @param _initialSupply The initial supply of the token.
     * @param _tokenName The name of the token.
     * @param _decimalUnits The number of decimal units for the token.
     * @param _tokenSymbol The symbol of the token.
     */
    function TronToken(
        address _addressFounder,
        uint256 _initialSupply,
        string _tokenName,
        uint8 _decimalUnits,
        string _tokenSymbol
    ) public {
        owner = msg.sender;
        if (_addressFounder == 0x0) {
            _addressFounder = msg.sender;
        }
        if (_initialSupply == 0) {
            _initialSupply = valueFounder;
        }
        totalSupply = _initialSupply;
        name = _tokenName;
        symbol = _tokenSymbol;
        decimals = _decimalUnits;
        balanceOf[_addressFounder] = totalSupply;
        Transfer(0x0, _addressFounder, totalSupply);
    }

    /**
     * @notice Transfers tokens from the sender to the given address.
     * @param _to Recipient address.
     * @param _value Amount to transfer.
     * @return success True if transfer succeeds.
     */
    function transfer(address _to, uint256 _value)
        public
        isRunning
        validAddress
        returns (bool success)
    {
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Stops the contract, preventing transfers.
     * @dev Only the owner can call this.
     */
    function stop() public isOwner {
        stopped = true;
    }

    /**
     * @notice Starts the contract, allowing transfers.
     * @dev Only the owner can call this.
     */
    function start() public isOwner {
        stopped = false;
    }

    /**
     * @notice Changes the token name.
     * @param _name New name string.
     */
    function setName(string _name) public isOwner {
        name = _name;
    }

    /**
     * @notice Transfers ownership to a new address.
     * @param _owner New owner's address.
     */
    function setOwner(address _owner) public isOwner {
        owner = _owner;
    }

    /**
     * @notice Burns a specific amount from sender's balance.
     * @param _value Amount to burn.
     */
    function burn(uint256 _value) public {
        require(balanceOf[msg.sender] >= _value);

        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        Transfer(msg.sender, 0x0, _value);
    }

    /**
     * @notice Fallback function.
     */
    function () public payable {
        // Do nothing
    }
}