pragma solidity ^0.8.0;

/// @title Pausable
/// @dev This contract allows the owner to pause and unpause all functions
///      that use the `whenNotPaused` modifier. The pauser, initially set by
///      the contract owner, can change the paused state. Only the owner can
///      change the pauser role.
contract Pausable is Context, Ownable {
    event Pause();
    event Unpause();
    event PauserChanged(address indexed newAddress);

    address public pauser;
    bool public paused = false;

    /// @dev Modifier to make a function callable only when the contract is not paused.
    modifier whenNotPaused() {
        require(!paused, "Network paused by administrator");
        _;
    }

    /// @dev Modifier to restrict access to the pauser.
    modifier onlyPauser() {
        require(msg.sender == pauser, "Caller is not the pause administrator");
        _;
    }

    /// @dev Assigns the deployer as the initial pauser.
    constructor() {
        pauser = _msgSender();
        emit PauserChanged(pauser);
    }

    /// @dev Allows the pauser to pause the contract.
    /// @notice Emits a {Pause} event.
    function pause() external onlyPauser {
        require(!paused, "Pausable: already paused");
        paused = true;
        emit Pause();
    }

    /// @dev Allows the pauser to unpause the contract.
    /// @notice Emits an {Unpause} event.
    function unpause() external onlyPauser {
        require(paused, "Pausable: not paused");
        paused = false;
        emit Unpause();
    }

    /// @dev Allows the owner to update the pauser role.
    /// @notice Reverts if the new pauser is the zero address. Emits a {PauserChanged} event.
    function updatePauser(address _newPauser) external onlyOwner {
        require(_newPauser != address(0), "Pausable: new pauser is the zero address");
        pauser = _newPauser;
        emit PauserChanged(_newPauser);
    }
}