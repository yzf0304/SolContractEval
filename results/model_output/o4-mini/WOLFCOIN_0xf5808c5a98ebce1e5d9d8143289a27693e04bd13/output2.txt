pragma solidity ^0.8.0;

contract Pausable is Context, Ownable {
    /// @dev Emitted when the contract is paused.
    event Pause();
    /// @dev Emitted when the contract is unpaused.
    event Unpause();
    /// @dev Emitted when the pauser role is transferred.
    event PauserChanged(address indexed newAddress);

    /// @notice Address with permission to pause and unpause the contract.
    address public pauser;
    /// @notice Indicates whether the contract is paused.
    bool public paused = false;

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     * Reverts with "Network paused by administrator" if the contract is paused.
     */
    modifier whenNotPaused() {
        require(!paused, "Network paused by administrator");
        _;
    }

    /**
     * @dev Modifier to restrict access to the pauser.
     * Reverts if caller is not the current pauser.
     */
    modifier onlyPauser() {
        require(_msgSender() == pauser, "Caller is not the pause administrator");
        _;
    }

    /**
     * @dev Initializes the contract setting the deployer as the initial pauser.
     * The Ownable constructor will already have set deployer as the owner.
     */
    constructor() {
        pauser = _msgSender();
    }

    /**
     * @dev Allows the pauser to pause the contract.
     * Reverts if already paused.
     * Emits a {Pause} event.
     */
    function pause() external onlyPauser {
        require(!paused, "Pausable: already paused");
        paused = true;
        emit Pause();
    }

    /**
     * @dev Allows the pauser to unpause the contract.
     * Reverts if not paused.
     * Emits an {Unpause} event.
     */
    function unpause() external onlyPauser {
        require(paused, "Pausable: not paused");
        paused = false;
        emit Unpause();
    }

    /**
     * @dev Allows the owner to update the pauser role.
     * Reverts if the new pauser is the zero address.
     * Emits a {PauserChanged} event.
     */
    function updatePauser(address _newPauser) external onlyOwner {
        require(_newPauser != address(0), "Pausable: new pauser is the zero address");
        pauser = _newPauser;
        emit PauserChanged(_newPauser);
    }
}