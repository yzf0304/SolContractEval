```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Paisable is Context, Ownable {
    /// @notice Emitted when the contract is paused
    event Pause();
    /// @notice Emitted when the contract is unpaused
    event Unpause();
    /// @notice Emitted when the pauser is changed
    event PauserChanged(address indexed newAddress);

    /// @notice Address with the ability to pause/unpause
    address public pauser;
    /// @notice Flag indicating whether the contract is paused
    bool    public paused = false;

    /**
     * @dev Upon deployment, set the pauser to the deployer (who is also the owner).
     */
    constructor() {
        pauser = _msgSender();
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     * Reverts if the contract is paused.
     */
    modifier whenNotPaused() {
        require(!paused, "Network paused by administrator");
        _;
    }

    /**
     * @dev Modifier to restrict access to the pauser.
     * Reverts if called by any account other than the pauser.
     */
    modifier onlyPauser() {
        require(_msgSender() == pauser, "Caller is not the pause administrator");
        _;
    }

    /**
     * @notice Pause contract operations.
     * @dev Only callable by the pauser. Emits a {Pause} event.
     */
    function pause() external onlyPauser {
        require(!paused, "Network already paused");
        paused = true;
        emit Pause();
    }

    /**
     * @notice Unpause contract operations.
     * @dev Only callable by the pauser. Emits an {Unpause} event.
     */
    function unpause() external onlyPauser {
        require(paused, "Network is not paused");
        paused = false;
        emit Unpause();
    }

    /**
     * @notice Change the pauser role to a new address.
     * @dev Only callable by the contract owner. Emits a {PauserChanged} event.
     * Reverts if `newPauser` is the zero address.
     * @param newPauser The address to grant pauser permissions.
     */
    function updatePauser(address newPauser) external onlyOwner {
        require(newPauser != address(0), "New pauser is the zero address");
        pauser = newPauser;
        emit PauserChanged(newPauser);
    }
}
```