pragma solidity 0.8.0;

contract Pausable is Context, Ownable {
    event Pause();
    event Unpause();
    event PauserChanged(address indexed newAddress);

    address public pauser;
    bool public paused = false;

    modifier whenNotPaused() {
        require(!paused, "Network paused by administrator");
        _;
    }

    modifier onlyPauser() {
        require(msg.sender == pauser, "Caller is not the pause administrator");
        _;
    }

    constructor() {
        // Initially set the pauser to the contract deployer (owner)
        pauser = _msgSender();
    }

    /**
     * @dev Allows the pauser to pause the contract.
     * Emits a {Pause} event.
     */
    function pause() external onlyPauser {
        paused = true;
        emit Pause();
    }

    /**
     * @dev Allows the pauser to unpause the contract.
     * Emits an {Unpause} event.
     */
    function unpause() external onlyPauser {
        paused = false;
        emit Unpause();
    }

    /**
     * @dev Allows the owner to update the pauser role.
     * Emits a {PauserChanged} event.
     */
    function updatePauser(address _newPauser) external onlyOwner {
        require(_newPauser != address(0), "Pausable: new pauser is the zero address");
        pauser = _newPauser;
        emit PauserChanged(_newPauser);
    }
}