pragma solidity ^0.4.18;

/**
 * @title WaykiCoin
 * @notice A simple ERC20-like token contract for WaykiCoin.
 * @dev This contract allows for the creation, transfer, and management of WaykiCoin tokens.
 */
contract WaykiCoin {
    mapping (address => uint256) balances;
    address public owner;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => mapping (address => uint256)) allowed;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    /**
     * @notice Initializes the contract with the initial supply and sets the owner.
     * @dev The constructor sets the contract owner, token details, and initial supply.
     */
    function WaykiCoin() public { 
        owner = msg.sender;                                         // Set owner of contract 
        name = "WaykiCoin";                                         // Set the name for display purposes
        symbol = "WIC";                                             // Set the symbol for display purposes
        decimals = 8;                                               // Amount of decimals for display purposes
        totalSupply = 21000000000000000;                            // Total supply
        balances[owner] = totalSupply;                              // Set owner balance equal to total supply 
    }

    /**
     * @notice Returns the balance of the specified address.
     * @param _owner The address from which the balance will be retrieved.
     * @return The balance of the specified address.
     * @dev This function is used to check the token balance of an address.
     */
    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }

    /**
     * @notice Transfers `_value` tokens to `_to` from `msg.sender`.
     * @param _to The address of the recipient.
     * @param _value The amount of tokens to be transferred.
     * @return Whether the transfer was successful or not.
     * @dev This function transfers tokens from the sender to the recipient.
     */
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));
        require(balances[msg.sender] >= _value);

        balances[msg.sender] -= _value;
        balances[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Transfers `_value` tokens to `_to` from `_from` on the condition it is approved by `_from`.
     * @param _from The address of the sender.
     * @param _to The address of the recipient.
     * @param _value The amount of tokens to be transferred.
     * @return Whether the transfer was successful or not.
     * @dev This function transfers tokens from one address to another, provided the sender has approved the transfer.
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));
        require(balances[_from] >= _value);
        require(allowed[_from][msg.sender] >= _value);

        balances[_from] -= _value;
        balances[_to] += _value;
        allowed[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Approves `_spender` to spend `_value` tokens on behalf of `msg.sender`.
     * @param _spender The address of the account able to transfer the tokens.
     * @param _value The amount of tokens to be approved for transfer.
     * @return Whether the approval was successful or not.
     * @dev This function allows the owner to approve a spender to transfer a certain amount of tokens.
     */
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Returns the remaining tokens allowed to be spent by `_spender` on behalf of `_owner`.
     * @param _owner The address of the account owning tokens.
     * @param _spender The address of the account able to transfer the tokens.
     * @return The amount of remaining tokens allowed to be spent.
     * @dev This function checks the allowance of a spender to transfer tokens on behalf of an owner.
     */
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    /**
     * @notice Prevents accidental sending of ether to this contract.
     * @dev This function reverts any attempt to send ether to the contract.
     */
    function () public payable {
        revert();
    }
}