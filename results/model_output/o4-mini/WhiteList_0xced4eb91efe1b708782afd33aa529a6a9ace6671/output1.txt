pragma solidity ^0.4.18;

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.
     */
    function Ownable() public {
        owner = msg.sender;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    /**
     * @dev Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

/**
 * @title WhiteList
 * @notice A contract for managing a whitelist of addresses. Only the owner can add or remove addresses from the whitelist.
 * @dev Inherits from Ownable to restrict certain functions to the contract owner.
 */
contract WhiteList is Ownable {
    // Mapping to store the whitelist status of an address.
    mapping(address => bool) public whiteList;

    // Total number of whitelisted addresses.
    uint public totalWhiteListed;

    // Event emitted when an address is whitelisted.
    event LogWhiteListed(address indexed user, uint whiteListedNum);

    // Event emitted when multiple addresses are whitelisted.
    event LogWhiteListedMultiple(uint whiteListedNum);

    // Event emitted when an address is removed from the whitelist.
    event LogRemoveWhiteListed(address indexed user);

    /**
     * @notice Checks if a given address is whitelisted.
     * @param _user The address to check.
     * @return true if the address is whitelisted, false otherwise.
     */
    function isWhiteListed(address _user) external view returns (bool) {
        return whiteList[_user];
    }

    /**
     * @notice Removes an address from the whitelist.
     * @dev Only the contract owner can call this function.
     * @param _user The address to remove from the whitelist.
     * @return true if the address was successfully removed.
     */
    function removeFromWhiteList(address _user) external onlyOwner returns (bool) {
        require(whiteList[_user] == true);
        whiteList[_user] = false;
        totalWhiteListed--;
        LogRemoveWhiteListed(_user);
        return true;
    }

    /**
     * @notice Adds an address to the whitelist.
     * @dev Only the contract owner can call this function.
     * @param _user The address to add to the whitelist.
     * @return true if the address was successfully added.
     */
    function addToWhiteList(address _user) external onlyOwner returns (bool) {
        if (!whiteList[_user]) {
            whiteList[_user] = true;
            totalWhiteListed++;
            LogWhiteListed(_user, totalWhiteListed);
        }
        return true;
    }

    /**
     * @notice Adds multiple addresses to the whitelist.
     * @dev Only the contract owner can call this function.
     * @param _users An array of addresses to add to the whitelist.
     * @return true if all addresses were successfully added.
     */
    function addToWhiteListMultiple(address[] _users) external onlyOwner returns (bool) {
        for (uint i = 0; i < _users.length; i++) {
            if (!whiteList[_users[i]]) {
                whiteList[_users[i]] = true;
                totalWhiteListed++;
            }
        }
        LogWhiteListedMultiple(totalWhiteListed);
        return true;
    }
}