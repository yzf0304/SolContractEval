pragma solidity ^0.4.18;

contract WhiteList is Ownable {

    // Mapping to store whitelist status
    mapping(address => bool) public whiteList;
    // Total number of whitelisted addresses
    uint public totalWhiteListed;

    // Events
    event LogWhiteListed(address indexed user, uint whiteListedNum);
    event LogWhiteListedMultiple(uint whiteListedNum);
    event LogRemoveWhiteListed(address indexed user);

    /**
     * @notice Checks if a given address is whitelisted.
     * @param _user The address to check.
     * @return true if the address is whitelisted, false otherwise.
     */
    function isWhiteListed(address _user) external view returns (bool) {
        return whiteList[_user];
    }

    /**
     * @notice Removes an address from the whitelist.
     * @dev Only the contract owner can call this function.
     * @param _user The address to remove from the whitelist.
     * @return true if the address was successfully removed.
     */
    function removeFromWhiteList(address _user) external onlyOwner returns (bool) {
        require(whiteList[_user] == true);
        whiteList[_user] = false;
        totalWhiteListed--;
        LogRemoveWhiteListed(_user);
        return true;
    }

    /**
     * @notice Adds an address to the whitelist.
     * @dev Only the contract owner can call this function.
     * @param _user The address to add to the whitelist.
     * @return true if the address was successfully added.
     */
    function addToWhiteList(address _user) external onlyOwner returns (bool) {
        if (whiteList[_user] != true) {
            whiteList[_user] = true;
            totalWhiteListed++;
            LogWhiteListed(_user, totalWhiteListed);
        }
        return true;
    }

    /**
     * @notice Adds multiple addresses to the whitelist.
     * @dev Only the contract owner can call this function.
     * @param _users An array of addresses to add to the whitelist.
     * @return true if all addresses were successfully added.
     */
    function addToWhiteListMultiple(address[] _users) external onlyOwner returns (bool) {
        for (uint i = 0; i < _users.length; i++) {
            if (whiteList[_users[i]] != true) {
                whiteList[_users[i]] = true;
                totalWhiteListed++;
            }
        }
        LogWhiteListedMultiple(totalWhiteListed);
        return true;
    }
}