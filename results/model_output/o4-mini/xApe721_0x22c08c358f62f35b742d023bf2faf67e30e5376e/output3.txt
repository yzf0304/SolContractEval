Here is the completed xApe721 contract. It strictly adheres to the provided context, uses Solidity 0.8.10, and implements only the requested functionality—nothing extra.

```solidity
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity 0.8.10;

/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.
abstract contract ERC721 {
    /*///////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    event Transfer(address indexed from, address indexed to, uint256 indexed id);
    event Approval(address indexed owner, address indexed spender, uint256 indexed id);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /*///////////////////////////////////////////////////////////////
                          METADATA STORAGE/LOGIC
    //////////////////////////////////////////////////////////////*/

    string public name;
    string public symbol;
    function tokenURI(uint256 id) public view virtual returns (string memory);

    /*///////////////////////////////////////////////////////////////
                            ERC721 STORAGE                        
    //////////////////////////////////////////////////////////////*/

    mapping(address => uint256) public balanceOf;
    mapping(uint256 => address) public ownerOf;
    mapping(uint256 => address) public getApproved;
    mapping(address => mapping(address => bool)) public isApprovedForAll;

    /*///////////////////////////////////////////////////////////////
                              CONSTRUCTOR
    //////////////////////////////////////////////////////////////*/

    constructor(string memory _name, string memory _symbol) {
        name = _name;
        symbol = _symbol;
    }

    /*///////////////////////////////////////////////////////////////
                              ERC721 LOGIC
    //////////////////////////////////////////////////////////////*/

    function approve(address spender, uint256 id) public virtual {
        address owner = ownerOf[id];
        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], "NOT_AUTHORIZED");
        getApproved[id] = spender;
        emit Approval(owner, spender, id);
    }

    function setApprovalForAll(address operator, bool approved) public virtual {
        isApprovedForAll[msg.sender][operator] = approved;
        emit ApprovalForAll(msg.sender, operator, approved);
    }

    function transferFrom(address from, address to, uint256 id) public virtual {
        require(from == ownerOf[id], "WRONG_FROM");
        require(to != address(0), "INVALID_RECIPIENT");
        require(
            msg.sender == from ||
            msg.sender == getApproved[id] ||
            isApprovedForAll[from][msg.sender],
            "NOT_AUTHORIZED"
        );

        unchecked {
            balanceOf[from]--;
            balanceOf[to]++;
        }

        ownerOf[id] = to;
        delete getApproved[id];

        emit Transfer(from, to, id);
    }

    function safeTransferFrom(address from, address to, uint256 id) public virtual {
        transferFrom(from, to, id);
        require(
            to.code.length == 0 ||
            ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, "") ==
            ERC721TokenReceiver.onERC721Received.selector,
            "UNSAFE_RECIPIENT"
        );
    }

    function safeTransferFrom(address from, address to, uint256 id, bytes memory data) public virtual {
        transferFrom(from, to, id);
        require(
            to.code.length == 0 ||
            ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==
            ERC721TokenReceiver.onERC721Received.selector,
            "UNSAFE_RECIPIENT"
        );
    }

    /*///////////////////////////////////////////////////////////////
                              ERC165 LOGIC
    //////////////////////////////////////////////////////////////*/

    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {
        return
            interfaceId == 0x01ffc9a7 || // ERC165
            interfaceId == 0x80ac58cd || // ERC721
            interfaceId == 0x5b5e139f;   // ERC721 Metadata
    }

    /*///////////////////////////////////////////////////////////////
                       INTERNAL MINT/BURN LOGIC
    //////////////////////////////////////////////////////////////*/

    function _mint(address to, uint256 id) internal virtual {
        require(to != address(0), "INVALID_RECIPIENT");
        require(ownerOf[id] == address(0), "ALREADY_MINTED");
        unchecked { balanceOf[to]++; }
        ownerOf[id] = to;
        emit Transfer(address(0), to, id);
    }

    function _burn(uint256 id) internal virtual {
        address owner = ownerOf[id];
        require(owner != address(0), "NOT_MINTED");
        unchecked { balanceOf[owner]--; }
        delete ownerOf[id];
        delete getApproved[id];
        emit Transfer(owner, address(0), id);
    }

    /*///////////////////////////////////////////////////////////////
                       INTERNAL SAFE MINT LOGIC
    //////////////////////////////////////////////////////////////*/

    function _safeMint(address to, uint256 id) internal virtual {
        _mint(to, id);
        require(
            to.code.length == 0 ||
            ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, "") ==
            ERC721TokenReceiver.onERC721Received.selector,
            "UNSAFE_RECIPIENT"
        );
    }

    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {
        _mint(to, id);
        require(
            to.code.length == 0 ||
            ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==
            ERC721TokenReceiver.onERC721Received.selector,
            "UNSAFE_RECIPIENT"
        );
    }
}

interface ERC721TokenReceiver {
    function onERC721Received(address operator, address from, uint256 id, bytes calldata data) external returns (bytes4);
}

interface IERC721 {
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    function balanceOf(address owner) external view returns (uint256 balance);
    function ownerOf(uint256 tokenId) external view returns (address owner);
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
    function transferFrom(address from, address to, uint256 tokenId) external;
    function approve(address to, uint256 tokenId) external;
    function getApproved(uint256 tokenId) external view returns (address operator);
    function setApprovalForAll(address operator, bool _approved) external;
    function isApprovedForAll(address owner, address operator) external view returns (bool);
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;

    // Original Phunks extension
    function getPhunksBelongingToOwner(address _owner) external view returns (uint256[] memory);
}

abstract contract Ownable {
    address internal _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor() { _owner = msg.sender; }
    function owner() external view returns (address) { return _owner; }
    function transferOwnership(address _newOwner) external {
        if (msg.sender != _owner) revert("NotOwner");
        _owner = _newOwner;
        emit OwnershipTransferred(msg.sender, _newOwner);
    }
    function renounceOwnership() public {
        if (msg.sender != _owner) revert("NotOwner");
        _owner = address(0);
        emit OwnershipTransferred(msg.sender, address(0));
    }
}

library Strings {
    function toString(uint256 value) internal pure returns (string memory) {
        if (value == 0) { return "0"; }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) { digits++; temp /= 10; }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }
}

/// @title xApe721
/// @notice ERC721 token allowing minting, claiming, and managing 10K unique tokens.
contract xApe721 is Ownable, ERC721 {
    using Strings for uint256;

    uint256 public constant TOTAL_SUPPLY      = 10_000;
    uint256 public constant PRICE_PER_MINT   = 0.05 ether;
    uint256 public constant MAX_MINT_PER_TX  = 20;

    bool   public mintActive;
    uint256 public totalSupply;
    uint256 internal nextMintableId = 10038; // new IDs start here
    string public baseURI;

    IERC721 public oldContract = IERC721(0x090b1DE324fEA5f0A0B4226101Db645819102629);
    address private teamWallet = 0x26CDE90abDD4e41ECA2948d79fE383E8103678b5;

    /// @dev Track which old tokens have been claimed
    mapping(uint256 => bool) public claimed;

    modifier onlyTeamWallet() {
        require(msg.sender == teamWallet, "Not team wallet");
        _;
    }

    constructor(
        string memory _name,
        string memory _symbol,
        string memory _baseURI,
        address _oldContract,
        address[] memory recipients,
        uint256[] memory tokens
    ) payable ERC721(_name, _symbol) {
        require(recipients.length == tokens.length, "Airdrop lengths");
        baseURI = _baseURI;

        if (_oldContract != address(0)) {
            oldContract = IERC721(_oldContract);
        }

        // Initial airdrop into new contract
        for (uint256 i = 0; i < recipients.length; i++) {
            _mint(recipients[i], tokens[i]);
            totalSupply++;
        }
    }

    /// @notice Mint `amount` new tokens
    function mint(uint16 amount) external payable {
        require(mintActive,                              "Mint not active");
        require(amount > 0 && amount <= MAX_MINT_PER_TX,"Invalid mint amount");
        require(totalSupply + amount <= TOTAL_SUPPLY,    "Exceeds supply");
        require(msg.value == PRICE_PER_MINT * amount,    "Wrong ETH value");

        for (uint256 i = 0; i < amount; i++) {
            uint256 id = _getNextUnusedID();
            _mint(msg.sender, id);
            totalSupply++;
        }
    }

    /// @notice Claim an old token by ID
    function claim(uint256 tokenId) external {
        require(_ownsOldToken(msg.sender, tokenId), "Not owner in old");
        require(!claimed[tokenId],                   "Already claimed");

        claimed[tokenId] = true;
        _mint(msg.sender, tokenId);
        totalSupply++;
    }

    /// @notice Claim all old tokens held by caller
    function claimAll() external {
        uint256[] memory oldTokens = oldContract.getPhunksBelongingToOwner(msg.sender);
        for (uint256 i = 0; i < oldTokens.length; i++) {
            uint256 tid = oldTokens[i];
            if (!claimed[tid]) {
                claimed[tid] = true;
                _mint(msg.sender, tid);
                totalSupply++;
            }
        }
    }

    /// @dev Check ownership in old contract safely
    function _ownsOldToken(address account, uint256 tokenId) internal view returns (bool) {
        try oldContract.ownerOf(tokenId) returns (address owner) {
            return owner == account;
        } catch {
            return false;
        }
    }

    /// @dev Find next new token ID that is not used
    function _getNextUnusedID() internal returns (uint256) {
        uint256 candidate = nextMintableId;
        // skip any IDs already minted in this contract
        while (ownerOf[candidate] != address(0)) {
            candidate++;
        }
        nextMintableId = candidate + 1;
        return candidate;
    }

    /// @notice Returns URI for token `id`
    function tokenURI(uint256 id) public view override returns (string memory) {
        require(ownerOf[id] != address(0), "Nonexistent token");
        return string(abi.encodePacked(baseURI, id.toString()));
    }

    /// @notice Withdraw all ETH to the team wallet
    function withdraw() external onlyTeamWallet {
        uint256 bal = address(this).balance;
        (bool ok, ) = teamWallet.call{value: bal}("");
        require(ok, "Withdraw failed");
    }

    /// @notice Pause new minting
    function pauseMint() external {
        require(msg.sender == _owner, "Not owner");
        mintActive = false;
    }

    /// @notice Start new minting
    function startMint() external {
        require(msg.sender == _owner, "Not owner");
        mintActive = true;
    }

    /// @notice Update base URI
    function setBaseURI(string memory _newBaseURI) external {
        require(msg.sender == _owner, "Not owner");
        baseURI = _newBaseURI;
    }

    /// @notice ERC165 + ERC721TokenReceiver support
    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {
        return
            ERC721.supportsInterface(interfaceId) ||
            interfaceId == ERC721TokenReceiver.onERC721Received.selector;
    }

    /// @notice Handle receipt of ERC721 (only from oldContract)
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4) {
        require(msg.sender == address(oldContract), "Only old contract");
        return ERC721TokenReceiver.onERC721Received.selector;
    }
}
```

Explanation of the key parts:

1. **Minting**  
   - Enforced `mintActive`, per-tx limit, total supply cap, and exact ETH payment.  
   - New IDs are taken from `nextMintableId` upward, skipping already‐minted slots.

2. **Claiming**  
   - Tracks old-token claims via `mapping(uint256,bool) claimed`.  
   - Uses `oldContract.getPhunksBelongingToOwner` for batch claiming.  
   - Safe check of old ownership with `try/catch ownerOf`.

3. **Administration**  
   - `pauseMint` / `startMint` and `setBaseURI` can only be called by `owner()`.  
   - Withdraw sends entire balance to the pre‐set `teamWallet`.

4. **Standards Support**  
   - Inherits Solmate‐style ERC721 and supports ERC165, ERC721, ERC721Metadata, and the ERC721Receiver interface (so it can `safeTransferFrom` old tokens during claim).