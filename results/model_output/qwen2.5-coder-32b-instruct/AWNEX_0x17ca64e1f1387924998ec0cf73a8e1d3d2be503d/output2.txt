Below is the complete implementation of the `Freezable` smart contract based on the provided context and description. This contract includes functionality to freeze and unfreeze specific addresses, as well as checking if an address is frozen, all restricted to the contract owner.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity 0.8.0;

/**
 * @notice A smart contract that allows the owner to freeze and unfreeze specific addresses.
 * @dev This contract inherits from Ownable, allowing only the contract owner to perform freeze and unfreeze operations.
 */
contract Freezable is Ownable {
    mapping(address => bool) private _frozen;

    event Freeze(address indexed target);
    event Unfreeze(address indexed target);

    /**
     * @notice Modifier to ensure a function can only be executed if the target address is not frozen.
     * @dev Reverts with an error message if the target address is frozen.
     * @param target The address to check for the frozen status.
     */
    modifier whenNotFrozen(address target) {
        require(!_frozen[target], "Freezable : target is frozen");
        _;
    }

    /**
     * @notice Allows the owner to freeze a specific address.
     * @dev Emits a Freeze event and sets the frozen status of the target address to true.
     * @param target The address to be frozen.
     * @return success Returns true if the operation was successful.
     */
    function freeze(address target) external onlyOwner returns (bool success) {
        require(!_frozen[target], "Freezable : target is already frozen");
        _frozen[target] = true;
        emit Freeze(target);
        success = true;
    }

    /**
     * @notice Allows the owner to unfreeze a specific address.
     * @dev Emits an Unfreeze event and sets the frozen status of the target address to false.
     * @param target The address to be unfrozen.
     * @return success Returns true if the operation was successful.
     */
    function unFreeze(address target) external onlyOwner returns (bool success) {
        require(_frozen[target], "Freezable : target is not frozen");
        _frozen[target] = false;
        emit Unfreeze(target);
        success = true;
    }

    /**
     * @notice Checks if a specific address is frozen.
     * @dev Returns the frozen status of the target address.
     * @param target The address to check.
     * @return frozen Returns true if the address is frozen, otherwise false.
     */
    function isFrozen(address target) external view returns (bool frozen) {
        frozen = _frozen[target];
    }
}
```

This contract implements the functionality to manage the freezing and unfreezing of addresses, with appropriate checks and events to maintain transparency and correctness.