```solidity
contract Freezable is Ownable {
    mapping(address => bool) private _frozen;

    event Freeze(address indexed target);
    event Unfreeze(address indexed target);

    modifier whenNotFrozen(address target) {
        require(!_frozen[target], "Freezable: target is frozen");
        _;
    }

    function freeze(address target) external onlyOwner returns (bool success) {
        require(!_frozen[target], "Freezable: target is already frozen");
        _frozen[target] = true;
        emit Freeze(target);
        return true;
    }

    function unFreeze(address target) external onlyOwner returns (bool success) {
        require(_frozen[target], "Freezable: target is not frozen");
        _frozen[target] = false;
        emit Unfreeze(target);
        return true;
    }

    function isFrozen(address target) external view returns (bool frozen) {
        return _frozen[target];
    }
}
```

This `Freezable` contract correctly implements the functionality to freeze and unfreeze addresses based on the owner's permissions. It ensures that only the owner can modify the frozen status of any address and emits appropriate events upon freezing or unfreezing. The `isFrozen` function allows anyone to check the frozen status of a given address.