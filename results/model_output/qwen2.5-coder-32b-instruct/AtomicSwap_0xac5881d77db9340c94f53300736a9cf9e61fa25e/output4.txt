Below is the implementation of the `AtomicSwap` contract based on the provided context and modifiers:

```solidity
pragma solidity ^0.5.16;

import "./SafeMath.sol";
import "./SafeERC20.sol";
import "./Address.sol";
import "./IERC20.sol";
import "./ReentrancyGuard.sol";

contract AtomicSwap is ReentrancyGuard {
    using SafeMath for uint;
    using SafeERC20 for IERC20;

    enum State { Empty, Initiated, Redeemed, Refunded }

    struct Swap {
        bytes32 hashedSecret;
        bytes32 secret;
        address contractAddr;
        address participant;
        address payable initiator;
        uint refundTimestamp;
        uint countdown;
        uint value;
        uint payoff;
        bool active;
        State state;
    }
    
    event Initiated(
        bytes32 indexed _hashedSecret,
        address indexed _contract,
        address indexed _participant,
        address _initiator,
        uint _refundTimestamp,
        uint _countdown,
        uint _value,
        uint _payoff,
        bool _active
    );
    event Added(
        bytes32 indexed _hashedSecret,
        address _sender,
        uint _value  
    );
    event Activated(
        bytes32 indexed _hashedSecret
    );
    event Redeemed(
        bytes32 indexed _hashedSecret,
        bytes32 _secret
    );
    event Refunded(
        bytes32 indexed _hashedSecret
    );

    mapping(bytes32 => Swap) public swaps;

    modifier onlyByInitiator(bytes32 _hashedSecret) {
        require(msg.sender == swaps[_hashedSecret].initiator, "sender is not the initiator");
        _;
    }

    modifier isInitiatable(bytes32 _hashedSecret, address _participant, uint _refundTimestamp, uint _countdown) {
        require(_participant != address(0), "invalid participant address");
        require(swaps[_hashedSecret].state == State.Empty, "swap for this hash is initiated");
        require(block.timestamp <= _refundTimestamp, "invalid refundTimestamp");
        require(_countdown < _refundTimestamp, "invalid countdown");
        _;
    }
    
    modifier isInitiated(bytes32 _hashedSecret) {
        require(swaps[_hashedSecret].state == State.Initiated, "swap for this hash is empty or spent");
        _;
    }

    modifier isAddable(bytes32 _hashedSecret) {
        require(block.timestamp <= swaps[_hashedSecret].refundTimestamp, "refundTimestamp has come");
        _;
    }
        
    modifier isActivated(bytes32 _hashedSecret) {
        require(swaps[_hashedSecret].active, "swap is not active");
        _;
    }    
    
    modifier isNotActivated(bytes32 _hashedSecret) {
        require(!swaps[_hashedSecret].active, "swap is active");
        _;
    }

    modifier isRedeemable(bytes32 _hashedSecret, bytes32 _secret) {
        require(block.timestamp <= swaps[_hashedSecret].refundTimestamp, "refundTimestamp has come");
        require(sha256(abi.encodePacked(_secret)) == swaps[_hashedSecret].hashedSecret, "secret is not correct");
        _;
    }

    modifier isRefundable(bytes32 _hashedSecret) {
        require(block.timestamp > swaps[_hashedSecret].refundTimestamp, "refundTimestamp has not come");
        _;
    }

    function initiate (
        bytes32 _hashedSecret,
        address _contract,
        address _participant,
        uint _refundTimestamp,
        uint _countdown,
        uint _value,
        uint _payoff,
        bool _active
    )
        public
        nonReentrant
        isInitiatable(_hashedSecret, _participant, _refundTimestamp, _countdown)
    {
        require(_value > 0, "value must be greater than 0");

        IERC20(_contract).safeTransferFrom(msg.sender, address(this), _value);

        swaps[_hashedSecret] = Swap(
            _hashedSecret,
            "",
            _contract,
            _participant,
            msg.sender,
            _refundTimestamp.add(_countdown),
            _countdown,
            _value,
            _payoff,
            _active,
            State.Initiated
        );

        emit Initiated(_hashedSecret, _contract, _participant, msg.sender, _refundTimestamp, _countdown, _value, _payoff, _active);
    }

    function add(bytes32 _hashedSecret, uint _value)
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isAddable(_hashedSecret)    
    {
        require(_value > 0, "value must be greater than 0");

        swaps[_hashedSecret].value = swaps[_hashedSecret].value.add(_value);
        IERC20(swaps[_hashedSecret].contractAddr).safeTransferFrom(msg.sender, address(this), _value);

        emit Added(_hashedSecret, msg.sender, _value);
    }

    function activate(bytes32 _hashedSecret)
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isNotActivated(_hashedSecret)
        onlyByInitiator(_hashedSecret)
    {
        swaps[_hashedSecret].active = true;
        emit Activated(_hashedSecret);
    }

    function redeem(bytes32 _hashedSecret, bytes32 _secret) 
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isActivated(_hashedSecret)
        isRedeemable(_hashedSecret, _secret) 
    {
        Swap storage swap = swaps[_hashedSecret];

        // Mark swap as redeemed
        swap.secret = _secret;
        swap.state = State.Redeemed;

        // Determine transfer amounts based on refund timing
        if (block.timestamp < swap.refundTimestamp) {
            // Participant gets the combined value + payoff
            IERC20(swap.contractAddr).safeTransfer(swap.participant, swap.value.add(swap.payoff));
        } else {
            // Participant gets the original value
            // Initiator gets the payoff
            IERC20(swap.contractAddr).safeTransfer(swap.participant, swap.value);
            IERC20(swap.contractAddr).safeTransfer(swap.initiator, swap.payoff);
        }

        emit Redeemed(_hashedSecret, _secret);

        // Clear swap data
        delete swaps[_hashedSecret];
    }

    function refund(bytes32 _hashedSecret)
        public
        nonReentrant
        isInitiated(_hashedSecret)
        isRefundable(_hashedSecret) 
    {
        Swap storage swap = swaps[_hashedSecret];

        // Mark swap as refunded
        swap.state = State.Refunded;

        // Transfer the value back to the initiator
        IERC20(swap.contractAddr).safeTransfer(swap.initiator, swap.value);

        emit Refunded(_hashedSecret);

        // Clear swap data
        delete swaps[_hashedSecret];
    }
}
```

This contract implements the required functionalities for an atomic swap mechanism with safeguards against common issues like reentrancy and integer overflows/underflows using OpenZeppelin's `SafeMath` and `SafeERC20`. Each function includes appropriate checks and events as per the described behavior.