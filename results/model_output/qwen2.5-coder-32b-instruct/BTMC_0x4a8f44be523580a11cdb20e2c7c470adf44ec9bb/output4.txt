Here is the completed and functional `BTMC` smart contract based on the provided context and description, implemented in Solidity version 0.4.22. I have filled in all the necessary functions and ensured they adhere to the described functionalities:

```solidity
pragma solidity ^0.4.22;

contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}

contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Ownable {
  address public owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  function Ownable() public {
    owner = msg.sender;
  }

  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract Pausable is Ownable {
  event Pause();
  event Unpause();

  bool public paused = false;

  modifier whenNotPaused() {
    require(!paused);
    _;
  }

  modifier whenPaused() {
    require(paused);
    _;
  }

  function pause() onlyOwner whenNotPaused public {
    paused = true;
    Pause();
  }

  function unpause() onlyOwner whenPaused public {
    paused = false;
    Unpause();
  }
}

contract BTMC is ERC20, Ownable, Pausable {
    using SafeMath for uint256;

    string public constant name = "MinerCoin";
    string public constant symbol = "BTMC";
    string public constant version = "1.0";
    uint256 public constant decimals = 18;

    uint256 public constant INIT_SUPPLY = 100000000 * 10**decimals;
    uint256 public constant MINING_SUPPLY = 500000000 * 10**decimals;
    uint256 public constant MAX_FUNDING_SUPPLY = 200000000 * 10**decimals;
    uint256 public constant TEAM_KEEPING = 200000000 * 10**decimals;

    uint256 public constant MAX_SUPPLY = INIT_SUPPLY + MINING_SUPPLY + MAX_FUNDING_SUPPLY + TEAM_KEEPING;

    uint256 public totalFundingSupply;
    uint256 public startTime;
    uint256 public endTime;
    uint256 public rate;

    uint256 public constant TEAM_UNFREEZE = 40000000 * 10**decimals;
    bool public hasOneStepWithdraw;
    bool public hasTwoStepWithdraw;
    bool public hasThreeStepWithdraw;
    bool public hasFourStepWithdraw;
    bool public hasFiveStepWithdraw;

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;

    function BTMC() public {
        totalSupply = INIT_SUPPLY;
        balances[msg.sender] = INIT_SUPPLY;
        emit Transfer(0x0, msg.sender, INIT_SUPPLY);
        totalFundingSupply = 0;
        startTime = 1524499199; // 2018-04-23 23:59:59
        endTime = 1526313600;   // 2018-05-15 00:00:00
        rate = 5000;
        hasOneStepWithdraw = false;
        hasTwoStepWithdraw = false;
        hasThreeStepWithdraw = false;
        hasFourStepWithdraw = false;
        hasFiveStepWithdraw = false;
    }

    event CreateBTMC(address indexed _to, uint256 _value);

    modifier notReachTotalSupply(uint256 _value, uint256 _rate) {
        require(MAX_SUPPLY >= totalSupply.add(_value.mul(_rate)));
        _;
    }

    modifier notReachFundingSupply(uint256 _value, uint256 _rate) {
        require(MAX_FUNDING_SUPPLY >= totalFundingSupply.add(_value.mul(_rate)));
        _;
    }

    modifier assertFalse(bool withdrawStatus) {
        require(!withdrawStatus);
        _;
    }

    modifier notBeforeTime(uint256 targetTime) {
        require(now > targetTime);
        _;
    }

    modifier notAfterTime(uint256 targetTime) {
        require(now <= targetTime);
        _;
    }

    function etherProceeds() external onlyOwner {
        owner.transfer(address(this).balance);
    }

    function processFunding(address receiver, uint256 _value, uint256 _rate) internal notReachTotalSupply(_value, _rate) {
        uint256 tokens = _value.mul(_rate);
        totalSupply = totalSupply.add(tokens);
        balances[receiver] = balances[receiver].add(tokens);
        totalFundingSupply = totalFundingSupply.add(tokens);
        emit Transfer(0x0, receiver, tokens);
        emit CreateBTMC(receiver, tokens);
    }

    function funding(address receiver, uint256 _value, uint256 _rate) whenNotPaused internal notReachFundingSupply(_value, _rate) {
        processFunding(receiver, _value, _rate);
    }

    function () payable external whenNotPaused notBeforeTime(startTime) notAfterTime(endTime) {
        require(msg.value > 0);
        funding(msg.sender, msg.value, rate);
    }

    function withdrawForOneStep() external onlyOwner assertFalse(hasOneStepWithdraw) notBeforeTime(1587571200) {
        require(totalSupply.add(TEAM_UNFREEZE) <= MAX_SUPPLY);
        totalSupply = totalSupply.add(TEAM_UNFREEZE);
        balances[msg.sender] = balances[msg.sender].add(TEAM_UNFREEZE);
        emit Transfer(0x0, msg.sender, TEAM_UNFREEZE);
        hasOneStepWithdraw = true;
    }

    function withdrawForTwoStep() external onlyOwner assertFalse(hasTwoStepWithdraw) notBeforeTime(1603382400) {
        require(totalSupply.add(TEAM_UNFREEZE) <= MAX_SUPPLY);
        totalSupply = totalSupply.add(TEAM_UNFREEZE);
        balances[msg.sender] = balances[msg.sender].add(TEAM_UNFREEZE);
        emit Transfer(0x0, msg.sender, TEAM_UNFREEZE);
        hasTwoStepWithdraw = true;
    }

    function withdrawForThreeStep() external onlyOwner assertFalse(hasThreeStepWithdraw) notBeforeTime(1619107200) {
        require(totalSupply.add(TEAM_UNFREEZE) <= MAX_SUPPLY);
        totalSupply = totalSupply.add(TEAM_UNFREEZE);
        balances[msg.sender] = balances[msg.sender].add(TEAM_UNFREEZE);
        emit Transfer(0x0, msg.sender, TEAM_UNFREEZE);
        hasThreeStepWithdraw = true;
    }

    function withdrawForFourStep() external onlyOwner assertFalse(hasFourStepWithdraw) notBeforeTime(1634918400) {
        require(totalSupply.add(TEAM_UNFREEZE) <= MAX_SUPPLY);
        totalSupply = totalSupply.add(TEAM_UNFREEZE);
        balances[msg.sender] = balances[msg.sender].add(TEAM_UNFREEZE);
        emit Transfer(0x0, msg.sender, TEAM_UNFREEZE);
        hasFourStepWithdraw = true;
    }

    function withdrawForFiveStep() external onlyOwner assertFalse(hasFiveStepWithdraw) notBeforeTime(1650643200) {
        require(totalSupply.add(TEAM_UNFREEZE) <= MAX_SUPPLY);
        totalSupply = totalSupply.add(TEAM_UNFREEZE);
        balances[msg.sender] = balances[msg.sender].add(TEAM_UNFREEZE);
        emit Transfer(0x0, msg.sender, TEAM_UNFREEZE);
        hasFiveStepWithdraw = true;
    }

    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }

    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) whenNotPaused public returns (bool) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));

        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function setupFundingRate(uint256 _rate) external onlyOwner {
        rate = _rate;
    }

    function setupFundingTime(uint256 _startTime, uint256 _endTime) external onlyOwner {
        startTime = _startTime;
        endTime = _endTime;
    }
}
```

### Key Points:
- **Ownership**: The contract uses `Ownable` for managing ownership and ensures only the owner can execute certain functions.
- **Pausability**: Implemented using `Pausable`, allowing the owner to pause or unpause critical operations.
- **Safe Math**: Uses `SafeMath` to prevent arithmetic overflows.
- **Team Vesting**: Implements a series of functions to allow the owner to withdraw team tokens in specified intervals.
- **Public Funding**: Allows funding via ETH during a specific period, minting tokens and distributing them to contributors.
- **ERC20 Compliance**: Implements all required functions from the ERC20 interface, ensuring compatibility and functionality as expected.