Here is the completed `BotMinting` contract, implementing the logic for creating promo bots, creating Gen0 auctions, and computing the next Gen0 price based on the given specifications:

```solidity
contract BotMinting is BotAuction {

    uint256 public constant PROMO_CREATION_LIMIT = 5000;
    uint256 public constant GEN0_CREATION_LIMIT = 45000;
    uint256 public constant GEN0_STARTING_PRICE = 10 finney;
    uint256 public constant GEN0_AUCTION_DURATION = 1 days;
    uint256 public promoCreatedCount;
    uint256 public gen0CreatedCount;

    /**
     * @notice Creates a promo bot with the specified genes and assigns it to an owner.
     * @dev Only the COO can call this function. The bot owner defaults to the COO if not specified.
     * @param _genes The genetic makeup of the bot.
     * @param _owner The address of the owner of the new bot.
     */
    function createPromoBot(uint256 _genes, address _owner) external onlyCOO {
        require(promoCreatedCount < PROMO_CREATION_LIMIT);
        if (_owner == address(0)) {
            _owner = cooAddress;
        }
        promoCreatedCount++;
        _createBot(0, 0, 0, _genes, _owner);
    }

    /**
     * @notice Creates a Gen0 bot with the specified genes and starts an auction for it.
     * @dev Only the COO can call this function. The bot is initially owned by the contract and then put up for auction.
     * @param _genes The genetic makeup of the bot.
     */
    function createGen0Auction(uint256 _genes) external onlyCOO {
        require(gen0CreatedCount < GEN0_CREATION_LIMIT);
        gen0CreatedCount++;
        uint256 botId = _createBot(0, 0, 0, _genes, address(this));
        _approve(botId, saleAuction);
        uint256 startingPrice = _computeNextGen0Price();
        saleAuction.createAuction(
            botId,
            startingPrice,
            0,
            GEN0_AUCTION_DURATION,
            address(this)
        );
    }

    /**
     * @notice Computes the next price for a Gen0 bot based on the average sale price.
     * @dev The price is calculated as the average sale price plus half of the average sale price. If the computed price is below the starting price, it defaults to the starting price.
     * @return The next price for a Gen0 bot.
     */
    function _computeNextGen0Price() internal view returns (uint256) {
        uint256 averagePrice = saleAuction.averageGen0SalePrice();
        if (averagePrice == 0) {
            return GEN0_STARTING_PRICE;
        }
        uint256 nextPrice = averagePrice + (averagePrice / 2);
        if (nextPrice < GEN0_STARTING_PRICE) {
            nextPrice = GEN0_STARTING_PRICE;
        }
        return nextPrice;
    }
}
```

### Explanation:
- **`createPromoBot`**: This function checks if the promo limit has been reached, sets the owner to the COO if not specified, increments the promo count, and creates the bot.
- **`createGen0Auction`**: This function checks if the Gen0 limit has been reached, increments the Gen0 count, creates the bot with the contract itself as the owner, approves the bot for the sale auction, computes the next auction price, and then creates an auction for the bot.
- **`_computeNextGen0Price`**: This internal function calculates the next price for a Gen0 bot auction based on the average price of the previous Gen0 sales, ensuring it does not fall below the initial starting price.