Certainly! Below is the completed `BotMinting` contract with the necessary functionality implemented for creating promo and Gen0 bots, along with computing the next price for a Gen0 bot auction.

```solidity
contract BotMinting is BotAuction {

    uint256 public constant PROMO_CREATION_LIMIT = 5000;
    uint256 public constant GEN0_CREATION_LIMIT = 45000;
    uint256 public constant GEN0_STARTING_PRICE = 10 finney;
    uint256 public constant GEN0_AUCTION_DURATION = 1 days;

    uint256 public promoCreatedCount;
    uint256 public gen0CreatedCount;

    /**
     * @notice Creates a promo bot with the specified genes and assigns it to an owner.
     * @dev Only the COO can call this function. The bot owner defaults to the COO if not specified.
     * @param _genes The genetic makeup of the bot.
     * @param _owner The address of the owner of the new bot.
     */
    function createPromoBot(uint256 _genes, address _owner) external onlyCOO {
        require(promoCreatedCount < PROMO_CREATION_LIMIT);
        if (_owner == address(0)) {
            _owner = cooAddress;
        }
        _createBot(0, 0, 0, _genes, _owner);
        promoCreatedCount++;
    }

    /**
     * @notice Creates a Gen0 bot with the specified genes and starts an auction for it.
     * @dev Only the COO can call this function. The bot is initially owned by the contract and then put up for auction.
     * @param _genes The genetic makeup of the bot.
     */
    function createGen0Auction(uint256 _genes) external onlyCOO {
        require(gen0CreatedCount < GEN0_CREATION_LIMIT);

        // Create bot with owner as this contract
        uint256 botId = _createBot(0, 0, 0, _genes, address(this));
        gen0CreatedCount++;

        uint256 startingPrice = GEN0_STARTING_PRICE;
        uint256 duration = GEN0_AUCTION_DURATION;
        uint256 endingPrice = _computeNextGen0Price();

        _approve(botId, saleAuction);
        saleAuction.createAuction(
            botId,
            startingPrice,
            endingPrice,
            duration,
            address(this)
        );
    }

    /**
     * @notice Computes the next price for a Gen0 bot based on the average sale price.
     * @dev The price is calculated as the average sale price plus half of the average sale price. If the computed price is below the starting price, it defaults to the starting price.
     * @return The next price for a Gen0 bot.
     */
    function _computeNextGen0Price() internal view returns (uint256) {
        uint256 avePrice = saleAuction.averageGen0SalePrice();
        uint256 nextPrice = avePrice + (avePrice / 2);

        // Ensure the next price does not go below the starting price
        if (nextPrice < GEN0_STARTING_PRICE) {
            nextPrice = GEN0_STARTING_PRICE;
        }

        return nextPrice;
    }
}
```

### Explanation:
- **createPromoBot**: This function allows the COO to create a promo bot. The bot's owner can be specified, but defaults to the COO if no address is given. It checks that the number of promo bots created hasn't reached the limit before creating a bot.
  
- **createGen0Auction**: This function also requires COO access to create a Gen0 bot. The bot is initially owned by the contract itself, and then auctioned off using the `saleAuction` contract. It computes the starting and ending prices for the auction.

- **_computeNextGen0Price**: This function calculates the price for the next Gen0 bot auction based on the average price of previously sold Gen0 bots. If the computed price is below the defined starting price (`GEN0_STARTING_PRICE`), it defaults to the starting price to ensure auction prices do not drop below this threshold.