```solidity
// Below is the complete and functional OperationalControl contract according to the provided context and description.

contract OperationalControl {
    // The addresses of the accounts (or contracts) that can execute actions within each role.
    address public gameManagerPrimary;
    address public gameManagerSecondary;
    address public bankManager;

    // Keeps track whether the contract is paused. When that is true, most actions are blocked.
    bool public paused = false;

    // Keeps track whether the contract errored out. When that is true, most actions are blocked, and a refund can be claimed.
    bool public error = false;

    /// @dev Emitted when the contract is upgraded.
    event ContractUpgrade(address newContract);

    /// @dev Operation modifiers for limiting access.
    modifier onlyGameManager() {
        require(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary);
        _;
    }

    modifier onlyBanker() {
        require(msg.sender == bankManager);
        _;
    }

    modifier anyOperator() {
        require(
            msg.sender == gameManagerPrimary ||
            msg.sender == gameManagerSecondary ||
            msg.sender == bankManager
        );
        _;
    }

    /// @dev Assigns a new address to act as the primary Game Manager.
    function setPrimaryGameManager(address _newGM) external onlyGameManager {
        gameManagerPrimary = _newGM;
    }

    /// @dev Assigns a new address to act as the secondary Game Manager.
    function setSecondaryGameManager(address _newGM) external onlyGameManager {
        gameManagerSecondary = _newGM;
    }

    /// @dev Assigns a new address to act as the Banker.
    function setBanker(address _newBK) external onlyGameManager {
        bankManager = _newBK;
    }

    /*** Pausable functionality adapted from OpenZeppelin ***/

    /// @dev Modifier to allow actions only when the contract is not paused.
    modifier whenNotPaused() {
        require(!paused);
        _;
    }

    /// @dev Modifier to allow actions only when the contract is paused.
    modifier whenPaused() {
        require(paused);
        _;
    }

    /// @dev Modifier to allow actions only when the contract has an error.
    modifier whenError() {
        require(error);
        _;
    }

    /// @dev Called by any Operator role to pause the contract. Used only if a bug or exploit is discovered to limit losses or damage.
    function pause() external onlyGameManager whenNotPaused {
        paused = true;
    }

    /// @dev Unpauses the smart contract. Can only be called by the Game Manager.
    /// @notice This is public rather than external so it can be called by derived contracts.
    function unpause() public onlyGameManager whenPaused {
        paused = false;
    }

    /// @dev Sets the contract to an error state. Can only be called by the Game Manager.
    /// @notice This is public rather than external so it can be called by derived contracts.
    function hasError() public onlyGameManager whenPaused {
        error = true;
    }

    /// @dev Clears the contract's error state. Can only be called by the Game Manager.
    /// @notice This is public rather than external so it can be called by derived contracts.
    function noError() public onlyGameManager whenPaused {
        error = false;
    }
}
```
This contract defines roles for Game Managers and a Banker, implements basic role management functions, and incorporates pausable and error state functionalities as described in the context.