```solidity
contract OperationalControl {
    event ContractUpgrade(address newContract);

    address public gameManagerPrimary;
    address public gameManagerSecondary;
    address public bankManager;

    bool public paused = false;
    bool public error = false;

    modifier onlyGameManager() {
        require(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary);
        _;
    }

    modifier onlyBanker() {
        require(msg.sender == bankManager);
        _;
    }

    modifier anyOperator() {
        require(
            msg.sender == gameManagerPrimary ||
            msg.sender == gameManagerSecondary ||
            msg.sender == bankManager
        );
        _;
    }

    function setPrimaryGameManager(address _newGM) external onlyGameManager {
        gameManagerPrimary = _newGM;
    }

    function setSecondaryGameManager(address _newGM) external onlyGameManager {
        gameManagerSecondary = _newGM;
    }

    function setBanker(address _newBK) external onlyGameManager {
        bankManager = _newBK;
    }

    modifier whenNotPaused() {
        require(!paused);
        _;
    }

    modifier whenPaused {
        require(paused);
        _;
    }

    modifier whenError {
        require(error);
        _;
    }

    function pause() external onlyGameManager whenNotPaused {
        paused = true;
    }

    function unpause() public onlyGameManager whenPaused {
        paused = false;
    }

    function hasError() public onlyGameManager whenPaused {
        error = true;
    }

    function noError() public onlyGameManager whenPaused {
        error = false;
    }
}
```

This contract provides the specified functionality with the necessary access control, pausable features, and error states, all implemented according to the Solidity compiler version 0.4.21. The code adheres strictly to the described requirements and does not include any additional implementations or unrelated code.