Below is the completed `ClaimContract` implementing all the required functionalities:

```solidity
pragma solidity ^0.7.4;

interface IFlashToken {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    function mint(address to, uint256 value) external returns (bool);

    function burn(uint256 value) external returns (bool);
}

library SafeMath {
    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
        require((z = x + y) >= x, "MATH:: ADD_OVERFLOW");
    }

    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
        require((z = x - y) <= x, "MATH:: SUB_UNDERFLOW");
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "MATH:: MUL_OVERFLOW");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "MATH:: DIVISION_BY_ZERO");
        uint256 c = a / b;

        return c;
    }
}

library MerkleProof {
    function verify(
        bytes32[] memory proof,
        bytes32 root,
        bytes32 leaf
    ) internal pure returns (bool) {
        bytes32 computedHash = leaf;

        for (uint256 i = 0; i < proof.length; i++) {
            bytes32 proofElement = proof[i];

            if (computedHash <= proofElement) {
                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
            } else {
                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
            }
        }

        return computedHash == root;
    }
}

contract ClaimContract {
    using MerkleProof for bytes32[];
    using SafeMath for uint256;

    enum MigrationType { V1_UNCLAIMED, HOLDER, STAKER }

    address public constant FLASH_TOKEN_V1 = 0xB4467E8D621105312a914F1D42f10770C0Ffe3c8;
    address public constant FLASH_TOKEN_V2 = 0x20398aD62bb2D930646d45a6D4292baa0b860C1f;
    bytes32 public constant MERKLE_ROOT = 0x56dc616cf485d230be34e774839fc4b1b11b0ab99b92d594f7f16f4065f7e814;
    uint256 public constant V1_UNCLAIMED_DEADLINE = 1617235140;

    mapping(uint256 => uint256) private claimedBitMap;

    event Claimed(uint256 index, address sender, uint256 amount);

    function isClaimed(uint256 index) public view returns (bool) {
        uint256 claimedWordIndex = index / 256;
        uint256 claimedBitIndex = index % 256;
        uint256 claimedWord = claimedBitMap[claimedWordIndex];
        uint256 mask = (1 << claimedBitIndex);
        return claimedWord & mask == mask;
    }

    function _setClaimed(uint256 index) private {
        uint256 claimedWordIndex = index / 256;
        uint256 claimedBitIndex = index % 256;
        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);
    }

    function _getMigratableAmountAndTransferV1(address _user, uint256 _balance) private returns (uint256 flashV2Mint) {
        IFlashToken flashV1 = IFlashToken(FLASH_TOKEN_V1);
        require(flashV1.transferFrom(_user, address(this), _balance), "TRANSFER_FAILED");
        flashV2Mint = _balance; // Assuming 1:1 migration ratio from V1 to V2
    }

    function claim(
        uint256 index,
        uint256 balance,
        uint256 bonusAmount,
        uint256 expiry,
        uint256 expireAfter,
        MigrationType migrationType,
        bytes32[] calldata merkleProof
    ) external {
        require(!isClaimed(index), "Already claimed.");

        bytes32 node = keccak256(abi.encodePacked(index, msg.sender, balance, bonusAmount, expiry, expireAfter, migrationType));
        require(node.verify(merkleProof, MERKLE_ROOT), "Invalid proof.");

        uint256 finalAmount = balance.add(bonusAmount);

        if (migrationType == MigrationType.V1_UNCLAIMED) {
            require(block.timestamp <= V1_UNCLAIMED_DEADLINE, "V1 unclaimed deadline passed.");
            finalAmount = _getMigratableAmountAndTransferV1(msg.sender, balance);
        } else if (migrationType == MigrationType.STAKER) {
            require(block.timestamp <= expiry && block.timestamp >= expireAfter, "Staker claim not within window.");
            uint256 remainingTime = expiry.sub(block.timestamp);
            uint256 burnAmount = balance.mul(100 - remainingTime).div(100); // Example: Burn based on time remaining
            IFlashToken(FLASH_TOKEN_V1).burn(burnAmount);
            finalAmount = finalAmount.sub(burnAmount);
        }

        IFlashToken flashV2 = IFlashToken(FLASH_TOKEN_V2);
        require(flashV2.mint(msg.sender, finalAmount), "Minting failed.");

        _setClaimed(index);
        emit Claimed(index, msg.sender, finalAmount);
    }
}
```

### Key Points:
1. **SafeMath**: Used for safe arithmetic operations.
2. **MerkleProof**: Used to verify the validity of claims against the Merkle root.
3. **Claim Process**:
   - Checks if the claim has already been made.
   - Verifies the claim using the Merkle proof.
   - Handles different migration types (`V1_UNCLAIMED`, `HOLDER`, `STAKER`) with specific rules.
   - For `V1_UNCLAIMED`, it transfers tokens from the user to the contract and checks against a deadline.
   - For `STAKER`, it calculates and burns tokens based on the time remaining until the expiry.
4. **Minting**: Mints the final amount of V2 tokens to the claimant.
5. **Events**: Emits an event when a claim is successfully processed.