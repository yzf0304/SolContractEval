Certainly! Below is the complete and functional `ProxyRegistry` contract based on the provided context and description. The contract includes all necessary logic for granting and revoking access to specific contracts, as well as registering proxy contracts by users.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "./dependencies/openzeppelin/contracts/utils/Context.sol";
import "./dependencies/openzeppelin/contracts/access/Ownable.sol";

/**
 * @title ProxyRegistry
 * @notice A registry for managing proxy contracts and their permissions.
 * @dev This contract allows the owner to grant and revoke access to specific contracts, and users to register their own proxy contracts.
 */
contract ProxyRegistry is Ownable {
    /* DelegateProxy implementation contract. Must be initialized. */
    address public delegateProxyImplementation;

    /* Authenticated proxies by user. */
    mapping(address => OwnableDelegateProxy) public proxies;

    /* Contracts pending access. */
    mapping(address => uint256) public pending;

    /* Contracts allowed to call those proxies. */
    mapping(address => bool) public contracts;

    /* Delay period for adding an authenticated contract.
       This mitigates a particular class of potential attack on the Elementix DAO (which owns this registry) - if at any point the value of assets held by proxy contracts exceeded the value of half the ELT supply (votes in the DAO),
       a malicious but rational attacker could buy half the Elementix and grant themselves access to all the proxy contracts. A delay period renders this attack nonthreatening - given one weeks, if that happened, users would have
       plenty of time to notice and transfer their assets.
    */
    uint256 public constant DELAY_PERIOD = 7 days;

    // event
    event RegisterProxy(address indexed sender, address proxyAddr);
    event AuthenticationOperation(address indexed addr, bool opt);

    /**
     * @notice Start the process to enable access for a specified contract. Subject to a delay period.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address to which to grant permissions
     */
    function startGrantAuthentication(address addr) public onlyOwner {
        require(pending[addr] == 0, "Authentication already started");
        pending[addr] = block.timestamp + DELAY_PERIOD;
        emit AuthenticationOperation(addr, true);
    }

    /**
     * @notice End the process to enable access for a specified contract after the delay period has passed.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address to which to grant permissions
     */
    function endGrantAuthentication(address addr) public onlyOwner {
        require(pending[addr] != 0 && pending[addr] <= block.timestamp, "Delay period not over yet");
        contracts[addr] = true;
        delete pending[addr];
        emit AuthenticationOperation(addr, true);
    }

    /**
     * @notice Revoke access for a specified contract. Can be done instantly.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address of which to revoke permissions
     */
    function revokeAuthentication(address addr) public onlyOwner {
        contracts[addr] = false;
        emit AuthenticationOperation(addr, false);
    }

    /**
     * @notice Register a proxy contract with this registry.
     * @dev Must be called by the user for whom the proxy is being created. Creates a new AuthenticatedProxy.
     * @return proxy New AuthenticatedProxy contract
     */
    function registerProxy() public returns (OwnableDelegateProxy proxy) {
        require(delegateProxyImplementation != address(0), "Delegate proxy implementation not set");

        proxy = new OwnableDelegateProxy(msg.sender, delegateProxyImplementation, abi.encodeWithSignature("initialize(address,address)", msg.sender, address(this)));
        proxies[msg.sender] = proxy;
        emit RegisterProxy(msg.sender, address(proxy));
        return proxy;
    }
}

/**
 * @title OwnableDelegateProxy
 * @notice A proxy contract owned by a user that can delegate calls to another contract.
 */
contract OwnableDelegateProxy is Ownable {
    address public immutable implementation;
    bytes public immutable data;

    constructor(address owner, address impl, bytes memory dat) {
        _transferOwnership(owner);
        implementation = impl;
        data = dat;
    }

    fallback() external payable {
        (bool success, ) = implementation.delegatecall(msg.data);
        require(success, "Delegate call failed");
    }
}
```

### Key Points:
- **OwnableDelegateProxy**: This is a simple proxy contract that delegates calls to another contract (`implementation`). It is initialized with the owner and the implementation address.
- **startGrantAuthentication**: Initiates the process to grant a contract permissions by setting a timestamp for the delay period.
- **endGrantAuthentication**: Finalizes the permission granting process after the delay period has elapsed.
- **revokeAuthentication**: Immediately revokes permissions for a specified contract.
- **registerProxy**: Allows users to register a proxy contract associated with them in the registry. Each user can have one proxy created by this method.

Make sure to replace `OwnableDelegateProxy` with the actual implementation if you have a different proxy contract in mind. The above example assumes a proxy that initializes with an owner and delegates calls to another contract.