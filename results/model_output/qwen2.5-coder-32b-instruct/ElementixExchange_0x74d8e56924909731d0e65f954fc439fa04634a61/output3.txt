Below is the completed `ProxyRegistry` contract implementing the described functionalities:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "./dependencies/openzeppelin/contracts/access/Ownable.sol";

// Placeholder for the OwnableDelegateProxy contract
// In a real scenario, you would include the actual implementation of OwnableDelegateProxy
abstract contract OwnableDelegateProxy is Ownable {}

contract ProxyRegistry is Ownable {

    /* DelegateProxy implementation contract. Must be initialized. */
    address public delegateProxyImplementation;

    /* Authenticated proxies by user. */
    mapping(address => OwnableDelegateProxy) public proxies;

    /* Contracts pending access. */
    mapping(address => uint256) public pending;

    /* Contracts allowed to call those proxies. */
    mapping(address => bool) public contracts;

    /* Delay period for adding an authenticated contract. */
    uint256 public DELAY_PERIOD = 7 days;

    // Events
    event RegisterProxy(address indexed sender, address proxyAddr);
    event AuthenticationOperation(address indexed addr, bool opt);

    /**
     * @notice Start the process to enable access for a specified contract. Subject to a delay period.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address to which to grant permissions
     */
    function startGrantAuthentication(address addr) 
        public 
        onlyOwner 
    {
        require(pending[addr] == 0, "Authentication already pending");
        pending[addr] = block.timestamp + DELAY_PERIOD;
        emit AuthenticationOperation(addr, true);
    }

    /**
     * @notice End the process to enable access for a specified contract after the delay period has passed.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address to which to grant permissions
     */
    function endGrantAuthentication(address addr) 
        public 
        onlyOwner 
    {
        require(pending[addr] != 0, "No authentication pending");
        require(block.timestamp >= pending[addr], "Delay period not elapsed yet");
        contracts[addr] = true;
        delete pending[addr];
        emit AuthenticationOperation(addr, true);
    }

    /**
     * @notice Revoke access for a specified contract. Can be done instantly.
     * @dev Only the owner of the ProxyRegistry can call this function.
     * @param addr Address of which to revoke permissions
     */
    function revokeAuthentication(address addr) 
        public 
        onlyOwner 
    {
        contracts[addr] = false;
        delete pending[addr];
        emit AuthenticationOperation(addr, false);
    }

    /**
     * @notice Register a proxy contract with this registry.
     * @dev Must be called by the user for whom the proxy is being created. Creates a new AuthenticatedProxy.
     * @return proxy New AuthenticatedProxy contract
     */
    function registerProxy() 
        public 
        returns (OwnableDelegateProxy proxy) 
    {
        require(proxies[msg.sender] == OwnableDelegateProxy(address(0)), "User already has a proxy");
        proxy = OwnableDelegateProxy(address(new Proxy()));
        proxies[msg.sender] = proxy;
        emit RegisterProxy(msg.sender, address(proxy));
    }
}

// Placeholder for the Proxy contract
// In a real scenario, you would include the actual implementation of Proxy
contract Proxy is OwnableDelegateProxy {}
```

### Explanation:
- **OwnableDelegateProxy**: This is abstracted out in this example for simplicity. In a real-world scenario, this contract would contain the logic for delegate proxies.
- **Proxy**: Another placeholder representing the concrete proxy implementation that inherits from `OwnableDelegateProxy`.
- **Events**: `RegisterProxy` and `AuthenticationOperation` are emitted as required to notify about actions taken within the contract.
- **Functionality**:
  - `startGrantAuthentication`: Starts the process to add a new contract to the list of allowed contracts, with a delay period.
  - `endGrantAuthentication`: Completes the addition of a contract to the allowed list after the delay period has elapsed.
  - `revokeAuthentication`: Immediately revokes access for a contract.
  - `registerProxy`: Registers a new proxy for the calling user.

Please ensure that you replace the placeholders for `OwnableDelegateProxy` and `Proxy` with their respective actual implementations as per your project's requirements.