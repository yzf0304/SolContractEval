Certainly! Below is the completed `FORMLESS` smart contract based on your specifications:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "./ReentrancyGuard.sol";
import "./Context.sol";
import "./Ownable.sol";
import "./ERC721A.sol";
import "./Address.sol";

contract FORMLESS is Ownable, ERC721A, ReentrancyGuard {
    using Strings for uint256;

    uint256 public MAX_PER_Transtion = 1; // maximam amount that user can mint per transaction
    uint256 public MAX_PER_Address = 1;
    uint256 public PRICE = 0.069 ether;
    uint256 private TotalCollectionSize_ = 500; // total number of nfts
    uint256 private constant MaxMintPerBatch_ = 1; // max mint per trx
    mapping(address => bool) private whitelistedAddressesForMint;
    string private _baseTokenURI;
    uint public status = 0; // 0 - sale pause, 1 - whitelist sale, 2 - public sale

    constructor() ERC721A("FORMLESS", "FORMLESS", MaxMintPerBatch_, TotalCollectionSize_) {
        _baseTokenURI = "https://gateway.pinata.cloud/ipfs/QmWT2u6UEeXJs5MWcSTQhHFyYC9wKevQNjXC4J3k67ymtQ/";
    }

    modifier callerIsUser() {
        require(tx.origin == msg.sender, "The caller is another contract");
        _;
    }

    function mint(uint256 quantity) external payable callerIsUser nonReentrant {
        require(status != 0, "Sale is paused");
        require(quantity > 0 && quantity <= MAX_PER_Transtion, "Invalid mint amount");
        require(totalSupply() + quantity <= TotalCollectionSize_, "Not enough tokens left");
        require(msg.value >= PRICE * quantity, "Insufficient funds");

        if (status == 1) {
            require(whitelistedAddressesForMint[msg.sender], "Not whitelisted");
        }

        require(numberMinted(msg.sender) + quantity <= MAX_PER_Address, "Exceeds max per address");

        _safeMint(msg.sender, quantity);
    }

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        return string(abi.encodePacked(_baseTokenURI, tokenId.toString()));
    }

    function isWhitelistedForMint(address _user) public view returns (bool) {
        return whitelistedAddressesForMint[_user];
    }

    function addNewWhitelistUserForMint(address[] calldata _users) public onlyOwner {
        for (uint256 i = 0; i < _users.length; i++) {
            whitelistedAddressesForMint[_users[i]] = true;
        }
    }

    function setBaseURI(string memory baseURI) external onlyOwner {
        _baseTokenURI = baseURI;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function numberMinted(address owner) public view returns (uint256) {
        return _numberMinted(owner);
    }

    function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {
        return ownershipOf(tokenId);
    }

    function withdrawMoney() external onlyOwner nonReentrant {
        Address.sendValue(payable(owner()), address(this).balance);
    }

    function changeMAX_PER_Address(uint256 q) external onlyOwner {
        MAX_PER_Address = q;
    }

    function reserve(address _address, uint256 quantity) public onlyOwner {
        require(totalSupply() + quantity <= TotalCollectionSize_, "Not enough tokens left");
        _safeMint(_address, quantity);
    }

    function changeMintPrice(uint256 _newPrice) external onlyOwner {
        PRICE = _newPrice;
    }

    function changeCollectionSize(uint256 _collectionSize) external onlyOwner {
        require(_collectionSize >= totalSupply(), "Cannot reduce collection size below current supply");
        TotalCollectionSize_ = _collectionSize;
    }

    function changeMAX_PER_Transtion(uint256 q) external onlyOwner {
        MAX_PER_Transtion = q;
    }

    function giveaway(address a, uint q) public onlyOwner {
        require(totalSupply() + q <= TotalCollectionSize_, "Not enough tokens left");
        _safeMint(a, q);
    }

    function setStatus(uint256 s) external onlyOwner {
        require(s <= 2 && s >= 0, "Invalid status");
        status = s;
    }

    function getStatus() public view returns (uint) {
        return status;
    }

    function getcollectionSize() public view returns (uint) {
        return TotalCollectionSize_;
    }
}
```

This contract includes all the functionalities and features you described, such as minting, reserving, giving away, and managing the sale status of the NFT collection. The `mint` function checks the sale status and the whitelist status if applicable, ensuring fair distribution during the whitelist phase.