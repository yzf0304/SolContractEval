Below is the completed `CrowdSale` contract with all necessary functionality implemented, adhering to the constraints of using Solidity version 0.4.18 and maintaining the structure and interfaces defined in your original description:

```solidity
pragma solidity ^0.4.18;

contract ERC20 {
    uint256 public totalSupply;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
    function allowance(address owner, address spender) public view returns (uint256);
    function approve(address spender, uint256 value) public returns (bool);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
}

contract Ownable {
    address public owner;

    event OwnerChanged(address oldOwner, address newOwner);

    function Ownable() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) onlyOwner public {
        require(newOwner != owner && newOwner != address(0x0));
        address oldOwner = owner;
        owner = newOwner;
        OwnerChanged(oldOwner, newOwner);
    }
}

contract CrowdSale is Ownable {

    ERC20 public token;
    address public beneficiary;
    address public tokenHolder;

    uint public rate;
    uint public amountGoal;
    uint public amountRaised;
    uint public amountTokenIssued;

    uint public startTime;
    uint public endTime;

    struct Stage {
        uint duration; 
        uint rate;
    }
    Stage[] public icoStages;
    Stage[] public lockStages;

    struct PurchaserInfo {
        uint amountEtherSpent;
        uint amountTokenTaken;
        uint[] lockedToken;
    }
    mapping(address => PurchaserInfo) public purchasers;
    address[] public purchaserList;

    event TokenPurchase(address purchaser, uint value, uint buyTokens, uint bonusTokens);
    event GoalReached(uint totalAmountRaised, uint totalTokenIssued);
    event FundingWithdrawn(address beneficiaryAddress, uint value);
    event UnlockToken(address purchaser, uint amountUnlockedTokens);

    modifier afterEnded {
        require(isEnded());
        _;
    }

    modifier onlyOpenTime {
        require(isStarted());
        require(!isEnded());
        _;
    }

    function CrowdSale(address beneficiaryAddr, address tokenHolderAddr, address tokenAddr, uint tokenRate) public {
        require(beneficiaryAddr != address(0));
        require(tokenHolderAddr != address(0));
        require(tokenAddr != address(0));
        require(tokenRate > 0);

        beneficiary = beneficiaryAddr;
        tokenHolder = tokenHolderAddr;
        token = ERC20(tokenAddr);
        rate = tokenRate;

        _initStages();
    }

    function _initStages() internal {
        // Example setup for stages
        // In real usage, these should be set via function or constructor parameters
        icoStages.push(Stage(1 weeks, 150));
        icoStages.push(Stage(1 weeks, 125));
        icoStages.push(Stage(1 weeks, 100));

        lockStages.push(Stage(4 weeks, 0)); // 4 weeks lock
        lockStages.push(Stage(4 weeks, 0)); // 4 weeks lock
        lockStages.push(Stage(4 weeks, 0)); // 4 weeks lock
    }

    function getTokenAddress() public view returns(address) {
        return address(token);
    }

    function getLockedToken(address _purchaser, uint stageIdx) public view returns(uint) {
        return purchasers[_purchaser].lockedToken[stageIdx];
    }

    function canTokenUnlocked(uint stageIndex) public view returns(bool) {
        if (stageIndex >= lockStages.length) return false;
        uint lockEndTime = endTime + lockStages[stageIndex].duration;
        return now >= lockEndTime;
    }

    function isStarted() public view returns(bool) {
        return now >= startTime && now <= endTime;
    }

    function isReachedGoal() public view returns(bool) {
        return amountRaised >= amountGoal;
    }

    function isEnded() public view returns(bool) {
        return now > endTime || isReachedGoal();
    }

    function getCurrentStage() public view returns(int) {
        uint elapsedTime = now - startTime;
        uint sumDuration = 0;
        for (uint i = 0; i < icoStages.length; i++) {
            sumDuration += icoStages[i].duration;
            if (elapsedTime < sumDuration) {
                return int(i);
            }
        }
        return -1;
    }

    function getRemainingTimeInSecond() public view returns(uint) {
        if (now > endTime) {
            return 0;
        } else {
            return endTime - now;
        }
    }

    function _addPurchaser(address purchaser) internal {
        if (purchasers[purchaser].amountEtherSpent == 0) {
            purchaserList.push(purchaser);
        }
    }

    function start(uint fundingGoalInEther) public onlyOwner {
        require(startTime == 0 && endTime == 0);
        amountGoal = fundingGoalInEther * 1 ether;
        startTime = now;
        endTime = now + 3 weeks; // Example end time, should be configurable
    }

    function stop() public onlyOwner {
        endTime = now;
    }

    function () payable public onlyOpenTime {
        require(msg.value > 0);

        uint currentStage = getCurrentStage();
        require(currentStage >= 0 && uint(currentStage) < icoStages.length);

        uint buyTokens;
        uint bonusTokens;
        (buyTokens, bonusTokens) = _getTokenCount(msg.value);

        uint totalTokens = buyTokens + bonusTokens;
        require(token.balanceOf(tokenHolder) >= totalTokens);

        token.transferFrom(tokenHolder, msg.sender, totalTokens);

        amountRaised += msg.value;
        amountTokenIssued += totalTokens;
        purchasers[msg.sender].amountEtherSpent += msg.value;
        purchasers[msg.sender].amountTokenTaken += totalTokens;
        purchasers[msg.sender].lockedToken.push(bonusTokens);
        _addPurchaser(msg.sender);

        TokenPurchase(msg.sender, msg.value, buyTokens, bonusTokens);

        if (isReachedGoal()) {
            GoalReached(amountRaised, amountTokenIssued);
        }
    }

    function _getTokenCount(uint amountInWei) internal view returns(uint buyTokenCount, uint bonusTokenCount) {
        int currentStage = getCurrentStage();
        require(currentStage >= 0);

        buyTokenCount = amountInWei * icoStages[uint(currentStage)].rate / 1 ether;
        bonusTokenCount = buyTokenCount * icoStages[uint(currentStage)].rate / 100 - buyTokenCount;
    }

    function safeWithdrawal() public onlyOwner {
        require(isEnded());
        beneficiary.transfer(amountRaised);
        FundingWithdrawn(beneficiary, amountRaised);
    }

    function unlockBonusTokens(uint stageIndex, uint purchaserStartIdx, uint purchaserEndIdx) public afterEnded onlyOwner {
        require(purchaserStartIdx < purchaserEndIdx);
        require(purchaserEndIdx <= purchaserList.length);
        require(canTokenUnlocked(stageIndex));

        for (uint i = purchaserStartIdx; i < purchaserEndIdx; i++) {
            address purchaser = purchaserList[i];
            uint lockedAmount = getLockedToken(purchaser, stageIndex);
            if (lockedAmount > 0) {
                purchasers[purchaser].lockedToken[stageIndex] = 0;
                purchasers[purchaser].amountTokenTaken += lockedAmount;
                amountTokenIssued += lockedAmount;
                token.transferFrom(tokenHolder, purchaser, lockedAmount);
                UnlockToken(purchaser, lockedAmount);
            }
        }
    }
}
```

### Explanation:
- **Initialization**: `_initStages()` sets up stages for the ICO with durations and bonus rates, and lock stages with durations.
- **Token Calculation**: `_getTokenCount()` calculates the number of tokens to be bought and bonus tokens based on the current stage rate.
- **Purchaser Management**: `_addPurchaser()` keeps track of new purchasers.
- **Funding Withdrawal**: `safeWithdrawal()` allows the owner to withdraw funds only