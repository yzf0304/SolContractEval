Certainly! Below is the complete implementation of the `FlashToken` contract based on your specifications and using Solidity version 0.7.4. The contract adheres to the ERC20 standard and implements additional functionalities like minting, burning, and advanced authorization through EIP-2612 (permit) and EIP-3009 (transfer with authorization).

```solidity
// SPDX-License-Identifier: MIT
pragma solidity 0.7.4;

library SafeMath {
    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
        require((z = x + y) >= x, "MATH:ADD_OVERFLOW");
    }

    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
        require((z = x - y) <= x, "MATH:SUB_UNDERFLOW");
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
}

contract FlashToken is IERC20 {
    using SafeMath for uint256;

    // EIP-712 Domain Separator constants
    bytes32 private constant EIP712DOMAIN_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;
    bytes32 private constant NAME_HASH = 0x345b72c36b14f1cee01efb8ac4b299dc7b8d873e28b4796034548a3d371a4d2f;
    bytes32 private constant VERSION_HASH = 0xad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a5;

    // Typehashes for EIP-712 signatures
    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
    bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;

    // Token metadata
    string public constant name = "Flashstake";
    string public constant symbol = "FLASH";
    uint8 public constant decimals = 18;

    // Minter addresses
    address public constant FLASH_PROTOCOL = 0x15EB0c763581329C921C8398556EcFf85Cc48275;
    address public constant FLASH_CLAIM = 0xf2319b6D2aB252d8D80D8CEC34DaF0079222A624;

    // Total supply and balances
    uint256 public override totalSupply;
    mapping(address => uint256) public override balanceOf;
    mapping(address => mapping(address => uint256)) public override allowance;

    // ERC-2612, ERC-3009 state
    mapping(address => uint256) public nonces;
    mapping(address => mapping(bytes32 => bool)) public authorizationState;

    // Events
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);

    // Modifier to restrict functions to only minter addresses
    modifier onlyMinter {
        require(msg.sender == FLASH_PROTOCOL || msg.sender == FLASH_CLAIM, "FlashToken:: NOT_MINTER");
        _;
    }

    /**
     * @notice Initializes the contract and mints initial tokens to specified addresses.
     */
    constructor() {
        _mint(0x842f8f6fB524996d0b660621DA895166E1ceA691, 1200746000000000000000000);
        _mint(0x0945d9033147F27aDDFd3e7532ECD2100cb91032, 1000000000000000000000000);
    }

    /**
     * @notice Validates the signed data using EIP-712.
     * @dev Checks if the recovered signer matches the provided signer and disallows address(0).
     * @param signer The address of the signer.
     * @param encodeData The encoded data to be signed.
     * @param v The v component of the signature.
     * @param r The r component of the signature.
     * @param s The s component of the signature.
     */
    function _validateSignedData(
        address signer,
        bytes32 encodeData,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal view {
        require(signer != address(0), "signer cannot be 0x0");
        require(ECDSA.recover(keccak256(abi.encodePacked("\x19\x01", getDomainSeparator(), encodeData)), v, r, s) == signer, "invalid signature");
    }

    /**
     * @notice Mints new tokens to a specified address.
     * @dev Increases the total supply and the recipient's balance.
     * @param to The address to receive the minted tokens.
     * @param value The amount of tokens to mint.
     */
    function _mint(address to, uint256 value) internal {
        require(to != address(0), "mint to the zero address");

        totalSupply = totalSupply.add(value);
        balanceOf[to] = balanceOf[to].add(value);
        emit Transfer(address(0), to, value);
    }

    /**
     * @notice Burns tokens from a specified address.
     * @dev Decreases the total supply and the sender's balance.
     * @param from The address to burn tokens from.
     * @param value The amount of tokens to burn.
     */
    function _burn(address from, uint256 value) internal {
        require(balanceOf[from] >= value, "burn amount exceeds balance");

        balanceOf[from] = balanceOf[from].sub(value);
        totalSupply = totalSupply.sub(value);
        emit Transfer(from, address(0), value);
    }

    /**
     * @notice Sets the allowance for a spender.
     * @dev Updates the allowance and emits an Approval event.
     * @param owner The address of the token owner.
     * @param spender The address of the spender.
     * @param value The amount of tokens to approve.
     */
    function _approve(
        address owner,
        address spender,
        uint256 value
    ) private {
        require(owner != address(0), "approve from the zero address");
        require(spender != address(0), "approve to the zero address");

        allowance[owner][spender] = value;
        emit Approval(owner, spender, value);
    }

    /**
     * @notice Transfers tokens from one address to another.
     * @dev Ensures the receiver is not the zero address or the contract itself, updates balances, and emits a Transfer event.
     * @param from The address to transfer tokens from.
     * @param to The address to transfer tokens to.
     * @param value The amount of tokens to transfer.
     */
    function _transfer(
        address from,
        address to,
        uint256 value
    ) private {
        require(from != address(0), "transfer from the zero address");
        require(to != address(0), "transfer to the zero address");

        balanceOf[from] = balanceOf[from].sub(value);
        balanceOf[to] = balanceOf[to].add(value);
        emit Transfer(from, to, value);
    }

    /**
     * @notice Returns the current chain ID.
     * @return chainId The current chain ID.
     */
    function getChainId() public pure returns (uint256 chainId) {
        assembly {
            chainId := chainid()
        }
    }

    /**
     * @notice Returns the domain separator used in EIP-712 signatures.
     * @return The domain separator.
     */
    function getDomainSeparator() public view returns (bytes32) {
        return keccak256(
            abi.encode(
                EIP712DOMAIN_HASH,
                NAME_HASH,
                VERSION_HASH,
                getChainId(),
                address(this)
            )
        );
    }

    /**
     * @notice Mints new tokens to a specified address.
     * @dev Only callable by the minter addresses.
     * @param to The address to receive the minted tokens.
     * @param value The amount of tokens to mint.
     * @return True on success.
     */
    function mint(address to, uint256 value) external onlyMinter returns (bool) {
        _mint(to, value);
        return true;
    }

    /**
     * @notice Burns tokens from the caller's account.
     * @param value The amount of tokens to burn.
     * @return True on success.
     */
    function burn(uint256 value) external returns (bool) {
        _burn(msg.sender, value);
        return true;
    }

    /**
     * @notice Approves a spender to transfer a certain amount of tokens on behalf of the caller.
     * @param spender The address of the spender.
     * @param value The amount of tokens to approve.
     * @return True on success.
     */
    function approve(address spender, uint256 value) external override returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }

    /**
     * @notice Transfers tokens from the caller's account to another address.
     * @param to The address to transfer tokens to.
     * @param value The amount of tokens to transfer.
     * @return True on success.
     */
    function transfer(address to, uint256 value) external override returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }

    /**
     * @notice Transfers tokens from one address to another, using the caller's allowance.
     * @param from The address to transfer tokens from.
     * @param to The address to transfer tokens to.
     * @param value The amount of tokens to transfer.
     * @return True on success.
     */
    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external override returns (bool) {
        require(allowance[from][msg.sender] >= value, "transferFrom exceeds allowance");

        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);
        _transfer(from, to, value);
        return true;
    }

    /**
     * @notice Sets the allowance for a spender using a signed message.
     * @param owner The address of the token owner.
     * @param spender The address of the spender.
     * @param value The amount of tokens to approve.
     * @param deadline The deadline for the operation.
     * @param v The v component of the signature.
     * @param r The r component of the signature.
     * @param s The s component of the signature.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external {
        require(deadline >= block.timestamp, "permit expired");

        bytes32 encodeData = keccak256(
            abi.encode(
                PERMIT_TYPEHASH,
                owner,
                spender,
                value,
                nonces[owner]++,
                deadline
            )
        );

        _validateSignedData(owner, encodeData, v, r, s);
        _approve(owner, spender, value);
    }

    /**
     * @notice Transfers tokens with authorization using a signed message.
     * @param from The address to transfer tokens from.
     * @param to The address to transfer tokens to.
     * @param value The amount of tokens to transfer.
     * @param validAfter The timestamp after which the authorization is valid.
     * @param validBefore The timestamp before which the authorization is valid.
     * @param nonce The nonce for the authorization.
     * @param v The v component of the signature.
     * @param r The r component of the signature.
     * @param s The s component of the signature.
     */
    function transferWithAuthorization(
        address from,
        address to,
        uint256 value,
        uint256 validAfter,
        uint256 validBefore,
        bytes32 nonce,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external {
        require(block.timestamp > validAfter, "authorization is not yet valid");
        require(block.timestamp < validBefore, "authorization expired");
        require(!authorizationState[from][nonce], "authorization already used");

        bytes32 encodeData = keccak256(
            abi.encode(
                TRANSFER_WITH_AUTHORIZATION_TYPEHASH,
                from,
                to,
                value,
                validAfter,
                validBefore,
                nonce
            )
        );

        _validateSignedData(from, encodeData, v, r, s);
        authorizationState[from][nonce] = true;
        emit AuthorizationUsed(from, nonce);
        _transfer(from, to, value);
    }
}

/**
 * @title ECDSA
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    /**
     * @dev Recovers the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, as specified in
     * https://eips.ethereum.org/EIPS/eip-2
     *
     * `hash` must be the UTF-8 hash of a prefixed message that represents a
     * valid signed message (e.g. prefix is `\x19Ethereum Signed Message:\n`).
     * This hash can be obtained from the Solidity `keccak256` hash function,
     * by signing a prefixed version of the message, and performing a bitwise
     * NOT operation on the first byte (this is due to the fact that `ecrecover`
     * actually returns an address negative in case of an error, and positive
     * otherwise).
     *
     * See {recover}.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        // Check the signature length
        if (signature.length != 65) {
            revert("ECDSA: invalid signature length");
        }

        // Divide the signature in r, s and v variables
        bytes32 r;
        bytes32 s;
        uint8 v;
        // ecrecover takes the signature parameters, and the only way to get them
        // currently is to use assembly.
        assembly {
            r := mload(add(signature, 0x20))
            s := mload(add(signature, 0x40))
            v := byte(0, mload(add(signature, 0x60)))
        }

        // Adjust signature v value with EIP-2
        if (v < 27) {
            v += 27;
        }

        return recover(hash, v, r, s);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `r` and `s` signature fields separately.
     */
    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper half order, calculate a
        // new s-value with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {
            revert("ECDSA: invalid signature 's' value");
        }

        if (v != 27 && v != 28) {
            revert("ECDSA: invalid signature 'v' value");
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        require(signer != address(0), "ECDSA: invalid signature");

        return signer;
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * replicates the behavior of the
     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]
     * JSON-RPC method.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }
}
```

This implementation includes all the specified features and is compatible with the Solidity compiler version 0.7.4. It incorporates a custom `ECDSA` library to handle signature validation according to EIP-712 standards.