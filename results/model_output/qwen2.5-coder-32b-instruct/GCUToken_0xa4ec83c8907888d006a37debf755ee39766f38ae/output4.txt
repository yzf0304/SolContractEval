Below is the completed `GCUToken` smart contract implementing both ERC20 and ERC223 standards based on your requirements. The code uses Solidity version 0.4.26 and adheres strictly to the provided interface and functions.

```solidity
pragma solidity ^0.4.26;

contract SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        require(c >= a);
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
        require(b <= a);
        c = a - b;
    }
}

contract ERC223Interface {
    uint public totalSupply_;
    function balanceOf(address who) public view returns (uint);
    function transfer(address to, uint value) public returns (bool);
    function transfer(address to, uint value, bytes data) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint value, bytes data);
}

contract ContractReceiver {
    function tokenFallback(address _from, uint _value, bytes _data) public {
        _from;
        _value;
        _data;
    }
}

contract GCUToken is ERC223Interface {
    using SafeMath for uint256;

    /* Contract Constants */
    string public constant _name = "Global Currency Unit";
    string public constant _symbol = "GCU";
    uint8 public constant _decimals = 18;

    /* Contract Variables */
    address public owner;
    uint256 public totalSupply_;

    mapping(address => uint256) public balances;
    mapping(address => mapping (address => uint256)) public allowed;

    /* Constructor initializes the owner's balance and the supply  */
    function GCUToken(uint256 _amount, address _initialWallet) public {
        owner = _initialWallet;
        totalSupply_ = _amount * (uint256(10) ** _decimals);
        balances[_initialWallet] = totalSupply_;

        emit Transfer(0x0, _initialWallet, totalSupply_);
    }

    /* ERC20 Functions */
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    function balanceOf(address _address) public view returns (uint256 balance) {
        return balances[_address];
    }

    function transfer(address _to, uint _value) public returns (bool success) {
        if (!isContract(_to)) {
            return transferToAddress(_to, _value, "");
        } else {
            return transferToContract(_to, _value, "");
        }
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _allowance) public returns (bool success) {
        allowed[msg.sender][_spender] = _allowance;
        emit Approval(msg.sender, _spender, _allowance);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function name() public view returns (string name) {
        return _name;
    }

    function symbol() public view returns (string symbol) {
        return _symbol;
    }

    function decimals() public view returns (uint8 decimals) {
        return _decimals;
    }

    /* ERC223 Functions */
    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {
        if (!isContract(_to)) {
            return transferToAddress(_to, _value, _data);
        } else {
            return transferToContract(_to, _value, _data);
        }
    }

    function transferToAddress(address _to, uint _value, bytes _data) internal returns (bool success) {
        require(_value <= balances[msg.sender]);
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        emit Transfer(msg.sender, _to, _value, _data);
        return true;
    }

    function transferToContract(address _to, uint _value, bytes _data) internal returns (bool success) {
        require(_value <= balances[msg.sender]);
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        ContractReceiver receiver = ContractReceiver(_to);
        receiver.tokenFallback(msg.sender, _value, _data);
        emit Transfer(msg.sender, _to, _value);
        emit Transfer(msg.sender, _to, _value, _data);
        return true;
    }

    function isContract(address _address) internal returns (bool is_contract) {
        uint length;
        assembly {
            //retrieve the size of the code on target address, this needs assembly
            let ptr := mload(0x40)
            extcodecopy(_address, ptr, 0, 0x20)
            length := mload(ptr)
            mstore(0x40, add(ptr, 0x20))  // restore the free memory pointer
        }
        return length > 0;
    }

    // Prevents any attempt to send Ether to this contract
    function () public payable {
        revert();
    }
}
```

This contract handles standard ERC20 functionality as well as ERC223 functionality, including checking if a recipient is a contract and calling the `tokenFallback` method if necessary. The `SafeMath` library is also implemented inline within the contract itself to ensure safety in arithmetic operations.