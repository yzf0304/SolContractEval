To complete the `StandardToken` contract according to the provided context and description, we need to implement the missing functions and include the necessary imports and library usage. Since the contract uses `SafeMath` for arithmetic operations, we must define or import this library. However, given the instructions not to introduce additional dependencies or unrelated code, I'll assume that `SafeMath` is available in the environment where this contract is being compiled.

Below is the completed `StandardToken` contract:

```solidity
pragma solidity ^0.4.16;

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
}

contract ERC20 {

    uint256 public totalSupply;

    function balanceOf(address who) constant returns (uint256);

    function transfer(address to, uint256 value) returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    function allowance(address owner, address spender) constant returns (uint256);

    function transferFrom(address from, address to, uint256 value) returns (bool);

    function approve(address spender, uint256 value) returns (bool);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * @title StandardToken
 * @dev Implementation of the basic standard token with ERC20 functionality.
 * @notice This contract provides a basic implementation of an ERC20 token, including balance tracking and allowance management.
 */
contract StandardToken is ERC20 {

    using SafeMath for uint256;

    mapping(address => uint256) balances;

    mapping (address => mapping (address => uint256)) allowed;

    /**
     * @notice Returns the balance of the specified address.
     * @param _owner The address to query the balance of.
     * @return The balance of the specified address.
     * @dev This function is used to check the balance of a specific address.
     */
    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }

    /**
     * @notice Approves the specified address to spend a certain amount of tokens on behalf of the message sender.
     * @param _spender The address which will spend the funds.
     * @param _value The amount of tokens to be spent.
     * @return True if the approval was successful.
     * @dev To change the approve amount, you first have to reduce the addresses' allowance to zero by calling `approve(_spender, 0)` if it is not already 0 to mitigate the race condition described here: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     */
    function approve(address _spender, uint256 _value) returns (bool) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @notice Returns the remaining number of tokens that `_spender` is allowed to spend on behalf of `_owner`.
     * @param _owner The address of the token owner.
     * @param _spender The address of the spender.
     * @return The remaining allowance for the spender.
     * @dev This function is used to check the remaining allowance for a specific spender.
     */
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    /**
     * @notice Transfers the specified amount of tokens to the recipient.
     * @param _to The address to transfer tokens to.
     * @param _value The amount of tokens to be transferred.
     * @return True if the transfer was successful.
     * @dev Throws if the sender does not have enough balance.
     */
    function transfer(address _to, uint256 _value) returns (bool) {
        require(_to != address(0));
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Transfers the specified amount of tokens on behalf of another address.
     * @param _from The address to transfer tokens from.
     * @param _to The address to transfer tokens to.
     * @param _value The amount of tokens to be transferred.
     * @return True if the transfer was successful.
     * @dev Throws if the sender does not have enough allowance or balance.
     */
    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {
        require(_to != address(0));
        uint256 _allowance = allowed[_from][msg.sender];

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = _allowance.sub(_value);
        Transfer(_from, _to, _value);
        return true;
    }
}
```

This implementation includes all required functions for an ERC20 token, using `SafeMath` to handle arithmetic operations safely, thus preventing overflows and underflows.