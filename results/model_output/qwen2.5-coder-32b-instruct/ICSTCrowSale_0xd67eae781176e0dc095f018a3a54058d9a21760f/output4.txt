Certainly! Below is the completed `ICSTCrowSale` contract adhering to your requirements and using Solidity version 0.4.21:

```solidity
pragma solidity ^0.4.21;

contract ERC20Basic {
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
}

contract ERC20 is ERC20Basic {
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Ownable {
    address public owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    function Ownable() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract ICSTCrowSale is Ownable {
    using SafeMath for uint256;

    uint256 public totalFundingSupply;
    ERC20 public token;
    uint256 public startTime;
    uint256 public endTime;
    uint256 public airdropSupply;
    uint256 public rate;

    event Wasted(address to, uint256 value, uint256 date);

    function ICSTCrowSale() public {
        rate = 0;
        startTime = 0;
        endTime = 0;
        airdropSupply = 0;
        totalFundingSupply = 0;
        token = ERC20(0xe6bc60a00b81c7f3cbc8f4ef3b0a6805b6851753);
    }

    function () payable external {
        require(now > startTime);
        require(now <= endTime);
        uint256 amount = msg.value.mul(rate);
        processFunding(msg.sender, msg.value, rate);
        totalFundingSupply = totalFundingSupply.add(amount);
    }

    function withdrawCoinToOwner(uint256 _value) external onlyOwner {
        require(_value <= token.balanceOf(this));
        require(token.transfer(owner, _value));
    }

    function airdrop(address[] _holders, uint256 paySize) external onlyOwner {
        uint256 totalAirdropAmount = _holders.length.mul(paySize);
        require(totalAirdropAmount <= airdropSupply);
        require(totalAirdropAmount <= token.balanceOf(this));

        for (uint256 i = 0; i < _holders.length; i++) {
            require(token.transfer(_holders[i], paySize));
        }
        airdropSupply = airdropSupply.sub(totalAirdropAmount);
    }

    function processFunding(address receiver, uint256 _value, uint256 _rate) internal {
        uint256 tokens = _value.mul(_rate);
        require(token.transfer(receiver, tokens));
    }

    function etherProceeds() external onlyOwner {
        require(owner.send(this.balance));
    }

    function init(uint256 _startTime, uint256 _endTime, uint256 _rate) external onlyOwner {
        require(_startTime < _endTime);
        startTime = _startTime;
        endTime = _endTime;
        rate = _rate;
    }

    function changeToken(address _tokenAddress) external onlyOwner {
        require(_tokenAddress != address(0));
        token = ERC20(_tokenAddress);
    }
}
```

This contract includes all the necessary functions and modifiers as per the given specifications and adheres to Solidity version 0.4.21 syntax. Ensure that the token address `0xe6bc60a00b81c7f3cbc8f4ef3b0a6805b6851753` is correctly set or updated via the `changeToken` function before deploying.