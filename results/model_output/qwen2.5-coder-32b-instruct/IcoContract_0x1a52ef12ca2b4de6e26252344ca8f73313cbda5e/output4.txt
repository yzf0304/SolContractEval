Below is the completed `Bonus` contract with all the required functions implemented according to your specifications. This contract uses Solidity version 0.4.18 as per the deployment requirement.

```solidity
/**
 * @notice This contract manages the bonus distribution for an ICO, allowing the owner to enable or disable bonuses,
 *         calculate bonuses based on time and ETH amount, and manage bonus balances for participants.
 * @dev This contract inherits from IcoPhase and Ownable. It uses SafeMath for arithmetic operations.
 */
contract Bonus is IcoPhase, Ownable {

    using SafeMath for uint256;

    // decimals of tokens
    uint256 constant decimals = 18;

    // enable/disable
    bool public isBonus;

    // storage
    mapping(address => uint256) public bonusAccountBalances;
    mapping(uint256 => address) public bonusAccountIndex;
    uint256 public bonusAccountCount;

    /**
     * @notice Initializes the contract with bonuses enabled.
     * @dev Constructor sets the initial state of the contract.
     */
    function Bonus() public {
        isBonus = true;
    }

    /**
     * @notice Enables the bonus system.
     * @dev Can only be called by the contract owner and when bonuses are currently disabled.
     * @return A boolean indicating the success of the operation.
     */
    function enableBonus() public onlyOwner returns (bool) {
        require(!isBonus);
        isBonus = true;
        return true;
    }

    /**
     * @notice Disables the bonus system.
     * @dev Can only be called by the contract owner and when bonuses are currently enabled.
     * @return A boolean indicating the success of the operation.
     */
    function disableBonus() public onlyOwner returns (bool) {
        require(isBonus);
        isBonus = false;
        return true;
    }

    /**
     * @notice Gets the bonus percentage based on the current time.
     * @dev Checks the current time against predefined phases and returns the corresponding bonus percentage.
     * @return The bonus percentage as a uint256.
     */
    function getBonusByTime() public constant returns(uint256) {
        uint256 nowTime = now;
        if(nowTime >= phasePresale_From && nowTime < phasePresale_To) {
            return 20; // 20% bonus during presale
        } else if(nowTime >= phasePublicSale1_From && nowTime < phasePublicSale1_To) {
            return 15; // 15% bonus during public sale 1
        } else if(nowTime >= phasePublicSale2_From && nowTime < phasePublicSale2_To) {
            return 10; // 10% bonus during public sale 2
        } else if(nowTime >= phasePublicSale3_From && nowTime < phasePublicSale3_To) {
            return 5; // 5% bonus during public sale 3
        }
        return 0; // No bonus outside these phases
    }

    /**
     * @notice Calculates the bonus amount based on the provided ETH value.
     * @dev Determines the bonus amount based on the current phase and the provided ETH value.
     * @param _value The amount of ETH to convert to a bonus.
     * @return The bonus amount as a uint256.
     */
    function getBonusByETH(uint256 _value) public constant returns(uint256) {
        uint256 bonusPercentage = getBonusByTime();
        uint256 bonus = _value.mul(bonusPercentage).div(100);
        return bonus.mul(10 ** decimals); // Convert to token decimals
    }

    /**
     * @notice Returns the bonus balance of a specific account.
     * @dev Fetches the bonus balance from the storage mapping.
     * @param _owner The address of the account to check the bonus balance for.
     * @return The bonus balance as a uint256.
     */
    function balanceBonusOf(address _owner) public constant returns (uint256 balance) {
        return bonusAccountBalances[_owner];
    }

    /**
     * @notice Pays a bonus to a specified address.
     * @dev Only the contract owner can call this function.
     * @param _address The address to which the bonus will be paid.
     * @return A boolean indicating the success of the operation.
     */
    function payBonusToAddress(address _address) public onlyOwner returns (bool success) {
        uint256 bonus = bonusAccountBalances[_address];
        require(bonus > 0);
        bonusAccountBalances[_address] = 0;
        // Here you would typically transfer the tokens to _address
        // Since we're dealing with a bonus amount, assume the bonus is already calculated in terms of token units
        // For demonstration purposes, we're just setting the balance to 0 here
        // In a real scenario, you might use a function like MyToken.transfer(_address, bonus);
        return true;
    }

    /**
     * @notice Fallback function to receive Ether.
     * @dev This function allows the contract to receive Ether.
     */
    function () external payable {}

}
```

### Key Points:
- The `Bonus` contract is enabled by default in the constructor.
- It includes functions to enable and disable the bonus system.
- The bonus percentages are defined within the time phases.
- The bonus calculation is based on the current time and the ETH value received.
- The contract tracks and pays bonuses to specific addresses managed by the owner.
- The fallback function allows the contract to receive Ether, but the primary logic here focuses on bonus calculations and payments. The token transfer logic is simplified for demonstration purposes.