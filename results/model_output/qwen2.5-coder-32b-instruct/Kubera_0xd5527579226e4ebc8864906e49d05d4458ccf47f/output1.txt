Below is the completed `Kubera` smart contract based on your specifications and requirements, ensuring compatibility with Solidity version 0.4.11:

```solidity
contract SafeMath {

    function safeMul(uint a, uint b) internal returns(uint) {
        uint c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }

    function safeSub(uint a, uint b) internal returns(uint) {
        assert(b <= a);
        return a - b;
    }

    function safeAdd(uint a, uint b) internal returns(uint) {
        uint c = a + b;
        assert(c >= a && c >= b);
        return c;
    }
}

contract Kubera is SafeMath {
    string public standard = 'ERC20';
    string public name = 'Kubera token';
    string public symbol = 'KBR';
    uint8 public decimals = 0;
    uint256 public totalSupply;
    address public owner;
    uint public tokensSoldToInvestors = 0;
    uint public maxGoalInICO = 2100000000;
    uint256 public startTime = 1510325999;
    bool burned;
    bool hasICOStarted;
    address tokensHolder = 0x94B4776F8331DF237E087Ed548A3c8b4932D131B;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event TransferToReferral(address indexed referralAddress, uint256 value);
    event Approval(address indexed Owner, address indexed spender, uint256 value);
    event Burned(uint amount);

    function Kubera() {
        owner = 0x084bf76c9ba9106d6114305fae9810fbbdb157d9;
        balanceOf[owner] = 2205000000;
        totalSupply = 2205000000;
    }

    function transfer(address _to, uint256 _value) returns(bool success) {
        require(now >= startTime); // Ensure tokens can only be transferred after ICO start
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]); // Overflow protection
        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);
        balanceOf[_to] = safeAdd(balanceOf[_to], _value);
        Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) returns(bool success) {
        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {
        require(now >= startTime); // Ensure tokens can only be transferred after ICO start
        require(balanceOf[_from] >= _value); 
        require(balanceOf[_to] + _value > balanceOf[_to]); // Overflow protection
        require(_value <= allowance[_from][msg.sender]);

        // Pre-ICO: Only owner can transfer, must burn unsold tokens
        if (!hasICOStarted) {
            require(msg.sender == owner);
        } else {
            // ICO: Tracks tokens sold vs goal
            if (!burned && now < startTime + 24 hours) {
                require(tokensSoldToInvestors + _value <= maxGoalInICO);
                tokensSoldToInvestors += _value;
            }
        }

        balanceOf[_from] = safeSub(balanceOf[_from], _value);
        balanceOf[_to] = safeAdd(balanceOf[_to], _value);
        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);
        Transfer(_from, _to, _value);
        return true;
    }

    function burn() {
        require(!burned);
        require(msg.sender == owner);
        require(tokensSoldToInvestors < maxGoalInICO); // Burn only if not fully sold during ICO
        uint unsoldTokens = safeSub(maxGoalInICO, tokensSoldToInvestors);
        balanceOf[tokensHolder] = safeAdd(balanceOf[tokensHolder], unsoldTokens);
        balanceOf[owner] = safeSub(balanceOf[owner], unsoldTokens);
        Burned(unsoldTokens);
        burned = true;
    }
}
```

### Key Points:
- **Token Transfers:** Tokens can only be transferred after the `startTime`.
- **Burn Function:** Allows burning unsold tokens to `tokensHolder` after the ICO if the maximum goal is not reached.
- **Allowances:** Users can approve other addresses to spend their tokens.
- **Pre-ICO:** Only the owner can transfer tokens, and unsold tokens can be burned.
- **ICO Management:** Tracks the number of tokens sold to ensure it does not exceed the goal.

This contract adheres strictly to the provided context and requirements without introducing additional features or dependencies.