Certainly! Below is the completed `KyberContributorWhitelist` smart contract based on the provided specifications and extending the `Ownable` contract:

```solidity
/**
 * @title KyberContributorWhitelist
 * @notice A smart contract for managing a whitelist of contributors, allowing the owner to set and manage contribution caps.
 * @dev This contract extends the Ownable contract, providing ownership control over the whitelisting and cap setting functionalities.
 */
contract KyberContributorWhitelist is Ownable {
    // 7 wei is a dummy cap. Will be set by owner to a real cap after registration ends.
    uint public slackUsersCap = 7;
    mapping(address => uint) public addressCap;

    /**
     * @notice Constructor for the KyberContributorWhitelist contract.
     * @dev Initializes the contract. No specific initialization is required in this constructor.
     */
    function KyberContributorWhitelist() Ownable() {}

    /**
     * @notice Event emitted when an address is listed with a specific cap.
     * @param _user The address being listed.
     * @param _cap The contribution cap set for the address.
     * @param _time The timestamp when the address was listed.
     */
    event ListAddress(address _user, uint _cap, uint _time);

    /**
     * @notice Allows the owner to list an address with a specific contribution cap.
     * @dev The owner can delist an address by setting the cap to 0. The cap can also be changed at any time.
     * @param _user The address to be listed.
     * @param _cap The contribution cap for the address.
     */
    function listAddress(address _user, uint _cap) onlyOwner {
        addressCap[_user] = _cap;
        emit ListAddress(_user, _cap, now);
    }

    /**
     * @notice Allows the owner to list multiple addresses with their respective contribution caps.
     * @dev This function is optimized for network congestion by batching the listing process.
     * @param _users An array of addresses to be listed.
     * @param _caps An array of contribution caps corresponding to the addresses.
     */
    function listAddresses(address[] _users, uint[] _caps) onlyOwner {
        require(_users.length == _caps.length);
        for (uint i = 0; i < _users.length; i++) {
            addressCap[_users[i]] = _caps[i];
            emit ListAddress(_users[i], _caps[i], now);
        }
    }

    /**
     * @notice Allows the owner to set the global cap for all addresses with a cap value of 1.
     * @dev This function sets the `slackUsersCap` which is used as the cap for addresses with a cap value of 1.
     * @param _cap The new global cap value.
     */
    function setSlackUsersCap(uint _cap) onlyOwner {
        slackUsersCap = _cap;
    }

    /**
     * @notice Returns the contribution cap for a given address.
     * @dev If the address has a cap of 1, it returns the `slackUsersCap`. Otherwise, it returns the specific cap.
     * @param _user The address to check the cap for.
     * @return The contribution cap for the address.
     */
    function getCap(address _user) constant returns (uint) {
        uint cap = addressCap[_user];
        return (cap == 1) ? slackUsersCap : cap;
    }

    /**
     * @notice Allows the owner to destroy the contract and send the remaining funds to the owner's address.
     * @dev This function self-destructs the contract and transfers any remaining balance to the owner.
     */
    function destroy() onlyOwner {
        selfdestruct(owner);
    }
}
```

### Notes:
- The `listAddress` and `listAddresses` functions allow the owner to set or change contribution caps for specific addresses.
- The `setSlackUsersCap` function allows the owner to set a global cap for all addresses that have a cap value of 1.
- The `getCap` function provides the current contribution cap for a given address, considering the `slackUsersCap` if applicable.
- The `destroy` function enables the owner to terminate the contract and withdraw any remaining Ether to the owner's account.
- The constructor calls `Ownable()` to initialize the owner of the contract.