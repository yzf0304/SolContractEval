Below is the complete implementation of the `KyberContributorWhitelist` contract based on your requirements. This contract includes all the specified functionality and adheres to the given constraints, such as using Solidity version 0.4.13.

```solidity
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */

contract Ownable {
  address public owner;

  function Ownable() public {
    owner = msg.sender;
  }

  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    owner = newOwner;
  }
}

/**
 * @title KyberContributorWhitelist
 * @notice A smart contract for managing a whitelist of contributors, allowing the owner to set and manage contribution caps.
 * @dev This contract extends the Ownable contract, providing ownership control over the whitelisting and cap setting functionalities.
 */
contract KyberContributorWhitelist is Ownable {
    uint public slackUsersCap = 7;
    mapping(address => uint) public addressCap;

    function KyberContributorWhitelist() public {}

    event ListAddress(address _user, uint _cap, uint _time);

    function listAddress(address _user, uint _cap) public onlyOwner {
        addressCap[_user] = _cap;
        emit ListAddress(_user, _cap, now);
    }

    function listAddresses(address[] _users, uint[] _cap) public onlyOwner {
        require(_users.length == _cap.length);
        for (uint i = 0; i < _users.length; i++) {
            addressCap[_users[i]] = _cap[i];
            emit ListAddress(_users[i], _cap[i], now);
        }
    }

    function setSlackUsersCap(uint _cap) public onlyOwner {
        slackUsersCap = _cap;
    }

    function getCap(address _user) public constant returns (uint) {
        uint cap = addressCap[_user];
        return cap == 1 ? slackUsersCap : cap;
    }

    function destroy() public onlyOwner {
        selfdestruct(owner);
    }
}
```

### Key Points:
- **Ownable Functionality**: The contract inherits from the `Ownable` contract, ensuring that certain functions can only be called by the contract owner.
- **listAddress and listAddresses**: These functions allow the owner to set or update the contribution caps for individual and multiple addresses, respectively.
- **setSlackUsersCap**: This function allows the owner to set a global cap for addresses with a cap value of 1.
- **getCap**: This function retrieves the contribution cap for a given address, applying the global cap where necessary.
- **destroy**: This function allows the owner to terminate the contract, returning any remaining ether to the owner.