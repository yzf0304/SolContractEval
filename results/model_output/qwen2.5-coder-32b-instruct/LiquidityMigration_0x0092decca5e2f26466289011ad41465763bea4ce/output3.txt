Here is the completed `LiquidityMigration` contract, which adheres to the provided context and description:

```solidity
// SPDX-License-Identifier: MIT

pragma solidity 0.8.2;

import "./StrategyTypes.sol";
import "./SafeERC20.sol";
import "./IStrategyProxyFactory.sol";
import "./IAdapter.sol";
import "./Ownable.sol";

contract LiquidityMigration is Timelocked, StrategyTypes {
    using SafeERC20 for IERC20;

    address public generic;
    address public controller;
    IStrategyProxyFactory public factory;

    mapping (address => bool) public adapters;
    mapping (address => uint256) public stakedCount;
    mapping (address => mapping (address => uint256)) public staked;

    event Staked(address adapter, address strategy, uint256 amount, address account);
    event Migrated(address adapter, address lp, address strategy, address account);
    event Created(address adapter, address lp, address strategy, address account);
    event Refunded(address lp, uint256 amount, address account);

    modifier onlyRegistered(address _adapter) {
        require(adapters[_adapter], "Claimable#onlyState: not registered adapter");
        _;
    }

    modifier onlyWhitelisted(address _adapter, address _lp) {
        require(IAdapter(_adapter).isWhitelisted(_lp), "Claimable#onlyState: not whitelisted strategy");
        _;
    }

    constructor(
        address[] memory adapters_,
        address generic_,
        IStrategyProxyFactory factory_,
        address controller_,
        uint256 _unlock,
        uint256 _modify,
        address _owner
    )
        Timelocked(_unlock, _modify, _owner)
    {
        for (uint256 i = 0; i < adapters_.length; i++) {
            adapters[adapters_[i]] = true;
        }
        generic = generic_;
        factory = factory_;
        controller = controller_;
    }

    function stake(
        address _lp,
        uint256 _amount,
        address _adapter
    )
        public
        onlyRegistered(_adapter)
        onlyWhitelisted(_adapter, _lp)
    {
        IERC20(_lp).safeTransferFrom(msg.sender, address(this), _amount);
        staked[msg.sender][_lp] += _amount;
        stakedCount[_adapter]++;
        emit Staked(_adapter, address(this), _amount, msg.sender);
    }

    function buyAndStake(
        address _lp,
        address _adapter,
        address _exchange,
        uint256 _minAmountOut,
        uint256 _deadline
    )
        external
        payable
        onlyRegistered(_adapter)
        onlyWhitelisted(_adapter, _lp)
    {
        uint256 beforeBalance = IERC20(_lp).balanceOf(address(this));
        IAdapter(_adapter).buy{value: msg.value}(_lp, _exchange, _minAmountOut, _deadline);
        uint256 afterBalance = IERC20(_lp).balanceOf(address(this));
        require(afterBalance > beforeBalance, "No LP tokens received");
        uint256 amount = afterBalance - beforeBalance;
        staked[msg.sender][_lp] += amount;
        stakedCount[_adapter]++;
        emit Staked(_adapter, address(this), amount, msg.sender);
    }

    function batchStake(
        address[] memory _lp,
        uint256[] memory _amount,
        address[] memory _adapter
    )
        external
    {
        require(_lp.length == _amount.length && _amount.length == _adapter.length, "Invalid input lengths");
        for(uint256 i = 0; i < _lp.length; i++) {
            stake(_lp[i], _amount[i], _adapter[i]);
        }
    }

    function batchBuyAndStake(
        address[] memory _lp,
        uint256[] memory _amount,
        address[] memory _adapter,
        address[] memory _exchange,
        uint256[] memory _minAmountOut,
        uint256 _deadline
    )
        external
        payable
    {
        require(_lp.length == _amount.length && _amount.length == _adapter.length &&
                _adapter.length == _exchange.length && _exchange.length == _minAmountOut.length, "Invalid input lengths");
        uint256 totalAmount = msg.value;
        for(uint256 i = 0; i < _lp.length; i++) {
            uint256 individualAmount = _amount[i];
            require(individualAmount <= totalAmount, "Insufficient ETH for batch buy and stake");
            buyAndStake(_lp[i], _adapter[i], _exchange[i], _minAmountOut[i], _deadline);
            totalAmount -= individualAmount;
        }
        require(totalAmount == 0, "Unused ETH after batch buy and stake");
    }

    function migrate(
        address _lp,
        address _adapter,
        IStrategy _strategy,
        uint256 _slippage
    )
        external
        onlyUnlocked
        onlyRegistered(_adapter)
        onlyWhitelisted(_adapter, _lp)
    {
        _migrate(msg.sender, _lp, _adapter, _strategy, _slippage);
    }

    function migrate(
        address _user,
        address _lp,
        address _adapter,
        IStrategy _strategy,
        uint256 _slippage
    )
        external
        onlyOwner
        onlyUnlocked
        onlyRegistered(_adapter)
        onlyWhitelisted(_adapter, _lp)
    {
        _migrate(_user, _lp, _adapter, _strategy, _slippage);
    }

    function batchMigrate(
        address[] memory _lp,
        address[] memory _adapter,
        IStrategy[] memory _strategy,
        uint256[] memory _slippage
    )
        external
        onlyUnlocked
    {
        require(_lp.length == _adapter.length && _adapter.length == _strategy.length && _strategy.length == _slippage.length, "Invalid input lengths");
        for(uint256 i = 0; i < _lp.length; i++) {
            migrate(msg.sender, _lp[i], _adapter[i], _strategy[i], _slippage[i]);
        }
    }

    function batchMigrate(
        address[] memory _user,
        address[] memory _lp,
        address[] memory _adapter,
        IStrategy[] memory _strategy,
        uint256[] memory _slippage
    )
        external
        onlyOwner
        onlyUnlocked
    {
        require(_user.length == _lp.length && _lp.length == _adapter.length && _adapter.length == _strategy.length && _strategy.length == _slippage.length, "Invalid input lengths");
        for(uint256 i = 0; i < _user.length; i++) {
            migrate(_user[i], _lp[i], _adapter[i], _strategy[i], _slippage[i]);
        }
    }

    function refund(
        address _user,
        address _lp
    )
        public
        onlyOwner
    {
        _refund(_user, _lp);
    }

    function batchRefund(address[] memory _users, address _lp)
        public
        onlyOwner
    {
        for(uint256 i = 0; i < _users.length; i++) {
            _refund(_users[i], _lp);
        }
    }

    function _refund(
        address _user,
        address _lp
    )
        internal
    {
        uint256 amount = staked[_user][_lp];
        require(amount > 0, "Nothing staked to refund");
        staked[_user][_lp] = 0;
        IERC20(_lp).safeTransfer(_user, amount);
        emit Refunded(_lp, amount, _user);
    }

    function _migrate(
        address _user,
        address _lp,
        address _adapter,
        IStrategy _strategy,
        uint256 _slippage
    )
        internal
        onlyRegistered(_adapter)
        onlyWhitelisted(_adapter, _lp)
    {
        uint256 amount = staked[_user][_lp];
        require(amount > 0, "Nothing staked to migrate");
        IERC20(_lp).safeTransfer(generic, amount);
        IAdapter.Call[] memory calls = IAdapter(_adapter).encodeMigration(generic, address(_strategy), _lp, amount);
        for (uint256 i = 0; i < calls.length; i++) {
            (bool success,) = calls[i].target.call(calls[i].callData);
            require(success, "Migration failed");
        }
        emit Migrated(_adapter, _lp, address(_strategy), _user);
    }

    function _validateItems(address adapter, address lp, StrategyItem[] memory strategyItems) private {
        address[] memory outputTokens = IAdapter(adapter).outputTokens(lp);
        mapping(address => bool) memory _tempIsUnderlying;
        
        for (uint256 i = 0; i < outputTokens.length; i++) {
            _tempIsUnderlying[outputTokens[i]] = true;
        }

        for (uint256 i = 0; i < strategyItems.length; i++) {
            StrategyItem memory item = strategyItems[i];
            if (item.percentage == 0 && item.category == ItemCategory.RESERVE) {
                continue;
            }

            require(_tempIsUnderlying[item.item], "Invalid token in strategy");
            _tempIsUnderlying[item.item] = false;
        }

        for (uint256 i = 0; i < outputTokens.length; i++) {
            require(!_tempIsUnderlying[outputTokens[i]], "Not all output tokens are accounted for");
        }
    }

    function _createStrategy(bytes memory data) private returns (address) {
        (address manager, string memory name, string memory symbol, StrategyItem[] memory strategyItems, InitialState memory strategyInit, address router, bytes memory extraData) = abi.decode(data, (address, string, string, StrategyItem[], InitialState, address, bytes));

        _validateItems(strategyInit.router, strategyInit.lp, strategyItems);

        address strategy = factory.createStrategy(
            manager,
            name,
            symbol,
            strategyItems,
            strategyInit,
            router,
            extraData
        );
        emit Created(strategyInit.router, strategyInit.lp, strategy, msg.sender);
        return strategy;
    }

    function createStrategy(
        address _lp,
        address _adapter,
        bytes calldata data
    )
        public
        onlyRegistered(_adapter)
        onlyWhitelisted(_adapter, _lp)
    {
        _createStrategy(data);
    }

    function updateController(address _controller)
        external
        onlyOwner
    {
        require(controller != _controller, "Same controller");
        controller = _controller;
    }

    function updateGeneric(address _generic)
        external
        onlyOwner
    {
        require(generic != _generic, "Same generic");
        generic = _generic;
    }

    function updateFactory(address _factory)
        external
        onlyOwner
    {
        require(address(factory) != _factory, "Same factory");
        factory = IStrategyProxyFactory(_factory);
    }

    function addAdapter(address _adapter)
        external
        onlyOwner
    {
        require(!adapters[_adapter], "Already added");
        adapters[_adapter] = true;
    }

    function removeAdapter(address _adapter)
        external
        onlyOwner
    {
        require(adapters[_adapter], "Not added");
        adapters[_adapter] = false;
    }

    function hasStaked(address _account, address _lp)
        external
        view
        returns(bool)
    {
        return staked[_account][_lp] > 0;
    }

    function getStakeCount(address