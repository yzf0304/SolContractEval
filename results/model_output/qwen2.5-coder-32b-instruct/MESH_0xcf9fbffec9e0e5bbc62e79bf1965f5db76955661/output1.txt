Below is the complete implementation of the `MESH` contract based on the provided specifications and context. The contract includes the proxy transfer and approval functionalities, token allocation, and a nonce mechanism to prevent replay attacks. Note that the fallback function reverts any direct ETH transfers to the contract.

```solidity
pragma solidity ^0.4.23;

contract Token {
    uint256 public totalSupply;

    function balanceOf(address _owner) public constant returns (uint256 balance);
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    function approve(address _spender, uint256 _value) public returns (bool success);
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract Owned {
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    address public owner;

    constructor() public {
        owner = msg.sender;
    }

    address newOwner;

    event OwnerUpdate(address _prevOwner, address _newOwner);

    function changeOwner(address _newOwner) public onlyOwner {
        require(_newOwner != owner);
        newOwner = _newOwner;
    }

    function acceptOwnership() public{
        require(msg.sender == newOwner);
        emit OwnerUpdate(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}

contract Controlled is Owned {
    constructor() public {
        setExclude(msg.sender);
    }

    bool public transferEnabled = false;
    bool public lockFlag = true;
    mapping(address => bool) public locked;
    mapping(address => bool) public exclude;

    function enableTransfer(bool _enable) public onlyOwner{
        transferEnabled=_enable;
    }

    function disableLock(bool _enable) public onlyOwner returns (bool success){
        lockFlag=_enable;
        return true;
    }

    function addLock(address _addr) public onlyOwner returns (bool success){
        require(_addr!=msg.sender);
        locked[_addr]=true;
        return true;
    }

    function setExclude(address _addr) public onlyOwner returns (bool success){
        exclude[_addr]=true;
        return true;
    }

    function removeLock(address _addr) public onlyOwner returns (bool success){
        locked[_addr]=false;
        return true;
    }

    modifier transferAllowed(address _addr) {
        if (!exclude[_addr]) {
            assert(transferEnabled);
            if(lockFlag){
                assert(!locked[_addr]);
            }
        }
        _;
    }
}

contract StandardToken is Token,Controlled {
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) public allowed;

    function transfer(address _to, uint256 _value) public transferAllowed(msg.sender) returns (bool success) {
        require(balances[msg.sender] >= _value);
        require(balances[_to] + _value >= balances[_to]); // prevent overflow

        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public transferAllowed(_from) returns (bool success) {
        require(balances[_from] >= _value);
        require(allowed[_from][msg.sender] >= _value);
        require(balances[_to] + _value >= balances[_to]); // prevent overflow

        balances[_to] += _value;
        balances[_from] -= _value;
        allowed[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}

contract MESH is StandardToken {
    string public name = "MeshBox";
    uint8 public decimals = 18;
    string public symbol = "MESH";
    string public version = 'v0.1';
    uint256 public allocateEndTime;

    mapping(address => uint256) public nonces;

    constructor() public {
        allocateEndTime = now + 1 days;
    }

    function () public {
        revert();
    }

    function transferProxy(address _from, address _to, uint256 _value, uint256 _feeMesh,
                           uint8 _v, bytes32 _r, bytes32 _s) public transferAllowed(_from) returns (bool) {
        require(nonceCheckAndIncrease(_from));
        bytes32 h = keccak256(abi.encodePacked(_from, _to, _value, _feeMesh, nonces[_from], this));
        address from = ecrecover(h, _v, _r, _s);
        require(from != address(0));
        require(from == _from);

        require(transfer(_to, _value));
        require(transfer(msg.sender, _feeMesh));

        return true;
    }

    function approveProxy(address _from, address _spender, uint256 _value,
                          uint8 _v, bytes32 _r, bytes32 _s) public returns (bool success) {
        require(nonceCheckAndIncrease(_from));
        bytes32 h = keccak256(abi.encodePacked(_from, _spender, _value, nonces[_from], this));
        address from = ecrecover(h, _v, _r, _s);
        require(from != address(0));
        require(from == _from);

        allowed[_from][_spender] = _value;
        emit Approval(_from, _spender, _value);
        return true;
    }

    function getNonce(address _addr) public constant returns (uint256) {
        return nonces[_addr];
    }

    function allocateTokens(address[] _owners, uint256[] _values) public onlyOwner {
        require(now <= allocateEndTime);
        require(_owners.length == _values.length);

        for(uint i = 0; i < _owners.length; i++) {
            balances[_owners[i]] += _values[i];
            totalSupply += _values[i];
            emit Transfer(address(0), _owners[i], _values[i]);
        }
    }

    function nonceCheckAndIncrease(address _from) internal returns (bool) {
        require(nonces[_from] < 2**256 - 1);
        nonces[_from]++;
        return true;
    }
}
```

This contract implements the necessary functions as specified and uses the nonce mechanism to prevent replay attacks for proxy operations. It also includes a token allocation mechanism that allows the contract owner to allocate tokens to multiple addresses before a certain deadline.