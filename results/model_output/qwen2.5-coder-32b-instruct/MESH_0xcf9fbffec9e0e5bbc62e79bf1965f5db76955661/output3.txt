Below is the completed `MESH` contract implementing the specified functionalities including proxy transfers, proxy approvals, token allocation, and a nonce mechanism for preventing replay attacks. Note that the implementation uses Solidity version 0.4.23, as specified.

```solidity
pragma solidity ^0.4.23;

contract Token {
    /* This is a slight change to the ERC20 base standard.*/
    uint256 public totalSupply;

    function balanceOf(address _owner) public constant returns (uint256 balance);
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    function approve(address _spender, uint256 _value) public returns (bool success);
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract Owned {
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    address public owner;

    constructor() public {
        owner = msg.sender;
    }

    address newOwner = 0x0;

    event OwnerUpdate(address _prevOwner, address _newOwner);

    function changeOwner(address _newOwner) public onlyOwner {
        require(_newOwner != owner);
        newOwner = _newOwner;
    }

    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnerUpdate(owner, newOwner);
        owner = newOwner;
        newOwner = 0x0;
    }
}

contract Controlled is Owned {
    constructor() public {
        setExclude(msg.sender);
    }

    bool public transferEnabled = false;
    bool lockFlag = true;
    mapping(address => bool) locked;
    mapping(address => bool) exclude;

    function enableTransfer(bool _enable) public onlyOwner {
        transferEnabled = _enable;
    }

    function disableLock(bool _enable) public onlyOwner returns (bool success) {
        lockFlag = _enable;
        return true;
    }

    function addLock(address _addr) public onlyOwner returns (bool success) {
        require(_addr != msg.sender);
        locked[_addr] = true;
        return true;
    }

    function setExclude(address _addr) public onlyOwner returns (bool success) {
        exclude[_addr] = true;
        return true;
    }

    function removeLock(address _addr) public onlyOwner returns (bool success) {
        locked[_addr] = false;
        return true;
    }

    modifier transferAllowed(address _addr) {
        if (!exclude[_addr]) {
            assert(transferEnabled);
            if(lockFlag){
                assert(!locked[_addr]);
            }
        }
        
        _;
    }
}

contract StandardToken is Token, Controlled {
    function transfer(address _to, uint256 _value) public transferAllowed(msg.sender) returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            emit Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }

    function transferFrom(address _from, address _to, uint256 _value) public transferAllowed(_from) returns (bool success) {
        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {
            balances[_to] += _value;
            balances[_from] -= _value;
            allowed[_from][msg.sender] -= _value;
            emit Transfer(_from, _to, _value);
            return true;
        } else { return false; }
    }

    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
}

contract MESH is StandardToken {
    function () public {
        revert();
    }

    string public name = "MeshBox";
    uint8 public decimals = 18;
    string public symbol = "MESH";
    string public version = 'v0.1';
    uint256 public allocateEndTime;

    mapping(address => uint256) nonces;

    constructor() public {
        allocateEndTime = now + 1 days;
    }

    function transferProxy(address _from, address _to, uint256 _value, uint256 _feeMesh,
        uint8 _v, bytes32 _r, bytes32 _s) public transferAllowed(_from) returns (bool) {
        bytes32 h = keccak256(abi.encodePacked(_from, _to, _value, _feeMesh, nonces[_from]));
        address signer = ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", h)), _v, _r, _s);
        require(signer == _from);
        require(balances[_from] >= _value.add(_feeMesh));
        balances[_from] = balances[_from].sub(_value).sub(_feeMesh);
        balances[_to] = balances[_to].add(_value);
        balances[msg.sender] = balances[msg.sender].add(_feeMesh);
        nonces[_from]++;
        emit Transfer(_from, _to, _value);
        emit Transfer(_from, msg.sender, _feeMesh);
        return true;
    }

    function approveProxy(address _from, address _spender, uint256 _value,
        uint8 _v, bytes32 _r, bytes32 _s) public returns (bool success) {
        bytes32 h = keccak256(abi.encodePacked(_from, _spender, _value, nonces[_from]));
        address signer = ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", h)), _v, _r, _s);
        require(signer == _from);
        allowed[_from][_spender] = _value;
        nonces[_from]++;
        emit Approval(_from, _spender, _value);
        return true;
    }

    function getNonce(address _addr) public constant returns (uint256) {
        return nonces[_addr];
    }

    function allocateTokens(address[] _owners, uint256[] _values) public onlyOwner {
        require(now < allocateEndTime);
        require(_owners.length == _values.length);
        for (uint i = 0; i < _owners.length; i++) {
            balances[_owners[i]] = balances[_owners[i]].add(_values[i]);
            totalSupply = totalSupply.add(_values[i]);
        }
    }
    
    using SafeMath for uint256;
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}
```

### Explanation:
- **SafeMath**: A library for safe arithmetic operations to avoid overflow and underflow issues.
- **transferProxy**: Implements the proxy transfer functionality, using ECDSA signatures to verify the transaction.
- **approveProxy**: Implements the proxy approval functionality, similarly using ECDSA signatures.
- **getNonce**: Returns the nonce of an address, which is used to prevent replay attacks.
- **allocateTokens**: Allocates tokens to a list of addresses during the specified allocation period.

This contract provides all required functionalities and adheres to the ERC20 standard while being compatible with Solidity 0.4.23.