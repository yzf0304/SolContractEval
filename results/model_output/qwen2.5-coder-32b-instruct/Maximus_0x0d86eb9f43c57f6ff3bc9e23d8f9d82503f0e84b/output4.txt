Certainly! Below is the implementation of the `HEXToken` contract based on the description and context provided. This implementation includes the necessary state variables and the logic for each of the functions described:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract HEXToken {
    // Event declarations for logging
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Staked(address indexed staker, uint256 amount, uint256 days);
    event Unstaked(address indexed staker, uint256 amount);

    // State variables
    string public constant name = "HEXToken";
    string public constant symbol = "HEX";
    uint8 public constant decimals = 18;
    uint256 private _totalSupply;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _dayTimestamp = 86400; // 1 day in seconds
    uint40 private _stakeIdCounter; // Stake ID counter

    struct Stake {
        uint256 amount;
        uint256 startDate;
        uint256 duration; // in days
        uint40 id;
        bool active;
    }

    mapping(address => Stake[]) private _stakes;

    // Utility function to calculate the current day
    function currentDay() external view returns (uint256) {
        return block.timestamp / _dayTimestamp;
    }

    // Function to start a new stake
    function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external {
        require(newStakedHearts > 0, "Stake amount must be greater than zero");
        require(newStakedDays > 0, "Stake duration must be greater than zero");
        require(_balances[msg.sender] >= newStakedHearts, "Insufficient balance");

        _balances[msg.sender] -= newStakedHearts;

        Stake memory newStake = Stake({
            amount: newStakedHearts,
            startDate: block.timestamp,
            duration: newStakedDays,
            id: _stakeIdCounter++,
            active: true
        });

        _stakes[msg.sender].push(newStake);
        
        emit Staked(msg.sender, newStakedHearts, newStakedDays);
    }

    // Function to approve a spender
    function approve(address spender, uint256 amount) external returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    // Function to transfer HEX tokens
    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(recipient != address(0), "Transfer to the zero address is not allowed");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(_balances[msg.sender] >= amount, "Insufficient balance");

        _balances[msg.sender] -= amount;
        _balances[recipient] += amount;

        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    // Function to end a stake
    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) public {
        Stake storage stake = _stakes[msg.sender][stakeIndex];
        require(stake.id == stakeIdParam, "Invalid stake ID");
        require(stake.active, "Stake is not active");
        require(block.timestamp >= stake.startDate + (stake.duration * _dayTimestamp), "Staking period has not ended yet");

        stake.active = false;
        _balances[msg.sender] += stake.amount;

        emit Unstaked(msg.sender, stake.amount);
    }

    // Function to get the number of stakes for a given address
    function stakeCount(address stakerAddr) external view returns (uint256) {
        return _stakes[stakerAddr].length;
    }
}
```

### Key Features:
- **Balances and Allowances**: The contract keeps track of token balances and approvals between addresses.
- **Staking Mechanism**: Users can start a stake by locking a specified amount of tokens for a certain number of days. They can end the stake once the staking period is over.
- **Current Day Calculation**: The current day is calculated based on the block timestamp.
- **Events**: Emitted events for transfers, approvals, staking, and unstaking to facilitate tracking on-chain activities.
- **Validation**: Various checks are included to ensure transactions and stakes are valid, such as checking balances, stake IDs, and durations.

This contract adheres to the requirements and does not introduce any additional contracts as per your instructions.