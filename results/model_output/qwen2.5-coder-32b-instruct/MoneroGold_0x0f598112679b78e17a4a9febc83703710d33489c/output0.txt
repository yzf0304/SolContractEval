Below is the complete implementation of the `MoneroGold` smart contract according to the provided context and description. This implementation uses Solidity version 0.4.18.

```solidity
contract MoneroGold {
    string public name = "Monero Gold";
    string public symbol = "XMRG";
    uint256 public decimals = 8;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    uint256 public totalSupply = 21000000 * (10**decimals);
    address public owner;

    modifier isOwner {
        assert(owner == msg.sender);
        _;
    }

    function MoneroGold() {
        owner = msg.sender;
        balanceOf[owner] = totalSupply;
    }

    function transfer(address _to, uint256 _value) returns (bool success) {
        require(balanceOf[msg.sender] >= _value && _value > 0);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        require(balanceOf[_from] >= _value && allowance[_from][msg.sender] >= _value && _value > 0);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) returns (bool success) {
        require((_value == 0) || (allowance[msg.sender][_spender] == 0));
        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function setName(string _name) isOwner {
        name = _name;
    }

    function burnSupply(uint256 _amount) isOwner {
        require(balanceOf[owner] >= _amount && _amount > 0);
        balanceOf[owner] -= _amount;
        totalSupply -= _amount;
        SupplyBurn(_amount);
    }

    function burnTotalSupply(uint256 _amount) isOwner {
        require(totalSupply >= _amount && _amount > 0);
        totalSupply -= _amount;
        SupplyBurn(_amount);
    }

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event SupplyBurn(uint256 _amount);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
```

This contract implements the basic ERC20 functionalities with additional features like setting the token name and burning tokens. The events `Transfer`, `SupplyBurn`, and `Approval` are emitted as per the specifications.