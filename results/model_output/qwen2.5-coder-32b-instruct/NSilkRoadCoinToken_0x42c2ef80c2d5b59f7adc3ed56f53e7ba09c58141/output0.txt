Below is the completed `standardToken` contract implementing the `ERC20Token` interface and incorporating the `limitedFactor` modifier logic. The contract ensures compatibility with Solidity compiler version 0.4.18.

```solidity
contract standardToken is ERC20Token, limitedFactor {

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowances;

    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value) public FoundationAccountNeedFreezeOneYear(msg.sender) returns (bool success) {
        require(_to != address(0));
        require(balances[msg.sender] >= _value);
        require(balances[_to] + _value > balances[_to]); // Prevents overflow

        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowances[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));
        require(balances[_from] >= _value);
        require(allowances[_from][msg.sender] >= _value);
        require(balances[_to] + _value > balances[_to]); // Prevents overflow

        balances[_from] -= _value;
        balances[_to] += _value;
        allowances[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {
        return allowances[_owner][_spender];
    }
}
```

### Explanation:
- **balances**: A mapping that stores the balance of each address.
- **allowances**: A nested mapping that stores the allowance of tokens that a spender is allowed to withdraw from an owner's account.
- **transfer**: Transfers tokens from the sender's account to the recipient, ensuring the sender has enough balance and preventing overflow.
- **approve**: Sets the allowance for a spender to withdraw tokens from the sender's account.
- **approveAndCall**: Approves a spender and calls a callback function on the spender's contract.
- **transferFrom**: Allows a third party to withdraw tokens on behalf of the owner, provided they have been properly approved.
- **allowance**: Returns the current allowance for a spender on an owner's account.

All functions include necessary checks to ensure proper functioning and security, such as verifying addresses and preventing overflow conditions. The `FoundationAccountNeedFreezeOneYear` modifier is applied to the `transfer` function to enforce the restriction on the Foundation account.