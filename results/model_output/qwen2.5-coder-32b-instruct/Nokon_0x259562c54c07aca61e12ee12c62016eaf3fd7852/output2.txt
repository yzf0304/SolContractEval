Below is the completed `Nokon` smart contract based on your provided context and description. I have filled in the necessary functions and ensured that it adheres to the ERC20 standard and includes the additional functionalities you requested. 

Please note that the recovery of addresses from signatures (`recover`), conversion of addresses to strings (`toAsciiString`, `char`), and signature validation logic within `closePresell` and `openPresell` require specific implementation which were placeholders in the provided template. For the sake of this contract, I've assumed basic logic that might suffice for demonstration purposes.

```solidity
// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.7.4;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract Nokon is IERC20 {
    string public constant name = "Nokon";
    string public constant symbol = "NKO";
    uint8 public constant decimals = 8;

    event Bought(uint256 amountz);
    event Sold(uint256 amount);
    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);
    event Transfer(address indexed from, address indexed to, uint256 tokens);

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;
    mapping(address => bool) public authorizedAddress;

    address authAddress = 0x44F6827aa307F4d7FAeb64Be47543647B3a871dB;
    uint256 totalSupply_ = 1200000000000000000;
    bool public presell = true;
    uint256 public ethRateFix = 10000000000;

    using SafeMath for uint256;

    constructor() {
        balances[msg.sender] = totalSupply_;
        authorizedAddress[msg.sender] = true;
        authorizedAddress[authAddress] = true;
    }

    function parseAddr(string memory _a) internal pure returns (address _parsedAddress) {
        bytes memory tmp = bytes(_a);
        uint160 iaddr = 0;
        uint160 b1;
        uint160 b2;
        for (uint i = 2; i < 2 + 2 * 20; i += 2) {
            iaddr *= 256;
            b1 = uint160(uint8(tmp[i]));
            b2 = uint160(uint8(tmp[i + 1]));
            if ((b1 >= 97) && (b1 <= 102)) {
                b1 -= 87;
            } else if ((b1 >= 65) && (b1 <= 70)) {
                b1 -= 55;
            } else if ((b1 >= 48) && (b1 <= 57)) {
                b1 -= 48;
            }
            if ((b2 >= 97) && (b2 <= 102)) {
                b2 -= 87;
            } else if ((b2 >= 65) && (b2 <= 70)) {
                b2 -= 55;
            } else if ((b2 >= 48) && (b2 <= 57)) {
                b2 -= 48;
            }
            iaddr += (b1 * 16 + b2);
        }
        return address(iaddr);
    }

    function toAsciiString(address x) internal pure returns (string memory) {
        bytes memory s = new bytes(40);
        for (uint i = 0; i < 20; i++) {
            bytes1 b = bytes1(uint8(uint(uint160(x) >> (8 * (19 - i)))));
            bytes1 hi = b / 16 < 10 ? bytes1(uint8(b / 16) + 48) : bytes1(uint8(b / 16) + 87);
            bytes1 lo = b % 16 < 10 ? bytes1(uint8(b % 16) + 48) : bytes1(uint8(b % 16) + 87);
            s[2 * i] = hi;
            s[2 * i + 1] = lo;
        }
        return string(s);
    }

    function char(bytes1 b) internal pure returns (bytes1 c) {
        if (uint8(b) < 10) return bytes1(uint8(b) + 48);
        else return bytes1(uint8(b) + 87);
    }

    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        if (signature.length != 65) return address(0);

        bytes32 r;
        bytes32 s;
        uint8 v;

        assembly {
            r := mload(add(signature, 32))
            s := mload(add(signature, 64))
            v := byte(0, mload(add(signature, 96)))
        }

        if (v < 27) v += 27;

        if (v != 27 && v != 28) return address(0);

        return ecrecover(hash, v, r, s);
    }

    function calculateRate() private view returns (uint256) {
        uint256 balance = balanceOf(address(this));
        if (balance > 1e8) return 666666;
        if (balance > 5e7) return 333333;
        return 250000;
    }

    function totalSupply() public override view returns (uint256) { return totalSupply_; }

    function getRate() public view returns (uint256) { return calculateRate(); }

    function balanceOf(address tokenOwner) public override view returns (uint256) { return balances[tokenOwner]; }

    function transfer(address receiver, uint256 numTokens) public override returns (bool) {
        require(numTokens <= balances[msg.sender], "Insufficient balance");
        balances[msg.sender] = balances[msg.sender].sub(numTokens);
        balances[receiver] = balances[receiver].add(numTokens);
        emit Transfer(msg.sender, receiver, numTokens);
        return true;
    }

    function approve(address delegate, uint256 numTokens) public override returns (bool) {
        allowed[msg.sender][delegate] = numTokens;
        emit Approval(msg.sender, delegate, numTokens);
        return true;
    }

    function allowance(address owner, address delegate) public override view returns (uint256) { return allowed[owner][delegate]; }

    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {
        require(numTokens <= balances[owner], "Insufficient balance");
        require(numTokens <= allowed[owner][msg.sender], "Insufficient allowance");

        balances[owner] = balances[owner].sub(numTokens);
        balances[buyer] = balances[buyer].add(numTokens);
        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);
        emit Transfer(owner, buyer, numTokens);
        return true;
    }

    receive() payable external { buy(); }

    function buy() public payable {
        require(presell, "Presale is closed");
        require(msg.value >= 50000000000000000, "Minimum 0.05 ETH required");
        
        uint256 amountToBuy = (msg.value.div(ethRateFix)).mul(calculateRate());
        require(amountToBuy <= balanceOf(address(this)), "Not enough tokens in reserve");

        balances[address(this)] = balances[address(this)].sub(amountToBuy);
        balances[msg.sender] = balances[msg.sender].add(amount