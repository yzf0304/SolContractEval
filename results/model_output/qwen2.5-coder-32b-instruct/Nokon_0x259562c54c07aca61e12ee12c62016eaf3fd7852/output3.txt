Below is the implementation of the `Nokon` smart contract based on the provided context and specifications:

```solidity
// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.7.4;

interface IERC20 {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract Nokon is IERC20 {
    using SafeMath for uint256;

    string public constant name = "Nokon";
    string public constant symbol = "NKO";
    uint8 public constant decimals = 8;

    event Bought(uint256 amount);
    event Sold(uint256 amount);

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;
    mapping(address => bool) public authorizedAddress;

    address public authAddress;
    uint256 public totalSupply_ = 1200000000000000000;
    bool public presell = true;
    uint256 public ethRateFix = 10000000000;

    constructor() {
        authAddress = parseAddr('0x44F6827aa307F4d7FAeb64Be47543647B3a871dB');
        
        balances[msg.sender] = totalSupply_;
        balances[address(this)] = totalSupply_;
        balances[authAddress] = totalSupply_;

        authorizedAddress[msg.sender] = true;
        authorizedAddress[authAddress] = true;
    }

    function parseAddr(string memory _a) internal pure returns (address _parsedAddress) {
        bytes memory tmp = bytes(_a);
        uint160 iaddr = 0;
        uint160 b1;
        uint160 b2;
        for (uint i = 2; i < 2 + 2 * 20; i += 2) {
            iaddr *= 256;
            b1 = uint160(uint8(tmp[i]));
            b2 = uint160(uint8(tmp[i + 1]));
            if ((b1 >= 97) && (b1 <= 102)) { b1 -= 87; }
            else if ((b1 >= 65) && (b1 <= 70)) { b1 -= 55; }
            else if ((b1 >= 48) && (b1 <= 57)) { b1 -= 48; }
            if ((b2 >= 97) && (b2 <= 102)) { b2 -= 87; }
            else if ((b2 >= 65) && (b2 <= 70)) { b2 -= 55; }
            else if ((b2 >= 48) && (b2 <= 57)) { b2 -= 48; }
            iaddr += (b1 * 16 + b2);
        }
        return address(iaddr);
    }

    function totalSupply() public override view returns (uint256) {
        return totalSupply_;
    }

    function getRate() public view returns (uint256) {
        return calculateRate();
    }

    function calculateRate() private view returns (uint256) {
        uint256 balance = balanceOf(address(this));
        if (balance > 1 ether) {
            return 666666;
        } else if (balance > 0.5 ether) {
            return 333333;
        } else {
            return 250000;
        }
    }

    function balanceOf(address tokenOwner) public override view returns (uint256) {
        return balances[tokenOwner];
    }

    function transfer(address receiver, uint256 numTokens) public override returns (bool) {
        require(numTokens <= balances[msg.sender]);
        balances[msg.sender] = balances[msg.sender].sub(numTokens);
        balances[receiver] = balances[receiver].add(numTokens);
        emit Transfer(msg.sender, receiver, numTokens);
        return true;
    }

    function approve(address delegate, uint256 numTokens) public override returns (bool) {
        allowed[msg.sender][delegate] = numTokens;
        emit Approval(msg.sender, delegate, numTokens);
        return true;
    }

    function allowance(address owner, address delegate) public override view returns (uint) {
        return allowed[owner][delegate];
    }

    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {
        require(numTokens <= balances[owner]);
        require(numTokens <= allowed[owner][msg.sender]);

        balances[owner] = balances[owner].sub(numTokens);
        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);
        balances[buyer] = balances[buyer].add(numTokens);
        emit Transfer(owner, buyer, numTokens);
        return true;
    }

    receive() payable external {
        buy();
    }

    function buy() public payable {
        require(presell == true, "Presell is not active");
        require(msg.value >= 0.05 ether, "Insufficient ETH sent");

        uint256 amountToBuy = (msg.value.div(ethRateFix)).mul(calculateRate());
        require(amountToBuy <= balances[address(this)], "Not enough tokens in contract");

        balances[address(this)] = balances[address(this)].sub(amountToBuy);
        balances[msg.sender] = balances[msg.sender].add(amountToBuy);

        emit Transfer(address(this), msg.sender, amountToBuy);
        emit Bought(amountToBuy);
    }

    modifier isAuthorized() {
        require(authorizedAddress[msg.sender], "Not authorized");
        _;
    }

    function closePresell(bytes32 hash, bytes memory signature) public isAuthorized {
        presell = false;
    }

    function openPresell(bytes32 hash, bytes memory signature) public isAuthorized {
        presell = true;
    }

    function getEthBalance(bytes32 hash, bytes memory signature) public isAuthorized returns (uint256) {
        return address(this).balance;
    }

    function transferEth(bytes32 hash, bytes memory signature, uint256 _amount) public isAuthorized {
        require(_amount <= address(this).balance, "Amount exceeds contract balance");
        payable(authAddress).transfer(_amount);
    }

    function supply() public view returns (uint256) {
        return balanceOf(address(this));
    }

    function presellStatus() public view returns (bool) {
        return presell;
    }

    function getAddress() public view returns (address) {
        return address(this);
    }
}
```

**Notes:**
- The `receive` function allows the contract to accept ETH via the fallback method, which triggers the `buy` function.
- The `parseAddr` function converts a string representation of an address into an actual address type.
- The contract includes `closePresell`, `openPresell`, `getEthBalance`, and `transferEth` functions for managing presell periods and handling Ether within the contract. These functions are secured with a modifier `isAuthorized` to ensure they can only be called by authorized addresses.
- The `totalSupply_` is initialized in the constructor and is not modifiable after deployment, following the standard ERC20 practice of having a fixed total supply.