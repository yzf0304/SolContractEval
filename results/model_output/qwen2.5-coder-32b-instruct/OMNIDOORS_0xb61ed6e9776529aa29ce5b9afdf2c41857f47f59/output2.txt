Below is the complete implementation of the `OMNIDOORS` contract according to the specifications provided:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "./ILayerZeroEndpoint.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract OMNIDOORS is Ownable, ERC721, NonblockingReceiver {
    string private baseURI;
    uint256 public nextTokenId = 5900;
    uint256 public constant MAX_NETWORK_MINT = 9300;

    uint256 gasForDestinationLzReceive = 350000;

    /**
     * @notice Initializes the contract with the provided base URI and LayerZero endpoint.
     * @dev Mints 330 tokens to the contract owner upon deployment.
     * @param baseURI_ The base URI for the NFTs.
     * @param _layerZeroEndpoint The LayerZero endpoint address.
     */
    constructor(string memory baseURI_, address _layerZeroEndpoint)
        ERC721("Omni Doors", "ODOORS")
    {
        baseURI = baseURI_;
        endpoint = ILayerZeroEndpoint(_layerZeroEndpoint);
        for (uint256 i = 0; i < 330; i++) {
            _safeMint(owner(), ++nextTokenId);
        }
    }

    /**
     * @notice Allows users to mint up to one NFT per transaction.
     * @dev Checks if the number of tokens to mint does not exceed the maximum allowed per transaction and the total supply limit.
     * @param numTokens The number of tokens to mint (must be 1).
     */
    function mint(uint8 numTokens) external payable {
        require(numTokens == 1, "Can only mint 1 token at a time");
        require(nextTokenId <= MAX_NETWORK_MINT, "Max tokens minted");
        _safeMint(msg.sender, ++nextTokenId);
    }

    /**
     * @dev Transfers an NFT to another chain via LayerZero.
     * Requirements:
     * - Caller must be the NFT owner
     * - Destination chain must be available in trustedRemoteLookup
     * Process:
     * 1. Verifies ownership and chain availability
     * 2. Burns the NFT on source chain
     * 3. Prepares payload with sender and token ID
     * 4. Sets adapter parameters for gas requirements
     * 5. Estimates message fees (refundable excess)
     * 6. Sends cross-chain message with payment
     * @param _chainId Destination chain ID
     * @param tokenId ID of the NFT to transfer
     * @return None (void function)
     * @notice Emits Transfer event when burning the NFT
     * @dev
     * - Uses LayerZero endpoint for cross-chain messaging
     * - msg.value covers message delivery fees
     * - Refunds unused gas sent with msg.value
     * - Requires trustedRemoteLookup[_chainId] to be set
     */
    function traverseChains(uint16 _chainId, uint256 tokenId) public payable {
        require(ownerOf(tokenId) == msg.sender, "Not the owner of token");
        require(bytes(trustedRemoteLookup[_chainId]).length > 0, "Chain not supported");

        _burn(tokenId);

        bytes memory payload = abi.encode(msg.sender, tokenId);
        uint256 messageFee;
        (messageFee, ) = endpoint.estimateFees(
            _chainId,
            address(this),
            payload,
            false,
            bytes("")
        );

        require(msg.value >= messageFee, "Insufficient fee");

        bytes memory adapterParams = abi.encodePacked(uint16(1), gasForDestinationLzReceive);

        endpoint.send{value: messageFee}(
            _chainId,
            trustedRemoteLookup[_chainId],
            payload,
            payable(msg.sender), // refundAddress
            address(0), // zroPaymentAddress
            adapterParams
        );
    }

    /**
     * @notice Allows the contract owner to set the base URI for the NFTs.
     * @dev Only the contract owner can call this function.
     * @param URI The new base URI.
     */
    function setBaseURI(string memory URI) external onlyOwner {
        baseURI = URI;
    }

    /**
     * @notice Allows anyone to donate ETH to the contract.
     * @dev This function is payable and can receive ETH.
     */
    function donate() external payable {}

    /**
     * @notice Allows the contract owner to withdraw a specified amount of ETH from the contract.
     * @dev Only the contract owner can call this function.
     * @param amt The amount of ETH to withdraw.
     */
    function withdraw(uint256 amt) external onlyOwner {
        payable(owner()).transfer(amt);
    }

    /**
     * @notice Allows the contract owner to set the gas for the destination LayerZero receive function.
     * @dev Only the contract owner can call this function.
     * @param newVal The new gas value.
     */
    function setGasForDestinationLzReceive(uint256 newVal) external onlyOwner {
        gasForDestinationLzReceive = newVal;
    }

    /**
     * @notice Internal function to handle LayerZero messages.
     * @dev Decodes the payload and mints the NFT on the destination chain.
     * @param _srcChainId The source chain ID.
     * @param _srcAddress The source address.
     * @param _nonce The nonce of the message.
     * @param _payload The encoded payload.
     */
    function _LzReceive(
        uint16 _srcChainId,
        bytes memory _srcAddress,
        uint64 _nonce,
        bytes memory _payload
    ) internal override {
        (address sender, uint256 tokenId) = abi.decode(_payload, (address, uint256));
        _safeMint(sender, tokenId);
    }

    /**
     * @notice Returns the base URI for the NFTs.
     * @dev Overrides the _baseURI function from ERC721.
     * @return The base URI.
     */
    function _baseURI() internal view override returns (string memory) {
        return baseURI;
    }
}
```

### Key Points Implemented:
- **Mint Function**: Allows minting one NFT at a time with a cap on total minted tokens.
- **Cross-Chain Transfer Function (`traverseChains`)**: Handles the logic for sending an NFT to another chain using LayerZero, including burning the token on the source chain and preparing payload and fees.
- **Event Emission**: Emits `Transfer` events when tokens are burnt.
- **Base URI Management**: Allows the contract owner to set a base URI for the NFTs.
- **Donation Function**: Enables anyone to donate ETH to the contract.
- **Withdrawal Function**: Allows the contract owner to withdraw a specific amount of ETH.
- **Gas Configuration**: Allows the contract owner to set the gas limit for cross-chain message execution.
- **NonblockingReceiver Implementation**: Handles LayerZero messages for receiving NFTs on the destination chain.

This implementation ensures that the contract adheres to the provided specifications and requirements for deploying on Solidity 0.8.7.