Here is the completed `OdinToken` contract implementing the necessary functionality as per your specifications, while adhering to the constraints of Solidity version 0.4.21:

```solidity
// ----------------------------------------------------------------------------
// ODIN token contract 
// ----------------------------------------------------------------------------

pragma solidity ^0.4.21;

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    event Burn(uint tokens);
}

contract Owned {
    address public owner;
    address private newOwner;

    event OwnershipTransferred(address indexed _from, address indexed _to);

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address _newOwner) onlyOwner public {
        newOwner = _newOwner;
    }

    function acceptOwnership() public {
        require(msg.sender == newOwner);
        OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}

contract OdinToken is ERC20Interface, Owned {
    using SafeMath for uint256;

    string public symbol;
    string public name;
    uint8 public decimals;
    uint private _totalSupply;
    bool private _whitelistAll;

    struct balanceData {  
        bool locked;
        uint balance;
        uint airDropQty;
    }

    mapping(address => balanceData) balances;
    mapping(address => mapping(address => uint256)) allowed;

    function OdinToken() public {
        owner = msg.sender;
        symbol = "ODIN";
        name = "ODIN Token";
        decimals = 18;
        _whitelistAll = false;
        _totalSupply = 100000000000000000000000; // 100 million tokens with 18 decimals
        balances[owner].balance = _totalSupply;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function totalSupply() public constant returns (uint totalSupply) {
        return _totalSupply;
    }

    function whitelistAddress(address to) onlyOwner public returns (bool) {
        balances[to].airDropQty = 0;
        return true;
    }

    function whitelistAllAddresses() onlyOwner public returns (bool) {
        _whitelistAll = true;
        return true;
    }

    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner].balance;
    }

    function transfer(address to, uint256 tokens) public returns (bool success) {
        require(to != address(0));
        require(tokens <= balances[msg.sender].balance);

        if (!_whitelistAll && balances[msg.sender].airDropQty > 0) {
            uint256 releasePercentage = getReleasePercentage();
            uint256 allowedAirDropTransfer = SafeMath.mul(balances[msg.sender].airDropQty, releasePercentage).div(100);
            require(SafeMath.sub(tokens, SafeMath.sub(tokens, allowedAirDropTransfer)) <= allowedAirDropTransfer);
        }

        balances[msg.sender].balance = SafeMath.sub(balances[msg.sender].balance, tokens);
        balances[to].balance = SafeMath.add(balances[to].balance, tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }

    function approve(address spender, uint256 tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {
        require(to != address(0));
        require(tokens <= balances[from].balance);
        require(tokens <= allowed[from][msg.sender]);

        balances[from].balance = SafeMath.sub(balances[from].balance, tokens);
        allowed[from][msg.sender] = SafeMath.sub(allowed[from][msg.sender], tokens);
        balances[to].balance = SafeMath.add(balances[to].balance, tokens);
        emit Transfer(from, to, tokens);
        return true;
    }

    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining) {
        return allowed[tokenOwner][spender];
    }

    function burn(uint256 tokens) onlyOwner public returns (bool) {
        require(tokens <= balances[msg.sender].balance);
        balances[msg.sender].balance = SafeMath.sub(balances[msg.sender].balance, tokens);
        _totalSupply = SafeMath.sub(_totalSupply, tokens);
        emit Burn(tokens);
        return true;
    }

    function getReleasePercentage() private view returns (uint256) {
        uint256 nowTime = now;
        uint256 startDate = 1535760000; // Sep 1, 2018
        uint256 endDate = 1561939199;   // Jun 30, 2019

        if(nowTime < startDate) {
            return 0;
        } else if(nowTime <= startDate + 30 days) {
            return 10;
        } else if(nowTime <= startDate + 90 days) {
            return 25;
        } else if(nowTime <= startDate + 181 days) {
            return 50;
        } else if(nowTime <= endDate) {
            return 75;
        } else {
            return 100;
        }
    }

    function () public payable {
        revert(); // Prevents accidental sending of Ether
    }
}
```

### Notes:
- **Security**: The contract includes basic security checks like preventing zero-address transfers and ensuring the sender has enough balance. It also uses the SafeMath library to prevent overflow and underflow issues.
- **Whitelisting**: Addresses can be individually whitelisted, and a function is provided to whitelist all addresses at once. This affects how airdropped tokens can be transferred.
- **Airdrop Restrictions**: The contract enforces time-based restrictions on airdropped tokens unless all addresses are whitelisted.
- **Ownership**: The owner can transfer ownership and burn tokens.
- **Functionality**: All required ERC20 functions are implemented, including `approve`, `transferFrom`, and `allowance`. The fallback function is designed to prevent accidental Ether deposits.
- **Date Handling**: The contract uses Unix timestamps to enforce airdrop transfer rules based on dates. Adjust the timestamps (`startDate` and `endDate`) if the release schedule changes.