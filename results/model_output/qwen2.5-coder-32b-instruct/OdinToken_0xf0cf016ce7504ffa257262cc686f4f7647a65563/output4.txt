Below is the completed `OdinToken` contract based on the provided specifications and using Solidity version 0.4.21. This implementation includes all the necessary functions as described, and adheres to the guidelines for airdrop restrictions and whitelisting:

```solidity
pragma solidity ^0.4.21;

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    event Burn(uint tokens);
}

contract Owned {
    address public owner;
    address private newOwner;

    event OwnershipTransferred(address indexed _from, address indexed _to);

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address _newOwner) onlyOwner public {
        owner = _newOwner;
        emit OwnershipTransferred(msg.sender, _newOwner);
    }
}

contract OdinToken is ERC20Interface, Owned {
    using SafeMath for uint256;

    string public symbol;
    string public name;
    uint8 public decimals;
    uint private _totalSupply;
    bool private _whitelistAll;

    struct balanceData {  
        bool locked;
        uint balance;
        uint airDropQty;
    }

    mapping(address => balanceData) balances;
    mapping(address => mapping(address => uint)) allowed;

    function OdinToken() public {
        owner = msg.sender;
        symbol = "ODIN";
        name = "ODIN Token";
        decimals = 18;
        _whitelistAll = false;
        _totalSupply = 100000000000000000000000;
        balances[owner].balance = _totalSupply;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function totalSupply() public constant returns (uint256) {
        return _totalSupply;
    }

    function whitelistAddress(address to) onlyOwner public returns (bool) {
        balances[to].airDropQty = 0;
        return true;
    }

    function whitelistAllAddresses() onlyOwner public returns (bool) {
        _whitelistAll = true;
        return true;
    }

    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner].balance;
    }

    function transfer(address to, uint tokens) public returns (bool success) {
        require(to != address(0));
        require(tokens <= balances[msg.sender].balance);
        require(!balances[msg.sender].locked);

        if (!_whitelistAll && balances[msg.sender].airDropQty > 0) {
            uint airDropAllowed = calculateAirDropAllowance(balances[msg.sender].airDropQty);
            require(tokens <= airDropAllowed.add(balances[msg.sender].balance.sub(balances[msg.sender].airDropQty)));
        }

        balances[msg.sender].balance = balances[msg.sender].balance.sub(tokens);
        balances[to].balance = balances[to].balance.add(tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }

    function calculateAirDropAllowance(uint airDropQty) internal view returns (uint) {
        uint currentYear = now / 31536000;
        uint currentMonth = (now % 31536000) / 2628000;
        uint allowancePercentage;

        if (currentYear < 2018 || (currentYear == 2018 && currentMonth < 8)) {
            allowancePercentage = 0;
        } else if (currentYear == 2018 && currentMonth < 9) {
            allowancePercentage = 10;
        } else if (currentYear == 2018 && currentMonth < 12) {
            allowancePercentage = 25;
        } else if (currentYear == 2019 && currentMonth < 3) {
            allowancePercentage = 50;
        } else if (currentYear == 2019 && currentMonth < 6) {
            allowancePercentage = 75;
        } else {
            allowancePercentage = 100;
        }

        return airDropQty.mul(allowancePercentage).div(100);
    }

    function burn(uint256 tokens) onlyOwner public returns (bool) {
        require(tokens <= _totalSupply);
        require(tokens <= balances[owner].balance);
        
        balances[owner].balance = balances[owner].balance.sub(tokens);
        _totalSupply = _totalSupply.sub(tokens);
        emit Burn(tokens);
        return true;
    }

    function ()  public payable {
        revert();
    }
}
```

### Notes:
1. **Constructor**: Initializes the contract with the owner as the sender, setting up the total supply and assigning all tokens to the owner.
2. **Whitelisting**: Includes functions to whitelist individual addresses (`whitelistAddress`) and whitelist all addresses (`whitelistAllAddresses`).
3. **Transfer Function**: Implements logic for transferring tokens, including restrictions based on airdropped tokens and whitelisting.
4. **Burn Function**: Allows the owner to burn a specified number of tokens, reducing the total supply accordingly.
5. **Fallback Function**: Reverts all Ether sent to the contract, preventing accidental Ether deposits.