Below is the completed Solidity smart contract `Data` as per your specifications and requirements, compatible with Solidity version 0.4.19:

```solidity
contract Ownable {
    address public owner = msg.sender;

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        owner = newOwner;
    }
}

contract Data is Ownable {
    mapping (address => address) private parent;
    mapping (address => uint8) public statuses;
    mapping (address => uint) public referralDeposits;
    mapping(address => uint256) private balances;
    mapping(address => uint256) private investorBalances;

    function parentOf(address _addr) public constant returns (address) {
        return parent[_addr];
    }

    function balanceOf(address _addr) public constant returns (uint256) {
        return balances[_addr];
    }

    function investorBalanceOf(address _addr) public constant returns (uint256) {
        return investorBalances[_addr];
    }

    function Data() public {
        statuses[msg.sender] = 7;
    }

    function addBalance(address _addr, uint256 amount) onlyOwner public {
        balances[_addr] += amount;
    }

    function subtrBalance(address _addr, uint256 amount) onlyOwner public {
        require(balances[_addr] >= amount);
        balances[_addr] -= amount;
    }

    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {
        investorBalances[_addr] += amount;
    }

    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {
        require(investorBalances[_addr] >= amount);
        investorBalances[_addr] -= amount;
    }

    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {
        referralDeposits[_addr] += amount;
    }

    function setStatus(address _addr, uint8 _status) onlyOwner public {
        statuses[_addr] = _status;
    }

    function setParent(address _addr, address _parent) onlyOwner public {
        parent[_addr] = _parent;
    }
}
```

This contract includes:
- Functions to retrieve parent, balance, and investor balance.
- Constructor to set the initial status of the contract deployer.
- Functions for adding and subtracting balances, investor balances, and referral deposits.
- Functions to set the status and parent of nodes.
- All functions are accessible only by the contract owner due to the `onlyOwner` modifier.