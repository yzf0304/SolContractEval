Below is the completed `Data` smart contract implementing all the described functionalities according to the provided context and using Solidity compiler version 0.4.19:

```solidity
pragma solidity ^0.4.19;

contract Ownable {
    address public owner = msg.sender;

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        owner = newOwner;
    }
}

/**
 * @title Data
 * @notice A contract for managing a hierarchical structure of nodes, their statuses, and balances.
 * @dev This contract allows the owner to manage the status, parent, and balance of each node. It also provides functions to get the parent, balance, and investor balance of a node.
 */
contract Data is Ownable {
    mapping(address => address) private parent;
    mapping(address => uint8) public statuses;
    mapping(address => uint) public referralDeposits;
    mapping(address => uint256) private balances;
    mapping(address => uint256) private investorBalances;

    function parentOf(address _addr) public constant returns (address) {
        return parent[_addr];
    }

    function balanceOf(address _addr) public constant returns (uint256) {
        return balances[_addr];
    }

    function investorBalanceOf(address _addr) public constant returns (uint256) {
        return investorBalances[_addr];
    }

    function Data() public {
        statuses[msg.sender] = 7;  // DirectorOfRegion - 7
    }

    function addBalance(address _addr, uint256 amount) onlyOwner public {
        balances[_addr] += amount;
    }

    function subtrBalance(address _addr, uint256 amount) onlyOwner public {
        require(balances[_addr] >= amount);
        balances[_addr] -= amount;
    }

    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {
        investorBalances[_addr] += amount;
    }

    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {
        require(investorBalances[_addr] >= amount);
        investorBalances[_addr] -= amount;
    }

    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {
        referralDeposits[_addr] += amount;
    }

    function setStatus(address _addr, uint8 _status) onlyOwner public {
        statuses[_addr] = _status;
    }

    function setParent(address _addr, address _parent) onlyOwner public {
        parent[_addr] = _parent;
    }
}
```

This contract implements all the required functions and follows the structure and rules specified in the initial description. It uses mappings to track the parent, status, referral deposits, balances, and investor balances for each node, and it includes modifier `onlyOwner` to restrict certain operations to the contract's owner.