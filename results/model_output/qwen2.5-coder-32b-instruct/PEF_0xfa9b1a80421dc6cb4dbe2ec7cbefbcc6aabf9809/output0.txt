Below is the completed `owned` contract according to the provided context and description, implemented in Solidity version 0.4.18:

```solidity
contract owned {

    address public owner;

    address public ownerCandidate;

    function owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
        assert(owner == msg.sender);
        _;
    }

    modifier onlyOwnerCandidate() {
        assert(msg.sender == ownerCandidate);
        _;
    }

    function transferOwnership(address candidate) external onlyOwner {
        ownerCandidate = candidate;
    }

    function acceptOwnership() external onlyOwnerCandidate {
        owner = ownerCandidate;
        ownerCandidate = 0x0;
    }
}
```

This contract includes:
- A constructor that initializes the `owner` to the address that deploys the contract.
- Two modifiers: `onlyOwner` and `onlyOwnerCandidate` to restrict access to certain functions.
- A `transferOwnership` function that allows the current owner to nominate a new owner candidate.
- An `acceptOwnership` function that allows the nominated owner candidate to accept the ownership, updating the `owner` and resetting the `ownerCandidate`.