Here is the complete and functional `owned` contract according to the provided context, compatible with Solidity compiler version 0.4.18:

```solidity
contract owned {

    address public owner;

    address public ownerCandidate;

    function owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
        assert(owner == msg.sender);
        _;
    }

    modifier onlyOwnerCandidate() {
        assert(msg.sender == ownerCandidate);
        _;
    }

    function transferOwnership(address candidate) external onlyOwner {
        ownerCandidate = candidate;
    }

    function acceptOwnership() external onlyOwnerCandidate {
        owner = ownerCandidate;
        ownerCandidate = 0x0;
    }
}
```

This contract initializes the `owner` to the address that deploys it and provides mechanisms to transfer ownership through nomination and acceptance by the candidate. The `onlyOwner` and `onlyOwnerCandidate` modifiers ensure that only the appropriate addresses can call the respective functions.