Below is the implementation of the `PIKA` contract, filling in the unimplemented functions while adhering strictly to the context and description provided:

```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.7.6;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Owned is Context {
    modifier onlyOwner() {
        require(_msgSender() == owner);
        _;
    }
    address payable owner;
    address payable newOwner;

    function changeOwner(address payable _newOwner) external onlyOwner {
        require(_newOwner != address(0));
        newOwner = _newOwner;
    }

    function acceptOwnership() external {
        if (_msgSender() == newOwner) {
            owner = newOwner;
        }
    }
}

interface ERC20 {
    function balanceOf(address _owner) view external returns (uint256 balance);
    function transfer(address _to, uint256 _value) external returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);
    function approve(address _spender, uint256 _value) external returns (bool success);
    function allowance(address _owner, address _spender) view external returns (uint256 remaining);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract PIKA is Context, Owned, ERC20 {
    using SafeMath for uint256;

    uint256 public _taxFee;
    uint256 public totalSupply;
    string public symbol;
    string public name;
    uint8 public decimals;
    uint256 private _taxFeePercent = 225;
    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    mapping(address => bool) private _isExcludedFromFee;
    uint256 public ContractDeployed;
    address oldPika = 0xE09fB60E8D6e7E1CEbBE821bD5c3FC67a40F86bF;
    uint256 public oldPika_amount;
    uint256 private minamountTakenOut = 1000000 * 10**9 * 10**9;
    uint256 private MinimumSupply = 100000000 * 10**9 * 10**9;
    uint256 private _totalFees;

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;

    event TransferFee(address indexed _from, address indexed _to, uint256 _value);

    constructor() {
        symbol = "PIKA";
        name = "PIKA";
        decimals = 18;
        totalSupply = 50000000000000 * 10**9 * 10**9; //50 trillion
        owner = _msgSender();
        balances[owner] = totalSupply;
        _isExcludedFromFee[owner] = true;
        _isExcludedFromFee[address(this)] = true;
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;
        ContractDeployed = block.timestamp;
    }

    function balanceOf(address _owner) view public override returns (uint256 balance) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _amount) public override returns (bool success) {
        _transfer(_msgSender(), _to, _amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool success) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), allowed[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 fee = _isExcludedFromFee[sender] || _isExcludedFromFee[recipient] ? 0 : calculateTaxFee(amount);
        uint256 transferAmount = amount.sub(fee);

        balances[sender] = balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        balances[recipient] = balances[recipient].add(transferAmount);
        if (fee > 0) {
            balances[address(this)] = balances[address(this)].add(fee);
            emit TransferFee(sender, recipient, fee);
        }

        emit Transfer(sender, recipient, transferAmount);
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        allowed[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function allowance(address _owner, address _spender) view public override returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        balances[account] = balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        totalSupply = totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        // Generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // Make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // Accept any amount of ETH
            path,
            owner,
            block.timestamp
        );
    }

    function viewMinExtractAmt() public view returns (uint256) {
        return minamountTakenOut;
    }

    function setMinExtractAmt(uint256 _amount) public onlyOwner {
        minamountTakenOut = _amount;
    }

    function viewFee() public view returns (uint256) {
        return _taxFeePercent;
    }

    function exchnagePika(uint256 tokens) external {
        require(block.timestamp <= ContractDeployed.add(4 days), "Exchange period expired");
        require(tokens > 0, "Amount must be greater than 0");
        require(IERC20(oldPika).allowance(msg.sender, address(this)) >= tokens, "Not enough allowance");

        IERC20(oldPika).transferFrom(msg.sender, address(this), tokens);
        uint256 bonus = calSwapToken(tokens, 0);
        balances[msg.sender] = balances[msg.sender].add(bonus);
        oldPika_amount = oldPika_amount.add(tokens);
        emit Transfer(address(this), msg.sender, bonus);
    }

    function extractOldPIKA() external onlyOwner {
        uint256 amount = oldPika_amount;
        require(amount > 0, "No old Pika tokens to extract");
        IERC20(oldPika).transfer(owner, amount);
        oldPika_amount = 0;
    }

    function extractfee() external onlyOwner {
        uint256 amount = _totalFees;
        require(amount > 0, "No fees to extract");
        _totalFees = 0;
        balances[owner] = balances[owner].add(amount);
        emit Transfer(address(this), owner, amount);
    }

    function calSwapToken(uint256 _tokens, uint256 cust) internal virtual returns (uint256) {
        if (_tokens < 1e12) return _tokens.mul(500).div(100);
        if (_tokens >= 1e12 && _tokens < 1e13) return _tokens.mul(250).div(100);
        return _tokens.mul(100).div(100);
    }

    function burn(uint256 value) public returns (bool flag) {
        _burn(_msgSender(), value);
        return true;
    }

    function viewMinSupply() public view returns (uint256) {
        return MinimumSupply;
    }

    function changeMinSupply(uint256 newMinSupply) onlyOwner public {
        MinimumSupply = newMinSupply;
    }

    function addLiquidity(uint256 tokenAmount) public payable onlyOwner {
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // Add the liquidity
        uniswapV2Router.addLiquidityETH{value: msg.value}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            owner,
            block.timestamp
        );
    }

    function calculateTaxFee(uint256 amount) private view returns (uint256) {
        return amount.mul(_taxFeePercent).div(10000);
    }

    receive() payable external {
        require(msg.value > 0);
        owner.transfer(msg.value);
    }
}
```

### Key Notes:
- **Tax Fee**: Implemented a tax fee system where 2.25% of each transfer is collected as a fee.
- **Exchanging Old Pika Tokens**: Users can exchange old PIKA tokens for new PIKA tokens with a bonus based on the amount.
- **Swapping and Adding Liquidity**: Added functionality to swap tokens for ETH and add liquidity to the Uniswap pool.
- **Safety Checks**: Implemented checks to ensure only the owner can perform certain actions and to avoid overflows and underflows using the `SafeMath` library.

This contract should meet all the requirements stated in your description.