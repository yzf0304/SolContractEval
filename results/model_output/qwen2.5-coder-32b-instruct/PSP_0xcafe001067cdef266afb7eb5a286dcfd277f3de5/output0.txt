Below is the complete implementation of the `PSP` contract based on the provided description and context. The implementation includes all necessary functions and event emissions, ensuring compatibility with Solidity version 0.5.17.

```solidity
pragma solidity ^0.5.17;

contract PSP {
    using SafeMath for uint256;
    using SafeMath for uint96;
    using SafeMath for uint32;

    string public constant name = "ParaSwap";
    string public constant symbol = "PSP";
    uint8 public constant decimals = 18;
    uint public totalSupply = 2_000_000_000e18;
    address public minter;
    uint public mintingAllowedAfter;
    uint32 public constant minimumTimeBetweenMints = 1 days * 365;
    uint8 public constant mintCap = 2;

    mapping (address => mapping (address => uint96)) internal allowances;
    mapping (address => uint96) internal balances;
    mapping (address => address) public delegates;
    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
    mapping (address => uint32) public numCheckpoints;

    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
    bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
    mapping (address => uint) public nonces;

    event MinterChanged(address minter, address newMinter);
    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);

    constructor(address account, address minter_, uint mintingAllowedAfter_) public {
        require(mintingAllowedAfter_ >= block.timestamp, "PSP::constructor: minting can only begin after deployment");
        balances[account] = uint96(totalSupply);
        emit Transfer(address(0), account, totalSupply);
        minter = minter_;
        emit MinterChanged(address(0), minter);
        mintingAllowedAfter = mintingAllowedAfter_;
    }

    function setMinter(address minter_) external {
        require(msg.sender == minter, "PSP::setMinter: only the minter can change the minter");
        emit MinterChanged(minter, minter_);
        minter = minter_;
    }

    function mint(address dst, uint rawAmount) external {
        require(block.timestamp >= mintingAllowedAfter, "PSP::mint: minting not allowed yet");
        require(msg.sender == minter, "PSP::mint: only the minter can mint");
        require(dst != address(0), "PSP::mint: cannot mint to the zero address");

        uint96 amount = safe96(rawAmount, "PSP::mint: amount exceeds 96 bits");
        uint96 mintCapAmount = totalSupply.mul(mintCap).div(100);
        require(amount <= mintCapAmount, "PSP::mint: exceeded mint cap");

        uint96 newTotalSupply = safe96(totalSupply.add(amount), "PSP::mint: mint amount overflows");
        totalSupply = newTotalSupply;
        balances[dst] = balances[dst].add(amount);
        emit Transfer(address(0), dst, amount);
        _moveDelegates(address(0), delegates[dst], amount);

        mintingAllowedAfter = block.timestamp.add(minimumTimeBetweenMints);
    }

    function allowance(address account, address spender) external view returns (uint) {
        return allowances[account][spender];
    }

    function approve(address spender, uint rawAmount) external returns (bool) {
        uint96 amount = safe96(rawAmount, "PSP::approve: amount exceeds 96 bits");
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
        require(block.timestamp <= deadline, "PSP::permit: signature expired");

        uint96 amount = safe96(rawAmount, "PSP::permit: amount exceeds 96 bits");
        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));
        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner], deadline));
        bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
        address signatory = ecrecover(digest, v, r, s);
        require(signatory != address(0), "PSP::permit: invalid signature");
        require(signatory == owner, "PSP::permit: unauthorized");
        nonces[owner] = nonces[owner].add(1);
        allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function balanceOf(address account) external view returns (uint) {
        return balances[account];
    }

    function transfer(address dst, uint rawAmount) external returns (bool) {
        uint96 amount = safe96(rawAmount, "PSP::transfer: amount exceeds 96 bits");
        _transferTokens(msg.sender, dst, amount);
        return true;
    }

    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {
        address spender = msg.sender;
        uint96 spenderAllowance = allowances[src][spender];
        uint96 amount = safe96(rawAmount, "PSP::transferFrom: amount exceeds 96 bits");

        if (spender != src && spenderAllowance != uint96(-1)) {
            allowances[src][spender] = spenderAllowance.sub(amount, "PSP::transferFrom: transfer amount exceeds spender allowance");
        }

        _transferTokens(src, dst, amount);
        return true;
    }

    function delegate(address delegatee) public {
        return _delegate(msg.sender, delegatee);
    }

    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {
        require(block.timestamp <= expiry, "PSP::delegateBySig: signature expired");

        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));
        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));
        bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
        address signatory = ecrecover(digest, v, r, s);
        require(signatory != address(0), "PSP::delegateBySig: invalid signature");
        require(nonce == nonces[signatory]++, "PSP::delegateBySig: invalid nonce");
        require(signatory == msg.sender, "PSP::delegateBySig: unauthorized");
        return _delegate(signatory, delegatee);
    }

    function getCurrentVotes(address account) external view returns (uint96) {
        uint32 nCheckpoints = numCheckpoints[account];
        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
    }

    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {
        require(blockNumber < block.number, "PSP::getPriorVotes: not yet determined");

        uint32 nCheckpoints = numCheckpoints[account];
        if (nCheckpoints == 0) {
            return 0;
        }

        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
            return checkpoints[account][nCheckpoints - 1].votes;
        }

        if (checkpoints[account][0].fromBlock > blockNumber) {
            return 0;
        }

        uint32 lower = 0;
        uint32 upper = nCheckpoints - 1;
        while (upper > lower) {
            uint32 center = upper - (upper - lower) / 2;
            Checkpoint memory cp = checkpoints[account][center];
            if (cp.fromBlock == blockNumber) {
                return cp.votes;
            } else if (cp.fromBlock < blockNumber) {
                lower = center;
            } else {
                upper = center - 1;
            }
        }
        return checkpoints[account][lower].votes;
    }

    function _delegate(address delegator, address delegatee) internal {
        address currentDelegate = delegates[delegator];
        uint96 delegatorBalance = balances[delegator];
        delegates[delegator] = delegatee;

        emit DelegateChanged(delegator, currentDelegate, delegatee);

        _moveDelegates(currentDelegate, delegatee, delegatorBalance);
    }

    function _transferTokens(address src, address dst, uint96 amount) internal {
        require(src != address(0), "PSP::_transferTokens: cannot transfer from the zero address");
        require(dst != address(0), "PSP::_transferTokens: cannot transfer to the zero address");

        balances[src] = balances[src].sub(amount, "PSP::_transferTokens: transfer amount exceeds balance");
        balances[dst] = balances[dst].add(amount);
        emit Transfer(src, dst, amount);

        _moveDelegates(delegates[src], delegates[dst], amount);
    }

    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {
        if (srcRep != dstRep && amount > 0) {
            if (srcRep != address(0)) {
                uint32 srcRepNum = numCheckpoints[srcRep];
                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
                uint96 srcRepNew = srcRepOld.sub(amount, "PSP::_moveVotes: vote amount underflows");
                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
            }

            if (dstRep != address(0)) {
                uint32 dstRepNum = numCheckpoints[dstRep];
                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
                uint96 dstRepNew = dstRepOld.add(amount, "PSP::_moveVotes: vote amount overflows");
                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
            }
        }
    }

    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {
        uint32 blockNumber = safe32(block.number, "PSP::_writeCheckpoint: block number exceeds 32 bits");

        if (nCheckpoints > 0