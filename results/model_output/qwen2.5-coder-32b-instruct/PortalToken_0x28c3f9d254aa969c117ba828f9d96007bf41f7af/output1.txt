Below is the complete implementation of the `PortalToken` contract according to the provided specifications and using Solidity version 0.4.22:

```solidity
contract ERC20Token {
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function totalSupply() constant public returns (uint256 supply);
    function balanceOf(address _owner) constant public returns (uint256 balance);
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    function approve(address _spender, uint256 _value) public returns (bool success);
    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);
}

contract PortalToken is ERC20Token {
    address public initialOwner;
    uint256 public supply   = 1000000000 * 10 ** 18;  // 100, 000, 000
    string  public name     = 'PortalToken';
    uint8   public decimals = 18;
    string  public symbol   = 'PTC';
    string  public version  = 'v0.1';
    bool    public transfersEnabled = true;
    uint    public creationBlock;
    uint    public creationTime;

    mapping (address => uint256) balance;
    mapping (address => mapping (address => uint256)) m_allowance;
    mapping (address => uint) jail;
    mapping (address => uint256) jailAmount;

    function PortalToken() public {
        initialOwner        = msg.sender;
        balance[msg.sender] = supply;
        creationBlock       = block.number;
        creationTime        = block.timestamp;
    }

    function balanceOf(address _account) constant public returns (uint) {
        return balance[_account];
    }

    function jailAmountOf(address _account) constant public returns (uint256) {
        return jailAmount[_account];
    }

    function totalSupply() constant public returns (uint) {
        return supply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(transfersEnabled, "Transfers are disabled");
        require(jail[msg.sender] < now, "Sender is jailed");
        require(balance[msg.sender] >= _value, "Insufficient balance");

        balance[msg.sender] -= _value;
        balance[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(transfersEnabled, "Transfers are disabled");
        require(jail[_from] < now, "Source account is jailed");
        require(jail[_to] < now, "Destination account is jailed");
        require(balance[_from] >= _value, "Insufficient balance");
        require(m_allowance[_from][msg.sender] >= _value, "Allowance exceeded");

        balance[_from] -= _value;
        balance[_to] += _value;
        m_allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(transfersEnabled, "Transfers are disabled");
        require(jail[msg.sender] < now, "Owner is jailed");
        require(jail[_spender] < now, "Spender is jailed");

        m_allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256) {
        require(transfersEnabled, "Transfers are disabled");
        return m_allowance[_owner][_spender];
    }

    function enableTransfers(bool _transfersEnabled) public returns (bool) {
        require(msg.sender == initialOwner, "Only initial owner can enable/disable transfers");
        transfersEnabled = _transfersEnabled;
        return transfersEnabled;
    }

    function catchYou(address _target, uint _timestamp, uint256 _amount) public returns (uint) {
        require(msg.sender == initialOwner, "Only initial owner can jail addresses");
        require(transfersEnabled, "Transfers are disabled");
        require(balance[_target] >= _amount, "Target does not have enough balance to jail");

        jail[_target] = _timestamp;
        jailAmount[_target] += _amount;
        balance[_target] -= _amount;
        return _timestamp;
    }

    function() external payable {}
}
```

This implementation adheres to the given context and provides the required functionalities while ensuring compatibility with Solidity version 0.4.22. The jail functionality and the enabling/disabling of transfers are integrated as described in the contract's documentation.