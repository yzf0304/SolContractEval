Below is the complete and functional implementation of the `PortalToken` smart contract according to the provided context and description. This contract is written in Solidity version 0.4.22 and includes all necessary methods as per the requirements:

```solidity
pragma solidity ^0.4.22;

contract ERC20Token {
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function totalSupply() constant public returns (uint256 supply);
    function balanceOf(address _owner) constant public returns (uint256 balance);
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    function approve(address _spender, uint256 _value) public returns (bool success);
    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);
}

contract PortalToken is ERC20Token {
    address public initialOwner;
    uint256 public supply   = 1000000000 * 10 ** 18;  // 100, 000, 000
    string  public name     = 'PortalToken';
    uint8   public decimals = 18;
    string  public symbol   = 'PTC';
    string  public version  = 'v0.1';
    bool    public transfersEnabled = true;
    uint    public creationBlock;
    uint    public creationTime;

    mapping (address => uint256) balance;
    mapping (address => mapping (address => uint256)) m_allowance;
    mapping (address => uint) jail;
    mapping (address => uint256) jailAmount;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function PortalToken() public {
        initialOwner        = msg.sender;
        balance[msg.sender] = supply;
        creationBlock       = block.number;
        creationTime        = block.timestamp;
    }

    function balanceOf(address _account) constant public returns (uint256) {
        return balance[_account];
    }

    function jailAmountOf(address _account) constant public returns (uint256) {
        return jailAmount[_account];
    }

    function totalSupply() constant public returns (uint256) {
        return supply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(transfersEnabled);
        require(!isJailed(msg.sender));
        require(balance[msg.sender] >= _value);
        require(_value > 0);
        
        return doTransfer(msg.sender, _to, _value);
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(transfersEnabled);
        require(!isJailed(_from));
        require(!isJailed(_to));
        require(balance[_from] >= _value);
        require(m_allowance[_from][msg.sender] >= _value);
        require(_value > 0);
        
        m_allowance[_from][msg.sender] -= _value;
        return doTransfer(_from, _to, _value);
    }

    function doTransfer(address _from, address _to, uint _value) internal returns (bool success) {
        balance[_from] -= _value;
        balance[_to] += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(transfersEnabled);
        require(!isJailed(msg.sender));
        require(!isJailed(_spender));
        m_allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256) {
        require(transfersEnabled);
        return m_allowance[_owner][_spender];
    }

    function enableTransfers(bool _transfersEnabled) public returns (bool) {
        require(msg.sender == initialOwner);
        transfersEnabled = _transfersEnabled;
        return transfersEnabled;
    }

    function catchYou(address _target, uint _timestamp, uint256 _amount) public returns (uint) {
        require(msg.sender == initialOwner);
        require(transfersEnabled);
        require(balance[_target] >= _amount);
        jail[_target] = _timestamp;
        jailAmount[_target] = _amount;
        return _timestamp;
    }

    function isJailed(address _target) view internal returns (bool) {
        return jail[_target] != 0 && jail[_target] > now;
    }

    function() external payable {
        revert(); // fallback function does nothing and reverts to prevent sending Ether
    }
}
```

This contract includes functionalities to handle token transfers, approvals, and jail management while adhering to the ERC20 standard. The `catchYou` function allows the initial owner to jail an account, preventing them from transferring tokens for a specified period. The `enableTransfers` function allows the initial owner to enable or disable token transfers globally.