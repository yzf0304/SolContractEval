```solidity
contract AccessControl {

    address public creatorAddress;

    uint16 public totalSeraphims = 0;

    mapping (address => bool) public seraphims;

    bool public isMaintenanceMode = true;

    modifier onlyCREATOR() {
        require(msg.sender == creatorAddress);
        _;
    }

    modifier onlySERAPHIM() {
        require(seraphims[msg.sender] == true);
        _;
    }

    modifier isContractActive {
        require(!isMaintenanceMode);
        _;
    }

    function AccessControl() public {
        creatorAddress = msg.sender;
    }

    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {
        require(!seraphims[_newSeraphim]);
        seraphims[_newSeraphim] = true;
        totalSeraphims++;
    }

    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {
        require(seraphims[_oldSeraphim]);
        seraphims[_oldSeraphim] = false;
        totalSeraphims--;
    }

    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {
        isMaintenanceMode = _isMaintaining;
    }
}
```

This contract includes the necessary logic to add and remove addresses with the SERAPHIM role, as well as to toggle the maintenance mode, all restricted to actions by the contract creator. The `totalSeraphims` counter is adjusted accordingly when adding or removing SERAPHIM addresses.