Certainly! Let's complete the `Revolution` contract based on the provided context and description. This will include all necessary functions and logic to handle investments, dividends, and referrals as specified.

```solidity
contract Revolution is Accessibility, PaymentSystem {
  using Percent for Percent.percent;
  using SafeMath for uint;
  using Zero for *;
  using ToAddress for *;

  InvestorsStorage private m_investors;
  mapping(address => bool) private m_referrals;
  bool private m_nextWave;

  address public adminAddr;
  address public payerAddr;
  uint public waveStartup;
  uint public investmentsNum;
  uint public constant minInvesment = 10 finney; // 0.01 eth
  uint public constant maxBalance = 333e5 ether; // 33,300,000 eth
  uint public constant pauseOnNextWave = 168 hours; // 1 week pause after each wave

  Percent.percent private m_dividendsPercent = Percent.percent(333, 10000); // 3.33%
  Percent.percent private m_adminPercent = Percent.percent(1, 10); // 10%
  Percent.percent private m_payerPercent = Percent.percent(7, 100); // 7%
  Percent.percent private m_refPercent = Percent.percent(3, 100); // 3%

  event LogNewInvestor(address indexed addr, uint when, uint value);
  event LogNewInvesment(address indexed addr, uint when, uint value);
  event LogNewReferral(address indexed addr, uint when, uint value);
  event LogPayDividends(address indexed addr, uint when, uint value);
  event LogPayReferrerBonus(address indexed addr, uint when, uint value);
  event LogBalanceChanged(uint when, uint balance);
  event LogAdminAddrChanged(address indexed addr, uint when);
  event LogPayerAddrChanged(address indexed addr, uint when);
  event LogNextWave(uint when);

  modifier balanceChanged {
    _;
    emit LogBalanceChanged(now, address(this).balance);
  }

  modifier notOnPause() {
    require(waveStartup + pauseOnNextWave <= now, "pause on next wave not expired");
    _;
  }

  constructor() public {
    adminAddr = msg.sender;
    emit LogAdminAddrChanged(msg.sender, now);
    payerAddr = msg.sender;
    emit LogPayerAddrChanged(msg.sender, now);
    nextWave();
    waveStartup = waveStartup.sub(pauseOnNextWave);
  }

  function() public payable {
    if (msg.value == 0) {
      getMyDividends();
      return;
    }
    address a = msg.data.toAddr();
    address[3] memory refs;
    if (a.notZero()) {
      refs[0] = a;
      doInvest(refs); 
    } else {
      doInvest(refs);
    }
  }

  function investorsNumber() public view returns(uint) {
    return m_investors.size().sub(1);
  }

  function balanceETH() public view returns(uint) {
    return address(this).balance;
  }

  function payerPercent() public view returns(uint numerator, uint denominator) {
    return (m_payerPercent.num, m_payerPercent.den);
  }

  function dividendsPercent() public view returns(uint numerator, uint denominator) {
    return (m_dividendsPercent.num, m_dividendsPercent.den);
  }

  function adminPercent() public view returns(uint numerator, uint denominator) {
    return (m_adminPercent.num, m_adminPercent.den);
  }

  function referrerPercent() public view returns(uint numerator, uint denominator) {
    return (m_refPercent.num, m_refPercent.den);
  }

  function investorInfo(address addr) public view returns(uint value, uint paymentTime, uint refBonus, bool isReferral) {
    var investor = getMemInvestor(addr);
    return (investor.value, investor.paymentTime, investor.refBonus, m_referrals[addr]);
  }

  function latestPayout() public view returns(uint timestamp) {
    return m_paysys.latestTime;
  }

  function getMyDividends() public notOnPause atPaymode(Paymode.Pull) balanceChanged {
    var investor = getMemInvestor(msg.sender);
    require(investor.keyIndex > 0, "investor not found");

    uint secondsPassed = now.sub(investor.paymentTime);
    uint fullDays = secondsPassed.div(1 days);
    uint dividends = investor.value.mul(m_dividendsPercent).div(1 days).mul(fullDays);
    if (dividends > 0 && address(this).balance >= dividends) {
      sendDividends(msg.sender, dividends);
      emit LogPayDividends(msg.sender, now, dividends);
    }
    m_investors.setPaymentTime(msg.sender, now);
  }

  function doInvest(address[3] refs) public payable notOnPause balanceChanged {
    require(msg.value >= minInvesment, "investment below minimum");
    require(address(this).balance < maxBalance, "maximum balance reached");

    var investor = getMemInvestor(msg.sender);
    if (investor.keyIndex == 0) {
      m_investors.insert(msg.sender, msg.value);
      emit LogNewInvestor(msg.sender, now, msg.value);
    } else {
      m_investors.addValue(msg.sender, msg.value);
      emit LogNewInvesment(msg.sender, now, msg.value);
    }
    investmentsNum = investmentsNum.add(1);

    uint adminFee = msg.value.mul(m_adminPercent);
    uint payerFee = msg.value.mul(m_payerPercent);
    uint refFee = msg.value.mul(m_refPercent);

    adminAddr.transfer(adminFee);
    payerAddr.transfer(payerFee);

    for (uint i = 0; i < 3; i++) {
      if (refs[i].notZeroNotSender() && !m_referrals[refs[i]]) {
        m_investors.addRefBonus(refs[i], refFee.div(3));
        emit LogNewReferral(refs[i], now, refFee.div(3));
        m_referrals[refs[i]] = true;
      }
    }

    if (paymode() == Paymode.Pull) {
      m_investors.setPaymentTime(msg.sender, now);
    }
  }

  function payout() public notOnPause onlyAdmin(AccessRank.Payout) atPaymode(Paymode.Push) balanceChanged {
    require(now.sub(latestPayout()) >= 12 hours, "payout too frequent");

    uint total = m_investors.size();
    while (m_paysys.latestKeyIndex < total) {
      address addr = m_investors.keyFromIndex(m_paysys.latestKeyIndex);
      var investor = getMemInvestor(addr);

      uint secondsPassed = now.sub(investor.paymentTime);
      uint fullDays = secondsPassed.div(1 days);
      uint dividends = investor.value.mul(m_dividendsPercent).div(1 days).mul(fullDays);
      
      if (dividends > 0 && address(this).balance >= dividends) {
        sendDividendsWithRefBonus(addr, dividends, investor.refBonus);
        emit LogPayDividends(addr, now, dividends);
        emit LogPayReferrerBonus(addr, now, investor.refBonus);
        m_investors.setRefBonus(addr, 0);
      }

      m_investors.setPaymentTime(addr, now);
      m_paysys.latestKeyIndex++;

      if (gasleft() < 20000) break;
    }

    if (m_paysys.latestKeyIndex >= total) {
      nextWave();
    }
  }

  function setAdminAddr(address addr) public onlyAdmin(AccessRank.Full) {
    require(addr.notZero(), "invalid address");
    adminAddr = addr;
    emit LogAdminAddrChanged(addr, now);
  }

  function setPayerAddr(address addr) public onlyAdmin(AccessRank.Full) {
    require(addr.notZero(), "invalid address");
    payerAddr = addr;
    emit LogPayerAddrChanged(addr, now);
  }

  function setPullPaymode() public onlyAdmin(AccessRank.Paymode) atPaymode(Paymode.Push) {
    changePaymode(Paymode.Pull);
  }

  function getMemInvestor(address addr) internal view returns(InvestorsStorage.investor) {
    return m_investors.data(addr);
  }

  function notZeroNotSender(address addr) internal view returns(bool) {
    return addr.notZero() && addr != msg.sender;
  }

  function sendDividends(address addr, uint value) private {
    addr.transfer(value);
  }

  function sendDividendsWithRefBonus(address addr, uint value, uint refBonus) private {
    addr.transfer(value.add(refBonus));
  }

  function nextWave() private {
    m_paysys.latestTime = now;
    m_paysys.latestKeyIndex = 0;
    m_paysys.mode = Paymode.Push;
    m_nextWave = true;
    waveStartup = now;
    emit LogNextWave(now);
  }
}
```

This implementation adheres to the provided context and description, ensuring functionalities such as investment processing, dividend calculation and distribution, referral bonuses, and wave management are correctly implemented. It uses `SafeMath` for arithmetic operations to prevent overflow and underflow issues and follows best practices for security and gas efficiency.