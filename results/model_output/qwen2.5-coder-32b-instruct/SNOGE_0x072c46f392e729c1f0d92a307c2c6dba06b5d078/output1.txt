Certainly! Below is the complete implementation of the `SNOGE` contract according to the provided context and description. This contract is designed to meet the specifications you've outlined, including token reflection and exclusion features.

```solidity
/**
 * @title SNOGE
 * @notice SNOGE is a custom ERC223 token with reflection and exclusion features.
 * @dev This contract implements the IERC20 interface and extends the Ownable contract.
 */
pragma solidity 0.6.12;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

contract SNOGE is Context, IERC20, Ownable {
    using SafeMath for uint256;

    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) private _isExcluded;
    address[] private _excluded;
   
    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _tTotal = 42000069 * 10**9;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;
    
    uint256 private _taxFee = 2;
    uint256 private _previousTaxFee = _taxFee;
    
    uint256 private _liquidityFee = 5;
    uint256 private _previousLiquidityFee = _liquidityFee;

    string private _name = 'Snoop Doge';
    string private _symbol = 'SNOGE';
    uint8 private _decimals = 9;

    IUniswapV2Router01 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;

    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = false;

    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    /**
     * @notice Initializes the contract and assigns the total supply to the deployer.
     * @dev The constructor sets the initial owner and mints the total supply of tokens.
     */
    constructor () public {
        _rOwned[_msgSender()] = _rTotal;

        IUniswapV2Router01 _uniswapV2Router = IUniswapV2Router01(0x10ED43C718714eb63d5aA57B78B54704E256024E); // PancakeSwap Router on BSC
        
         // Create a uniswap pair for this token
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        // set the rest of the contract variables
        uniswapV2Router = _uniswapV2Router;

        //exclude owner and this contract from fee
        excludeAccount(owner());
        excludeAccount(address(this));

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    /**
     * @notice Returns the name of the token.
     * @return The name of the token.
     * @dev This function is used to retrieve the name of the token.
     */
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @notice Returns the symbol of the token.
     * @return The symbol of the token.
     * @dev This function is used to retrieve the symbol of the token.
     */
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @notice Returns the number of decimals the token uses.
     * @return The number of decimals.
     * @dev This function is used to retrieve the number of decimals the token uses.
     */
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    /**
     * @notice Returns the total amount of tokens in existence.
     * @return The total supply of tokens.
     * @dev This function is used to retrieve the total supply of tokens.
     */
    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    /**
     * @notice Returns the balance of the specified address.
     * @param account The address to query the balance of.
     * @return The balance of the specified address.
     * @dev This function is used to retrieve the balance of an address. If the address is excluded, it returns the stored balance; otherwise, it calculates the balance from the reflection.
     */
    function balanceOf(address account) public view override returns (uint256) {
        if (_isExcluded[account]) return _tOwned[account];
        return tokenFromReflection(_rOwned[account]);
    }

    /**
     * @notice Transfers a specified amount of tokens to a recipient.
     * @param recipient The recipient address.
     * @param amount The amount of tokens to transfer.
     * @return A boolean value indicating whether the operation succeeded.
     * @dev This function transfers tokens from the sender to the recipient and emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @notice Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.
     * @param owner The address of the owner.
     * @param spender The address of the spender.
     * @return The remaining allowance.
     * @dev This function is used to retrieve the remaining allowance for a spender.
     */
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @notice Sets `amount` as the allowance of `spender` over the caller's tokens.
     * @param spender The address of the spender.
     * @param amount The amount of tokens to approve.
     * @return A boolean value indicating whether the operation succeeded.
     * @dev This function sets the allowance for a spender and emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @notice Transfers `amount` tokens from `sender` to `recipient` using the allowance mechanism.
     * @param sender The address of the sender.
     * @param recipient The address of the recipient.
     * @param amount The amount of tokens to transfer.
     * @return A boolean value indicating whether the operation succeeded.
     * @dev This function transfers tokens from the sender to the recipient and updates the allowance. It also emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    /**
     * @notice Increases the allowance granted to `spender` by the caller.
     * @param spender The address of the spender.
     * @param addedValue The additional amount of tokens to add to the allowance.
     * @return A boolean value indicating whether the operation succeeded.
     * @dev This function increases the allowance for a spender and emits an `Approval` event.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    /**
     * @notice Decreases the allowance granted to `spender` by the caller.
     * @param spender The address of the spender.
     * @param subtractedValue The amount of tokens to subtract from the allowance.
     * @return A boolean value indicating whether the operation succeeded.
     * @dev This function decreases the allowance for a spender and emits an `Approval` event.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    /**
     * @notice Checks if an account is excluded from the fee and reflection system.
     * @param account The address to check.
     * @return A boolean value indicating whether the account is excluded.
     * @dev This function is used to check if an account is excluded from the fee and reflection system.
     */
    function isExcluded(address account) public view returns (bool) {
        return _isExcluded[account];
    }

    /**
     * @notice Returns the total fees collected.
     * @return The total fees collected.
     * @dev This function is used to retrieve the total fees collected.
     */
    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }

    /**
     * @notice Reflects a specified amount of tokens.
     * @param tAmount The amount of tokens to reflect.
     * @dev This function is used to reflect a specified amount of tokens. Excluded addresses cannot call this function.
     */
    function reflect(uint256 tAmount) public {
        require(!_isExcluded[msg.sender], "Excluded addresses cannot call this function");
        (uint256 rAmount,,,,,) = _getValues(tAmount);
        _rOwned[msg.sender] = _rOwned[msg.sender].sub(rAmount);
        _rTotal = _rTotal.sub(rAmount);
        _tFeeTotal = _tFeeTotal.add(tAmount);
    }

    /**
     * @notice Calculates the reflection amount for a given token amount.
     * @param tAmount The amount of tokens.
     * @param deductTransferFee Whether to deduct the transfer fee from the amount.
     * @return The reflection amount.
     * @dev This function is used to calculate the reflection amount for a given token amount. If `deductTransferFee` is true, the transfer fee is deducted.
     */
    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        if (!deductTransferFee) {
            (uint256 rAmount,,,,,) = _getValues(tAmount);
            return rAmount;
        } else {
            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
            return rTransferAmount;
        }
    }

    /**
     * @notice Converts a reflection amount to a token amount.
     * @param rAmount The reflection amount.
     * @return The token amount.
     * @dev This function is used to convert a reflection amount to a token amount.
     */
    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount.div(currentRate);
    }

    /**
     * @notice Excludes an account from the fee and reflection system.
     * @param account The address to exclude.
     * @dev This function is used to exclude an account from the fee and reflection system. Only the owner can call this function.
     */
    function excludeAccount(address account) external onlyOwner() {
        require(account != 0x10ED43C718714eb63d5aA57B78B54704E256024E, 'We can not exclude Uniswap router.');
        require(!_isExcluded[account], "Account is already excluded");
        if(_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isExcluded[account] = true;
        _excluded.push(account);
    }

    /**
     * @notice Includes an account in the fee and reflection system.
     * @param account The address to include.
     * @dev This function is used to include an account in the fee and reflection system. Only the owner can call this function.
     */
    function includeAccount(address account) external onlyOwner() {
        require(_isExcluded[account], "Account is already included");
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_excluded[i] == account) {
                _excluded[i] = _excluded[_excluded.length - 1];
                _tOwned[account] = 0;
                _isExcluded[account] = false;
                _excluded.pop();
                break;
            }
        }
    }

    /**
     * @dev Approves `spender` to spend `amount` tokens on behalf of the message sender.
     * @param owner The address of the owner.
     * @param spender The address of the spender.
     * @param amount The amount of tokens to approve.
     * @dev This function is used to approve a spender to spend a certain amount of tokens on behalf of the owner. It also emits an `Approval` event.
     */
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Transfers tokens between accounts with exclusion handling.
     * @param sender Source address
     * @param recipient Destination address
     * @param tAmount Transfer amount
     */
    function _transfer(address sender, address recipient, uint256 tAmount) private {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(tAmount > 0, "Transfer amount must be greater than zero");

        if(sender != owner() && recipient != owner()) {
            require(!inSwapAndLiquify, "In swap and liquify");
        }

        //indicates if fee should be deducted from transfer
        bool takeFee = true;

        //if any account belongs to _isExcludedFromFee account then remove the fee
        if(_isExcluded[sender] || _isExcluded[recipient]){
            takeFee = false;
        }

        _tokenTransfer(sender, recipient, tAmount, takeFee);
    }

    /**
     * @notice Transfers tokens from `sender` to `recipient` when neither is excluded.
     * @param sender The address of the sender.
     * @param recipient The address of the recipient.
     * @param tAmount The amount of tokens to transfer.
     */
    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    /**
     * @notice Transfers tokens from `sender` to `recipient` when the sender is not excluded but the recipient is.
     * @param sender The address of the sender.
     * @param recipient The address of the recipient.
     * @param tAmount The amount of tokens to transfer.
     */
    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    /**
     * @notice Transfers tokens from `sender` to `recipient` when the sender is excluded but the recipient is not.
     * @param sender The address of the sender.
     * @param recipient The address of the recipient.
     * @param tAmount The amount of tokens to transfer.
     */
    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    /**
     * @notice Transfers tokens from `sender` to `recipient` when both are excluded.
     * @param sender The address of the sender.
     * @param recipient The address of the recipient.
     * @param tAmount The amount of tokens to transfer.
     */
    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    /**
     * @notice Reflects the fee amount.
     * @param rFee The reflection fee amount.
     * @param tFee The token fee amount.
     */
    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    /**
     * @dev Calculates token transfer values including reflection (R) and transaction (T) components.
     * @param tAmount The transfer amount in tokens (T)
     * @return rAmount Total reflection amount before fees
     * @return rTransferAmount Reflection amount after fees
     * @return rFee Reflection fee amount
     * @return tTransferAmount Transfer amount after fees
     * @return tFee Transaction fee amount
     */
    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {
        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());
        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);
    }

    /**
     * @dev Calculates transaction (T) components of a transfer.
     * @param tAmount The transfer amount in tokens (T)
     * @return tTransferAmount Transfer amount after fee deduction
     * @return tFee Transaction fee amount (2% of tAmount)
     * @return tLiquidity Liquidity fee amount
     */
    function _getTValues(uint256 tAmount) private pure returns (uint256, uint256, uint256) {
        uint256 tFee = calculateTaxFee(tAmount);
        uint256 tLiquidity = calculateLiquidityFee(tAmount);
        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
        return (tTransferAmount, tFee, tLiquidity);
    }

    /**
     * @dev Calculates reflection (R) components based on T values and current rate.
     * @param tAmount Original transfer amount in tokens (T)
     * @param tFee Transaction fee in T
     * @param tLiquidity Liquidity fee in T
     * @param currentRate Conversion rate between R and T
     * @return rAmount Total reflection amount before fees
     * @return rTransferAmount Reflection amount after fees
     * @return rFee Reflection fee amount
     */
    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
        return (rAmount, rTransferAmount, rFee);
    }

    /**
     * @notice Calculates the current rate of reflection to token.
     * @return The current rate.
     */
    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    /**
     * @notice Calculates the current supply of tokens and reflections.
     * @return The current supply of tokens and reflections.
     */
    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
            rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            tSupply = tSupply.sub(_tOwned[_excluded[i]]);
        }
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    /**
     * @dev Handles liquidity fee deduction and adds liquidity
     * @param tLiquidity Amount of liquidity fee in tokens
     */
    function _takeLiquidity(uint256 tLiquidity) private {
        uint256 currentRate = _getRate();
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
        if (_isExcluded[address(this)])
            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
    }

    /**
     * @dev Handles tax fee calculation
     * @param tAmount Amount of tokens transferred
     * @return Tax fee amount in tokens
     */
    function calculateTaxFee(uint256 tAmount) private view returns (uint256) {
        return tAmount.mul(_taxFee).div(10**2);
    }

    /**
     * @dev Handles liquidity fee calculation
     * @param tAmount Amount of tokens transferred
     * @return Liquidity fee amount in tokens
     */
    function calculateLiquidityFee(uint256 tAmount) private view returns (uint256) {
        return tAmount.mul(_liquidityFee).div(10**2);
    }

    /**
     * @notice Handles the actual transfer logic based on exclusions.
     * @param sender The address sending the tokens.
     * @param recipient The address receiving the tokens.
     * @param tAmount The amount of tokens to transfer.
     * @param takeFee Whether to apply the fee during the transfer.
     */
    function _tokenTransfer(address sender, address recipient, uint