Here is the complete implementation of the `SaudiPotatoz` contract based on the provided description and specifications:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./ERC721A.sol";

contract SaudiPotatoz is ERC721A, Ownable, ReentrancyGuard {
    string public baseURI;
    uint public price = 0 ether;
    uint public maxPerTx = 1;
    uint public maxPerWallet = 1;
    uint public totalFree = 0;
    uint public maxSupply = 5000;
    uint public nextOwnerToExplicitlySet;
    bool public mintEnabled;

    constructor() ERC721A("SaudiPotatoz", "SaudiPotatoz") {}

    modifier callerIsUser() {
        require(tx.origin == msg.sender, "The caller is another contract");
        _;
    }

    function freeMint(uint256 amt) external callerIsUser {
        require(mintEnabled, "Minting is not enabled");
        require((currentIndex + amt) <= totalFree, "Exceeds free mint supply");
        require(amt <= maxPerTx, "Exceeds max per tx");
        require(numberMinted(msg.sender) + amt <= maxPerWallet, "Exceeds max per wallet");
        
        _safeMint(msg.sender, amt);
    }

    function mint(uint256 amt) external payable callerIsUser {
        require(mintEnabled, "Minting is not enabled");
        require((currentIndex + amt) <= maxSupply, "Exceeds max supply");
        require(amt <= maxPerTx, "Exceeds max per tx");
        require(numberMinted(msg.sender) + amt <= maxPerWallet, "Exceeds max per wallet");
        require(msg.value >= price * amt, "Insufficient funds");

        _safeMint(msg.sender, amt);
    }

    function ownerBatchMint(uint256 amt) external onlyOwner {
        require((currentIndex + amt) <= maxSupply, "Exceeds max supply");
        _safeMint(msg.sender, amt);
    }

    function toggleMinting() external onlyOwner {
        mintEnabled = !mintEnabled;
    }

    function numberMinted(address owner) public view returns (uint256) {
        return _numberMinted(owner);
    }

    function setBaseURI(string calldata baseURI_) external onlyOwner {
        baseURI = baseURI_;
    }

    function setPrice(uint256 price_) external onlyOwner {
        price = price_;
    }

    function setTotalFree(uint256 totalFree_) external onlyOwner {
        totalFree = totalFree_;
    }

    function setMaxPerTx(uint256 maxPerTx_) external onlyOwner {
        maxPerTx = maxPerTx_;
    }

    function setMaxPerWallet(uint256 maxPerWallet_) external onlyOwner {
        maxPerWallet = maxPerWallet_;
    }

    function setmaxSupply(uint256 maxSupply_) external onlyOwner {
        require(maxSupply_ >= currentIndex, "Cannot reduce max supply below current supply");
        maxSupply = maxSupply_;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    function withdraw() external onlyOwner nonReentrant {
        payable(msg.sender).sendValue(address(this).balance);
    }

    function setOwnersExplicit(uint256 quantity) external onlyOwner nonReentrant {
        _setOwnersExplicit(quantity);
    }

    function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {
        return ownershipOf(tokenId);
    }

    function _setOwnersExplicit(uint256 quantity) internal {
        require(quantity > 0, "Quantity must be greater than 0");
        require(currentIndex > 0, "No tokens minted yet");

        uint256 updatedIndex = nextOwnerToExplicitlySet;

        while (updatedIndex < currentIndex && quantity > 0) {
            if (_ownerships[updatedIndex].addr == address(0)) {
                TokenOwnership memory ownership = ownershipOf(updatedIndex);
                _ownerships[updatedIndex] = TokenOwnership({
                    addr: ownership.addr,
                    startTimestamp: ownership.startTimestamp
                });
            }

            quantity--;
            updatedIndex++;
        }

        nextOwnerToExplicitlySet = updatedIndex;
    }
}
```

This contract implements all the functionalities described in the comments, including free and paid minting, owner-only functions for management, and optimizations for batch minting. The contract ensures security through the use of reentrancy guards and checks to prevent abuses such as exceeding mint limits and unauthorized minting.