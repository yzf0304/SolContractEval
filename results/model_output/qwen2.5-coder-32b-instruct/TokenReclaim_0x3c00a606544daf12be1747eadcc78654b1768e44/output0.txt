Below is the complete implementation of the `TokenReclaim` contract according to the provided context and description. The contract includes the `register`, `account`, `keys`, and `nameAvailable` functions with all necessary validations and mappings.

```solidity
pragma solidity 0.4.23;

contract TokenReclaim {
    mapping (address => string) internal _ethToSphtx;
    mapping (string => string) internal _accountToPubKey;

    event AccountRegister(address ethAccount, string sphtxAccount, string pubKey);

    function register(string memory name, string memory pubKey) public {
        require(bytes(name).length >= 3 && bytes(name).length <= 16, "Name must be between 3 and 16 characters long.");
        require(bytes(pubKey).length >= 50 && bytes(pubKey).length <= 64, "Public key must be between 50 and 64 characters long.");
        require(_ethToSphtx[msg.sender] == "", "Address is already registered.");
        require(_accountToPubKey[name] == "", "Name is already in use.");

        bytes memory nameBytes = bytes(name);
        require((nameBytes[0] >= 48 && nameBytes[0] <= 57) || (nameBytes[0] >= 97 && nameBytes[0] <= 122), "Name must start with a lowercase letter or digit.");

        for (uint i = 1; i < nameBytes.length; i++) {
            uint8 char = nameBytes[i];
            require((char >= 48 && char <= 57) || (char >= 97 && char <= 122) || char == 45 || char == 46, "Invalid character in name.");
        }

        _ethToSphtx[msg.sender] = name;
        _accountToPubKey[name] = pubKey;
        emit AccountRegister(msg.sender, name, pubKey);
    }

    function account(address addr) public view returns (string memory) {
        return _ethToSphtx[addr];
    }

    function keys(address addr) public view returns (string memory) {
        string memory sphtxName = _ethToSphtx[addr];
        return _accountToPubKey[sphtxName];
    }

    function nameAvailable(string memory name) public view returns (bool) {
        if (_accountToPubKey[name] != "") {
            return false;
        }

        bytes memory nameBytes = bytes(name);
        if (nameBytes.length < 3 || nameBytes.length > 16) {
            return false;
        }

        require((nameBytes[0] >= 48 && nameBytes[0] <= 57) || (nameBytes[0] >= 97 && nameBytes[0] <= 122), "Name must start with a lowercase letter or digit.");

        for (uint i = 1; i < nameBytes.length; i++) {
            uint8 char = nameBytes[i];
            if (!((char >= 48 && char <= 57) || (char >= 97 && char <= 122) || char == 45 || char == 46)) {
                return false;
            }
        }

        return true;
    }
}
```

This contract strictly adheres to the requirements specified, ensuring proper validation and registration of SPHTX names and their associated public keys.