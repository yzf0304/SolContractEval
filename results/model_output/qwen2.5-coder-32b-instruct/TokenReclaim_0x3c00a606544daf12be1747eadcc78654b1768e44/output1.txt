Certainly! Below is the implementation of the `TokenReclaim` contract as per your specifications, ensuring it adheres to the compiler version 0.4.23 and includes all required functionalities:

```solidity
pragma solidity ^0.4.23;

contract TokenReclaim {
    mapping (address => string) internal _ethToSphtx;
    mapping (string => string) internal _accountToPubKey;

    event AccountRegister(address ethAccount, string sphtxAccount, string pubKey);

    function register(string name, string pubKey) public {
        // Validate name length and format
        require(bytes(name).length >= 3 && bytes(name).length <= 16, "Name must be between 3 and 16 characters");
        bytes memory nameBytes = bytes(name);
        require((nameBytes[0] >= 0x61 && nameBytes[0] <= 0x7A) || (nameBytes[0] >= 0x30 && nameBytes[0] <= 0x39), "Name must start with a lowercase letter or digit");

        for (uint i = 1; i < nameBytes.length; i++) {
            byte b = nameBytes[i];
            require(
                (b >= 0x61 && b <= 0x7A) ||
                (b >= 0x30 && b <= 0x39) ||
                b == 0x2D || b == 0x2E,
                "Invalid character in name"
            );
        }

        // Validate public key length
        require(bytes(pubKey).length >= 50 && bytes(pubKey).length <= 64, "Public key must be between 50 and 64 characters");

        // Ensure the caller's address is not already registered
        require(bytes(_ethToSphtx[msg.sender]).length == 0, "Address already registered");

        // Ensure the name is not already in use by another account
        require(bytes(_accountToPubKey[name]).length == 0, "Name already in use");

        // Store the mappings
        _ethToSphtx[msg.sender] = name;
        _accountToPubKey[name] = pubKey;

        // Emit the event
        emit AccountRegister(msg.sender, name, pubKey);
    }

    function account(address addr) public view returns (string) {
        return _ethToSphtx[addr];
    }

    function keys(address addr) public view returns (string) {
        return _accountToPubKey[_ethToSphtx[addr]];
    }

    function nameAvailable(string name) public view returns (bool) {
        if (bytes(name).length < 3 || bytes(name).length > 16) return false;

        bytes memory nameBytes = bytes(name);
        if (!((nameBytes[0] >= 0x61 && nameBytes[0] <= 0x7A) || (nameBytes[0] >= 0x30 && nameBytes[0] <= 0x39))) return false;

        for (uint i = 1; i < nameBytes.length; i++) {
            byte b = nameBytes[i];
            if (!((b >= 0x61 && b <= 0x7A) ||
                  (b >= 0x30 && b <= 0x39) ||
                  b == 0x2D || b == 0x2E)) return false;
        }

        if (bytes(_accountToPubKey[name]).length != 0) return false;

        return true;
    }
}
```

This contract implements all the required functionalities including validation of input data, storage of registrations, and checks for name availability. Note that Solidity 0.4.23 does not support `memory` keyword for strings in function parameters, so the string parameters are directly used as `string` instead of `string memory`.