Certainly! Below is the completed `UniqlyPresale4` contract according to the specifications you've provided. I've filled in the missing implementations for each function while adhering to the given context and ensuring it complies with Solidity version 0.8.2.

```solidity
//SPDX-License-Identifier: Unlicense

pragma solidity ^0.8.2;

abstract contract IERC20 {
    function balanceOf(address _owner)
        external
        virtual
        returns (uint256 balance);

    function transfer(address _to, uint256 _value) external virtual;
}

/**
 * @title UniqlyPresale4
 * @notice A smart contract for managing a presale of a token, allowing users to contribute ETH within certain limits and time frames.
 * @dev The contract ensures that the presale is conducted within specified parameters and allows for the withdrawal of funds by users or the owner.
 */
contract UniqlyPresale4 {
    uint256 public immutable presaleLimit;
    uint256 public immutable minPerUser;
    uint256 public immutable maxPerUser;
    uint256 public immutable presaleEnd;
    uint256 constant failSafeTime = 2 weeks;
    address public owner;
    bool public presaleEnded;
    bool public presaleFailed;
    bool public presaleStarted;
    mapping(address => uint256) private balances;
    address public newOwner;

    constructor(
        uint256 _presaleLimit, 
        uint256 _minPerUser, 
        uint256 _maxPerUser, 
        uint256 _presaleEnd, 
        address _owner
    ) {
        presaleLimit = _presaleLimit;
        minPerUser = _minPerUser;
        maxPerUser = _maxPerUser;
        presaleEnd = _presaleEnd;
        owner = _owner;
    }

    receive() external payable {
        require(presaleStarted, "Presale not started");
        require(!presaleEnded, "Presale ended");
        require(block.timestamp < presaleEnd, "Presale time's up");

        uint256 amount = msg.value + balances[msg.sender];
        require(amount >= minPerUser, "Below buy-in");
        require(amount <= maxPerUser, "Over buy-in");
        balances[msg.sender] = amount;

        if (collected() >= presaleLimit) {
            presaleEnded = true;
        }
    }

    function start() external {
        require(msg.sender == owner, "Not owner");
        require(!presaleStarted, "Presale already started");
        presaleStarted = true;
    }

    function balanceOf(address user) external view returns (uint256) {
        return balances[user];
    }

    function balanceOf() external view returns (uint256) {
        return balances[msg.sender];
    }

    function collected() public view returns (uint256) {
        return address(this).balance;
    }

    function withdraw() external returns (bool) {
        if (!presaleEnded && block.timestamp > presaleEnd + failSafeTime) {
            presaleFailed = true;
        }

        if (presaleFailed) {
            uint256 refund = balances[msg.sender];
            if (refund > 0) {
                balances[msg.sender] = 0;
                return send(msg.sender, refund);
            }
        } else if (presaleEnded && msg.sender == owner) {
            uint256 amount = collected();
            if (amount > 0) {
                return send(owner, amount);
            }
        }
        return false;
    }

    function send(address user, uint256 amount) private returns (bool) {
        (bool sent,) = user.call{value: amount}("");
        return sent;
    }

    function withdrawAnyERC20(IERC20 token) external {
        require(msg.sender == owner, "Not owner");
        uint256 balance = token.balanceOf(address(this));
        if (balance > 0) {
            token.transfer(owner, balance);
        }
    }

    function giveOwnership(address _newOwner) external {
        require(msg.sender == owner, "Not owner");
        newOwner = _newOwner;
    }

    function acceptOwnership() external {
        require(msg.sender == newOwner, "Not new owner");
        owner = newOwner;
        newOwner = address(0);
    }
}
```

This contract now includes all the necessary functionality:
- Starting and ending the presale based on criteria.
- Tracking and limiting individual user contributions.
- Handling fund withdrawals by both users and the owner based on the presale state.
- Allowing the owner to retrieve any mistakenly sent ERC20 tokens.
- Safely transferring ownership through a two-step process.