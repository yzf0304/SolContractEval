Below is the complete implementation of the `WIN` token contract using the `SafeMath` library for safe arithmetic operations. The contract includes the necessary functions for transferring, approving, and burning tokens as per the provided specifications.

```solidity
// Below are some contexts potentially relevant to contract code generation.

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

/**
 * @title WIN Token Contract
 * @notice This contract implements a basic ERC20 token with additional functionality for burning tokens.
 * @dev The contract uses SafeMath to prevent overflows and underflows.
 */
contract WIN {
    
    using SafeMath for uint256;
    
    uint256 constant private MAX_UINT256 = 2**256 - 1;

    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    address public owner;

    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Burn(address indexed _from, uint256 value);

    /**
     * @notice Initializes the token with an initial supply, name, decimal units, and symbol.
     * @param _initialSupply The initial supply of tokens.
     * @param _tokenName The name of the token.
     * @param _decimalUnits The number of decimal units for the token.
     * @param _tokenSymbol The symbol of the token.
     * @dev Sets the initial supply, assigns it to the contract creator, and sets the token details.
     */
    constructor(uint256 _initialSupply, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {
        name = _tokenName;                                   
        symbol = _tokenSymbol;
        decimals = _decimalUnits;                            
        totalSupply = _initialSupply;                        
        balanceOf[msg.sender] = _initialSupply;
        owner = msg.sender;
    }

    /**
     * @notice Transfers a specified amount of tokens from the sender to a recipient.
     * @param _to The recipient address.
     * @param _value The amount of tokens to transfer.
     * @return A boolean indicating if the transfer was successful.
     * @dev Ensures the recipient address is valid, the value is positive, and the sender has sufficient balance.
     */
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid recipient address");
        require(_value > 0, "Value must be positive");
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        balanceOf[_to] = balanceOf[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @notice Transfers a specified amount of tokens on behalf of another address.
     * @param _from The address to transfer tokens from.
     * @param _to The recipient address.
     * @param _value The amount of tokens to transfer.
     * @return A boolean indicating if the transfer was successful.
     * @dev Ensures the recipient address is valid, the value is positive, the sender has sufficient allowance, and the sender has sufficient balance.
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid recipient address");
        require(_value > 0, "Value must be positive");
        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
        balanceOf[_from] = balanceOf[_from].sub(_value);
        balanceOf[_to] = balanceOf[_to].add(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @notice Approves a spender to spend a specified amount of tokens on behalf of the sender.
     * @param _spender The address that will spend the tokens.
     * @param _value The amount of tokens to approve.
     * @return A boolean indicating if the approval was successful.
     * @dev Ensures the value is positive.
     */
    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(_value > 0, "Value must be positive");
        allowance[msg.sender][_spender] = _value;
        // event Approval(address indexed _owner, address indexed _spender, uint256 _value);
        return true;
    }

    /**
     * @notice Burns a specified amount of tokens from the sender's balance.
     * @param _value The amount of tokens to burn.
     * @return A boolean indicating if the burn was successful.
     * @dev Ensures the sender has sufficient balance and the value is positive.
     */
    function burn(uint256 _value) public returns (bool success) {
        require(_value > 0, "Value must be positive");
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        totalSupply = totalSupply.sub(_value);
        emit Burn(msg.sender, _value);
        return true;
    }
}
```

This contract adheres to the ERC20 standard functionalities while incorporating safe arithmetic operations via the `SafeMath` library. It includes the necessary constructors and methods for initializing the token, transferring tokens, approving transfers, and burning tokens.