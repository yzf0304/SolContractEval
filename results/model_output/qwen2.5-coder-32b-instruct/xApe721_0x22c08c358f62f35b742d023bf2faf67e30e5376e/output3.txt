Below is the completed `xApe721` contract, implementing the described functionality:

```solidity
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity 0.8.10;

import "./ERC721.sol";
import "./Ownable.sol";
import "./IERC721.sol";
import "./Strings.sol";

contract xApe721 is Ownable, ERC721 {
  using Strings for uint256;

  uint256 public constant TOTAL_SUPPLY = 10_000;
  uint256 public constant PRICE_PER_MINT = 0.05 ether;
  uint256 public constant MAX_MINT_PER_TX = 20;
  bool public mintActive;
  uint256 public totalSupply;
  uint256 internal nextMintableId = 10038;
  string public baseURI;
  IERC721 public oldContract;
  address private teamWallet;

  constructor(
    string memory name,
    string memory symbol,
    string memory _baseURI,
    address _oldContract,
    address[] memory recipients,
    uint256[] memory tokens
  ) payable ERC721(name, symbol) {
    require(recipients.length == tokens.length, "Airdrop lengths");
    baseURI = _baseURI;

    if (_oldContract != address(0)) {
      oldContract = IERC721(_oldContract);
    }

    uint256 length = tokens.length;

    for (uint i; i < length; ++i) {
      _mint(recipients[i], tokens[i]);
      totalSupply++;
    }
  }

  modifier onlyTeamWallet() {
    require(msg.sender == teamWallet, "Not callable except by team wallet");
    _;
  }

  function mint(uint16 amount) external payable {
    require(mintActive, "Minting is paused");
    require(amount > 0 && amount <= MAX_MINT_PER_TX, "Invalid mint amount");
    require(msg.value >= amount * PRICE_PER_MINT, "Insufficient payment");
    require(totalSupply + amount <= TOTAL_SUPPLY, "Exceeds total supply");

    for (uint i; i < amount; i++) {
      _mint(msg.sender, _getNextUnusedID());
      totalSupply++;
    }
  }

  function claim(uint256 tokenId) external payable {
    require(_ownsOldToken(msg.sender, tokenId), "Not the token owner in old contract");
    require(ownerOf[tokenId] == address(0), "Token already claimed");

    _mint(msg.sender, tokenId);
    totalSupply++;
  }

  function claimAll() external payable {
    uint256[] memory oldTokens = oldContract.getPhunksBelongingToOwner(msg.sender);

    for (uint i; i < oldTokens.length; i++) {
      uint256 tokenId = oldTokens[i];
      require(ownerOf[tokenId] == address(0), "Token already claimed");

      _mint(msg.sender, tokenId);
      totalSupply++;
    }
  }

  function _ownsOldToken(address account, uint256 tokenId) internal view returns(bool) {
    try oldContract.ownerOf(tokenId) returns (address owner) {
      return owner == account;
    } catch {
      return false;
    }
  }

  function _getNextUnusedID() internal returns (uint256) {
    require(nextMintableId <= TOTAL_SUPPLY, "No more tokens to mint");
    return nextMintableId++;
  }

  function tokenURI(uint256 id) public view override returns (string memory) {
    require(ownerOf[id] != address(0), "Token ID does not exist");
    return string(abi.encodePacked(baseURI, id.toString()));
  }

  function withdraw() external onlyTeamWallet() {
    SafeTransferLib.safeTransferETH(teamWallet, address(this).balance);
  }

  function pauseMint() external onlyOwner {
    mintActive = false;
  }

  function startMint() external onlyOwner {
    mintActive = true;
  }

  function setBaseURI(string memory _baseURI) external onlyOwner {
    baseURI = _baseURI;
  }

  function supportsInterface(bytes4 interfaceId)
    public
    pure
    override
    returns (bool)
  {
    return super.supportsInterface(interfaceId) || interfaceId == type(IERC721).interfaceId;
  }

  function onERC721Received(
      address,
      address,
      uint256,
      bytes calldata
  ) external returns (bytes4) {
    return ERC721TokenReceiver.onERC721Received.selector;
  }
}
```

### Key Points Implemented:
- **Minting Logic**: The `mint` function allows users to mint new tokens up to a defined limit per transaction and up to the total supply.
- **Claiming Logic**: The `claim` and `claimAll` functions enable users to migrate tokens from an older contract to the new one.
- **Ownership Check**: The `_ownsOldToken` function verifies ownership of tokens in the old contract before allowing claims.
- **Token Tracking**: The `_getNextUnusedID` function helps in assigning the correct token ID to a new token.
- **Metadata**: The `tokenURI` function constructs the metadata URI for each token based on the base URI and the token ID.
- **Security Functions**: Functions like `pauseMint`, `startMint`, and `withdraw` provide control over the minting process and allow for the withdrawal of funds to the team wallet.
- **SupportsInterface**: Ensures the contract supports necessary interfaces as per ERC721 standards.

This contract assumes that all referenced libraries and interfaces are correctly imported and defined elsewhere in your project.