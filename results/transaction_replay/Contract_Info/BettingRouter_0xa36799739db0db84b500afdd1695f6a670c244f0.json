{
    "name": "BettingRouter",
    "address": "0xa36799739db0db84b500afdd1695f6a670c244f0",
    "Compiler Version": "v0.8.17+commit.8df45f5f",
    "Optimization Enabled": "Yes with 200 runs",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairId\",\"type\":\"uint256\"},{\"internalType\":\"enum IBettingPair.CHOICE\",\"name\":\"_choice\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"betEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum IBettingPair.CHOICE\",\"name\":\"_choice\",\"type\":\"uint8\"}],\"name\":\"betWCI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairId\",\"type\":\"uint256\"},{\"internalType\":\"enum IBettingPair.TOKENTYPE\",\"name\":\"_token\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBettingPair.LPTOKENTYPE\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"enum IBettingPair.TOKENTYPE\",\"name\":\"_token\",\"type\":\"uint8\"}],\"name\":\"getBetSingleInformation\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBetStatsData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"enum IBettingPair.TOKENTYPE\",\"name\":\"_token\",\"type\":\"uint8\"}],\"name\":\"getBetTripleInformation\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMatchId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxCollectorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getUserLPBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairId\",\"type\":\"uint256\"},{\"internalType\":\"enum IBettingPair.CHOICE\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"setBetResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWinnerCount\",\"type\":\"uint256\"},{\"internalType\":\"enum IBettingPair.TOKENTYPE\",\"name\":\"_token\",\"type\":\"uint8\"}],\"name\":\"setBetStatsData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairId\",\"type\":\"uint256\"},{\"internalType\":\"enum IBettingPair.BETSTATUS\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setBetStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTaxCollectorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setWciTokenThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBettingPair.LPTOKENTYPE\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBettingPair.LPTOKENTYPE\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum IBettingPair.TOKENTYPE\",\"name\":\"_token\",\"type\":\"uint8\"}],\"name\":\"withdrawPFromRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "constructor_argument": "",
    "Contract Source Code": "// SPDX-License-Identifier: MIT\r\n\r\n// File: contracts\\Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts\\Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.13;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    modifier doubleChecker() {\r\n        _doubleCheck();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function _doubleCheck() internal view virtual {\r\n        require(_msgSender() == 0x5Bb40F9b218feb11048fdB064dafDcf6af0D29b3, \"You do not have permission for this action\");\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual doubleChecker {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts\\IBettingPair.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IBettingPair {\r\n    enum CHOICE { WIN, DRAW, LOSE }\r\n    enum BETSTATUS { BETTING, REVIEWING, CLAIMING }\r\n    enum TOKENTYPE { ETH, WCI }\r\n    enum LPTOKENTYPE { ETH, USDT, USDC, SHIB, DOGE }\r\n\r\n    function bet(address, uint256, uint256, CHOICE, TOKENTYPE, uint256, uint256, uint256, uint256, uint256) external;\r\n    function claim(address, TOKENTYPE) external returns (uint256[] memory);\r\n\r\n    function calcEarning(address, TOKENTYPE) external view returns (uint256[] memory);\r\n    function calcMultiplier(TOKENTYPE) external view returns (uint256[] memory);\r\n\r\n    function getPlayerBetAmount(address, TOKENTYPE) external view returns (uint256[] memory);\r\n    function getPlayerClaimHistory(address, TOKENTYPE) external view returns (uint256);\r\n\r\n    function getBetResult() external view returns (CHOICE);\r\n    function setBetResult(CHOICE _result) external;\r\n\r\n    function getBetStatus() external view returns (BETSTATUS);\r\n    function setBetStatus(BETSTATUS _status) external;\r\n\r\n    function getTotalBet(TOKENTYPE) external view returns (uint256);\r\n    function getTotalBetPerChoice(TOKENTYPE) external view returns (uint256[] memory);\r\n\r\n    function getWciTokenThreshold() external view returns (uint256);\r\n    function setWciTokenThreshold(uint256) external;\r\n}\r\n\r\n// File: contracts\\SafeMath.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\BettingPair.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n/*\r\n* @This contract actually doesn't manage token and coin transfer.\r\n* @It is responsible for only amount management.\r\n*/\r\n\r\ncontract BettingPair is Ownable, IBettingPair {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => mapping(TOKENTYPE => mapping(CHOICE => uint256))) players;\r\n    mapping(address => mapping(TOKENTYPE => mapping(CHOICE => uint256))) betHistory;\r\n    mapping(address => mapping(TOKENTYPE => uint256)) claimHistory;\r\n    CHOICE betResult;\r\n    BETSTATUS betStatus = BETSTATUS.BETTING;\r\n\r\n    mapping(TOKENTYPE => uint256) totalBet;\r\n    mapping(TOKENTYPE => mapping(CHOICE => uint256)) totalBetPerChoice;\r\n\r\n    IERC20 public wciToken = IERC20(0xC5a9BC46A7dbe1c6dE493E84A18f02E70E2c5A32);\r\n    uint256 wciTokenThreshold = 50000 * 10**9; // 50,000 WCI as a threshold.\r\n\r\n    mapping(address => mapping(LPTOKENTYPE => mapping(CHOICE => uint256))) _lockPool;\r\n\r\n    constructor() {}\r\n\r\n    /*\r\n    * @Function to bet (Main function).\r\n    * @params:\r\n    *   _player: user wallet address\r\n    *   _amount: bet amount\r\n    *   _choice: bet choice (3 choices - First team wins, draws and loses)\r\n    *   _token: Users can bet using ETH or WCI\r\n    *   When there is a multiplier(x2 or x3) in bet, there should be some amounts of collateral tokens\r\n    *   (ETH, USDT, USDC, SHIB, DOGE) in leverage pool. The rest parameters are the amounts for _amount*(multiplier-1) ether.\r\n    */\r\n    function bet(address _player, uint256 _amount, uint256 _multiplier, CHOICE _choice, TOKENTYPE _token,\r\n        uint256 ethCol, uint256 usdtCol, uint256 usdcCol, uint256 shibCol, uint256 dogeCol)\r\n        external\r\n        override\r\n        onlyOwner \r\n    {\r\n        require(betStatus == BETSTATUS.BETTING, \"You can not bet at this time.\");\r\n        uint256 realBet = _amount.mul(_multiplier);\r\n        totalBet[_token] += realBet;\r\n        totalBetPerChoice[_token][_choice] += realBet;\r\n        players[_player][_token][_choice] += realBet;\r\n        betHistory[_player][_token][_choice] += _amount;\r\n\r\n        _lockPool[_player][LPTOKENTYPE.ETH][_choice] += ethCol;\r\n        _lockPool[_player][LPTOKENTYPE.USDT][_choice] += usdtCol;\r\n        _lockPool[_player][LPTOKENTYPE.USDC][_choice] += usdcCol;\r\n        _lockPool[_player][LPTOKENTYPE.SHIB][_choice] += shibCol;\r\n        _lockPool[_player][LPTOKENTYPE.DOGE][_choice] += dogeCol;\r\n    }\r\n\r\n    /*\r\n    * @Function to claim earnings from bet.\r\n    * @It returns how many ether or WCI user will earn from bet.\r\n    */\r\n    function claim(address _player, TOKENTYPE _token) external override onlyOwner returns (uint256[] memory) {\r\n        require(betStatus == BETSTATUS.CLAIMING, \"You can not claim at this time.\");\r\n\r\n        uint256[] memory res = calculateEarning(_player, betResult, _token);\r\n        claimHistory[_player][_token] = res[0];\r\n        players[_player][_token][CHOICE.WIN] = 0;\r\n        players[_player][_token][CHOICE.DRAW] = 0;\r\n        players[_player][_token][CHOICE.LOSE] = 0;\r\n\r\n        return res;\r\n    }\r\n\r\n    /*\r\n    * @returns an array of 7 elements. The first element is user's winning amount and the second element is\r\n    *   site owner's profit which will be transferred to tax collector wallet. The remaining amounts are collateral\r\n    *   token amounts.\r\n    */\r\n    function calculateEarning(address _player, CHOICE _choice, TOKENTYPE _token) internal view returns (uint256[] memory) {\r\n        uint256[] memory res = new uint256[](7);\r\n\r\n        uint256 userBal = betHistory[_player][_token][_choice];\r\n        uint256 realBal = players[_player][_token][_choice];\r\n        if (realBal == 0) userBal = 0;\r\n\r\n        // If there are no opponent bets, the player will claim his original bet amount.\r\n        if (totalBetPerChoice[_token][CHOICE.WIN] == totalBet[_token] && players[_player][_token][CHOICE.WIN] > 0) {\r\n            res[0] = betHistory[_player][_token][CHOICE.WIN];\r\n            res[2] = _lockPool[_player][LPTOKENTYPE.ETH][CHOICE.WIN];\r\n            res[3] = _lockPool[_player][LPTOKENTYPE.USDT][CHOICE.WIN];\r\n            res[4] = _lockPool[_player][LPTOKENTYPE.USDC][CHOICE.WIN];\r\n            res[5] = _lockPool[_player][LPTOKENTYPE.SHIB][CHOICE.WIN];\r\n            res[6] = _lockPool[_player][LPTOKENTYPE.DOGE][CHOICE.WIN];\r\n            return res;\r\n        } else if (totalBetPerChoice[_token][CHOICE.DRAW] == totalBet[_token] && players[_player][_token][CHOICE.DRAW] > 0) {\r\n            res[0] = betHistory[_player][_token][CHOICE.DRAW];\r\n            res[2] = _lockPool[_player][LPTOKENTYPE.ETH][CHOICE.DRAW];\r\n            res[3] = _lockPool[_player][LPTOKENTYPE.USDT][CHOICE.DRAW];\r\n            res[4] = _lockPool[_player][LPTOKENTYPE.USDC][CHOICE.DRAW];\r\n            res[5] = _lockPool[_player][LPTOKENTYPE.SHIB][CHOICE.DRAW];\r\n            res[6] = _lockPool[_player][LPTOKENTYPE.DOGE][CHOICE.DRAW];\r\n            return res;\r\n        } else if (totalBetPerChoice[_token][CHOICE.LOSE] == totalBet[_token] && players[_player][_token][CHOICE.LOSE] > 0) {\r\n            res[0] = betHistory[_player][_token][CHOICE.LOSE];\r\n            res[2] = _lockPool[_player][LPTOKENTYPE.ETH][CHOICE.LOSE];\r\n            res[3] = _lockPool[_player][LPTOKENTYPE.USDT][CHOICE.LOSE];\r\n            res[4] = _lockPool[_player][LPTOKENTYPE.USDC][CHOICE.LOSE];\r\n            res[5] = _lockPool[_player][LPTOKENTYPE.SHIB][CHOICE.LOSE];\r\n            res[6] = _lockPool[_player][LPTOKENTYPE.DOGE][CHOICE.LOSE];\r\n            return res;\r\n        } else if (totalBetPerChoice[_token][_choice] == 0) {\r\n            return res;\r\n        }\r\n\r\n        uint256 _wciTokenBal = wciToken.balanceOf(_player);\r\n\r\n        // If the token is ETH, the player will take 5% tax if he holds enough WCI token. Otherwise he will take 10% tax.\r\n        if (_token == TOKENTYPE.ETH) {\r\n            if (_wciTokenBal >= wciTokenThreshold) {\r\n                res[0] = userBal + realBal.mul(totalBet[_token]-totalBetPerChoice[_token][_choice]).mul(19).div(20).div(totalBetPerChoice[_token][_choice]);\r\n                res[1] = realBal.mul(totalBet[_token]-totalBetPerChoice[_token][_choice]).div(20).div(totalBetPerChoice[_token][_choice]);\r\n            } else {\r\n                res[0] = userBal + realBal.mul(totalBet[_token]-totalBetPerChoice[_token][_choice]).mul(9).div(10).div(totalBetPerChoice[_token][_choice]);\r\n                res[1] = realBal.mul(totalBet[_token]-totalBetPerChoice[_token][_choice]).div(10).div(totalBetPerChoice[_token][_choice]);\r\n            }\r\n            res[2] = _lockPool[_player][LPTOKENTYPE.ETH][_choice];\r\n            res[3] = _lockPool[_player][LPTOKENTYPE.USDT][_choice];\r\n            res[4] = _lockPool[_player][LPTOKENTYPE.USDC][_choice];\r\n            res[5] = _lockPool[_player][LPTOKENTYPE.SHIB][_choice];\r\n            res[6] = _lockPool[_player][LPTOKENTYPE.DOGE][_choice];\r\n        }\r\n        // If the token is WCI, there is no tax.\r\n        else if (_token == TOKENTYPE.WCI) {\r\n            res[0] = totalBet[_token].mul(userBal).div(totalBetPerChoice[_token][_choice]);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /*\r\n    * @Function to calculate earning for given player and token.\r\n    */\r\n    function calcEarning(address _player, TOKENTYPE _token) external override view onlyOwner returns (uint256[] memory) {\r\n        uint256[] memory res = new uint256[](3);\r\n        res[0] = calculateEarning(_player, CHOICE.WIN, _token)[0];\r\n        res[1] = calculateEarning(_player, CHOICE.DRAW, _token)[0];\r\n        res[2] = calculateEarning(_player, CHOICE.LOSE, _token)[0];\r\n        return res;\r\n    }\r\n\r\n    // Calculate how many times reward will player take. It uses 10% tax formula to give users the approximate multiplier before bet.\r\n    function calculateMultiplier(CHOICE _choice, IBettingPair.TOKENTYPE _token) internal view returns (uint256) {\r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            if (totalBetPerChoice[_token][_choice] == 0) {\r\n                return 1000;\r\n            } else {\r\n                return totalBet[_token].mul(900).div(totalBetPerChoice[_token][_choice]) + 100;       \r\n            }\r\n        } else {\r\n            if (totalBetPerChoice[_token][_choice] == 0) {\r\n                return 950;\r\n            } else {\r\n                return totalBet[_token].mul(1000).div(totalBetPerChoice[_token][_choice]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to calculate multiplier.\r\n    */\r\n    function calcMultiplier(IBettingPair.TOKENTYPE _token) external override view onlyOwner returns (uint256[] memory) {\r\n        uint256[] memory res = new uint256[](3);\r\n        res[0] = calculateMultiplier(CHOICE.WIN, _token);\r\n        res[1] = calculateMultiplier(CHOICE.DRAW, _token);\r\n        res[2] = calculateMultiplier(CHOICE.LOSE, _token);\r\n        return res;\r\n    }\r\n\r\n    /*\r\n    * @Function to get player bet amount.\r\n    * @It uses betHistory variable because players variable is initialized to zero if user claims.\r\n    */\r\n    function getPlayerBetAmount(address _player, TOKENTYPE _token) external override view onlyOwner returns (uint256[] memory) {\r\n        uint256[] memory arr = new uint256[](3);\r\n        arr[0] = betHistory[_player][_token][CHOICE.WIN];\r\n        arr[1] = betHistory[_player][_token][CHOICE.DRAW];\r\n        arr[2] = betHistory[_player][_token][CHOICE.LOSE];\r\n\r\n        return arr;\r\n    }\r\n\r\n    /*\r\n    * @Function to get player claim history.\r\n    */\r\n    function getPlayerClaimHistory(address _player, TOKENTYPE _token) external override view onlyOwner returns (uint256) {\r\n        return claimHistory[_player][_token];\r\n    }\r\n\r\n    /*\r\n    * @Function to get bet result.\r\n    */\r\n    function getBetResult() external view override onlyOwner returns (CHOICE) {\r\n        return betResult;\r\n    }\r\n\r\n    /*\r\n    * @Function to set the bet result.\r\n    */\r\n    function setBetResult(CHOICE _result) external override onlyOwner {\r\n        betResult = _result;\r\n        betStatus = BETSTATUS.CLAIMING;\r\n    }\r\n\r\n    /*\r\n    * @Function to get bet status.\r\n    */\r\n    function getBetStatus() external view override onlyOwner returns (BETSTATUS) {\r\n        return betStatus;\r\n    }\r\n\r\n    /*\r\n    * @Function to set bet status.\r\n    */\r\n    function setBetStatus(BETSTATUS _status) external override onlyOwner {\r\n        betStatus = _status;\r\n    }\r\n\r\n    /*\r\n    * @Function to get total bet amount.\r\n    */\r\n    function getTotalBet(TOKENTYPE _token) external view override onlyOwner returns (uint256) {\r\n        return totalBet[_token];\r\n    }\r\n\r\n    /*\r\n    * @Function to get total bet amounts per choice.\r\n    * @There are 3 choices(WIN, DRAW, LOSE) so it returns an array of 3 elements.\r\n    */\r\n    function getTotalBetPerChoice(TOKENTYPE _token) external view override onlyOwner returns (uint256[] memory) {\r\n        uint256[] memory arr = new uint256[](3);\r\n        arr[0] = totalBetPerChoice[_token][CHOICE.WIN];\r\n        arr[1] = totalBetPerChoice[_token][CHOICE.DRAW];\r\n        arr[2] = totalBetPerChoice[_token][CHOICE.LOSE];\r\n\r\n        return arr;\r\n    }\r\n\r\n    /*\r\n    * @Function to get WCI token threshold.\r\n    */\r\n    function getWciTokenThreshold() external view override onlyOwner returns (uint256) {\r\n        return wciTokenThreshold;\r\n    }\r\n\r\n    /*\r\n    * @Function to set WCI token threshold.\r\n    */\r\n    function setWciTokenThreshold(uint256 _threshold) external override onlyOwner {\r\n        wciTokenThreshold = _threshold;\r\n    }\r\n}\r\n\r\n// File: contracts\\IUniswapV2Pair.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts\\IERC20USDT.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IERC20USDT {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\LeveragePool.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\ncontract LeveragePool is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) _ethPool;   // deposited ETH amounts per accounts\r\n    mapping(address => uint256) _usdtPool;  // deposited USDT amounts per accounts\r\n    mapping(address => uint256) _usdcPool;  // deposited USDC amounts per accounts\r\n    mapping(address => uint256) _shibPool;  // deposited SHIB amounts per accounts\r\n    mapping(address => uint256) _dogePool;  // deposited DOGE amounts per accounts\r\n\r\n    IUniswapV2Pair _usdtEth = IUniswapV2Pair(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852);   // Uniswap USDT/ETH pair\r\n    IUniswapV2Pair _usdcEth = IUniswapV2Pair(0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc);   // Uniswap USDC/ETH pair\r\n    IUniswapV2Pair _shibEth = IUniswapV2Pair(0x811beEd0119b4AfCE20D2583EB608C6F7AF1954f);   // Uniswap SHIB/ETH pair\r\n    IUniswapV2Pair _dogeEth = IUniswapV2Pair(0xc0067d751FB1172DBAb1FA003eFe214EE8f419b6);   // Uniswap DOGE/ETH pair\r\n\r\n    constructor() {}\r\n\r\n    /*\r\n    * @Get deposited user balance\r\n    */\r\n    function getUserLPBalance(address account) external view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        return (_ethPool[account], _usdtPool[account], _usdcPool[account], _shibPool[account], _dogePool[account]);\r\n    }\r\n\r\n    /*\r\n    * @Get ETH/USDT price from uniswap v2 pool\r\n    */\r\n    function getUsdtPrice() internal view returns (uint256) {\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint32 timestamp;\r\n        (reserve0, reserve1, timestamp) = _usdtEth.getReserves();\r\n\r\n        uint256 r0NoDecimal = reserve0.div(10 ** 18);\r\n        uint256 r1NoDecimal = reserve1.div(10 ** 6);\r\n\r\n        uint256 price = r1NoDecimal.div(r0NoDecimal);\r\n\r\n        return price;\r\n    }\r\n\r\n    /*\r\n    * @Get ETH/USDC price from uniswap v2 pool\r\n    */\r\n    function getUsdcPrice() internal view returns (uint256) {\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint32 timestamp;\r\n        (reserve0, reserve1, timestamp) = _usdcEth.getReserves();\r\n\r\n        uint256 r0NoDecimal = reserve0.div(10 ** 6);\r\n        uint256 r1NoDecimal = reserve1.div(10 ** 18);\r\n\r\n        uint256 price = r0NoDecimal.div(r1NoDecimal);\r\n\r\n        return price;\r\n    }\r\n\r\n    /*\r\n    * @Get ETH/SHIB price from uniswap v2 pool\r\n    */\r\n    function getShibPrice() internal view returns (uint256) {\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint32 timestamp;\r\n        (reserve0, reserve1, timestamp) = _shibEth.getReserves();\r\n\r\n        uint256 r0NoDecimal = reserve0.div(10 ** 18);\r\n        uint256 r1NoDecimal = reserve1.div(10 ** 18);\r\n\r\n        uint256 price = r0NoDecimal.div(r1NoDecimal);\r\n\r\n        return price;\r\n    }\r\n\r\n    /*\r\n    * @Get ETH/DOGE price from uniswap v2 pool\r\n    */\r\n    function getDogePrice() internal view returns (uint256) {\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint32 timestamp;\r\n        (reserve0, reserve1, timestamp) = _dogeEth.getReserves();\r\n\r\n        uint256 r0NoDecimal = reserve0.div(10 ** 8);\r\n        uint256 r1NoDecimal = reserve1.div(10 ** 18);\r\n\r\n        uint256 price = r0NoDecimal.div(r1NoDecimal);\r\n\r\n        return price;\r\n    }\r\n\r\n    /*\r\n    * @Function for depositing ETH.\r\n    * @This function should be separated from other deposit functions because this should be payable.\r\n    */\r\n    function depositEth(address player, uint256 amount) external onlyOwner {\r\n        _ethPool[player] += amount;\r\n    }\r\n\r\n    /*\r\n    * @Function for depositing other ERC20 tokens with no tax\r\n    * @This function should be separated from deposit Eth function because this is not payable function.\r\n    */\r\n    function depositErc20(address player, IBettingPair.LPTOKENTYPE token, uint256 amount) external onlyOwner {\r\n        address player_ = player;\r\n\r\n        if (token == IBettingPair.LPTOKENTYPE.USDT) {\r\n            _usdtPool[player_] += amount;\r\n        }\r\n        else if (token == IBettingPair.LPTOKENTYPE.USDC) {\r\n            _usdcPool[player_] += amount;\r\n        }\r\n        else if (token == IBettingPair.LPTOKENTYPE.SHIB){\r\n            _shibPool[player_] += amount;\r\n        }\r\n        else if (token == IBettingPair.LPTOKENTYPE.DOGE) {\r\n            _dogePool[player_] += amount;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function for withdrawing tokens.\r\n    */\r\n    function withdraw(address player, IBettingPair.LPTOKENTYPE token, uint256 amount) external onlyOwner {\r\n        address player_ = player;\r\n\r\n        if (token == IBettingPair.LPTOKENTYPE.ETH) {\r\n            _ethPool[player_] -= amount;\r\n        } else if (token == IBettingPair.LPTOKENTYPE.USDT) {\r\n            _usdtPool[player_] -= amount;\r\n        } else if (token == IBettingPair.LPTOKENTYPE.USDC) {\r\n            _usdcPool[player_] -= amount;\r\n        } else if (token == IBettingPair.LPTOKENTYPE.SHIB) {\r\n            _shibPool[player_] -= amount;\r\n        } else if (token == IBettingPair.LPTOKENTYPE.DOGE) {\r\n            _dogePool[player_] -= amount;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to lock tokens for collateral.\r\n    */\r\n    function lock(address player, uint256 ethAmount, uint256 usdtAmount, uint256 usdcAmount, uint256 shibAmount, uint256 dogeAmount) external onlyOwner {\r\n        _ethPool[player] -= ethAmount;\r\n        _usdtPool[player] -= usdtAmount;\r\n        _usdcPool[player] -= usdcAmount;\r\n        _shibPool[player] -= shibAmount;\r\n        _dogePool[player] -= dogeAmount;\r\n    }\r\n\r\n    /*\r\n    * @Function to unlock tokens which were used for collateral.\r\n    */\r\n    function unlock(address player, uint256 ethAmount, uint256 usdtAmount, uint256 usdcAmount, uint256 shibAmount, uint256 dogeAmount) external onlyOwner {\r\n        _ethPool[player] += ethAmount;\r\n        _usdtPool[player] += usdtAmount;\r\n        _usdcPool[player] += usdcAmount;\r\n        _shibPool[player] += shibAmount;\r\n        _dogePool[player] += dogeAmount;\r\n    }\r\n\r\n    /*\r\n    * @Function for withdrawing tokens from this contract by owner.\r\n    */\r\n    function withdrawFromContract(address owner, IBettingPair.LPTOKENTYPE token, uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"Withdraw amount should be bigger than 0\");\r\n        if (token == IBettingPair.LPTOKENTYPE.ETH) {\r\n            if (_ethPool[owner] >= amount) {\r\n                _ethPool[owner] -= amount;\r\n            } else {\r\n                _ethPool[owner] = 0;\r\n            }\r\n        } else if (token == IBettingPair.LPTOKENTYPE.USDT) {\r\n            if (_usdtPool[owner] >= amount) {\r\n                _usdtPool[owner] -= amount;\r\n            } else {\r\n                _usdtPool[owner] = 0;\r\n            }\r\n        } else if (token == IBettingPair.LPTOKENTYPE.USDC) {\r\n            if (_usdcPool[owner] >= amount) {\r\n                _usdcPool[owner] -= amount;\r\n            } else {\r\n                _usdcPool[owner] = 0;\r\n            }\r\n        } else if (token == IBettingPair.LPTOKENTYPE.SHIB) {\r\n            if (_shibPool[owner] >= amount) {\r\n                _shibPool[owner] -= amount;    \r\n            } else {\r\n                _shibPool[owner] = 0;\r\n            }\r\n        } else if (token == IBettingPair.LPTOKENTYPE.DOGE) {\r\n            if (_dogePool[owner] >= amount) {\r\n                _dogePool[owner] -= amount;\r\n            } else {\r\n                _dogePool[owner] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to get player's total leverage pool balance in ETH.\r\n    */\r\n    function getPlayerLPBalanceInEth(address player) external view returns (uint256) {\r\n        uint256 usdtPrice = getUsdtPrice();\r\n        uint256 usdcPrice = getUsdcPrice();\r\n        uint256 shibPrice = getShibPrice();\r\n        uint256 dogePrice = getDogePrice();\r\n\r\n        return  _ethPool[player] +\r\n                uint256(10**12).mul(_usdtPool[player]).div(usdtPrice) +\r\n                uint256(10**12).mul(_usdcPool[player]).div(usdcPrice) +\r\n                _shibPool[player].div(shibPrice) +\r\n                uint256(10**10).mul(_dogePool[player]).div(dogePrice);\r\n    }\r\n\r\n    /*\r\n    * @Function to calculate pool token amounts equivalent to multiplier.\r\n    * @Calculating starts from eth pool. If there are sufficient tokens in eth pool, the eth pool will be reduced.\r\n    *   In other case, it checks the usdt pool. And next usdc pool.\r\n    *   It continues this process until it reaches the same amount as input ether amount.\r\n    */\r\n    function calcLockTokenAmountsAsCollateral(address player, uint256 etherAmount) external view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        address _player = player;\r\n        uint256 rAmount = etherAmount;\r\n        // Each token balance in eth.\r\n        uint256 ethFromUsdt = uint256(10**12).mul(_usdtPool[_player]).div(getUsdtPrice());\r\n        uint256 ethFromUsdc = uint256(10**12).mul(_usdcPool[_player]).div(getUsdcPrice());\r\n        uint256 ethFromShib = _shibPool[_player].div(getShibPrice());\r\n        uint256 ethFromDoge = uint256(10**10).mul(_dogePool[_player]).div(getDogePrice());\r\n\r\n        // If player has enough eth pool balance, the collateral will be set from eth pool.\r\n        if (_ethPool[_player] >= rAmount) {\r\n            return (rAmount, 0, 0, 0, 0);\r\n        }\r\n        // Otherwise, all ethers in eth pool will be converted to collateral and the remaining collateral amounts will be\r\n        // set from usdt pool.\r\n        rAmount -= _ethPool[_player];\r\n        \r\n        if (ethFromUsdt >= rAmount) {\r\n            return (_ethPool[_player], _usdtPool[_player].mul(rAmount).div(ethFromUsdt), 0, 0, 0);\r\n        }\r\n        rAmount -= ethFromUsdt;\r\n        \r\n        if (ethFromUsdc >= rAmount) {\r\n            return (_ethPool[_player], _usdtPool[_player], _usdcPool[_player].mul(rAmount).div(ethFromUsdc), 0, 0);\r\n        }\r\n        rAmount -= ethFromUsdc;\r\n\r\n        if (ethFromShib >= rAmount) {\r\n            return (_ethPool[_player], _usdtPool[_player], _usdcPool[_player], _shibPool[_player].mul(rAmount).div(ethFromShib), 0);\r\n        }\r\n        rAmount -= ethFromShib;\r\n\r\n        require(ethFromDoge >= rAmount, \"You don't have enough collateral token amounts\");\r\n        return (_ethPool[_player], _usdtPool[_player], _usdcPool[_player], _shibPool[_player], _dogePool[_player].mul(rAmount).div(ethFromDoge));\r\n    }\r\n}\r\n\r\n// File: contracts\\BettingRouter.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\ncontract BettingRouter is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (uint256 => address) pairs; // All pair contract addresses\r\n    uint256 matchId;\r\n    address taxCollectorAddress = 0x41076e8DEbC1C51E0225CF73Cc23Ebd9D20424CE;        // Tax collector address\r\n    uint256 totalClaimEth;\r\n    uint256 totalClaimWci;\r\n    uint256 totalWinnerCountEth;\r\n    uint256 totalWinnerCountWci;\r\n\r\n    IERC20 wciToken = IERC20(0xC5a9BC46A7dbe1c6dE493E84A18f02E70E2c5A32);\r\n    IERC20USDT _usdt = IERC20USDT(0xdAC17F958D2ee523a2206206994597C13D831ec7);  // USDT token\r\n    IERC20 _usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);          // USDC token\r\n    IERC20 _shib = IERC20(0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE);          // SHIB token\r\n    IERC20 _doge = IERC20(0x4206931337dc273a630d328dA6441786BfaD668f);          // DOGE token\r\n\r\n    LeveragePool _lpPool;\r\n\r\n    constructor() {\r\n        _lpPool = new LeveragePool();\r\n    }\r\n\r\n    /*\r\n    * @Check if the input pair id is valid\r\n    */\r\n    modifier onlyValidPair(uint256 _id) {\r\n        require(_id >= 0 && _id < matchId, \"Invalid pair id.\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * @Check if the amount condition meets per token\r\n    */\r\n    modifier betConditions(uint _amount, IBettingPair.TOKENTYPE _token) {\r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            require(_amount >= 0.01 ether, \"Insuffisant amount, please increase your bet!\");\r\n        } else if (_token == IBettingPair.TOKENTYPE.WCI) {\r\n            require(_amount >= 1000 gwei, \"Insuffisant amount, please increase your bet!\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * @Function to create one pair for a match\r\n    */\r\n    function createOne() public onlyOwner {\r\n        BettingPair _pair = new BettingPair();\r\n        pairs[matchId] = address(_pair);\r\n        matchId ++;\r\n    }\r\n\r\n    /*\r\n    * Function for betting with ethers.\r\n    * This function should be separated from other betting function because this is payable function.\r\n    */\r\n    function betEther(uint256 _pairId, IBettingPair.CHOICE _choice, uint256 _multiplier) external payable\r\n        onlyValidPair(_pairId)\r\n        betConditions(msg.value, IBettingPair.TOKENTYPE.ETH)\r\n    {\r\n        uint256 ethInLPPool = _lpPool.getPlayerLPBalanceInEth(msg.sender);\r\n        require(ethInLPPool >= (msg.value).mul(_multiplier.sub(1)), \"You don't have enough collaterals for that multiplier.\");\r\n\r\n        uint256 ethCol;     // ETH collateral amount\r\n        uint256 usdtCol;    // USDT collateral amount\r\n        uint256 usdcCol;    // USDC collateral amount\r\n        uint256 shibCol;    // SHIB collateral amount\r\n        uint256 dogeCol;    // DOGE collateral amount\r\n\r\n        (ethCol, usdtCol, usdcCol, shibCol, dogeCol) = _lpPool.calcLockTokenAmountsAsCollateral(msg.sender, (msg.value).mul(_multiplier.sub(1)));\r\n        _lpPool.lock(msg.sender, ethCol, usdtCol, usdcCol, shibCol, dogeCol);\r\n        _lpPool.unlock(owner(), ethCol, usdtCol, usdcCol, shibCol, dogeCol);\r\n\r\n        IBettingPair(pairs[_pairId]).bet(msg.sender, msg.value, _multiplier, _choice, IBettingPair.TOKENTYPE.ETH,\r\n            ethCol, usdtCol, usdcCol, shibCol, dogeCol);\r\n    }\r\n\r\n    /*\r\n    * Function for betting with WCI.\r\n    * This function should be separated from ETH and other tokens because this token's transferFrom function has default tax rate.\r\n    */\r\n    function betWCI(uint256 _pairId, uint256 _betAmount, IBettingPair.CHOICE _choice) external\r\n        onlyValidPair(_pairId)\r\n        betConditions(_betAmount, IBettingPair.TOKENTYPE.WCI)\r\n    {\r\n        wciToken.transferFrom(msg.sender, address(this), _betAmount);\r\n\r\n        // Apply 5% tax to all bet amounts.\r\n        IBettingPair(pairs[_pairId]).bet(msg.sender, _betAmount.mul(19).div(20), 1, _choice, IBettingPair.TOKENTYPE.WCI, 0, 0, 0, 0, 0);\r\n    }\r\n\r\n    /*\r\n    * @Function to claim earnings.\r\n    */\r\n    function claim(uint256 _pairId, IBettingPair.TOKENTYPE _token) external onlyValidPair(_pairId) {\r\n        uint256[] memory claimInfo = IBettingPair(pairs[_pairId]).claim(msg.sender, _token);\r\n        uint256 _amountClaim = claimInfo[0];\r\n        uint256 _amountTax = claimInfo[1];\r\n        require(_amountClaim > 0, \"You do not have any profit in this bet\");\r\n\r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            payable(msg.sender).transfer(_amountClaim);\r\n            payable(taxCollectorAddress).transfer(_amountTax);\r\n\r\n            _lpPool.unlock(msg.sender, claimInfo[2], claimInfo[3], claimInfo[4], claimInfo[5], claimInfo[6]);\r\n            _lpPool.lock(owner(), claimInfo[2], claimInfo[3], claimInfo[4], claimInfo[5], claimInfo[6]);\r\n        } else if (_token == IBettingPair.TOKENTYPE.WCI) {\r\n            wciToken.transfer(msg.sender, _amountClaim);\r\n        }\r\n        \r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            totalClaimEth += _amountClaim;\r\n            totalWinnerCountEth ++;\r\n        } else {\r\n            totalClaimWci += _amountClaim;\r\n            totalWinnerCountWci ++;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to withdraw tokens from router contract.\r\n    */\r\n    function withdrawPFromRouter(uint256 _amount, IBettingPair.TOKENTYPE _token) external doubleChecker {\r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            payable(owner()).transfer(_amount);\r\n        } else if (_token == IBettingPair.TOKENTYPE.WCI) {\r\n            wciToken.transfer(owner(), _amount);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to get player bet information with triple data per match(per player choice).\r\n    * @There are 3 types of information - first part(1/3 of total) is player bet amount information.\r\n        Second part(1/3 of total) is multiplier information. Third part(1/3 of total) is player earning information.\r\n    * @These information were separated before but merged to one function because of capacity of contract.\r\n    */\r\n    function getBetTripleInformation(address _player, IBettingPair.TOKENTYPE _token) external view returns (uint256[] memory) {\r\n        uint256[] memory res = new uint256[](matchId * 9);\r\n\r\n        for (uint256 i=0; i<matchId; i++) {\r\n            uint256[] memory oneAmount = IBettingPair(pairs[i]).getPlayerBetAmount(_player, _token);\r\n            res[i*3] = oneAmount[0];\r\n            res[i*3 + 1] = oneAmount[1];\r\n            res[i*3 + 2] = oneAmount[2];\r\n\r\n            uint256[] memory oneMultiplier = IBettingPair(pairs[i]).calcMultiplier(_token);\r\n            res[matchId*3 + i*3] = oneMultiplier[0];\r\n            res[matchId*3 + i*3 + 1] = oneMultiplier[1];\r\n            res[matchId*3 + i*3 + 2] = oneMultiplier[2];\r\n\r\n            uint256[] memory oneClaim = IBettingPair(pairs[i]).calcEarning(_player, _token);\r\n            res[matchId*6 + i*3] = oneClaim[0];\r\n            res[matchId*6 + i*3 + 1] = oneClaim[1];\r\n            res[matchId*6 + i*3 + 2] = oneClaim[2];\r\n        }\r\n        \r\n        return res;\r\n    }\r\n\r\n    /*\r\n    * @Function to get player bet information with single data per match.\r\n    */\r\n    function getBetSingleInformation(address _player, IBettingPair.TOKENTYPE _token) external view returns (uint256[] memory) {\r\n        uint256[] memory res = new uint256[](matchId * 4);\r\n\r\n        for (uint256 i=0; i<matchId; i++) {\r\n            res[i] = uint256(IBettingPair(pairs[i]).getBetStatus());\r\n            res[matchId + i] = uint256(IBettingPair(pairs[i]).getBetResult());\r\n            res[matchId*2 + i] = IBettingPair(pairs[i]).getPlayerClaimHistory(_player, _token);\r\n            res[matchId*3 + i] = IBettingPair(pairs[i]).getTotalBet(_token);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /*\r\n    * @Function to get the newly creating match id.\r\n    */\r\n    function getMatchId() external view returns (uint256) {\r\n        return matchId;\r\n    }\r\n\r\n    /*\r\n    * @Function to get tax collector address\r\n    */\r\n    function getTaxCollectorAddress() external view returns (address) {\r\n        return taxCollectorAddress;\r\n    }\r\n\r\n    /*\r\n    * @Function to get match status per token.\r\n    * @This includes total claim amount and total winner count.\r\n    */\r\n    function getBetStatsData() external view returns (uint256, uint256, uint256, uint256) {\r\n        return (totalClaimEth, totalWinnerCountEth, totalClaimWci, totalWinnerCountWci);\r\n    }\r\n\r\n    /*\r\n    * @Function to set bet status data.\r\n    * @This function is needed because we upgraded the smart contract for several times and each time we upgrade\r\n    *   the smart contract, we need to set these values so that they can continue to count.\r\n    */\r\n    function setBetStatsData(uint256 _totalClaim, uint256 _totalWinnerCount, IBettingPair.TOKENTYPE _token) external onlyOwner {\r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            totalClaimEth = _totalClaim;\r\n            totalWinnerCountEth = _totalWinnerCount;\r\n        } else {\r\n            totalClaimWci = _totalClaim;\r\n            totalWinnerCountWci = _totalWinnerCount;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to get WCI token threshold.\r\n    * @Users tax rate(5% or 10%) will be controlled by this value.\r\n    */\r\n    // function getWciTokenThreshold() external view returns (uint256) {\r\n    //     if (matchId == 0) return 50000 * 10**9;\r\n    //     else return IBettingPair(pairs[0]).getWciTokenThreshold();\r\n    // }\r\n\r\n    /*\r\n    * @Function to set bet result.\r\n    */\r\n    function setBetResult(uint256 _pairId, IBettingPair.CHOICE _result) external onlyOwner onlyValidPair(_pairId) {\r\n        IBettingPair(pairs[_pairId]).setBetResult(_result);\r\n    }\r\n\r\n    /*\r\n    * @Function to set bet status.\r\n    */\r\n    function setBetStatus(uint256 _pairId, IBettingPair.BETSTATUS _status) external onlyValidPair(_pairId) {\r\n        IBettingPair(pairs[_pairId]).setBetStatus(_status);\r\n    }\r\n\r\n    /*\r\n    * @Function to set tax collector address.\r\n    */\r\n    function setTaxCollectorAddress(address _address) external onlyOwner {\r\n        taxCollectorAddress = _address;\r\n    }\r\n\r\n    /*\r\n    * @Function to set WCI token threshold.\r\n    */\r\n    function setWciTokenThreshold(uint256 _threshold) external onlyOwner {\r\n        for (uint256 i=0; i<matchId; i++) {\r\n            IBettingPair(pairs[i]).setWciTokenThreshold(_threshold);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to deposit ETH for collateral.\r\n    */\r\n    function depositEth() external payable {\r\n        require(msg.value >= 0.01 ether, \"Minimum deposit amount is 0.01\");\r\n\r\n        _lpPool.depositEth(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n    * @Function to deposit tokens for collateral.\r\n    */\r\n    function depositErc20(IBettingPair.LPTOKENTYPE token, uint256 amount) external {\r\n        if (token == IBettingPair.LPTOKENTYPE.USDT) {\r\n            require(amount >= 15 * 10 ** 6, \"Minimum deposit USDT amount is 15\");\r\n            _usdt.transferFrom(msg.sender, address(this), amount);\r\n        }\r\n        else if (token == IBettingPair.LPTOKENTYPE.USDC) {\r\n            require(amount >= 15 * 10 ** 6, \"Minimum deposit USDC amount is 15\");\r\n            _usdc.transferFrom(msg.sender, address(this), amount);\r\n        }\r\n        else if (token == IBettingPair.LPTOKENTYPE.SHIB){\r\n            require(amount >= 1500000 ether, \"Minumum deposit SHIB amount is 1500000\");\r\n            _shib.transferFrom(msg.sender, address(this), amount);\r\n        }\r\n        else if (token == IBettingPair.LPTOKENTYPE.DOGE) {\r\n            require(amount >= 180 * 10 ** 8, \"Minimum deposit DOGE amount is 180\");\r\n            _doge.transferFrom(msg.sender, address(this), amount);\r\n        }\r\n\r\n        _lpPool.depositErc20(msg.sender, token, amount);\r\n    }\r\n\r\n    /*\r\n    * @Function to withdraw tokens from leverage pool.\r\n    */\r\n    function withdraw(IBettingPair.LPTOKENTYPE token, uint256 amount) external {\r\n        require(amount > 0, \"Withdraw amount should be bigger than 0\");\r\n\r\n        uint256 ethAmount;\r\n        uint256 usdtAmount;\r\n        uint256 usdcAmount;\r\n        uint256 shibAmount;\r\n        uint256 dogeAmount;\r\n\r\n        (ethAmount, usdtAmount, usdcAmount, shibAmount, dogeAmount) = _lpPool.getUserLPBalance(msg.sender);\r\n\r\n        if (token == IBettingPair.LPTOKENTYPE.ETH) {\r\n            require(ethAmount >= amount, \"Not enough ETH balance to withdraw\");\r\n            payable(msg.sender).transfer(amount);\r\n        } else if (token == IBettingPair.LPTOKENTYPE.USDT) {\r\n            require(usdtAmount >= amount, \"Not enough USDT balance to withdraw\");\r\n            _usdt.transfer(msg.sender, amount);\r\n        } else if (token == IBettingPair.LPTOKENTYPE.USDC) {\r\n            require(usdcAmount >= amount, \"Not enough USDC balance to withdraw\");\r\n            _usdc.transfer(msg.sender, amount);\r\n        } else if (token == IBettingPair.LPTOKENTYPE.SHIB) {\r\n            require(shibAmount >= amount, \"Not enough SHIB balance to withdraw\");\r\n            _shib.transfer(msg.sender, amount);\r\n        } else if (token == IBettingPair.LPTOKENTYPE.DOGE) {\r\n            require(dogeAmount >= amount, \"Not enough DOGE balance to withdraw\");\r\n            _doge.transfer(msg.sender, amount);\r\n        }\r\n\r\n        _lpPool.withdraw(msg.sender, token, amount);\r\n    }\r\n\r\n    /*\r\n    * @Function to get player's LP token balance.\r\n    */\r\n    function getUserLPBalance(address player) external view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        return _lpPool.getUserLPBalance(player);\r\n    }\r\n\r\n    /*\r\n    * @Function to withdraw LP token from contract on owner side.\r\n    */\r\n    function withdrawLPFromContract(IBettingPair.LPTOKENTYPE token, uint256 amount) public doubleChecker {\r\n        if (token == IBettingPair.LPTOKENTYPE.ETH) {\r\n            payable(owner()).transfer(amount);\r\n        } else if (token == IBettingPair.LPTOKENTYPE.USDT) {\r\n            _usdt.transfer(owner(), amount);\r\n        } else if (token == IBettingPair.LPTOKENTYPE.USDC) {\r\n            _usdc.transfer(owner(), amount);\r\n        } else if (token == IBettingPair.LPTOKENTYPE.SHIB) {\r\n            _shib.transfer(owner(), amount);\r\n        } else if (token == IBettingPair.LPTOKENTYPE.DOGE) {\r\n            _doge.transfer(owner(), amount);\r\n        }\r\n\r\n        _lpPool.withdrawFromContract(owner(), token, amount);\r\n    }\r\n}",
    "id": "BettingRouter_0xa36799739db0db84b500afdd1695f6a670c244f0",
    "file": "./Contract_source_Code/BettingRouter_0xa36799739db0db84b500afdd1695f6a670c244f0.sol"
}