{
    "name": "Cypher",
    "address": "0xdda32aabbbb6c44efc567bac5f7c35f185338456",
    "Compiler Version": "v0.8.6+commit.11564f7e",
    "Optimization Enabled": "Yes with 0 runs",
    "abi": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenInvocations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedInvocations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHalvings\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract CypherDrawing\",\"name\":\"drawing\",\"type\":\"address\"},{\"internalType\":\"contract CypherMetadata\",\"name\":\"meta\",\"type\":\"address\"}],\"internalType\":\"struct Cypher.ConstructorArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasEnded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blocksUntilAuctionStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentGeneration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksUntilNextHalving\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentInvocationCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenInvocations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"}],\"name\":\"setAuctionStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CypherDrawing\",\"name\":\"drawing\",\"type\":\"address\"}],\"name\":\"setDrawingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDuration\",\"type\":\"uint256\"}],\"name\":\"setInitialDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialFee\",\"type\":\"uint256\"}],\"name\":\"setInitialFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHalvings\",\"type\":\"uint256\"}],\"name\":\"setMaxHalvings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokenInvocations\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenInvocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CypherMetadata\",\"name\":\"meta\",\"type\":\"address\"}],\"name\":\"setMetadataContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reservedInvocations\",\"type\":\"uint256\"}],\"name\":\"setReservedInvocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "constructor_argument": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003782dace9d900000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000040519d946311449b33d6b03bb40892faeef12d75000000000000000000000000bd9aa94b28e6362fc610d485ce779ef6baa041aa000000000000000000000000f8ee8798f1fbd48f95ca70d2a68fdda404660b550000000000000000000000000000000000000000000000000000000000000006437970686572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044350485200000000000000000000000000000000000000000000000000000000",
    "Contract Source Code": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n// ===============================================\r\n//          TERMS AND CONDITIONS\r\n//        https://www.anma.io/legal\r\n// ===============================================\r\n\r\n/*\r\n    HIDEKI TSUKAMOTO | ANOMALOUS MATERIALS | 15.08.2021\r\n______________.___.__________  ___ _______________________ \r\n\\_   ___ \\__  |   |\\______   \\/   |   \\_   _____|______   \\\r\n/    \\  \\//   |   | |     ___/    ~    \\    __)_ |       _/\r\n\\     \\___\\____   | |    |   \\    Y    /        \\|    |   \\\r\n \\______  / ______| |____|    \\___|_  /_______  /|____|_  /\r\n        \\/\\/                        \\/        \\/        \\/ \r\n*/\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\nstruct CypherAttributes\r\n{\r\n    uint colorset;\r\n    int decay;\r\n    int chaos;\r\n    int utilRand;\r\n    int numChannels;\r\n    int[8] density;\r\n    int[8] intricacy;\r\n}\r\n\r\n\r\nstruct StringBuilder\r\n{\r\n    bytes data;\r\n}\r\n\r\nlibrary SB\r\n{\r\n    function create(uint256 capacity)\r\n        internal pure returns(StringBuilder memory)\r\n    {\r\n        return StringBuilder(new bytes(capacity + 32));\r\n    }\r\n\r\n    function resize(StringBuilder memory sb, uint256 newCapacity) \r\n        internal view\r\n    {\r\n        StringBuilder memory newSb = create(newCapacity);\r\n        \r\n        assembly \r\n        {\r\n            let data := mload(sb)\r\n            let newData := mload(newSb)\r\n            let size := mload(add(data, 32)) // get used byte count\r\n            let bytesToCopy := add(size, 32) // copy the used bytes, plus the size field in first 32 bytes\r\n            \r\n            pop(staticcall(\r\n                gas(), \r\n                0x4, \r\n                add(data, 32), \r\n                bytesToCopy, \r\n                add(newData, 32), \r\n                bytesToCopy))\r\n        }\r\n        \r\n        sb.data = newSb.data;\r\n    }\r\n\r\n    function resizeIfNeeded(StringBuilder memory sb, uint256 spaceNeeded) \r\n        internal view\r\n    {\r\n        uint capacity;\r\n        uint size;\r\n        assembly\r\n        {\r\n            let data := mload(sb)\r\n            capacity := sub(mload(data), 32)\r\n            size := mload(add(data, 32))\r\n        }\r\n\r\n        uint remaining = capacity - size;\r\n        if (remaining >= spaceNeeded)\r\n        {\r\n            return;\r\n        }\r\n\r\n        uint newCapacity = capacity << 1;\r\n        uint newRemaining = newCapacity - size;\r\n        if (newRemaining >= spaceNeeded)\r\n        {\r\n            resize(sb, newCapacity);\r\n        }\r\n        else\r\n        {\r\n            newCapacity = spaceNeeded + size;\r\n            resize(sb, newCapacity);\r\n        }\r\n    }\r\n    \r\n    function getString(StringBuilder memory sb) \r\n        internal pure returns(string memory) \r\n    {\r\n        string memory ret;\r\n        assembly \r\n        {\r\n            let data := mload(sb)\r\n            ret := add(data, 32)\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function writeStr(StringBuilder memory sb, string memory str) \r\n        internal view\r\n    {\r\n        resizeIfNeeded(sb, bytes(str).length);\r\n\r\n        assembly \r\n        {\r\n            let data := mload(sb)\r\n            let size := mload(add(data, 32))\r\n            pop(staticcall(gas(), 0x4, add(str, 32), mload(str), add(size, add(data, 64)), mload(str)))\r\n            mstore(add(data, 32), add(size, mload(str)))\r\n        }\r\n    }\r\n\r\n    function concat(StringBuilder memory dst, StringBuilder memory src) \r\n        internal view\r\n    {\r\n        string memory asString;\r\n        assembly\r\n        {\r\n            let srcData := mload(src)\r\n            asString := add(srcData, 32)\r\n        }\r\n\r\n        writeStr(dst, asString);\r\n    }\r\n\r\n    function writeUint(StringBuilder memory sb, uint u) \r\n        internal view\r\n    {\r\n        if (u > 0)\r\n        {\r\n            uint len;\r\n            uint size;\r\n            \r\n            assembly\r\n            {\r\n                // get length string will be\r\n                len := 0\r\n                \r\n                for {let val := u} gt(val, 0) {val := div(val,  10) len := add(len, 1)}\r\n                {\r\n                }\r\n\r\n                // get bytes currently used\r\n                let data := mload(sb)\r\n                size := mload(add(data, 32))\r\n            }\r\n            \r\n            // make sure there's room\r\n            resizeIfNeeded(sb, len);\r\n            \r\n            assembly\r\n            {\r\n                let data := mload(sb)\r\n\r\n                for {let i := 0 let val := u} lt(i, len) {i := add(i, 1) val := div(val, 10)}\r\n                {\r\n                    // sb.data[64 + size + (len - i - 1)] = (val % 10) + 48\r\n                    mstore8(add(data, add(63, add(size, sub(len, i)))), add(mod(val, 10), 48))\r\n                }\r\n            \r\n                size := add(size, len)\r\n            \r\n                mstore(add(data, 32), size)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            uint size;\r\n            assembly\r\n            {\r\n                let data := mload(sb)\r\n                size := mload(add(data, 32))\r\n            }\r\n            // make sure there's room\r\n            resizeIfNeeded(sb, 1);\r\n            \r\n            assembly\r\n            {\r\n                let data := mload(sb)\r\n                mstore(add(data, 32), add(size, 1))\r\n                mstore8(add(data, add(64, size)), 48)\r\n            }\r\n        }\r\n    }\r\n    \r\n    function writeInt(StringBuilder memory sb, int i) \r\n        internal view\r\n    {\r\n        if (i < 0)\r\n        {\r\n            // write the - sign\r\n            uint size;\r\n            assembly\r\n            {\r\n                let data := mload(sb)\r\n                size := mload(add(data, 32))\r\n            }\r\n            resizeIfNeeded(sb, 1);\r\n            \r\n            assembly\r\n            {\r\n                let data := mload(sb)\r\n                mstore(add(data, 32), add(size, 1))\r\n                mstore8(add(data, add(64, size)), 45)\r\n            }\r\n\r\n            // now the digits can be written as a uint\r\n            i *= -1;\r\n        }\r\n        writeUint(sb, uint(i));\r\n    }\r\n\r\n    function writeRgb(StringBuilder memory sb, uint256 col) \r\n        internal view\r\n    {\r\n        resizeIfNeeded(sb, 6);\r\n\r\n        string[16] memory nibbles = [\r\n            \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \r\n            \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\r\n\r\n        string memory asStr = string(abi.encodePacked(\r\n            nibbles[(col >> 20) & 0xf],\r\n            nibbles[(col >> 16) & 0xf],\r\n            nibbles[(col >> 12) & 0xf],\r\n            nibbles[(col >> 8) & 0xf],\r\n            nibbles[(col >> 4) & 0xf],\r\n            nibbles[col & 0xf]\r\n        ));\r\n\r\n        writeStr(sb, asStr);\r\n    }\r\n}\r\n\r\n\r\nstruct Rand\r\n{\r\n    uint256 value;\r\n}\r\n\r\nlibrary Random\r\n{\r\n    function create(uint256 srand) \r\n        internal pure returns(Rand memory) \r\n    {\r\n        Rand memory rand = Rand({value: srand});\r\n        return rand;\r\n    }\r\n    \r\n    function value(Rand memory rand) \r\n        internal pure returns(uint256) \r\n    {\r\n        rand.value = uint256(keccak256(abi.encodePacked(rand.value)));\r\n        return rand.value;\r\n    }\r\n    \r\n    // (max inclusive)\r\n    function range(Rand memory rand, int256 min, int256 max) \r\n        internal pure returns(int256) \r\n    {\r\n        if (min <= max)\r\n        {\r\n            uint256 span = uint256(max - min);\r\n\r\n            return int256(value(rand) % (span + 1)) + min;\r\n        }\r\n        else\r\n        {\r\n            return range(rand, max, min);\r\n        }\r\n    }\r\n}\r\n\r\ncontract CypherDrawing is Ownable\r\n{   \r\n    int constant FONT_SIZE = 4;\r\n\r\n    uint8[1024] private curve;\r\n    int8[1024] private noiseTable;\r\n    uint24[256][5] private gradients;\r\n\r\n    function setCurve(uint8[1024] memory newCurve) \r\n        public onlyOwner\r\n    {\r\n        curve = newCurve;\r\n    }\r\n\r\n    function setNoiseTable(int8[1024] memory newNoiseTable) \r\n        public onlyOwner\r\n    {\r\n        noiseTable = newNoiseTable;\r\n    }\r\n\r\n    function setGradients(uint24[256][5] memory newGradients)\r\n        public onlyOwner\r\n    {\r\n        gradients = newGradients;\r\n    }\r\n\r\n    function getAttributes(bytes32 hash)\r\n        public view returns (CypherAttributes memory)\r\n    {\r\n        Rand memory rand = Random.create(uint256(hash));\r\n        CypherAttributes memory attributes = createAttributes(rand);\r\n        return attributes;\r\n    }\r\n\r\n    function generate(bytes32 hash) \r\n        public view returns(string memory)\r\n    {\r\n        StringBuilder memory b = SB.create(128 * 1024);\r\n\r\n        SB.writeStr(b, \"<svg viewBox='0 0 640 640' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>\"\r\n            \r\n            \"<style>\"\r\n            \"text{\"\r\n                \"font-size:\");\r\n        SB.writeInt(b, FONT_SIZE);\r\n        SB.writeStr(b, \"px;\"\r\n                \"font-family: monospace;\"\r\n                \"fill: #cccccc;\"\r\n            \"}\"\r\n            \"</style>\"\r\n\r\n            \"<defs>\"\r\n                \"<filter id='glow'>\"\r\n                    \"<feGaussianBlur stdDeviation='3.0' result='coloredBlur'/>\"\r\n                    \"<feComponentTransfer in='coloredBlur' result='coloredBlur'>\"\r\n                        \"<feFuncA type='linear' slope='0.70'/>\"\r\n                    \"</feComponentTransfer>\"\r\n                    \"<feMerge>\"\r\n                        \"<feMergeNode in='coloredBlur'/>\"\r\n                        \"<feMergeNode in='SourceGraphic'/>\"\r\n                    \"</feMerge>\"\r\n                \"</filter>\"\r\n            \"</defs>\"\r\n\r\n            \"<rect width='640' height='640' fill='#090809'/>\"              \r\n            \r\n            \"<g id='cypher' shape-rendering='geometricPrecision' filter='url(#glow)'>\");\r\n        \r\n        Rand memory rand = Random.create(uint256(hash));\r\n        CypherAttributes memory attributes = createAttributes(rand);\r\n        draw(b, attributes, rand);\r\n            \r\n        SB.writeStr(b, \"</g>\"\r\n            \r\n            \"</svg>\");\r\n\r\n        return SB.getString(b);\r\n    }\r\n\r\n    struct Ring\r\n    {\r\n        uint id;\r\n        int arcs;\r\n        int span;\r\n        int inner;\r\n        int outer;\r\n    }\r\n\r\n    struct SegmentData\r\n    {\r\n        uint ringId;\r\n        uint segId;\r\n        int inner;\r\n        int outer;\r\n        int thick;\r\n        int start;\r\n        int fin;\r\n        EdgeType edge;\r\n        FillType fill;\r\n        SpanType innerSpanType;\r\n        PadType padInner;\r\n        SpanType outerSpanType;\r\n        PadType padOuter;\r\n        uint colour;\r\n    }\r\n\r\n    enum SpanType\r\n    {\r\n        None,\r\n        Arc,\r\n        Cap,\r\n        Ang,\r\n        Brk,\r\n        Dotted\r\n    }\r\n\r\n    enum Variant\r\n    {\r\n        None,\r\n        Inner,\r\n        Outer,\r\n        Double,\r\n        Max\r\n    }\r\n\r\n    enum EdgeType\r\n    {\r\n        None,\r\n        Simple\r\n    }\r\n\r\n    enum FillType\r\n    {\r\n        None,\r\n        Block,\r\n        Hollow,\r\n        Text,\r\n        Increment, \r\n        Comp\r\n    }\r\n\r\n    enum PadType\r\n    {\r\n        None,\r\n        Single\r\n    }\r\n\r\n    \r\n    function clamp(int num)\r\n        private pure returns(int)\r\n    {\r\n        return clamp(num, 0, 31);\r\n    }\r\n    \r\n    function clamp(int num, int min, int max)\r\n        private pure returns(int)\r\n    {\r\n        return num <= min ? min : num >= max ? max : num;\r\n    }\r\n\r\n    function noise(Rand memory rand) \r\n        private view returns(int)\r\n    {\r\n        return noiseTable[uint(Random.range(rand, 0, 1023))];\r\n    }\r\n\r\n    function createAttributes(Rand memory rand) \r\n        private view returns(CypherAttributes memory)\r\n    {\r\n        int weighted = int8(curve[uint(Random.range(rand, 0, 1023))]);\r\n        \r\n        CypherAttributes memory attributes;\r\n        attributes.colorset = (uint(weighted < int(8) ? int(8) : weighted) - 8)/6;\r\n        attributes.decay = 32 - clamp(weighted + noise(rand));\r\n        attributes.chaos = 32 - clamp(weighted + noise(rand));\r\n        attributes.utilRand = Random.range(rand, 0, 1023);\r\n        attributes.numChannels = 4 + (clamp(weighted + noise(rand), 0, 32) >> 3);\r\n        \r\n        int count = 0;\r\n        while(true)\r\n        {\r\n            uint idx = uint(Random.range(rand, 0, 7));\r\n\r\n            if(count == attributes.numChannels)\r\n            { \r\n                break;\r\n            }\r\n            else if(attributes.density[idx]==1)\r\n            {\r\n                continue;\r\n            } \r\n            else \r\n            {\r\n                attributes.density[idx]=1;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        for (uint i = 0; i < 8; ++i)\r\n        {\r\n            attributes.intricacy[i] = clamp(weighted + noise(rand));\r\n        }\r\n\r\n        return attributes;\r\n    }\r\n\r\n    function getSegmentColour(\r\n        CypherAttributes memory atr, \r\n        Ring memory ring, \r\n        Rand memory rand) \r\n        private view returns(uint24)\r\n    {\r\n        int array_offset    = atr.utilRand % 256;\r\n        int grad_noise      = Random.range(rand, 0, 30);\r\n        int colour_index    = (array_offset + ring.inner + grad_noise) % 256;\r\n        return gradients[atr.colorset][uint(colour_index)];\r\n    }\r\n\r\n    function draw(\r\n        StringBuilder memory b, \r\n        CypherAttributes memory atr, \r\n        Rand memory rand) \r\n        private view\r\n    {\r\n        Ring[16] memory rings = createRings(rand);\r\n\r\n        // frame\r\n        for(uint i=0; i<16; ++i)\r\n        {\r\n            SB.writeStr(b, \"<circle cx='320' cy='320' fill='none' stroke-width='0.1' stroke-opacity='15%' stroke='#\");\r\n            SB.writeRgb(b, gradients[atr.colorset][uint(rings[i].inner)-1]);\r\n            SB.writeStr(b, \"' r='\");\r\n            SB.writeInt(b, rings[i].inner);\r\n            SB.writeStr(b, \"'/>\");\r\n        }\r\n\r\n        // defs & ring\r\n        // defs added as we go, ring must be deferred\r\n        SB.writeStr(b, \"<defs>\");\r\n        StringBuilder memory ringSvg = SB.create(4096);\r\n        for(uint i=0; i<16; i++)\r\n        {\r\n            uint channelIndex = (i >> 1);\r\n            if(atr.density[channelIndex] == 0) continue;\r\n\r\n            int span = rings[i].span;\r\n\r\n            uint segs = 8 >> uint(Random.range(rand, 1, 2));\r\n\r\n            int[] memory sections = new int[](segs);\r\n            \r\n            for(uint g=0; g<segs; g++)\r\n            {\r\n                sections[g] = 1;\r\n            }\r\n\r\n            {\r\n                int increments = int(span)-int(segs);\r\n                for(int s=0; s<increments; s++)\r\n                {  \r\n                    sections[uint(Random.range(rand, 0, int(segs) - 1))]++;\r\n                }\r\n            }\r\n\r\n            int progress = int(span);\r\n\r\n            // template\r\n            SB.writeStr(b, \"<g id='variant_r\");\r\n            SB.writeUint(b, rings[i].id);\r\n            SB.writeStr(b, \"_v0'>\");\r\n            for(uint t=0; t<segs; t++)\r\n            {\r\n                progress -= int(sections[t]); // TODO make sure everything with subtractions happens with ints\r\n\r\n                SegmentData memory segmentData;\r\n                segmentData.ringId = i;\r\n                segmentData.segId = t;\r\n                segmentData.inner = rings[i].inner;\r\n                segmentData.outer = rings[i].outer;\r\n                segmentData.thick = rings[i].outer - int(rings[i].inner);\r\n                segmentData.start = progress * 5;\r\n                segmentData.fin = sections[t] * 5;\r\n                segmentData.edge = EdgeType(rings[i].inner % 2);\r\n                {\r\n                    int maxIntricacy = atr.intricacy[channelIndex] >> 3;\r\n                    segmentData.fill = FillType(Random.range(rand, 2, 2+maxIntricacy));\r\n                    segmentData.innerSpanType = SpanType(Random.range(rand, 2, 2+maxIntricacy));\r\n                    segmentData.outerSpanType = SpanType(Random.range(rand, 2, 2+maxIntricacy));\r\n                }\r\n                segmentData.padInner = PadType(rings[i].outer % 2);\r\n                segmentData.padOuter = PadType(rings[i].outer % 2);\r\n                segmentData.colour = getSegmentColour(atr, rings[i], rand);\r\n\r\n                if (Random.range(rand, 0, 10) > 7)\r\n                {\r\n                    segmentData.colour = (segmentData.colour & 0xfefefe) >> 1;\r\n                }\r\n\r\n                drawSegment(\r\n                    b, \r\n                    segmentData,\r\n                    rand);\r\n            }\r\n            SB.writeStr(b, \"</g>\");\r\n\r\n            // arc\r\n            SB.writeStr(ringSvg, \"<g id='r\");\r\n            SB.writeUint(ringSvg, i);\r\n            SB.writeStr(ringSvg, \"'>\");\r\n            for (uint j = 0; j < uint(rings[i].arcs); j++)\r\n            {            \r\n                if (Random.range(rand, 0, 64) < atr.decay)\r\n                {\r\n                    continue;  //THIS HAS THE EFFECT I WAS LOOKING FOR.\r\n                }\r\n                \r\n                int chaosAddition = Random.range(rand, 0, 720);\r\n\r\n                int angle = atr.chaos < Random.range(rand, 0, 64) ? rings[i].span : chaosAddition;\r\n\r\n                int rotation = (angle * int(j)) * 5;\r\n\r\n                SB.writeStr(ringSvg, \"<g id='r\");\r\n                SB.writeUint(ringSvg, i);\r\n                SB.writeStr(ringSvg, \"a\");\r\n                SB.writeUint(ringSvg, j);\r\n                SB.writeStr(ringSvg, \"' transform='rotate(\");\r\n                SB.writeInt(ringSvg, rotation);\r\n                SB.writeStr(ringSvg, \" 320 320)'><use xlink:href='#variant_r\");\r\n                SB.writeUint(ringSvg, i);\r\n                SB.writeStr(ringSvg, \"_v0'/> </g>\");\r\n            }\r\n            \r\n            uint shifted = 8 << uint(Random.range(rand, 0, 4));\r\n\r\n            SB.writeStr(ringSvg, \"<animateTransform attributeName='transform' attributeType='XML' type='rotate' from='0 320 320' to='\");\r\n            if (Random.range(rand, 0, 10) > 8)\r\n            {\r\n                SB.writeStr(ringSvg, \"-\");\r\n            }\r\n            SB.writeStr(ringSvg, \"360 320 320' dur='\");\r\n            SB.writeUint(ringSvg, shifted);\r\n            SB.writeStr(ringSvg, \"s' begin='1s' repeatCount='indefinite'/></g>\");\r\n        }\r\n\r\n        SB.writeStr(b, \"</defs>\");\r\n        SB.concat(b, ringSvg);\r\n    }\r\n\r\n    function createRings(Rand memory rand) \r\n        private pure returns(Ring[16] memory)\r\n    {\r\n        uint8[8] memory chf = [0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n        for(uint i=0; i<24; i++)\r\n        {\r\n            chf[uint(Random.range(rand, 0, 7))]++;\r\n        }\r\n\r\n        int[16] memory radii = [int(5), 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];\r\n\r\n        for(uint j=0; j<chf.length; j++) \r\n        {\r\n            int total = int8(chf[j]);\r\n\r\n            for(int i=0; i<total; i++) \r\n            {\r\n                uint lower = j*2;\r\n                uint upper = (j*2)+3;\r\n                uint index = uint(Random.range(rand, int(lower), int(upper)));\r\n\r\n                int adv = Random.range(rand, i, total);\r\n\r\n                radii[index % 16]+=(adv*5);\r\n\r\n                total-=adv;\r\n            }\r\n        }\r\n\r\n        Ring[16] memory rings;\r\n\r\n        uint8[5] memory increments =  [12, 18, 24, 36, 72];\r\n        int progress = 60;\r\n\r\n        for(uint i=0; i<16; i++)\r\n        {\r\n            uint idxInc            = uint(Random.range(rand, 0, int(increments.length)-1));\r\n            int increment           = int8(increments[idxInc]);\r\n            int pad                 = 1;\r\n            int thisRingThickness = radii[i];\r\n\r\n            \r\n            int innerRadius        = progress+pad;\r\n            int outerRadius        = int(innerRadius+thisRingThickness) - int(pad);\r\n\r\n            progress += thisRingThickness;\r\n\r\n            int numArcs  = 72/increment;\r\n        \r\n            rings[i] = Ring(\r\n            {\r\n                id          : i,\r\n                arcs        : numArcs,\r\n                span        : increment,\r\n                inner       : innerRadius,\r\n                outer       : outerRadius\r\n            });\r\n        }\r\n\r\n        return rings;\r\n    }\r\n\r\n    function drawSpan(\r\n        StringBuilder memory b,\r\n        SpanType spanType, \r\n        int start, \r\n        int fin, \r\n        int radius, \r\n        PadType pad, \r\n        Variant variant,\r\n        uint col,\r\n        Rand memory rand) \r\n        private view\r\n    {\r\n        if (spanType == SpanType.Arc)\r\n        {\r\n            arc(b, start, fin, radius, pad, col, rand);\r\n        }\r\n        else if (spanType == SpanType.Dotted)\r\n        {\r\n            dotted(b, start, fin, radius, pad, col, rand);\r\n        }\r\n        else if (spanType == SpanType.Cap)\r\n        {\r\n            cap(b, start, fin, radius, pad, col, rand);\r\n        }\r\n        else if (spanType == SpanType.Ang)\r\n        {\r\n            ang(b, start, fin, radius, pad, variant, col, rand);\r\n        }\r\n        else if (spanType == SpanType.Brk)\r\n        {\r\n            brk(b, start, fin, radius, pad, variant, col, rand);\r\n        }\r\n    }\r\n\r\n    function drawSegment(\r\n        StringBuilder memory b, \r\n        SegmentData memory segmentData,\r\n        Rand memory rand) \r\n        private view\r\n    {\r\n        SB.writeStr(b, \"<g id='r\");\r\n        SB.writeUint(b, segmentData.ringId);\r\n        SB.writeStr(b, \"v0s\");\r\n        SB.writeUint(b, segmentData.segId);\r\n        SB.writeStr(b, \"'>\");\r\n\r\n        //draw the inner span\r\n        drawSpan(\r\n            b,\r\n            segmentData.innerSpanType, \r\n            segmentData.start, \r\n            segmentData.fin, \r\n            segmentData.inner, \r\n            segmentData.padInner, \r\n            Variant.Inner, \r\n            segmentData.colour,\r\n            rand);\r\n\r\n        //draw the outer span\r\n        drawSpan(\r\n            b,\r\n            segmentData.outerSpanType, \r\n            segmentData.start, \r\n            segmentData.fin, \r\n            segmentData.outer, \r\n            segmentData.padOuter, \r\n            Variant.Outer, \r\n            segmentData.colour,\r\n            rand);\r\n\r\n        //draw the edges (matching)\r\n        if (segmentData.edge == EdgeType.Simple)\r\n        {\r\n            simple(\r\n                b, \r\n                segmentData.start, \r\n                segmentData.fin, \r\n                segmentData.outer, \r\n                segmentData.padOuter, \r\n                segmentData.thick, \r\n                segmentData.colour,\r\n                rand);\r\n        }\r\n\r\n        int radius = segmentData.inner + ((segmentData.outer-segmentData.inner) / 2);\r\n\r\n        if (segmentData.fill == FillType.Block)\r\n        {\r\n            blck(\r\n                b, \r\n                segmentData.start, \r\n                segmentData.fin, \r\n                radius, \r\n                segmentData.padOuter, \r\n                segmentData.thick, \r\n                segmentData.colour, \r\n                rand);\r\n        }\r\n        else if (segmentData.fill == FillType.Increment)\r\n        {\r\n            inc(\r\n                b, \r\n                segmentData.start, \r\n                segmentData.fin, \r\n                radius, \r\n                segmentData.padOuter, \r\n                segmentData.thick, \r\n                segmentData.colour, \r\n                rand);\r\n        }\r\n        else if (segmentData.fill == FillType.Text)\r\n        {\r\n            if (!(segmentData.thick < 5 || segmentData.fin < 30))\r\n            {\r\n                text(\r\n                    b, \r\n                    segmentData.start, \r\n                    segmentData.fin, \r\n                    segmentData.inner, \r\n                    segmentData.colour, \r\n                    rand);                    \r\n            }\r\n        }\r\n        else if (segmentData.fill == FillType.Hollow)\r\n        {\r\n            hollow(\r\n                b, \r\n                segmentData.start, \r\n                segmentData.fin, \r\n                segmentData.inner, \r\n                segmentData.padOuter, \r\n                segmentData.thick, \r\n                segmentData.colour,\r\n                rand);\r\n        }\r\n        else if (segmentData.fill == FillType.Comp)\r\n        {\r\n            blck(\r\n                b, \r\n                segmentData.start, \r\n                segmentData.fin, \r\n                radius, \r\n                segmentData.padOuter, \r\n                segmentData.thick, \r\n                segmentData.colour, \r\n                rand);\r\n\r\n            inc(\r\n                b, \r\n                segmentData.start, \r\n                segmentData.fin, \r\n                radius, \r\n                segmentData.padOuter, \r\n                segmentData.thick, \r\n                segmentData.colour, \r\n                rand);\r\n\r\n            hollow(\r\n                b, \r\n                segmentData.start, \r\n                segmentData.fin, \r\n                segmentData.inner, \r\n                segmentData.padOuter, \r\n                segmentData.thick, \r\n                segmentData.colour,\r\n                rand);\r\n\r\n            if (!(segmentData.thick < 5 || segmentData.fin < 30))\r\n            {\r\n                text(\r\n                    b,\r\n                    segmentData.start, \r\n                    segmentData.fin, \r\n                    segmentData.inner, \r\n                    segmentData.colour, \r\n                    rand);\r\n            }\r\n        }\r\n\r\n        SB.writeStr(b, \"</g>\");\r\n    }\r\n    \r\n    /*fill types*/\r\n\r\n    function hollow(\r\n        StringBuilder memory b,\r\n        int start, \r\n        int fin, \r\n        int radius, \r\n        PadType pad, \r\n        int thickness, \r\n        uint col,\r\n        Rand memory rand) \r\n        view private\r\n    {\r\n        int padding     = pad == PadType.Single ? int(2) : int(0);\r\n        int angleStart = start+padding;\r\n        int angleEnd   = fin-(padding*2);\r\n        int innerRad   = radius + padding;\r\n        int outerRad   = radius + (thickness-padding);\r\n        int centreRad  = 320 + innerRad;\r\n        int len         = centreRad + thickness - (padding*2);\r\n\r\n        SB.writeStr(b, \"<g transform='rotate(\");\r\n        SB.writeInt(b, angleStart);\r\n        SB.writeStr(b, \" 320 320)'><line y1='320' x1='\");\r\n        SB.writeInt(b, centreRad);\r\n        SB.writeStr(b, \"' y2='320' x2='\");\r\n        SB.writeInt(b, len);\r\n        SB.writeStr(b, \"'  stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"'/><circle r='\");\r\n        SB.writeInt(b, innerRad);\r\n        SB.writeStr(b, \"' cx='320' cy='320' fill='none' pathLength='360' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"' stroke-dasharray='\");\r\n        SB.writeInt(b, angleEnd);\r\n        SB.writeStr(b, \" 360'/><circle r='\");\r\n        SB.writeInt(b, outerRad);\r\n        SB.writeStr(b, \"' cx='320' cy='320' fill='none' pathLength='360' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"' stroke-dasharray='\");\r\n        SB.writeInt(b, angleEnd);\r\n        SB.writeStr(b, \" 360'/><g transform='rotate(\");\r\n        SB.writeInt(b, angleEnd);\r\n        SB.writeStr(b, \" 320 320)'><line y1='320' x1='\");\r\n        SB.writeInt(b, centreRad);\r\n        SB.writeStr(b, \"' y2='320' x2='\");\r\n        SB.writeInt(b, len);\r\n        SB.writeStr(b, \"'  stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"'/></g></g>\");\r\n    }\r\n\r\n    function randomStrokeWidth(Rand memory rand) \r\n        private pure returns(string memory)\r\n    {\r\n        return Random.range(rand, 0, 9) > 6 ? \"0.6\" : \"0.3\";\r\n    }\r\n\r\n    function text(\r\n        StringBuilder memory b,\r\n        int start, \r\n        int fin, \r\n        int radius, \r\n        uint col, \r\n        Rand memory rand) \r\n        view private\r\n    {\r\n        int padding     = 2;\r\n        int angleStart = start - padding;\r\n        uint textId = Random.value(rand);\r\n        \r\n        string[12] memory sym = [\"0.421\", \"0.36\", \"0.73\",\"0.421\", \"0.36\", \"0.73\",\"0.421\", \"0.36\", \"0.73\", \"+\", \"^\", \"_\"];\r\n\r\n        string memory chars = sym[uint(Random.range(rand, 0, int(sym.length)-1))];\r\n\r\n        radius += FONT_SIZE + padding;\r\n\r\n        SB.writeStr(b, \"<g transform='rotate(\");\r\n        SB.writeInt(b, angleStart-180+fin);\r\n        SB.writeStr(b, \" 320 320)'><path id='text_path_\");\r\n        SB.writeUint(b, textId);\r\n        SB.writeStr(b, \"' d='M\");\r\n        SB.writeInt(b, 320-radius);\r\n        SB.writeStr(b, \", 320 a1, 1 0 0, 0 \");\r\n        SB.writeInt(b, radius*2);\r\n        SB.writeStr(b, \", 0' pathLength='100' fill='none' stroke-width='0' stroke='red'/><text x='0%' style='fill:#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \";'><textPath href='#text_path_\");\r\n        SB.writeUint(b, textId);\r\n        SB.writeStr(b, \"' pointer-events='none'>\");\r\n        SB.writeStr(b, chars);\r\n        SB.writeStr(b, \"</textPath></text></g>\");\r\n    }\r\n\r\n    function inc(\r\n        StringBuilder memory b,\r\n        int start, \r\n        int fin, \r\n        int radius, \r\n        PadType pad, \r\n        int thickness, \r\n        uint col, \r\n        Rand memory rand) \r\n        view private\r\n    {\r\n        int padding     = (pad == PadType.Single) ? int(4) : int(0);\r\n        int angleStart = start + padding / 2;\r\n        int angleEnd   = fin - (padding);\r\n        int stroke      = thickness - padding;\r\n\r\n        uint incId = Random.value(rand);\r\n\r\n        SB.writeStr(b, \"<g transform='rotate(\");\r\n        SB.writeInt(b, angleStart);\r\n        SB.writeStr(b, \" 320 320)'><clipPath id='inc_cutter_\");\r\n        SB.writeUint(b, incId);\r\n        SB.writeStr(b, \"'><rect x='0' y='0' width='640' height='320' stroke='black' fill='none' transform='rotate(\");\r\n        SB.writeInt(b, angleEnd);\r\n        SB.writeStr(b, \", 320, 320)' /></clipPath><path d='M\");\r\n        SB.writeInt(b, 320-radius);\r\n        SB.writeStr(b, \", 320 a1, 1 0 0, 0 \");\r\n        SB.writeInt(b, radius*2);\r\n        SB.writeStr(b, \", 0' pathLength='100' fill='none' stroke-width='\");\r\n        SB.writeInt(b, stroke);\r\n        SB.writeStr(b, \"' stroke-opacity='0.4' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-dasharray='0.05 1' clip-path='url(#inc_cutter_\");\r\n        SB.writeUint(b, incId);\r\n        SB.writeStr(b, \")'/></g>\");\r\n    }\r\n\r\n    function blck(\r\n        StringBuilder memory b,\r\n        int start, \r\n        int /*fin*/, \r\n        int radius, \r\n        PadType pad, \r\n        int thickness, \r\n        uint col, \r\n        Rand memory rand) \r\n        view private\r\n    {\r\n        int padding     = (pad == PadType.Single) ? int(4) : int(0);\r\n        int angleStart = start + padding / 2;\r\n        int stroke      = thickness - padding;\r\n        int opac        = Random.range(rand, 2, 8);\r\n\r\n\r\n        SB.writeStr(b, \"<g transform='rotate(\");\r\n        SB.writeInt(b, angleStart);\r\n        SB.writeStr(b, \" 320 320)'><circle r='\");\r\n        SB.writeInt(b, radius);\r\n        SB.writeStr(b, \"' cx='320' cy='320' fill='none' pathLength='359' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-opacity='\");\r\n        SB.writeInt(b, opac);\r\n        SB.writeStr(b, \"%' stroke-width='\");\r\n        SB.writeInt(b, stroke);\r\n        SB.writeStr(b, \"' stroke-dasharray='\");\r\n        SB.writeInt(b, angleStart);\r\n        SB.writeStr(b, \" \");\r\n        SB.writeInt(b, 360 - angleStart);\r\n        SB.writeStr(b, \"'/></g>\");\r\n    }\r\n\r\n    /*edge types*/\r\n\r\n    function simple(\r\n        StringBuilder memory b,\r\n        int start, \r\n        int fin, \r\n        int radius, \r\n        PadType pad, \r\n        int len, \r\n        uint col,\r\n        Rand memory rand) \r\n        view private\r\n    {\r\n        int padding = (pad == PadType.Single) ? int(1) : int(0);\r\n        int angleStart = start + padding;\r\n        int angleEnd = fin - (padding * 2);\r\n        int centreRad = 320 + radius;\r\n        int edgeLength = centreRad - len;\r\n\r\n        SB.writeStr(b, \"<g transform='rotate(\");\r\n        SB.writeInt(b, angleStart);\r\n        SB.writeStr(b, \" 320 320)'><line y1='320' x1='\");\r\n        SB.writeInt(b, centreRad);\r\n        SB.writeStr(b, \"' y2='320' x2='\");\r\n        SB.writeInt(b, edgeLength);\r\n        SB.writeStr(b, \"'  stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"'/><g transform='rotate(\");\r\n        SB.writeInt(b, angleEnd);\r\n        SB.writeStr(b, \" 320 320)'><line y1='320' x1='\");\r\n        SB.writeInt(b, centreRad);\r\n        SB.writeStr(b, \"' y2='320' x2='\");\r\n        SB.writeInt(b, edgeLength);\r\n        SB.writeStr(b, \"'  stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"'/></g></g>\");\r\n    }\r\n\r\n    /*spans*/\r\n\r\n    function brk(\r\n        StringBuilder memory b,\r\n        int start, \r\n        int fin, \r\n        int radius, \r\n        PadType pad, \r\n        Variant variant, \r\n        uint col, \r\n        Rand memory rand) \r\n        view private\r\n    {\r\n        int padding     = (pad == PadType.Single) ? int(1) : int(0);\r\n        int angleStart = start + padding;\r\n        int angleEnd   = fin - (padding * 2);\r\n        int centreRad  = 320 + radius;\r\n        int brkSize    = 2;\r\n        int brkOffset = (variant == Variant.Inner) ? centreRad + brkSize : centreRad - brkSize;\r\n\r\n        //uint brkId = Rand.next(rand);\r\n\r\n        SB.writeStr(b, \"<g><circle r='\");\r\n        SB.writeInt(b, radius);\r\n        SB.writeStr(b, \"' cx='320' cy='320' fill='none' pathLength='359' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"' stroke-dasharray='\");\r\n        SB.writeInt(b, angleStart);\r\n        SB.writeStr(b, \" \");\r\n        SB.writeInt(b, 360 - angleStart);\r\n        SB.writeStr(b, \"'/><line y1='320' x1='\");\r\n        SB.writeInt(b, centreRad);\r\n        SB.writeStr(b, \"' y2='320' x2='\");\r\n        SB.writeInt(b, brkOffset);\r\n        SB.writeStr(b, \"' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"'/><g transform='rotate(\");\r\n        SB.writeInt(b, angleEnd);\r\n        SB.writeStr(b, \" 320 320)'><line y1='320' x1='\");\r\n        SB.writeInt(b, centreRad);\r\n        SB.writeStr(b, \"' y2='320' x2='\");\r\n        SB.writeInt(b, brkOffset);\r\n        SB.writeStr(b, \"' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"'/></g></g>\");\r\n    }\r\n\r\n   function ang(\r\n       StringBuilder memory b,\r\n       int start, \r\n       int fin, \r\n       int radius, \r\n       PadType pad, \r\n       Variant variant, \r\n       uint col,\r\n       Rand memory rand) \r\n       view private\r\n   {\r\n        int padding = (pad == PadType.Single) ? int(1) : int(0);\r\n        int angleStart = start + padding;\r\n        int angleEnd = fin - (padding * 2);\r\n        int angsSize = 2;\r\n        int centreRad = 320 + radius;\r\n        int centreAng = (variant == Variant.Inner) ? centreRad + angsSize : centreRad - angsSize;\r\n        int opac = Random.range(rand, 10, 100);\r\n        \r\n        SB.writeStr(b, \"<g transform='rotate(\");\r\n        SB.writeInt(b, angleStart);\r\n        SB.writeStr(b, \" 320 320)'><circle r='\");\r\n        SB.writeInt(b, radius);\r\n        SB.writeStr(b, \"' cx='320' cy='320' fill='none' pathLength='360' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"'  stroke-opacity='\");\r\n        SB.writeInt(b, opac);\r\n        SB.writeStr(b, \"%' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"' stroke-dasharray= '\");\r\n        SB.writeInt(b, angleEnd);\r\n        SB.writeStr(b, \" 360'/><polyline points='\");\r\n        SB.writeInt(b, centreAng);\r\n        SB.writeStr(b, \", 320  \");\r\n        SB.writeInt(b, centreRad);\r\n        SB.writeStr(b, \", 320 \");\r\n        SB.writeInt(b, centreRad);\r\n        SB.writeStr(b, \", \");\r\n        SB.writeInt(b, 320+angsSize);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' fill='none'/><g transform='rotate(\");\r\n        SB.writeInt(b, angleEnd);\r\n        SB.writeStr(b, \" 320 320)'><polyline points='\");\r\n        SB.writeInt(b, centreAng);\r\n        SB.writeStr(b, \", 320 \");\r\n        SB.writeInt(b, centreRad);\r\n        SB.writeStr(b, \", 320 \");\r\n        SB.writeInt(b, centreRad);\r\n        SB.writeStr(b, \", \");\r\n        SB.writeInt(b, 320-angsSize);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' fill='none'/></g></g>\");\r\n   }\r\n\r\n   function cap(\r\n       StringBuilder memory b,\r\n       int start, \r\n       int fin, \r\n       int radius, \r\n       PadType pad, \r\n       uint col,\r\n       Rand memory rand) \r\n       view private\r\n   {\r\n        int padding = (pad == PadType.Single) ? int(1) : int(0);\r\n        int angleStart = start + padding;\r\n        int angleEnd = fin - (padding * 2);\r\n        int gap = angleEnd - 2;\r\n        \r\n\r\n        SB.writeStr(b, \"<g transform='rotate(\");\r\n        SB.writeInt(b, angleStart);\r\n        SB.writeStr(b, \" 320 320)'><circle r='\");\r\n        SB.writeInt(b, radius);\r\n        SB.writeStr(b, \"' cx='320' cy='320' fill='none' pathLength='360' stroke-opacity='20%' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"' stroke-dasharray='\");\r\n        SB.writeInt(b, angleEnd);\r\n        SB.writeStr(b, \" 360'/><circle r='\");\r\n        SB.writeInt(b, radius);\r\n        SB.writeStr(b, \"' cx='320' cy='320' fill='none' pathLength='360' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"' stroke-dasharray='1 \");\r\n        SB.writeInt(b, gap);\r\n        SB.writeStr(b, \" 1 360'/></g>\");\r\n   }\r\n\r\n   function dotted(\r\n       StringBuilder memory b,\r\n       int start, \r\n       int fin, \r\n       int radius, \r\n       PadType pad, \r\n       uint col, \r\n       Rand memory rand) \r\n       view private\r\n   {\r\n        int padding     = (pad == PadType.Single) ? int(1) : int(0);\r\n        int angleStart = start + padding;\r\n        int angleEnd   = fin - (padding * 2);\r\n        int gap = angleEnd - 2;\r\n        int opac = Random.range(rand, 10, 100);\r\n\r\n        uint dotId = Random.value(rand);\r\n\r\n        SB.writeStr(b, \"<g transform='rotate(\");\r\n        SB.writeInt(b, angleStart);\r\n        SB.writeStr(b, \" 320 320)'><clipPath id='dot_cutter_\");\r\n        SB.writeUint(b, dotId);\r\n        SB.writeStr(b, \"'><rect x='0' y='0' width='640' height='320' stroke='black' fill='none' transform='rotate(\");\r\n        SB.writeInt(b, angleEnd);\r\n        SB.writeStr(b, \", 320, 320)' /></clipPath><path d='M\");\r\n        SB.writeInt(b, 320-radius);\r\n        SB.writeStr(b, \", 320 a1, 1 0 0, 0 \");\r\n        SB.writeInt(b, radius*2);\r\n        SB.writeStr(b, \", 0' pathLength='100' fill='none' stroke-opacity='\");\r\n        SB.writeInt(b, opac);\r\n        SB.writeStr(b, \"%' stroke-width='0.4' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-dasharray='0.25 0.25' clip-path='url(#dot_cutter_\");\r\n        SB.writeUint(b, dotId);\r\n        SB.writeStr(b, \")'/><circle r='\");\r\n        SB.writeInt(b, radius);\r\n        SB.writeStr(b, \"' cx='320' cy='320' fill='none' pathLength='359' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='0.4' stroke-dasharray='1 \");\r\n        SB.writeInt(b, gap);\r\n        SB.writeStr(b, \" 1 360'/></g>\");\r\n   }\r\n\r\n   function arc(\r\n       StringBuilder memory b, \r\n       int start, \r\n       int /*fin*/, \r\n       int radius, \r\n       PadType pad, \r\n       uint col, \r\n       Rand memory rand) \r\n       view private\r\n   {\r\n        int padding     = (pad == PadType.Single) ? int(1) : int(0);\r\n        int angleStart = start + padding;\r\n\r\n        SB.writeStr(b, \"<g><circle r='\");\r\n        SB.writeInt(b, radius);\r\n        SB.writeStr(b, \"' cx='320' cy='320' fill='none' pathLength='359' stroke='#\");\r\n        SB.writeRgb(b, col);\r\n        SB.writeStr(b, \"' stroke-width='\");\r\n        SB.writeStr(b, randomStrokeWidth(rand));\r\n        SB.writeStr(b, \"' stroke-dasharray='\");\r\n        SB.writeInt(b, angleStart);\r\n        SB.writeStr(b, \" \");\r\n        SB.writeInt(b, 360 - angleStart);\r\n        SB.writeStr(b, \"'/></g>\");\r\n   }\r\n}\r\n\r\ncontract CypherMetadata is Ownable\r\n{   \r\n    using Strings for uint256;\r\n\r\n    CypherDrawing _drawing;\r\n    string private _imageBaseUri;\r\n\r\n    constructor(\r\n        CypherDrawing drawing,\r\n        string memory imageBaseUri)\r\n    {\r\n        _drawing = drawing;\r\n        _imageBaseUri = imageBaseUri;\r\n    }\r\n\r\n    function tokenURI(\r\n        uint256 tokenId, \r\n        bytes32 hash,\r\n        uint256 generation,\r\n        bool isFirstTokenInGeneration) \r\n        public view returns(string memory) \r\n    {\r\n        return string(abi.encodePacked(\"data:application/json;utf8,{\"\r\n            \"\\\"image\\\":\\\"data:image/svg+xml;utf8,\",\r\n            _drawing.generate(hash), \"\\\",\",\r\n            _commonMetadata(tokenId, hash, generation, isFirstTokenInGeneration),\r\n            \"}\"));\r\n    }\r\n\r\n    function metadata(\r\n        uint256 tokenId,\r\n        bytes32 hash, \r\n        uint256 generation,\r\n        bool isFirstTokenInGeneration)\r\n        public view returns(string memory)\r\n    {\r\n        string memory imageUri = bytes(_imageBaseUri).length > 0 ? string(abi.encodePacked(_imageBaseUri, tokenId.toString())) : \"\";\r\n\r\n        return string(abi.encodePacked(\"{\"\r\n            \"\\\"external_url\\\": \\\"\", imageUri, \"\\\",\",\r\n            \"\\\"image\\\": \\\"\", imageUri, \"\\\",\",\r\n            _commonMetadata(tokenId, hash, generation, isFirstTokenInGeneration),\r\n            \"}\"));\r\n    }\r\n\r\n    function setDrawing(CypherDrawing drawing)\r\n        public onlyOwner\r\n    {\r\n        _drawing = drawing;\r\n    }\r\n\r\n    function setImageBaseUri(string memory imageBaseUri)\r\n        public onlyOwner\r\n    {\r\n        _imageBaseUri = imageBaseUri;\r\n    }\r\n\r\n    function _commonMetadata(\r\n        uint256 tokenId, \r\n        bytes32 hash, \r\n        uint256 generation,\r\n        bool isFirstTokenInGeneration)\r\n        private view returns(string memory)\r\n    {\r\n        CypherAttributes memory attributes = _drawing.getAttributes(hash);\r\n        \r\n        int overall = 0;\r\n        for (uint i = 0; i < 8; ++i)\r\n        {\r\n            overall += attributes.density[i] * attributes.intricacy[i];\r\n        }\r\n        overall >>= 3;\r\n\r\n        StringBuilder memory b = SB.create(2048);\r\n        \r\n        SB.writeStr(b, \"\\\"description\\\": \\\"Cypher is a generative art project by Hideki Tsukamoto comprised of 1024 tokens calculated and drawn via smart-contract, by the Ethereum Virtual Machine. Cypher is part one of the 'Apex' series.\\\",\"\r\n            \"\\\"name\\\": \\\"Cypher #\"); \r\n        SB.writeUint(b, tokenId);\r\n        SB.writeStr(b, \"\\\",\"\r\n            \"\\\"background_color\\\": \\\"1a181b\\\",\"\r\n            \"\\\"attributes\\\": [\");\r\n        if (tokenId == 0)\r\n        {\r\n            SB.writeStr(b, \"{\"\r\n                \"\\\"trait_type\\\": \\\"Edition\\\",\"\r\n                \"\\\"value\\\": \\\"Genesis\\\"\"\r\n                \"},\");\r\n        }\r\n        else if (tokenId == 1)\r\n        {\r\n            SB.writeStr(b, \"{\"\r\n                \"\\\"trait_type\\\": \\\"Edition\\\",\"\r\n                \"\\\"value\\\": \\\"Primary\\\"\"\r\n                \"},\");\r\n        }\r\n        else if (tokenId == 2)\r\n        {\r\n            SB.writeStr(b, \"{\"\r\n                \"\\\"trait_type\\\": \\\"Edition\\\",\"\r\n                \"\\\"value\\\": \\\"Secondary\\\"\"\r\n                \"},\");\r\n        }\r\n        else if (tokenId == 3)\r\n        {\r\n            SB.writeStr(b, \"{\"\r\n                \"\\\"trait_type\\\": \\\"Edition\\\",\"\r\n                \"\\\"value\\\": \\\"Tertiary\\\"\"\r\n                \"},\");\r\n        }\r\n        if (isFirstTokenInGeneration)\r\n        {\r\n            SB.writeStr(b, \"{\"\r\n                \"\\\"trait_type\\\": \\\"Edition\\\",\"\r\n                \"\\\"value\\\": \\\"Generation Genesis\\\"\"\r\n                \"},\");\r\n        }\r\n        SB.writeStr(b, \"{\"\r\n            \"\\\"trait_type\\\": \\\"Generation\\\",\" \r\n            \"\\\"value\\\": \\\"\");\r\n        SB.writeUint(b, generation);\r\n        SB.writeStr(b, \"\\\"},\"\r\n            \"{\"\r\n                \"\\\"trait_type\\\": \\\"Intricacy\\\",\"\r\n                \"\\\"value\\\":\\\"\");\r\n        SB.writeStr(b, _attributeValueString_0_32(overall));\r\n        SB.writeStr(b, \"\\\"},\"\r\n            \"{\"\r\n                \"\\\"trait_type\\\": \\\"Intricacy Value\\\",\"\r\n                \"\\\"max_value\\\": 32,\"\r\n                \"\\\"value\\\":\");\r\n        SB.writeInt(b, overall);\r\n        SB.writeStr(b, \"},\"\r\n            \"{\"\r\n                \"\\\"trait_type\\\": \\\"Chaos\\\",\"\r\n                \"\\\"value\\\":\\\"\");\r\n        SB.writeStr(b, _attributeValueString_0_32(attributes.chaos));\r\n        SB.writeStr(b, \"\\\"},\"\r\n            \"{\"\r\n                \"\\\"trait_type\\\": \\\"Chaos Value\\\",\"\r\n                \"\\\"max_value\\\": 32,\"\r\n                \"\\\"value\\\":\");\r\n        SB.writeInt(b, attributes.chaos);\r\n        SB.writeStr(b, \"},\"\r\n            \"{\"\r\n                \"\\\"trait_type\\\": \\\"Channels\\\",\"\r\n                \"\\\"value\\\":\\\"\");\r\n        SB.writeStr(b, _attributeValueString_0_8(attributes.numChannels));\r\n        SB.writeStr(b, \"\\\"},\"\r\n            \"{\"\r\n                \"\\\"trait_type\\\": \\\"Channels Value\\\",\"\r\n                \"\\\"max_value\\\": 8,\"\r\n                \"\\\"value\\\":\");\r\n        SB.writeInt(b, attributes.numChannels);\r\n        SB.writeStr(b, \"},\"\r\n            \"{\"\r\n                \"\\\"trait_type\\\": \\\"Decay\\\",\"\r\n                \"\\\"value\\\":\\\"\");\r\n        SB.writeStr(b, _attributeValueString_0_32(attributes.decay));\r\n        SB.writeStr(b, \"\\\"},\"\r\n            \"{\"\r\n                \"\\\"trait_type\\\": \\\"Decay Value\\\",\"\r\n                \"\\\"max_value\\\": 32,\"\r\n                \"\\\"value\\\":\");\r\n        SB.writeInt(b, attributes.decay);\r\n        SB.writeStr(b, \"},\"\r\n            \"{\"\r\n                \"\\\"trait_type\\\": \\\"Level\\\",\"\r\n                \"\\\"value\\\":\\\"\");\r\n        SB.writeUint(b, attributes.colorset + 1);\r\n        SB.writeStr(b, \"\\\"},\"\r\n            \"{\"\r\n                \"\\\"trait_type\\\": \\\"Level Value\\\",\"\r\n                \"\\\"max_value\\\": 5,\"\r\n                \"\\\"value\\\":\");\r\n        SB.writeUint(b, attributes.colorset + 1);\r\n        SB.writeStr(b, \"}\"\r\n            \"]\");\r\n\r\n        return SB.getString(b);\r\n    }\r\n\r\n    function _attributeValueString_0_32(int256 value)\r\n        private pure returns(string memory)\r\n    {\r\n        if (value == 0)\r\n        {\r\n            return \"Void\";\r\n        }\r\n        else if (value <= 2)\r\n        {\r\n            return \"Marginal\";\r\n        }\r\n        else if (value <= 8)\r\n        {\r\n            return \"Low\";\r\n        }\r\n        else if (value <= 23)\r\n        {\r\n            return \"Average\";\r\n        }\r\n        else if (value <= 29)\r\n        {\r\n            return \"High\";\r\n        }\r\n        else if (value <= 31)\r\n        {\r\n            return \"Super\";\r\n        }\r\n        else\r\n        {\r\n            return \"Extreme\";\r\n        }\r\n    }\r\n\r\n    function _attributeValueString_0_8(int256 value) \r\n        private pure returns(string memory)\r\n    {\r\n        if (value == 0)\r\n        {\r\n            return \"Void\";\r\n        }\r\n        else if (value <= 1)\r\n        {\r\n            return \"Marginal\";\r\n        }\r\n        else if (value <= 2)\r\n        {\r\n            return \"Low\";\r\n        }\r\n        else if (value <= 5)\r\n        {\r\n            return \"Average\";\r\n        }\r\n        else if (value <= 6)\r\n        {\r\n            return \"High\";\r\n        }\r\n        else if (value <= 7)\r\n        {\r\n            return \"Super\";\r\n        }\r\n        else\r\n        {\r\n            return \"Extreme\";\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Cypher is ERC721Enumerable, Ownable\r\n{\r\n    uint256 private _maxTokenInvocations;\r\n    uint256 private _reservedInvocations;\r\n    uint256 private _auctionStartBlock;\r\n    uint256 private _auctionEndBlock;\r\n    uint256 private _initialFee;\r\n    uint256 private _initialDuration;\r\n    uint256 private _maxHalvings;\r\n    address payable private _recipient;\r\n    CypherDrawing private _drawing;\r\n    CypherMetadata private _metadata;\r\n    mapping(uint256 => bytes32) private _hashes;\r\n    mapping(uint256 => uint256) private _generation;\r\n    bool _isLocked;\r\n\r\n    struct ConstructorArgs\r\n    {\r\n        string name;\r\n        string symbol;\r\n        uint256 maxTokenInvocations;\r\n        uint256 reservedInvocations;\r\n        uint256 auctionStartBlock;\r\n        uint256 initialFee;\r\n        uint256 initialDuration;\r\n        uint256 maxHalvings;\r\n        address payable recipient;\r\n        CypherDrawing drawing;\r\n        CypherMetadata meta;\r\n    }\r\n\r\n    constructor(\r\n        ConstructorArgs memory args)\r\n        ERC721(args.name, args.symbol)\r\n    {\r\n        _maxTokenInvocations = args.maxTokenInvocations;\r\n        _reservedInvocations = args.reservedInvocations;\r\n        _auctionStartBlock = args.auctionStartBlock;\r\n        _initialFee = args.initialFee;\r\n        _initialDuration = args.initialDuration;\r\n        _maxHalvings = args.maxHalvings;\r\n        _recipient = args.recipient;\r\n        _drawing = args.drawing;\r\n        _metadata = args.meta;\r\n\r\n        // minting #0\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(uint(0),\r\n                            blockhash(block.number - 1)));\r\n\r\n        _hashes[0] = hash;\r\n        _generation[0] = 0;\r\n        _safeMint(msg.sender, 0);\r\n    }\r\n\r\n    modifier isUnlocked() \r\n    {\r\n        require(!_isLocked, \"Contract is locked\");\r\n        _;\r\n    }\r\n\r\n    function lock() public onlyOwner\r\n    {\r\n        _isLocked = true;\r\n    }\r\n\r\n    function setMaxTokenInvocations(uint256 maxTokenInvocations)\r\n        public onlyOwner isUnlocked\r\n    {\r\n        _maxTokenInvocations = maxTokenInvocations;\r\n    }\r\n\r\n    function setReservedInvocations(uint256 reservedInvocations)\r\n        public onlyOwner isUnlocked\r\n    {\r\n        _reservedInvocations = reservedInvocations;\r\n    }\r\n\r\n    function setAuctionStartBlock(uint256 auctionStartBlock)\r\n        public onlyOwner isUnlocked\r\n    {\r\n        _auctionStartBlock = auctionStartBlock;\r\n    }\r\n\r\n    function setInitialFee(uint256 initialFee)\r\n        public onlyOwner isUnlocked\r\n    {\r\n        _initialFee = initialFee;\r\n    }\r\n\r\n    function setInitialDuration(uint256 initialDuration)\r\n        public onlyOwner isUnlocked\r\n    {\r\n        _initialDuration = initialDuration;\r\n    }\r\n\r\n    function setMaxHalvings(uint256 maxHalvings)\r\n        public onlyOwner isUnlocked\r\n    {\r\n        _maxHalvings = maxHalvings;\r\n    }\r\n\r\n    function setRecipient(address payable recipient)\r\n        public onlyOwner\r\n    {\r\n        _recipient = recipient;\r\n    }\r\n\r\n    function setDrawingContract(CypherDrawing drawing)\r\n        public onlyOwner isUnlocked\r\n    {\r\n        _drawing = drawing;\r\n    }\r\n\r\n    function setMetadataContract(CypherMetadata meta)\r\n        public onlyOwner\r\n    {\r\n        _metadata = meta;\r\n    }\r\n\r\n    function getInfo()\r\n        public view returns(\r\n            bool hasStarted,\r\n            bool hasEnded,\r\n            uint256 blocksUntilAuctionStart,\r\n            uint256 currentGeneration,\r\n            uint256 currentFee,\r\n            uint256 blocksUntilNextHalving,\r\n            uint256 currentInvocationCount,\r\n            uint256 maxTokenInvocations)\r\n    {\r\n        uint256 nextBlock = block.number + 1;\r\n        if (nextBlock >= _auctionStartBlock)\r\n        {\r\n            hasStarted = _auctionStartBlock != 0;\r\n\r\n            blocksUntilAuctionStart = 0;\r\n        }\r\n        else\r\n        {\r\n            hasStarted = false;\r\n\r\n            blocksUntilAuctionStart = _auctionStartBlock - nextBlock;\r\n        }\r\n\r\n        if (_auctionEndBlock == 0)\r\n        {\r\n            hasEnded = false;\r\n\r\n            (currentGeneration, \r\n            currentFee, \r\n            blocksUntilNextHalving) = _getAuctionState(nextBlock);\r\n        }\r\n        else\r\n        {\r\n            hasEnded = true;\r\n\r\n            (currentGeneration, \r\n            currentFee, ) = _getAuctionState(_auctionEndBlock);\r\n            blocksUntilNextHalving = 0;\r\n        }\r\n\r\n        currentInvocationCount = totalSupply();\r\n        maxTokenInvocations = _maxTokenInvocations;\r\n    }\r\n\r\n    function purchase() \r\n        public payable returns (uint256 tokenId)\r\n    {\r\n        require(_auctionStartBlock > 0 && block.number >= _auctionStartBlock, \r\n                \"auction hasn't started yet\");\r\n\r\n        uint256 totalInvocations = totalSupply();\r\n        uint256 invocationsRemaining = _maxTokenInvocations - totalInvocations;\r\n        \r\n        require(invocationsRemaining > _reservedInvocations ||\r\n            (invocationsRemaining > 0 && msg.sender == owner()), \r\n            \"max token invocations reached\");\r\n\r\n        uint256 blockNumber = block.number;\r\n        if (_auctionEndBlock != 0)\r\n        {\r\n            blockNumber = _auctionEndBlock;\r\n        }\r\n        else if (invocationsRemaining == (_reservedInvocations + 1))\r\n        {\r\n            _auctionEndBlock = block.number;\r\n        }\r\n\r\n        uint256 generation;\r\n        uint256 fee;\r\n        (generation, fee, ) = _getAuctionState(blockNumber);\r\n\r\n        require(msg.value == fee, \"value doesn't equal cost\");\r\n        \r\n        (bool success, ) = _recipient.call{value:msg.value}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n        \r\n        tokenId = totalInvocations;\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(tokenId, \r\n                            blockhash(block.number - 1),\r\n                            tokenId > 0 ? _hashes[tokenId - 1] : bytes32(0)));\r\n        \r\n        _hashes[tokenId] = hash;\r\n        _generation[tokenId] = generation;\r\n        _safeMint(msg.sender, tokenId);\r\n        \r\n        return tokenId;\r\n    }\r\n \r\n    function metadata(uint256 tokenId)\r\n        public view returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"token not minted\");\r\n\r\n        return _metadata.metadata( \r\n            tokenId, \r\n            _hashes[tokenId],\r\n            _generation[tokenId],\r\n            _isFirstTokenInGeneration(tokenId));\r\n    }\r\n\r\n    function generate(uint256 tokenId) \r\n        public view returns (string memory)\r\n    { \r\n        require(_exists(tokenId), \"token not minted\");\r\n        return _drawing.generate(_hashes[tokenId]);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override \r\n        returns (string memory) \r\n    {\r\n        require(_exists(tokenId), \"token not minted\");\r\n\r\n        return _metadata.tokenURI(\r\n            tokenId, \r\n            _hashes[tokenId],\r\n            _generation[tokenId],\r\n            _isFirstTokenInGeneration(tokenId));\r\n    }\r\n\r\n    function _getAuctionState(uint256 blockNumber) private view returns (\r\n        uint256 currentGeneration, \r\n        uint256 currentFee, \r\n        uint256 blocksUntilNextHalving)\r\n    {\r\n        if (_auctionStartBlock == 0)\r\n        {\r\n            return (0, _initialFee, 0);\r\n        }\r\n        \r\n        if (blockNumber < _auctionStartBlock)\r\n        {\r\n            uint256 firstHalving = _auctionStartBlock + _initialDuration;\r\n            return (0, _initialFee, firstHalving - blockNumber);\r\n        }\r\n\r\n        uint256 generation = 0;\r\n        uint256 fee = _initialFee;\r\n        uint256 duration = _initialDuration;\r\n        uint256 nextHalving = _auctionStartBlock + duration;\r\n\r\n        for (uint256 i = 0; i < _maxHalvings; ++i)\r\n        {\r\n            if (blockNumber < nextHalving)\r\n            {\r\n                return (generation, fee, nextHalving - blockNumber);\r\n            }\r\n\r\n            ++generation;\r\n            fee >>= 1;\r\n            duration <<= 1;\r\n            nextHalving += duration;\r\n        }\r\n\r\n        return (generation, fee, 0);\r\n    }\r\n\r\n    function _isFirstTokenInGeneration(uint256 tokenId)\r\n        private view returns(bool)\r\n    {\r\n        if (tokenId > 0)\r\n        {\r\n            return _generation[tokenId] != _generation[tokenId - 1];\r\n        }\r\n\r\n        return true;\r\n    }\r\n}",
    "id": "Cypher_0xdda32aabbbb6c44efc567bac5f7c35f185338456",
    "file": "./Contract_source_Code/Cypher_0xdda32aabbbb6c44efc567bac5f7c35f185338456.sol"
}