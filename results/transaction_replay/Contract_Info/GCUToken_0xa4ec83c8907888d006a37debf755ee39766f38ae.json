{
    "name": "GCUToken",
    "address": "0xa4ec83c8907888d006a37debf755ee39766f38ae",
    "Compiler Version": "v0.4.26+commit.4563c3fc",
    "Optimization Enabled": "No with 0 runs",
    "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_allowance\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_initialWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
    "constructor_argument": "00000000000000000000000000000000000000000000000000000014b230cac00000000000000000000000005d01bad722f5b6856c34851f16a22f7d967c39c5",
    "Contract Source Code": "pragma solidity ^0.4.19;\r\n\r\n/*\r\n--------------------------------------------------------------------------------\r\nThe GCU Token Smart Contract\r\n\r\nERC20: https://github.com/ethereum/EIPs/issues/20\r\nERC223: https://github.com/ethereum/EIPs/issues/223\r\n\r\nMIT Licence\r\n--------------------------------------------------------------------------------\r\n*/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n        return _a / _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC223Interface {\r\n    uint public totalSupply_;\r\n    function balanceOf(address who) view returns (uint);\r\n    function transfer(address to, uint value) returns (bool);\r\n    function transfer(address to, uint value, bytes data)  returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * param _from  Token sender address.\r\n * param _value Amount of tokens.\r\n * param _data  Transaction metadata.\r\n */\r\ncontract ContractReceiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data) {\r\n        _from;\r\n        _value;\r\n        _data;\r\n    }\r\n}\r\n\r\ncontract GCUToken is ERC223Interface {\r\n    using SafeMath for uint256;\r\n\r\n    /* Contract Constants */\r\n    string public constant _name = \"Global Currency Unit\";\r\n    string public constant _symbol = \"GCU\";\r\n    uint8 public constant _decimals = 18;\r\n\r\n    /* Contract Variables */\r\n    address public owner;\r\n    uint256 public totalSupply_;\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping (address => uint256)) public allowed;\r\n\r\n    /*88 888 888 000*/\r\n    /* Constructor initializes the owner's balance and the supply  */\r\n    constructor (uint256 _amount, address _initialWallet) {\r\n        owner = _initialWallet;\r\n        totalSupply_ = _amount * (uint256(10) ** _decimals);\r\n        balances[_initialWallet] = totalSupply_;\r\n\r\n        emit Transfer(0x0, _initialWallet, totalSupply_);\r\n    }\r\n\r\n    /* ERC20 Events */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* ERC223 Events */\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns balance of the `_owner`.\r\n     *\r\n     * @param _address   The address whose balance will be returned.\r\n     * @return balance Balance of the `_owner`.\r\n     */\r\n    function balanceOf(address _address) view returns (uint256 balance) {\r\n        return balances[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value\r\n        && _value > 0\r\n        && balances[_to] + _value > balances[_to]) {\r\n            bytes memory empty;\r\n            if(isContract(_to)) {\r\n                return transferToContract(_to, _value, empty);\r\n            } else {\r\n                return transferToAddress(_to, _value, empty);\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* Withdraws to address _to form the address _from up to the amount _value */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value\r\n        && allowed[_from][msg.sender] >= _value\r\n        && _value > 0\r\n        && balances[_to] + _value > balances[_to]) {\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* Allows _spender to withdraw the _allowance amount form sender */\r\n    function approve(address _spender, uint256 _allowance) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _allowance;\r\n        Approval(msg.sender, _spender, _allowance);\r\n        return true;\r\n    }\r\n\r\n    /* Checks how much _spender can withdraw from _owner */\r\n    function allowance(address _owner, address _spender) view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /* ERC223 Functions */\r\n    /* Get the contract constant _name */\r\n    function name() view returns (string name) {\r\n        return _name;\r\n    }\r\n\r\n    /* Get the contract constant _symbol */\r\n    function symbol() view returns (string symbol) {\r\n        return _symbol;\r\n    }\r\n\r\n    /* Get the contract constant _decimals */\r\n    function decimals() view returns (uint8 decimals) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data) returns (bool success) {\r\n        if (balances[msg.sender] >= _value\r\n        && _value > 0\r\n        && balances[_to] + _value > balances[_to]) {\r\n            if(isContract(_to)) {\r\n                return transferToContract(_to, _value, _data);\r\n            } else {\r\n                return transferToAddress(_to, _value, _data);\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* Transfer function when _to represents a regular address */\r\n    function transferToAddress(address _to, uint _value, bytes _data) internal returns (bool success) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    /* Transfer function when _to represents a contract address, with the caveat\r\n    that the contract needs to implement the tokenFallback function in order to receive tokens */\r\n    function transferToContract(address _to, uint _value, bytes _data) internal returns (bool success) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    /* Infers if whether _address is a contract based on the presence of bytecode */\r\n    function isContract(address _address) internal returns (bool is_contract) {\r\n        uint length;\r\n        if (_address == 0) return false;\r\n        assembly {\r\n        length := extcodesize(_address)\r\n        }\r\n        if(length > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* Stops any attempt to send Ether to this contract */\r\n    function () {\r\n        revert();\r\n        //throw;\r\n    }\r\n}",
    "id": "GCUToken_0xa4ec83c8907888d006a37debf755ee39766f38ae",
    "file": "./Contract_source_Code/GCUToken_0xa4ec83c8907888d006a37debf755ee39766f38ae.sol"
}