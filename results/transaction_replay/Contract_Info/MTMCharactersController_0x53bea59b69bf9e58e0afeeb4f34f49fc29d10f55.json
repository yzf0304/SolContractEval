{
    "name": "MTMCharactersController",
    "address": "0x53bea59b69bf9e58e0afeeb4f34f49fc29d10f55",
    "Compiler Version": "v0.8.7+commit.e28d00a7",
    "Optimization Enabled": "Yes with 200 runs",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CM\",\"outputs\":[{\"internalType\":\"contract iCM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CS\",\"outputs\":[{\"internalType\":\"contract iCS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MES\",\"outputs\":[{\"internalType\":\"contract iMES\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SC\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TP\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"charactersToBurn_\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"augmentCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"transponders_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spaceCapsules_\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"augmentCharacterWithMats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"bio_\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"changeBio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"renderType_\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"changeRenderType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characterChangeBioable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characterChangeNameable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characterRerollable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characterUploadable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractAddressToTokenUploaded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"}],\"name\":\"getCharacterYieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"itemType_\",\"type\":\"uint8\"}],\"name\":\"getCurrentItemLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"spaceCapsuleId_\",\"type\":\"uint16\"}],\"name\":\"getEquipmentBaseBonus\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"spaceCapsuleId_\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"keyPrefix_\",\"type\":\"string\"}],\"name\":\"getItemRarity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"itemType_\",\"type\":\"uint8\"}],\"name\":\"getNameOfItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"attribute_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amount_\",\"type\":\"uint8\"}],\"name\":\"levelCharacterStat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"amount_\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"levelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"attributes_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"amounts_\",\"type\":\"uint8[]\"}],\"name\":\"multiLevelCharacterStat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"characterIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"amounts_\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"multiLevelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"amounts_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"items_\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"multiUpgradeEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rarity_\",\"type\":\"uint8\"}],\"name\":\"queryBaseEquipmentTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"augments_\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"basePoints_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalEquipmentBonus_\",\"type\":\"uint16\"}],\"name\":\"queryCharacterYieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderTypeChangable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"rerollRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setCharacterChangeBioable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setCharacterChangeNameable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setCharacterRerollable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setCharacterUploadable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cm_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mes_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cs_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sc_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tp_\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"types_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"costs_\",\"type\":\"uint256[]\"}],\"name\":\"setCosmeticCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setRenderTypeChangable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"amount_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"item_\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"upgradeEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uploadId_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"uploadRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "constructor_argument": "",
    "Contract Source Code": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId_) external view returns (address);\r\n    function transferFrom(address from_, address to_, uint256 tokenId_) external;\r\n}\r\n\r\ninterface iCM {\r\n    function ownerOf(uint256 tokenId_) external view returns (address);\r\n    function transferFrom(address from_, address to_, uint256 tokenId_) external;\r\n    function contractAddressToTokenUploaded(address contractAddress_, uint256 tokenId_) external view returns (bool);\r\n    function renderTypeAllowed(uint8 renderType_) external view returns (bool);\r\n}\r\n\r\ninterface iMES {\r\n    // View Functions\r\n    function balanceOf(address address_) external view returns (uint256);\r\n    function pendingRewards(address address_) external view returns (uint256); \r\n    function getStorageClaimableTokens(address address_) external view returns (uint256);\r\n    function getPendingClaimableTokens(address address_) external view returns (uint256);\r\n    function getTotalClaimableTokens(address address_) external view returns (uint256);\r\n    // Administration\r\n    function setYieldRate(address address_, uint256 yieldRate_) external;\r\n    function addYieldRate(address address_, uint256 yieldRateAdd_) external;\r\n    function subYieldRate(address address_, uint256 yieldRateSub_) external;\r\n    // Updating\r\n    function updateReward(address address_) external;\r\n    // Credits System\r\n    function deductCredits(address address_, uint256 amount_) external;\r\n    function addCredits(address address_, uint256 amount_) external;\r\n    // Burn\r\n    function burn(address from, uint256 amount_) external;\r\n}\r\n\r\ninterface iCS {\r\n    struct Character {\r\n        uint8  race_;\r\n        uint8  renderType_;\r\n        uint16 transponderId_;\r\n        uint16 spaceCapsuleId_;\r\n        uint8  augments_;\r\n        uint16 basePoints_;\r\n        uint16 totalEquipmentBonus_;\r\n    }\r\n    struct Stats {\r\n        uint8 strength_; \r\n        uint8 agility_; \r\n        uint8 constitution_; \r\n        uint8 intelligence_; \r\n        uint8 spirit_; \r\n    }\r\n    struct Equipment {\r\n        uint8 weaponUpgrades_;\r\n        uint8 chestUpgrades_;\r\n        uint8 headUpgrades_;\r\n        uint8 legsUpgrades_;\r\n        uint8 vehicleUpgrades_;\r\n        uint8 armsUpgrades_;\r\n        uint8 artifactUpgrades_;\r\n        uint8 ringUpgrades_;\r\n    }\r\n\r\n    // Create Character\r\n    function createCharacter(uint tokenId_, Character memory Character_) external;\r\n    // Characters\r\n    function setName(uint256 tokenId_, string memory name_) external;\r\n    function setBio(uint256 tokenId_, string memory bio_) external;\r\n    function setRace(uint256 tokenId_, uint8 race_) external;\r\n    function setRenderType(uint256 tokenId_, uint8 renderType_) external;\r\n    function setTransponderId(uint256 tokenId_, uint16 transponderId_) external;\r\n    function setSpaceCapsuleId(uint256 tokenId_, uint16 spaceCapsuleId_) external;\r\n    function setAugments(uint256 tokenId_, uint8 augments_) external;\r\n    function setBasePoints(uint256 tokenId_, uint16 basePoints_) external;\r\n    function setBaseEquipmentBonus(uint256 tokenId_, uint16 baseEquipmentBonus_) external;\r\n    function setTotalEquipmentBonus(uint256 tokenId_, uint16 totalEquipmentBonus) external;\r\n    // Stats\r\n    function setStrength(uint256 tokenId_, uint8 strength_) external;\r\n    function setAgility(uint256 tokenId_, uint8 agility_) external;\r\n    function setConstitution(uint256 tokenId_, uint8 constitution_) external;\r\n    function setIntelligence(uint256 tokenId_, uint8 intelligence_) external;\r\n    function setSpirit(uint256 tokenId_, uint8 spirit_) external;\r\n    // Equipment\r\n    function setWeaponUpgrades(uint256 tokenId_, uint8 upgrade_) external;\r\n    function setChestUpgrades(uint256 tokenId_, uint8 upgrade_) external;\r\n    function setHeadUpgrades(uint256 tokenId_, uint8 upgrade_) external;\r\n    function setLegsUpgrades(uint256 tokenId_, uint8 upgrade_) external;\r\n    function setVehicleUpgrades(uint256 tokenId_, uint8 upgrade_) external;\r\n    function setArmsUpgrades(uint256 tokenId_, uint8 upgrade_) external;\r\n    function setArtifactUpgrades(uint256 tokenId_, uint8 upgrade_) external;\r\n    function setRingUpgrades(uint256 tokenId_, uint8 upgrade_) external;\r\n    // Structs and Mappings\r\n    function names(uint256 tokenId_) external view returns (string memory);\r\n    function characters(uint256 tokenId_) external view returns (Character memory);\r\n    function stats(uint256 tokenId_) external view returns (Stats memory);\r\n    function equipments(uint256 tokenId_) external view returns (Equipment memory);\r\n    function contractToRace(address contractAddress_) external view returns (uint8);\r\n}\r\n\r\nlibrary Strings {\r\n    function toString(uint256 value_) internal pure returns (string memory) {\r\n        if (value_ == 0) { return \"0\"; }\r\n        uint256 _iterate = value_; uint256 _digits;\r\n        while (_iterate != 0) { _digits++; _iterate /= 10; } // get digits in value_\r\n        bytes memory _buffer = new bytes(_digits);\r\n        while (value_ != 0) { _digits--; _buffer[_digits] = bytes1(uint8(48 + uint256(value_ % 10 ))); value_ /= 10; } // create bytes of value_\r\n        return string(_buffer); // return string converted bytes of value_\r\n    }\r\n}\r\n\r\nlibrary MTMLib {\r\n    // Static String Returns\r\n    function getNameOfItem(uint8 item_) public pure returns (string memory) {\r\n        if      (item_ == 1) { return \"WEAPONS\";   }\r\n        else if (item_ == 2) { return \"CHEST\";     }\r\n        else if (item_ == 3) { return \"HEAD\";      }\r\n        else if (item_ == 4) { return \"LEGS\";      }\r\n        else if (item_ == 5) { return \"VEHICLE\";   }\r\n        else if (item_ == 6) { return \"ARMS\";      }\r\n        else if (item_ == 7) { return \"ARTIFACTS\"; }\r\n        else if (item_ == 8) { return \"RINGS\";     }\r\n        else                 { revert(\"Invalid Equipment Upgrades Query!\"); }\r\n    }\r\n\r\n    // Static Rarity Stuff\r\n    function getItemRarity(uint16 spaceCapsuleId_, string memory keyPrefix_) public pure returns (uint8) {\r\n        uint256 _rarity = uint256(keccak256(abi.encodePacked(keyPrefix_, Strings.toString(spaceCapsuleId_)))) % 21;\r\n        return uint8(_rarity);\r\n    }\r\n    function queryEquipmentUpgradability(uint8 rarity_) public pure returns (uint8) {\r\n        return rarity_ >= 19 ? rarity_ == 19 ? 4 : 4 : 4; \r\n    }\r\n    function queryBaseEquipmentTier(uint8 rarity_) public pure returns (uint8) {\r\n        return rarity_ >= 19 ? rarity_ == 19 ? 1 : 2 : 0;\r\n    }\r\n\r\n    // Character Modification Costs\r\n    function queryAugmentCost(uint8 currentLevel_) public pure returns (uint256) {\r\n        if      (currentLevel_ == 0) { return 0;         }\r\n        else if (currentLevel_ == 1) { return 1 ether;   }\r\n        else if (currentLevel_ == 2) { return 2 ether;   }\r\n        else if (currentLevel_ == 3) { return 5 ether;   }\r\n        else if (currentLevel_ == 4) { return 10 ether;  }\r\n        else if (currentLevel_ == 5) { return 15 ether;  }\r\n        else if (currentLevel_ == 6) { return 25 ether;  }\r\n        else if (currentLevel_ == 7) { return 50 ether;  }\r\n        else if (currentLevel_ == 8) { return 100 ether; }\r\n        else if (currentLevel_ == 9) { return 250 ether; }\r\n        else                         { revert(\"Invalid level!\"); }\r\n    }\r\n    function queryBasePointsUpgradeCost(uint16 currentLevel_) public pure returns (uint256) {\r\n        uint8 _tier = uint8(currentLevel_ / 5);\r\n        if      (_tier == 0) { return 1 ether;   }\r\n        else if (_tier == 1) { return 2 ether;   }\r\n        else if (_tier == 2) { return 5 ether;   }\r\n        else if (_tier == 3) { return 10 ether;  }\r\n        else if (_tier == 4) { return 20 ether;  }\r\n        else if (_tier == 5) { return 30 ether;  }\r\n        else if (_tier == 6) { return 50 ether;  }\r\n        else if (_tier == 7) { return 70 ether;  }\r\n        else if (_tier == 8) { return 100 ether; }\r\n        else if (_tier == 9) { return 150 ether; }\r\n        else                 { revert(\"Invalid Level!\"); }\r\n    }\r\n    function queryEquipmentUpgradeCost(uint8 currentLevel_) public pure returns (uint256) {\r\n        if      (currentLevel_ == 0) { return 50 ether;   }\r\n        else if (currentLevel_ == 1) { return 250 ether;  }\r\n        else if (currentLevel_ == 2) { return 750 ether;  }\r\n        else if (currentLevel_ == 3) { return 1500 ether; }\r\n        else                         { revert(\"Invalid Level!\"); }\r\n    }\r\n\r\n    // Yield Rate Constants\r\n    function getBaseYieldRate(uint8 augments_) public pure returns (uint256) {\r\n        if      (augments_ == 0 ) { return 0.1 ether; }\r\n        else if (augments_ == 1 ) { return 1 ether;   }\r\n        else if (augments_ == 2 ) { return 2 ether;   }\r\n        else if (augments_ == 3 ) { return 3 ether;   }\r\n        else if (augments_ == 4 ) { return 4 ether;   }\r\n        else if (augments_ == 5 ) { return 5 ether;   }\r\n        else if (augments_ == 6 ) { return 6 ether;   }\r\n        else if (augments_ == 7 ) { return 7 ether;   }\r\n        else if (augments_ == 8 ) { return 8 ether;   }\r\n        else if (augments_ == 9 ) { return 9 ether;   }\r\n        else if (augments_ == 10) { return 10 ether;  }\r\n        else                      { return 0;         }\r\n    }\r\n    function queryEquipmentModulus(uint8 rarity_, uint8 upgrades_) public pure returns (uint8) {\r\n        uint8 _baseTier = queryBaseEquipmentTier(rarity_);\r\n        uint8 _currentTier = _baseTier + upgrades_;\r\n        if      (_currentTier == 0) { return 0;  }\r\n        else if (_currentTier == 1) { return 2;  }\r\n        else if (_currentTier == 2) { return 5;  }\r\n        else if (_currentTier == 3) { return 10; }\r\n        else if (_currentTier == 4) { return 20; }\r\n        else if (_currentTier == 5) { return 35; }\r\n        else if (_currentTier == 6) { return 50; }\r\n        else                        { revert(\"Invalid Level!\"); }\r\n    }\r\n    function getStatMultiplier(uint16 basePoints_) public pure returns (uint256) {\r\n        return uint256( (basePoints_ * 2) + 100 );\r\n    }\r\n    function getEquipmentMultiplier(uint16 totalEquipmentBonus_) public pure returns (uint256) {\r\n        return uint256( totalEquipmentBonus_ + 100 );\r\n    }\r\n\r\n    // Base Yield Rate Caclulations\r\n    function getItemBaseBonus(uint16 spaceCapsuleId_, string memory keyPrefix_) public pure returns (uint8) {\r\n        return queryEquipmentModulus( getItemRarity(spaceCapsuleId_, keyPrefix_), 0 );\r\n    }\r\n    function getEquipmentBaseBonus(uint16 spaceCapsuleId_) public pure returns (uint16) {\r\n        return uint16(\r\n        getItemBaseBonus(spaceCapsuleId_, \"WEAPONS\") + \r\n        getItemBaseBonus(spaceCapsuleId_, \"CHEST\") +\r\n        getItemBaseBonus(spaceCapsuleId_, \"HEAD\") +\r\n        getItemBaseBonus(spaceCapsuleId_, \"LEGS\") +\r\n        getItemBaseBonus(spaceCapsuleId_, \"VEHICLE\") +\r\n        getItemBaseBonus(spaceCapsuleId_, \"ARMS\") + \r\n        getItemBaseBonus(spaceCapsuleId_, \"ARTIFACTS\") +\r\n        getItemBaseBonus(spaceCapsuleId_, \"RINGS\")\r\n        );\r\n    }\r\n\r\n    // Yield Rate Calculation\r\n    function getCharacterYieldRate(uint8 augments_, uint16 basePoints_, uint16 totalEquipmentBonus_) public pure returns (uint256) {\r\n        uint256 _baseYield = getBaseYieldRate(augments_);\r\n        uint256 _statMultiplier = getStatMultiplier(basePoints_);\r\n        uint256 _eqMultiplier = getEquipmentMultiplier(totalEquipmentBonus_);\r\n        return _baseYield * (_statMultiplier * _eqMultiplier) / 10000;\r\n    }\r\n}\r\n\r\nlibrary MTMStrings {\r\n    function onlyAllowedCharacters(string memory string_) public pure returns (bool) {\r\n        bytes memory _strBytes = bytes(string_);\r\n        for (uint i = 0; i < _strBytes.length; i++) {\r\n            if (_strBytes[i] < 0x20 || _strBytes[i] > 0x7A || _strBytes[i] == 0x26 || _strBytes[i] == 0x22 || _strBytes[i] == 0x3C || _strBytes[i] == 0x3E) {\r\n                return false;\r\n            }     \r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MTMCharactersController {\r\n    // Access\r\n    address public owner;\r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner { require(msg.sender == owner, \"You are not the owner!\"); _; }\r\n    function setNewOwner(address address_) external onlyOwner { owner = address_; }\r\n\r\n    // Burn Target\r\n    address internal constant burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // Interfaces\r\n    iCM public CM; iMES public MES; iCS public CS;\r\n    IERC721 public SC; IERC721 public TP;\r\n    function setContracts(address cm_, address mes_, address cs_, address sc_, address tp_) external onlyOwner {\r\n        CM = iCM(cm_); MES = iMES(mes_); CS = iCS(cs_);\r\n        SC = IERC721(sc_); TP = IERC721(tp_);\r\n    }\r\n\r\n    // Internal Write Functions\r\n    function __MESPayment(address address_, uint256 amount_, bool useCredits_) internal {\r\n        if (useCredits_) {\r\n            require(amount_ <= MES.getTotalClaimableTokens(address_), \"Not enough MES credits to do action!\");\r\n            if (amount_ >= MES.getStorageClaimableTokens(address_)) { MES.updateReward(address_); }\r\n            MES.deductCredits(address_, amount_);\r\n        } else {\r\n            require(amount_ <= MES.balanceOf(address_), \"Not enough MES to do action!\");\r\n            MES.burn(address_, amount_);\r\n        }\r\n    }\r\n    function __updateReward(address address_) internal {\r\n        MES.updateReward(address_);\r\n    }\r\n    function __addYieldRate(address address_, uint256 yieldRate_) internal {\r\n        MES.addYieldRate(address_, yieldRate_);\r\n    }\r\n\r\n    // Internal Read Functions\r\n    function __getCharacter(uint256 characterId_) internal view returns (iCS.Character memory) {\r\n        return CS.characters(characterId_);\r\n    }\r\n    function __getEquipment(uint256 characterId_) internal view returns (iCS.Equipment memory) {\r\n        return CS.equipments(characterId_);\r\n    }\r\n    function __getStats(uint256 characterId_) internal view returns (iCS.Stats memory) {\r\n        return CS.stats(characterId_);\r\n    }\r\n    function __getAugments(uint256 characterId_) internal view returns (uint8) {\r\n        return CS.characters(characterId_).augments_;\r\n    }\r\n    function __getBasePoints(uint256 characterId_) internal view returns (uint16) {\r\n        return CS.characters(characterId_).basePoints_;\r\n    }\r\n\r\n    // Internal Equipment Administration\r\n    function __getEquipmentUpgrades(iCS.Equipment memory Equipment_, uint8 item_) internal pure returns (uint8) {\r\n        if      (item_ == 1) { return Equipment_.weaponUpgrades_;   }\r\n        else if (item_ == 2) { return Equipment_.chestUpgrades_;    }\r\n        else if (item_ == 3) { return Equipment_.headUpgrades_;     }\r\n        else if (item_ == 4) { return Equipment_.legsUpgrades_;     }\r\n        else if (item_ == 5) { return Equipment_.vehicleUpgrades_;  }\r\n        else if (item_ == 6) { return Equipment_.armsUpgrades_;     }\r\n        else if (item_ == 7) { return Equipment_.artifactUpgrades_; }\r\n        else if (item_ == 8) { return Equipment_.ringUpgrades_;     }\r\n        else                 { revert(\"Invalid Equipment Upgrades Query!\"); }\r\n    }\r\n    function __setItemUpgrades(uint256 characterId_, uint8 newUpgrades_, uint8 item_) internal {\r\n        if      (item_ == 1) { CS.setWeaponUpgrades(characterId_, newUpgrades_);   }\r\n        else if (item_ == 2) { CS.setChestUpgrades(characterId_, newUpgrades_);    }\r\n        else if (item_ == 3) { CS.setHeadUpgrades(characterId_, newUpgrades_);     }\r\n        else if (item_ == 4) { CS.setLegsUpgrades(characterId_, newUpgrades_);     }\r\n        else if (item_ == 5) { CS.setVehicleUpgrades(characterId_, newUpgrades_);  }\r\n        else if (item_ == 6) { CS.setArmsUpgrades(characterId_, newUpgrades_);     }\r\n        else if (item_ == 7) { CS.setArtifactUpgrades(characterId_, newUpgrades_); }\r\n        else if (item_ == 8) { CS.setRingUpgrades(characterId_, newUpgrades_);     }\r\n        else                 { revert(\"Invalid Equipment Set Upgrade Query!\"); }\r\n    }\r\n\r\n    // Augment Character\r\n    function augmentCharacter(uint256 characterId_, uint256[] memory charactersToBurn_, bool useCredits_) public {\r\n        require(msg.sender == CM.ownerOf(characterId_), \"You don't own this character!\");\r\n\r\n        iCS.Character memory _Character = __getCharacter(characterId_);\r\n\r\n        uint8 _augments = _Character.augments_;\r\n        uint8 _numberOfAugments = uint8(charactersToBurn_.length);\r\n\r\n        // Calculate the Augmentation Cost\r\n        uint256 _totalAugmentCost;\r\n        for (uint8 i = 0; i < _numberOfAugments; i++) {\r\n            _totalAugmentCost += MTMLib.queryAugmentCost(_augments + i);\r\n        }\r\n\r\n        // Check $MES Requirements and Burn $MES!\r\n        __MESPayment(msg.sender, _totalAugmentCost, useCredits_);\r\n\r\n        // Check Character Requirements and Loop-Burn Characters!\r\n        for (uint8 i = 0; i < _numberOfAugments; i++) {\r\n            require(characterId_ != charactersToBurn_[i], \"Cannot Burn Augmenting Character!\");\r\n            require(msg.sender == CM.ownerOf(charactersToBurn_[i]), \"Unowned Character to Burn!\");\r\n\r\n            CM.transferFrom(msg.sender, burnAddress, charactersToBurn_[i]);\r\n        }\r\n\r\n        // Update Reward\r\n        __updateReward(msg.sender);\r\n\r\n        // Calculate Current Character Yield Rate before Augment\r\n        uint256 _currentYieldRate = MTMLib.getCharacterYieldRate(_augments, _Character.basePoints_, _Character.totalEquipmentBonus_);\r\n\r\n        // Set New Augment Level\r\n        uint8 _newAugments = _augments + _numberOfAugments;\r\n        CS.setAugments(characterId_, _newAugments);\r\n\r\n        // Calculate New Character Yield Rate and Difference\r\n        uint256 _newYieldRate = MTMLib.getCharacterYieldRate(_newAugments, _Character.basePoints_, _Character.totalEquipmentBonus_);\r\n        uint256 _increasedYieldRate = _newYieldRate - _currentYieldRate;\r\n\r\n        // Add Increased Yield Rate\r\n        __addYieldRate(msg.sender, _increasedYieldRate);\r\n    }\r\n    function augmentCharacterWithMats(uint256 characterId_, uint256[] memory transponders_, uint256[] memory spaceCapsules_, bool useCredits_) public {\r\n        require(msg.sender == CM.ownerOf(characterId_), \"You don't own this Character!\");\r\n        require(transponders_.length == spaceCapsules_.length, \"Pair length mismatch!\");\r\n\r\n        iCS.Character memory _Character = __getCharacter(characterId_);\r\n\r\n        uint8 _augments = __getAugments(characterId_);\r\n        uint8 _numberOfAugments = uint8(transponders_.length);\r\n\r\n        // Calculate the Augmentation Cost\r\n        uint256 _totalAugmentCost;\r\n        for (uint8 i = 0; i < _numberOfAugments; i++) {\r\n            _totalAugmentCost += MTMLib.queryAugmentCost(_augments + i);\r\n        }\r\n\r\n        // Check $MES Requirements and Burn $MES!\r\n        __MESPayment(msg.sender, _totalAugmentCost, useCredits_);\r\n\r\n        // Check TP/SC Requirements and Loop-Burn TP/SC!\r\n        for (uint8 i = 0; i < _numberOfAugments; i++) {\r\n            require(msg.sender == TP.ownerOf(transponders_[i]) && msg.sender == SC.ownerOf(spaceCapsules_[i]), \"Not owner of pair!\");\r\n\r\n            TP.transferFrom(msg.sender, burnAddress, transponders_[i]);\r\n            SC.transferFrom(msg.sender, burnAddress, spaceCapsules_[i]);\r\n        }\r\n\r\n        // Update Reward\r\n        __updateReward(msg.sender);\r\n\r\n        // Calculate Current Character Yield Rate before Augment\r\n        uint256 _currentYieldRate = MTMLib.getCharacterYieldRate(_augments, _Character.basePoints_, _Character.totalEquipmentBonus_);\r\n\r\n        // Set New Augment Level\r\n        uint8 _newAugments = _augments + _numberOfAugments;\r\n        CS.setAugments(characterId_, _newAugments);\r\n\r\n        // Calculate New Character Yield Rate and Difference\r\n        uint256 _newYieldRate = MTMLib.getCharacterYieldRate(_newAugments, _Character.basePoints_, _Character.totalEquipmentBonus_);\r\n        uint256 _increasedYieldRate = _newYieldRate - _currentYieldRate;\r\n\r\n        // Add Increased Yield Rate\r\n        __addYieldRate(msg.sender, _increasedYieldRate);\r\n    }\r\n\r\n    // Level Up Base Points\r\n    function levelUp(uint256 characterId_, uint16 amount_, bool useCredits_) public {\r\n        require(msg.sender == CM.ownerOf(characterId_), \"You don't own this Character!\");\r\n\r\n        iCS.Character memory _Character = __getCharacter(characterId_);\r\n\r\n        uint16 _currentBasePoints = __getBasePoints(characterId_);\r\n\r\n        // Calculate $MES Cost for Level Up\r\n        uint256 _levelUpCost;\r\n        for (uint16 i = 0; i < amount_; i++) {\r\n            _levelUpCost += MTMLib.queryBasePointsUpgradeCost(_currentBasePoints + i);\r\n        }\r\n\r\n        // Check $MES Requires and Burn $MES!\r\n        __MESPayment(msg.sender, _levelUpCost, useCredits_);\r\n\r\n        // Update Reward\r\n        __updateReward(msg.sender);\r\n\r\n        // Calculate Current Character Yield Rate before Augment\r\n        uint256 _currentYieldRate = MTMLib.getCharacterYieldRate(\r\n            _Character.augments_, _currentBasePoints, _Character.totalEquipmentBonus_);\r\n\r\n        // Set New Base Points\r\n        uint16 _newBasePoints = _currentBasePoints + amount_;\r\n        CS.setBasePoints(characterId_, _newBasePoints);\r\n\r\n        // Calculate Yield Rate Benefits\r\n        uint256 _newYieldRate = MTMLib.getCharacterYieldRate(\r\n            _Character.augments_, _newBasePoints, _Character.totalEquipmentBonus_);\r\n        uint256 _increasedYieldRate = _newYieldRate - _currentYieldRate;\r\n\r\n        // Add Increased Yield Rate\r\n        __addYieldRate(msg.sender, _increasedYieldRate);\r\n    }\r\n    function multiLevelUp(uint256[] memory characterIds_, uint16[] memory amounts_, bool useCredits_) public {\r\n        // User must make sure they have enough $MES for the entire loop otherwise it will revert. Use with care.\r\n        require(characterIds_.length == amounts_.length, \"Mismatched length of arrays!\");\r\n        for (uint256 i = 0; i < characterIds_.length; i++) {\r\n            levelUp(characterIds_[i], amounts_[i], useCredits_);\r\n        }\r\n    }\r\n\r\n    // Equipment Upgrade\r\n    function upgradeEquipment(uint256 characterId_, uint8 amount_, uint8 item_, bool useCredits_) public {\r\n        require(msg.sender == CM.ownerOf(characterId_), \"You don't own this Character!\");\r\n\r\n        iCS.Character memory _Character = __getCharacter(characterId_);\r\n        iCS.Equipment memory _Equipment = __getEquipment(characterId_);\r\n\r\n        uint8 _rarity = MTMLib.getItemRarity(_Character.spaceCapsuleId_, MTMLib.getNameOfItem(item_));\r\n        uint8 _currentUpgrades = __getEquipmentUpgrades(_Equipment, item_);\r\n\r\n        require(_currentUpgrades + amount_ <= MTMLib.queryEquipmentUpgradability(_rarity), \"Request to upgrade past upgradability!\");\r\n\r\n        // Calculate the Upgrade Cost\r\n        uint256 _upgradeCost;\r\n        for (uint8 i = 0; i < amount_; i++) {\r\n            _upgradeCost += MTMLib.queryEquipmentUpgradeCost(_currentUpgrades + i);\r\n        }\r\n\r\n        // Check $MES Requires and Burn $MES!\r\n        __MESPayment(msg.sender, _upgradeCost, useCredits_);\r\n\r\n        // Update Reward\r\n        __updateReward(msg.sender);\r\n\r\n        // Calculate the Curent Yield Rate before Upgrading\r\n        uint256 _currentYieldRate = MTMLib.getCharacterYieldRate(_Character.augments_, _Character.basePoints_, _Character.totalEquipmentBonus_);\r\n\r\n        // Calculate and Set the New Item Level\r\n        uint8 _newUpgrades = _currentUpgrades + amount_;\r\n        __setItemUpgrades(characterId_, _newUpgrades, item_);\r\n\r\n        // Calculate and Set the New Total Equipment Bonus of the Character\r\n        uint16 _newTotalEquipmentBonus = _Character.totalEquipmentBonus_ + ( MTMLib.queryEquipmentModulus(_rarity, _newUpgrades) - MTMLib.queryEquipmentModulus(_rarity, _currentUpgrades) );\r\n        CS.setTotalEquipmentBonus(characterId_, _newTotalEquipmentBonus);\r\n\r\n        // Calculate the Yield Rate Difference\r\n        uint256 _newYieldRate = MTMLib.getCharacterYieldRate(_Character.augments_, _Character.basePoints_, _newTotalEquipmentBonus);\r\n        uint256 _increasedYieldRate = _newYieldRate - _currentYieldRate;\r\n\r\n        // Adjust the Yield Rate accordingly\r\n        __addYieldRate(msg.sender, _increasedYieldRate);\r\n    }\r\n    function multiUpgradeEquipment(uint256 characterId_, uint8[] memory amounts_, uint8[] memory items_, bool useCredits_) public {\r\n        require(amounts_.length == items_.length, \"Amounts and Items length mismatch!\");\r\n        for (uint256 i = 0; i < amounts_.length; i++) {\r\n            upgradeEquipment(characterId_, amounts_[i], items_[i], useCredits_);\r\n        }\r\n    }\r\n\r\n    // Role Play Stats\r\n    function __getTotalStatsLeveled(iCS.Stats memory Stats_) internal pure returns (uint8) {\r\n        return Stats_.strength_ + Stats_.agility_ + Stats_.constitution_ + Stats_.intelligence_ + Stats_.spirit_;\r\n    }\r\n    function __getCharacterLevel(iCS.Stats memory Stats_, uint8 attribute_) internal pure returns (uint8) {\r\n        if      (attribute_ == 1) { return Stats_.strength_; }\r\n        else if (attribute_ == 2) { return Stats_.agility_; }\r\n        else if (attribute_ == 3) { return Stats_.constitution_; }\r\n        else if (attribute_ == 4) { return Stats_.intelligence_; }\r\n        else if (attribute_ == 5) { return Stats_.spirit_; }\r\n        else                      { revert(\"Invalid attribute type!\"); }\r\n    }\r\n    function __setCharacterLevel(uint256 characterId_, uint8 attribute_, uint8 level_) internal {\r\n        if      (attribute_ == 1) { CS.setStrength(characterId_, level_); }\r\n        else if (attribute_ == 2) { CS.setAgility(characterId_, level_); }\r\n        else if (attribute_ == 3) { CS.setConstitution(characterId_, level_); }\r\n        else if (attribute_ == 4) { CS.setIntelligence(characterId_, level_); }\r\n        else if (attribute_ == 5) { CS.setSpirit(characterId_, level_); }\r\n        else                      { revert(\"Invalid attribute type!\"); }\r\n    }\r\n    function levelCharacterStat(uint256 characterId_, uint8 attribute_, uint8 amount_) public {\r\n        require(msg.sender == CM.ownerOf(characterId_), \"You don't own this Character!\");\r\n\r\n        iCS.Character memory _Character = __getCharacter(characterId_);\r\n        iCS.Stats memory _Stats = __getStats(characterId_);\r\n        require(__getTotalStatsLeveled(_Stats) + amount_ <= _Character.basePoints_, \"Request to upgrade stats above available base points!\");\r\n\r\n        // Get Current Level and New Level of Attribute\r\n        uint8 _currentLevel = __getCharacterLevel(_Stats, attribute_);\r\n        uint8 _newLevel = _currentLevel + amount_;\r\n\r\n        // Set New Level for Attribute\r\n        __setCharacterLevel(characterId_, attribute_, _newLevel);\r\n    }\r\n    function multiLevelCharacterStat(uint256 characterId_, uint8[] memory attributes_, uint8[] memory amounts_) public {\r\n        require(msg.sender == CM.ownerOf(characterId_), \"You don't own this Character!\");\r\n        require(attributes_.length == amounts_.length, \"Attributes and Amounts length mismatch!\");\r\n        \r\n        // Load Character and Stats into local memory\r\n        iCS.Character memory _Character = __getCharacter(characterId_);\r\n        iCS.Stats memory _Stats = __getStats(characterId_);\r\n\r\n        // Calculate total Amounts to add\r\n        uint16 _amountToAdd;\r\n        for (uint256 i = 0; i < amounts_.length; i++) {\r\n            _amountToAdd += amounts_[i];\r\n        }\r\n\r\n        // Make sure stat upgrades are not above base points\r\n        require(__getTotalStatsLeveled(_Stats) + _amountToAdd <= _Character.basePoints_, \"Request to upgrade stats above available base points!\");\r\n\r\n        // Loop-Level each stat\r\n        for (uint256 i = 0; i < amounts_.length; i++) {\r\n            uint8 _currentLevel = __getCharacterLevel(_Stats, attributes_[i]);\r\n            uint8 _newLevel = _currentLevel + amounts_[i];\r\n\r\n            __setCharacterLevel(characterId_, attributes_[i], _newLevel);\r\n        }\r\n    }\r\n\r\n    // General Cosmetics Variables\r\n    uint256 nameChangeCost = 5 ether;\r\n    uint256 bioChangeCost = 20 ether;\r\n    uint256 rerollRaceCost = 10 ether;\r\n    uint256 uploadRaceCost = 50 ether;\r\n    uint256 renderTypeChangeCost = 10 ether;\r\n    function __setCostmeticCost(uint8 type_, uint256 cost_) internal {\r\n        if      (type_ == 1) { nameChangeCost = cost_; }\r\n        else if (type_ == 2) { bioChangeCost = cost_; }\r\n        else if (type_ == 3) { rerollRaceCost = cost_; }\r\n        else if (type_ == 4) { uploadRaceCost = cost_; }\r\n        else if (type_ == 5) { renderTypeChangeCost = cost_; }\r\n        else                 { revert(\"Invalid Type!\"); }\r\n    }\r\n    function setCosmeticCosts(uint8[] memory types_, uint256[] memory costs_) public onlyOwner {\r\n        require(types_.length == costs_.length, \"Array length mismatch!\");\r\n        for (uint256 i = 0; i < costs_.length; i++) {\r\n            __setCostmeticCost(types_[i], costs_[i]);\r\n        }\r\n    }\r\n\r\n    // Change Name\r\n    bool public characterChangeNameable = true;\r\n    function setCharacterChangeNameable(bool bool_) external onlyOwner { characterChangeNameable = bool_; }\r\n\r\n    function changeName(uint256 characterId_, string memory name_, bool useCredits_) public {\r\n        require(characterChangeNameable, \"Characters not namable!\");\r\n        require(msg.sender == CM.ownerOf(characterId_), \"You don't own this Character!\");\r\n        require(MTMStrings.onlyAllowedCharacters(name_), \"Name contains unallowed characters!\");\r\n        require(20 >= bytes(name_).length, \"Name can only contain 20 characters max!\");\r\n        __MESPayment(msg.sender, nameChangeCost, useCredits_);\r\n        CS.setName(characterId_, name_);\r\n    }\r\n\r\n    // Change Bio\r\n    bool public characterChangeBioable = true;\r\n    function setCharacterChangeBioable(bool bool_) external onlyOwner { characterChangeBioable = bool_; }\r\n\r\n    function changeBio(uint256 characterId_, string memory bio_, bool useCredits_) public {\r\n        require(characterChangeBioable, \"Characters not bio changable!\");\r\n        require(msg.sender == CM.ownerOf(characterId_), \"You don't own this Character!\");\r\n        require(MTMStrings.onlyAllowedCharacters(bio_), \"Bio contains unallowed characters!\");\r\n        // require(160 >= bytes(bio_).length, \"Bio can only contain 160 characters max!\");\r\n        __MESPayment(msg.sender, bioChangeCost, useCredits_);\r\n        CS.setBio(characterId_, bio_);\r\n    }\r\n\r\n    // Reroll Race\r\n    bool public characterRerollable;\r\n    function setCharacterRerollable(bool bool_) public onlyOwner { characterRerollable = bool_; }\r\n    \r\n    function rerollRace(uint256 characterId_, bool useCredits_) public {\r\n        require(characterRerollable, \"Character model is not rerollable!\");\r\n        require(msg.sender == CM.ownerOf(characterId_), \"You don't own this Character!\");\r\n        __MESPayment(msg.sender, rerollRaceCost, useCredits_);\r\n        uint8 _race = uint8( (uint256(keccak256(abi.encodePacked(msg.sender, block.timestamp, block.difficulty, characterId_))) % 10) + 1 ); // RNG (1-10) \r\n        CS.setRace(characterId_, _race);\r\n    }\r\n\r\n    // Upload Race\r\n    bool public characterUploadable;\r\n    function setCharacterUploadable(bool bool_) public onlyOwner { characterUploadable = bool_; }\r\n    mapping(address => mapping(uint256 => bool)) public contractAddressToTokenUploaded;\r\n    \r\n    function uploadRace(uint256 characterId_, address contractAddress_, uint256 uploadId_, bool useCredits_) public {\r\n        require(characterUploadable, \"Character type is not uploadable!\");\r\n        require(msg.sender == CM.ownerOf(characterId_), \"You don't own this Character!\");\r\n        require(!CM.contractAddressToTokenUploaded(contractAddress_, uploadId_), \"This character has already been uploaded!\"); // from CM\r\n        require(contractAddressToTokenUploaded[contractAddress_][uploadId_], \"This character has already been uploaded\"); // from this contract\r\n\r\n        __MESPayment(msg.sender, uploadRaceCost, useCredits_);\r\n\r\n        contractAddressToTokenUploaded[contractAddress_][uploadId_] = true;\r\n\r\n        uint8 _race = CS.contractToRace(contractAddress_);\r\n        CS.setRace(characterId_, _race);\r\n    }\r\n\r\n    // Change Render Type\r\n    bool public renderTypeChangable;\r\n    function setRenderTypeChangable(bool bool_) public onlyOwner { renderTypeChangable = bool_; }\r\n    \r\n    function changeRenderType(uint256 characterId_, uint8 renderType_, bool useCredits_) public {\r\n        require(renderTypeChangable, \"Render type is not changable!\");\r\n        require(CM.renderTypeAllowed(renderType_), \"Render type is not supported!\");\r\n        require(msg.sender == CM.ownerOf(characterId_), \"You don't own this Character!\");\r\n         __MESPayment(msg.sender, uploadRaceCost, useCredits_);\r\n        CS.setRenderType(characterId_, renderType_);\r\n    }\r\n\r\n    // Public View Functions (Mainly for Interfacing)\r\n    function getCharacterYieldRate(uint256 characterId_) public view returns (uint256) {\r\n        iCS.Character memory Character_ = __getCharacter(characterId_);\r\n        return MTMLib.getCharacterYieldRate(Character_.augments_, Character_.basePoints_, Character_.totalEquipmentBonus_);\r\n    }\r\n    function queryCharacterYieldRate(uint8 augments_, uint16 basePoints_, uint16 totalEquipmentBonus_) public pure returns (uint256) {\r\n        return MTMLib.getCharacterYieldRate(augments_, basePoints_, totalEquipmentBonus_);\r\n    }\r\n    function getItemRarity(uint16 spaceCapsuleId_, string memory keyPrefix_) public pure returns (uint8) {\r\n        return MTMLib.getItemRarity(spaceCapsuleId_, keyPrefix_);\r\n    }\r\n    function queryBaseEquipmentTier(uint8 rarity_) public pure returns (uint8) {\r\n        return MTMLib.queryBaseEquipmentTier(rarity_);\r\n    }\r\n    function getEquipmentBaseBonus(uint16 spaceCapsuleId_) public pure returns (uint16) {\r\n        return MTMLib.getEquipmentBaseBonus(spaceCapsuleId_);\r\n    }\r\n\r\n    // Add GetCurrentItemLevel public view function\r\n    function getNameOfItem(uint8 itemType_) public pure returns (string memory) {\r\n        return MTMLib.getNameOfItem(itemType_);\r\n    }\r\n    function getCurrentItemLevel(uint256 characterId_, uint8 itemType_) public view returns (uint8) {\r\n        iCS.Character memory _Character = __getCharacter(characterId_);\r\n        iCS.Equipment memory _Equipment = __getEquipment(characterId_);\r\n\r\n        uint8 _rarity = getItemRarity(_Character.spaceCapsuleId_, getNameOfItem(itemType_));\r\n        uint8 _baseEquipmentTier = queryBaseEquipmentTier(_rarity);\r\n\r\n        uint8 _upgrades;\r\n        if      (itemType_ == 1) { _upgrades = _Equipment.weaponUpgrades_; }\r\n        else if (itemType_ == 2) { _upgrades = _Equipment.chestUpgrades_; }\r\n        else if (itemType_ == 3) { _upgrades = _Equipment.headUpgrades_; }\r\n        else if (itemType_ == 4) { _upgrades = _Equipment.legsUpgrades_; }\r\n        else if (itemType_ == 5) { _upgrades = _Equipment.vehicleUpgrades_; }\r\n        else if (itemType_ == 6) { _upgrades = _Equipment.armsUpgrades_; }\r\n        else if (itemType_ == 7) { _upgrades = _Equipment.artifactUpgrades_; }\r\n        else if (itemType_ == 8) { _upgrades = _Equipment.ringUpgrades_; }\r\n        else                     { revert(\"Invalid Item!\"); }\r\n\r\n        return _baseEquipmentTier + _upgrades;\r\n    }\r\n}",
    "id": "MTMCharactersController_0x53bea59b69bf9e58e0afeeb4f34f49fc29d10f55",
    "file": "./Contract_source_Code/MTMCharactersController_0x53bea59b69bf9e58e0afeeb4f34f49fc29d10f55.sol"
}